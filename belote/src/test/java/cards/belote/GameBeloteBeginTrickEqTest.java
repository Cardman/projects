package cards.belote;

import cards.belote.enumerations.BidBelote;
import cards.belote.enumerations.CardBelote;
import cards.belote.enumerations.DealingBelote;
import cards.consts.Status;
import cards.consts.Suit;
import code.util.CustList;
import code.util.EqList;
import org.junit.Test;

import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

public final class GameBeloteBeginTrickEqTest extends CommonGameBelote {
    @Test
    public void playBestCardsTest() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertTrue(infoTr_.isMaitreJeu());
        assertSame(CardBelote.HEART_1, gbt_.playBestCards(infoTr_));
    }
    @Test
    public void playAsTaker1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_8);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER,gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_1, gbt_.playAsTaker(infoTr_));
    }
    @Test
    public void playAsTaker2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_KING);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_8);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER,gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_7, gbt_.playAsTaker(infoTr_));
    }
    @Test
    public void playAsCalledPlayer1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_10, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_QUEEN, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_KING, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer5Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.SPADE_8);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_KING, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer6Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_1, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsCalledPlayer7Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        b_.setPoints(80);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_1, gbt_.playAsCalledPlayer(infoTr_));
    }
    @Test
    public void playAsDefender1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsDefender(infoTr_));
    }
    @Test
    public void playAsDefender2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_9, gbt_.playAsDefender(infoTr_));
    }
    @Test
    public void playAsDefender3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_QUEEN, gbt_.playAsDefender(infoTr_));
    }
    @Test
    public void entameSansAtoutToutAtout1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_1, gbt_.entameSansAtoutToutAtout(infoTr_));
    }
    @Test
    public void entameSansAtoutToutAtout2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_8);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_1, gbt_.entameSansAtoutToutAtout(infoTr_));
    }
    @Test
    public void entameSansAtoutToutAtout3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.DIAMOND_10, gbt_.entameSansAtoutToutAtout(infoTr_));
    }
    @Test
    public void entameSansAtoutToutAtout4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrickClassic(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.entameSansAtoutToutAtout(infoTr_));
    }

}
