package cards.belote;

import cards.belote.enumerations.BeloteTrumpPartner;
import cards.belote.enumerations.BidBelote;
import cards.belote.enumerations.CardBelote;
import cards.belote.enumerations.DealingBelote;
import cards.consts.Hypothesis;
import cards.consts.Order;
import cards.consts.Suit;
import code.util.CustList;
import code.util.EnumMap;
import code.util.EqList;
import org.junit.Test;

import static cards.belote.EquallableBeloteUtil.assertEq;
import static org.junit.Assert.assertTrue;

public final class GameBeloteTrickInfoTest extends CommonGameBelote {
    @Test
    public void neFournitPas1Test() {
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        byte d_ = 2;
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        assertTrue(!GameBeloteTrickInfo.neFournitPas(Suit.DIAMOND, (byte) 3,trs_));
    }
    @Test
    public void neFournitPas2Test() {
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        byte d_ = 2;
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        assertTrue(!GameBeloteTrickInfo.neFournitPas(Suit.HEART, (byte) 3,trs_));
    }
    @Test
    public void neFournitPas3Test() {
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        byte d_ = 2;
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        assertTrue(GameBeloteTrickInfo.neFournitPas(Suit.DIAMOND, (byte) 0,trs_));
    }
    @Test
    public void defausseBelote1Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 1,trs_));
    }
    @Test
    public void defausseBelote2Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 1,trs_));
    }
    @Test
    public void defausseBelote3Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 0,trs_));
    }
    @Test
    public void defausseBelote4Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 0,trs_));
    }
    @Test
    public void defausseBelote5Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.SPADE);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.SPADE_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 0,trs_));
    }
    @Test
    public void defausseBelote6Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.SPADE);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.SPADE_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 0,trs_));
    }
    @Test
    public void defausseBelote7Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.SPADE);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.SPADE_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote8Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.SPADE);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.SPADE_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote9Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote10Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote11Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote12Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote13Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote14Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote15Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote16Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote17Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote18Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote19Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.DIAMOND, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote20Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.HEART, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote21Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.HEART, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote22Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(info_.defausseBelote(Suit.HEART, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote23Test() {
        RulesBelote r_ = new RulesBelote();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.CLUB, (byte) 2,trs_));
    }
    @Test
    public void defausseBelote24Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        assertTrue(!info_.defausseBelote(Suit.CLUB, (byte) 2,trs_));
    }
    @Test
    public void atoutsPossiblesRegles1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles5Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles6Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles7Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles8Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles9Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles10Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(1, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles11Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles12Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles13Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(0, tr_.get(1).total());
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles14Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles15Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(0, tr_.get(1).total());
        assertEq(6, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(7, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles16Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(6, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(1, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_9));
        assertEq(7, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles17Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles18Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles19Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles20Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles21Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles22Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(4, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_8));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles23Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossiblesRegles24Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
    }
    @Test
    public void atoutsPossiblesRegles25Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertEq(2, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
    }
    @Test
    public void atoutsPossiblesRegles26Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        game_.getDeclaresBeloteRebelote().get(2).ajouter(CardBelote.HEART_QUEEN);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(2, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossiblesRegles27Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(4, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(1, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
    }
    @Test
    public void atoutsPossiblesRegles28Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossiblesRegles29Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossiblesRegles30Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_8);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_7);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossiblesRegles31Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_7);
        pr_.ajouter(CardBelote.DIAMOND_8);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossiblesRegles32Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.HEART_7);
        pr_.ajouter(CardBelote.HEART_8);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(5, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_7));
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void sousCoupeBelote1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.HEART_1);
        poss_.ajouter(CardBelote.HEART_KING);
        poss_.ajouter(CardBelote.HEART_QUEEN);
        poss_.ajouter(CardBelote.HEART_7);
        HandBelote filter_ = info_.sousCoupeBelote(game_.couleurAtout(), cur_, (byte) 1, poss_);
        assertEq(1, filter_.total());
        assertTrue(filter_.contient(CardBelote.HEART_1));
    }
    @Test
    public void sousCoupeBelote2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.HEART_1);
        poss_.ajouter(CardBelote.HEART_KING);
        poss_.ajouter(CardBelote.HEART_QUEEN);
        poss_.ajouter(CardBelote.HEART_7);
        HandBelote filter_ = info_.sousCoupeBelote(game_.couleurAtout(), cur_, (byte) 2, poss_);
        assertEq(4, filter_.total());
        assertTrue(filter_.contient(CardBelote.HEART_1));
        assertTrue(filter_.contient(CardBelote.HEART_KING));
        assertTrue(filter_.contient(CardBelote.HEART_QUEEN));
        assertTrue(filter_.contient(CardBelote.HEART_7));
    }
    @Test
    public void sousCoupeBelote3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.HEART_1);
        poss_.ajouter(CardBelote.HEART_KING);
        poss_.ajouter(CardBelote.HEART_QUEEN);
        poss_.ajouter(CardBelote.HEART_7);
        HandBelote filter_ = info_.sousCoupeBelote(game_.couleurAtout(), cur_, (byte) 0, poss_);
        assertEq(4, filter_.total());
        assertTrue(filter_.contient(CardBelote.HEART_1));
        assertTrue(filter_.contient(CardBelote.HEART_KING));
        assertTrue(filter_.contient(CardBelote.HEART_QUEEN));
        assertTrue(filter_.contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles5Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles6Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles7Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles8Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles9Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(0, tr_.get(2).total());
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles10Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(1, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles11Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles12Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(5, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles13Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(0, tr_.get(1).total());
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles14Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles15Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(0, tr_.get(1).total());
        assertEq(6, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(7, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles16Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(false);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(6, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_7));
        assertEq(1, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_9));
        assertEq(7, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_10));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles17Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles18Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.UNDERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles19Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.OVERTRUMP_ONLY);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles20Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        r_.setTrumpPartner(BeloteTrumpPartner.NO_UNDERTRUMP_NO_OVERTRUMP);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles21Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(1, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.HEART_8));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles22Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(4, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(0).contient(CardBelote.HEART_8));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_9));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles23Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_7));
    }
    @Test
    public void atoutsPossibles24Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.HEART_1));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_1));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
    }
    @Test
    public void atoutsPossibles25Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(0, tr_.get(1).total());
        assertEq(2, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_QUEEN));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_QUEEN));
    }
    @Test
    public void atoutsPossibles26Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        game_.getDeclaresBeloteRebelote().get(2).ajouter(CardBelote.HEART_QUEEN);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(game_.getContrat().getCouleur(), cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(0, tr_.get(1).total());
        assertEq(2, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.HEART_KING));
        assertTrue(tr_.get(2).contient(CardBelote.HEART_8));
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.HEART_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_9));
        assertTrue(tr_.get(3).contient(CardBelote.HEART_8));
    }
    @Test
    public void atoutsPossibles27Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(4, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(1, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
    }
    @Test
    public void atoutsPossibles28Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossibles29Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(2, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(1, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertEq(0, tr_.get(2).total());
        assertEq(3, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossibles30Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_8);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_7);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_8));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossibles31Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_7);
        pr_.ajouter(CardBelote.DIAMOND_8);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(3, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertEq(4, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
    }
    @Test
    public void atoutsPossibles32Test() {
        RulesBelote r_ = new RulesBelote();
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.DIAMOND);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.HEART_7);
        pr_.ajouter(CardBelote.HEART_8);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.atoutsPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(5, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_7));
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(6, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_1));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossiblesRegles1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertEq(0, tr_.get(2).total());
        assertEq(2, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
    }
    @Test
    public void cartesPossiblesRegles2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossiblesRegles3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossiblesRegles4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertEq(0, tr_.get(2).total());
        assertEq(2, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
    }
    @Test
    public void cartesPossiblesRegles5Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossiblesRegles6Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossiblesRegles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void joueCartePoint1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_QUEEN);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.DIAMOND_10);
        poss_.ajouter(CardBelote.DIAMOND_JACK);
        poss_.ajouter(CardBelote.DIAMOND_9);
        HandBelote filter_ = info_.joueCartePoint(Suit.DIAMOND, cur_, (byte)2, poss_);
        assertEq(1, filter_.total());
        assertTrue(filter_.contient(CardBelote.DIAMOND_10));
    }
    @Test
    public void joueCartePoint2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_QUEEN);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.DIAMOND_10);
        poss_.ajouter(CardBelote.DIAMOND_JACK);
        poss_.ajouter(CardBelote.DIAMOND_9);
        HandBelote filter_ = info_.joueCartePoint(Suit.DIAMOND, cur_, (byte)1, poss_);
        assertEq(3, filter_.total());
        assertTrue(filter_.contient(CardBelote.DIAMOND_10));
        assertTrue(filter_.contient(CardBelote.DIAMOND_JACK));
        assertTrue(filter_.contient(CardBelote.DIAMOND_9));
    }
    @Test
    public void joueCartePoint3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_KING);
        t_.ajouter(CardBelote.DIAMOND_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_QUEEN);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.DIAMOND_10);
        poss_.ajouter(CardBelote.DIAMOND_JACK);
        poss_.ajouter(CardBelote.DIAMOND_9);
        HandBelote filter_ = info_.joueCartePoint(Suit.DIAMOND, cur_, (byte)2, poss_);
        assertEq(3, filter_.total());
        assertTrue(filter_.contient(CardBelote.DIAMOND_10));
        assertTrue(filter_.contient(CardBelote.DIAMOND_JACK));
        assertTrue(filter_.contient(CardBelote.DIAMOND_9));
    }
    @Test
    public void joueCartePoint4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.SPADE_7);
        cur_.ajouter(CardBelote.CLUB_8);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_QUEEN);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        HandBelote poss_ = new HandBelote(Order.TRUMP);
        poss_.ajouter(CardBelote.CLUB_10);
        poss_.ajouter(CardBelote.CLUB_JACK);
        poss_.ajouter(CardBelote.CLUB_9);
        HandBelote filter_ = info_.joueCartePoint(Suit.CLUB, cur_, (byte)2, poss_);
        assertEq(3, filter_.total());
        assertTrue(filter_.contient(CardBelote.CLUB_10));
        assertTrue(filter_.contient(CardBelote.CLUB_JACK));
        assertTrue(filter_.contient(CardBelote.CLUB_9));
    }

    @Test
    public void cartesPossibles1Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertEq(0, tr_.get(2).total());
        assertEq(2, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
    }
    @Test
    public void cartesPossibles2Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossibles3Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(4, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossibles4Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(3, tr_.get(0).total());
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(0).contient(CardBelote.DIAMOND_9));
        assertEq(3, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_9));
        assertEq(0, tr_.get(2).total());
        assertEq(2, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_JACK));
    }
    @Test
    public void cartesPossibles5Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesPossibles6Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_1);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.SPADE_8);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        b_.setPoints(90);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        HandBelote last_ = new HandBelote();
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.DIAMOND_1);
        pr_.ajouter(CardBelote.SPADE_7);
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EqList<HandBelote> tr_ = info_.cartesPossibles(Suit.DIAMOND, cur_);
        assertEq(4, tr_.size());
        assertEq(0, tr_.get(0).total());
        assertEq(2, tr_.get(1).total());
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(tr_.get(1).contient(CardBelote.DIAMOND_JACK));
        assertEq(5, tr_.get(2).total());
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(2).contient(CardBelote.DIAMOND_7));
        assertEq(5, tr_.get(3).total());
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_10));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_9));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_8));
        assertTrue(tr_.get(3).contient(CardBelote.DIAMOND_7));
    }
    @Test
    public void cartesCertainesRegles1Test() {
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_KING);
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        TrickBelote t_ = new TrickBelote(r_.getDealing().getNextPlayer(2));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.HEART_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.SPADE_7);
        pr_.ajouter(CardBelote.SPADE_8);
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, 2, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_9);
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.SPADE_KING);
        EnumMap<Suit, EqList<HandBelote>> rep_ = fact(info_,curHand_);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandBelote>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(4, rep_.getVal(Suit.HEART).size());
        assertEq(4, rep_.getVal(Suit.SPADE).size());
        assertEq(4, rep_.getVal(Suit.DIAMOND).size());
        assertEq(4, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(3).contient(CardBelote.HEART_KING));
    }
    @Test
    public void cartesCertainesRegles2Test() {
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_KING);
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        TrickBelote t_ = new TrickBelote(r_.getDealing().getNextPlayer(2));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        t_.ajouter(CardBelote.SPADE_9);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.HEART_9);
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, 2, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.DIAMOND_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_9);
        curHand_.ajouter(CardBelote.DIAMOND_8);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_KING);
        EnumMap<Suit, EqList<HandBelote>> rep_ = fact(info_,curHand_);
        rep_.getVal(Suit.SPADE).get(2).removeCardIfPresent(CardBelote.SPADE_1);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandBelote>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(4, rep_.getVal(Suit.HEART).size());
        assertEq(4, rep_.getVal(Suit.SPADE).size());
        assertEq(4, rep_.getVal(Suit.DIAMOND).size());
        assertEq(4, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(3).contient(CardBelote.HEART_1));
    }
    @Test
    public void cartesCertaines1Test() {
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_KING);
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        TrickBelote t_ = new TrickBelote(r_.getDealing().getNextPlayer(2));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.HEART_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.SPADE_7);
        pr_.ajouter(CardBelote.SPADE_8);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_9);
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.SPADE_KING);
        GameBelote g_ = newGameBeloteWithourDecl(curHand_,r_, trs_, pr_, 2, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        EnumMap<Suit, EqList<HandBelote>> rep_ = fact(info_,curHand_);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandBelote>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(4, rep_.getVal(Suit.HEART).size());
        assertEq(4, rep_.getVal(Suit.SPADE).size());
        assertEq(4, rep_.getVal(Suit.DIAMOND).size());
        assertEq(4, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(3).contient(CardBelote.HEART_KING));
    }
    @Test
    public void cartesCertaines2Test() {
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_KING);
        RulesBelote r_ = new RulesBelote();
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        TrickBelote t_ = new TrickBelote(r_.getDealing().getNextPlayer(2));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        t_.ajouter(CardBelote.SPADE_9);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.DIAMOND_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_9);
        curHand_.ajouter(CardBelote.DIAMOND_8);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_KING);
        GameBelote g_ = newGameBeloteWithourDecl(curHand_,r_, trs_, pr_, 2, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        EnumMap<Suit, EqList<HandBelote>> rep_ = fact(info_,curHand_);
        rep_.getVal(Suit.SPADE).get(2).removeCardIfPresent(CardBelote.SPADE_1);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandBelote>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(4, rep_.getVal(Suit.HEART).size());
        assertEq(4, rep_.getVal(Suit.SPADE).size());
        assertEq(4, rep_.getVal(Suit.DIAMOND).size());
        assertEq(4, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(3).contient(CardBelote.HEART_1));
    }
    @Test
    public void cartesPossibles7Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EnumMap<Suit, EqList<HandBelote>> tr_ = info_.cartesPossibles(cur_);
        assertEq(4, tr_.size());
    }
    @Test
    public void cartesPossibles8Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_JACK);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.NO_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EnumMap<Suit, EqList<HandBelote>> tr_ = info_.cartesPossibles(cur_);
        assertEq(4, tr_.size());
    }
    @Test
    public void cartesPossibles9Test() {
        RulesBelote r_ = new RulesBelote();
        r_.getAllowedBids().put(BidBelote.NO_TRUMP,true);
        r_.getAllowedBids().put(BidBelote.ALL_TRUMP,true);
        r_.setSousCoupeAdv(true);
        HandBelote cur_ = new HandBelote();
        cur_.ajouter(CardBelote.HEART_JACK);
        cur_.ajouter(CardBelote.HEART_9);
        cur_.ajouter(CardBelote.DIAMOND_QUEEN);
        cur_.ajouter(CardBelote.DIAMOND_9);
        cur_.ajouter(CardBelote.SPADE_1);
        cur_.ajouter(CardBelote.CLUB_1);
        cur_.ajouter(CardBelote.CLUB_7);
        EqList<BidBeloteSuit> bids_ = new EqList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.ALL_TRUMP);
        b_.setSuit(Suit.UNDEFINED);
        bids_.add(b_);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        byte d_ = 2;
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.SPADE_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote game_ = newGameBelote(cur_,r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(game_);
        EnumMap<Suit, EqList<HandBelote>> tr_ = info_.cartesPossibles(cur_);
        assertEq(4, tr_.size());
    }
    private static EnumMap<Suit,EqList<HandBelote>> fact(GameBeloteTrickInfo _info, HandBelote _current) {
        EnumMap<Suit,EqList<HandBelote>> m = new EnumMap<Suit,EqList<HandBelote>>();
        BidBeloteSuit bid_ = _info.getBid();
        for(Suit couleur_:GameBeloteCommon.couleurs()) {
            //On fait une boucle sur les couleurs autres que l'atout
            if(bid_.getCouleur()!=couleur_&&!bid_.ordreAtout()) {
                m.put(couleur_, _info.cartesPossibles(couleur_, _current));
            } else {
                m.put(couleur_,_info.atoutsPossibles(couleur_,_current));
            }
        }
        return m;
    }
}
