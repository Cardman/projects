package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit4{
private MvInit4(){}
static MoveData m100(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("75");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("9"));
monteCarloString_.addQuickEvent("SOMMEIL",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SOMMEIL","cardinal(inter({VAR__CIBLE_STATUTS},{SOMMEIL;SOMMEIL_REPOS}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return damagingMoveData_;
}
static MoveData m101(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("60*(VAR__NB_UTILI_ATT_EQ_TOUR__CHANT_CANON+1)");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m102(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)35);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("50");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m103(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ELECTRIQUE");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ELECTRIQUE");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
EffectMultUsedMovePower effectMultUsedMovePower_=Instances.newEffectMultUsedMovePower();
StringMap<Rate> stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
stringMapRate_.addEntry("ELECTRIQUE",Rate.newRate("2"));
effectMultUsedMovePower_.setMultMovePowerFctType(stringMapRate_);
effectMultUsedMovePower_.setTargetChoice(TargetChoice.LANCEUR);
effectMultUsedMovePower_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectMultUsedMovePower_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectMultUsedMovePower_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m104(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ELECTRIQUE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ELECTRIQUE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("130");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("4"));
monteCarloString_.addQuickEvent("PARALYSIE",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PARALYSIE","cardinal(inter({VAR__CIBLE_STATUTS},{PARALYSIE}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m105(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("SOL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SOL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("25");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m106(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-2);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.ATTACK,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return statusMoveData_;
}
static MoveData m107(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("50*(cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{POISON_GRAVE}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{SOMMEIL;SOMMEIL_REPOS}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{PARALYSIE}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{GEL}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{BRULURE}))+1)");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m108(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-1);
enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(2));
enumMapStatisticString_.addEntry(Statistic.ATTACK,"VAR__CIBLE_CLONE>0");
enumMapStatisticString_.addEntry(Statistic.DEFENSE,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return statusMoveData_;
}
static MoveData m109(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ACIER");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ACIER");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)2);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m110(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)25);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("50");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("9"));
monteCarloString_.addQuickEvent("CONFUSION",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("CONFUSION","cardinal(inter({VAR__CIBLE_STATUTS},{CONFUSION}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m111(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("80");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m112(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("65*(cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON}))+1)*(cardinal(inter({VAR__CIBLE_STATUTS},{POISON_GRAVE}))+1)");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m113(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("GLACE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("GLACE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("85");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("PEUR",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PEUR","VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m114(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("VOL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("VOL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("60");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("VAR__CIBLE_CLONE>0|VAR__IMMU_TYPE_ATT_CIBLE__SOL");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setNbPrepaRound((short)1);
damagingMoveData_.setDisappearBeforeUse(true);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m115(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)40);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectUnprotectFromTypes effectUnprotectFromTypes_=Instances.newEffectUnprotectFromTypes();
effectUnprotectFromTypes_.setTypes(new CustList<TypesDuo>(new TypesDuo("NORMAL","SPECTRE"),new TypesDuo("COMBAT","SPECTRE")));
effectUnprotectFromTypes_.setTargetChoice(TargetChoice.ANY_FOE);
effectUnprotectFromTypes_.setFail("");
custListEffect_.add(effectUnprotectFromTypes_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.ANY_FOE);
return statusMoveData_;
}
static MoveData m116(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("17/20");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("35");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectEndRoundSingleRelation effectEndRoundSingleRelation_=Instances.newEffectEndRoundSingleRelation();
LongMap<Rate> longMapRate_=new LongMap<Rate>(new CollCapacity(5));
longMapRate_.addEntry(1L,Rate.newRate("1/16"));
longMapRate_.addEntry(2L,Rate.newRate("1/16"));
longMapRate_.addEntry(3L,Rate.newRate("1/16"));
longMapRate_.addEntry(4L,Rate.newRate("1/16"));
longMapRate_.addEntry(5L,Rate.newRate("1/16"));
effectEndRoundSingleRelation_.setRateDamageFunctionOfNbRounds(longMapRate_);
MonteCarloNumber monteCarloNumber_=new MonteCarloNumber(new CollCapacity(4));
monteCarloNumber_.addQuickEvent(Rate.newRate("3"),LgInt.newLgInt("3"));
monteCarloNumber_.addQuickEvent(Rate.newRate("2"),LgInt.newLgInt("3"));
monteCarloNumber_.addQuickEvent(Rate.newRate("4"),LgInt.newLgInt("1"));
monteCarloNumber_.addQuickEvent(Rate.newRate("5"),LgInt.newLgInt("1"));
effectEndRoundSingleRelation_.setLawForEnablingEffect(monteCarloNumber_);
effectEndRoundSingleRelation_.setFailEndRound("VAR__CIBLE_CLONE>0");
effectEndRoundSingleRelation_.setEndRoundRank(47);
effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectEndRoundSingleRelation_.setFail("VAR__CIBLE_CLONE>0");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectEndRoundSingleRelation_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectEndRoundSingleRelation_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m117(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectClone effectClone_=Instances.newEffectClone();
effectClone_.setHpRateClone(Rate.newRate("1/4"));
effectClone_.setTargetChoice(TargetChoice.LANCEUR);
effectClone_.setFail("VAR__LANCEUR_CLONE>0|div(VAR__LANCEUR_PV_RESTANTS,VAR__LANCEUR_PV_MAX)<1/4");
custListEffect_.add(effectClone_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m118(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("120");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-1);
enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(2));
enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,"VAR__LANCEUR_CLONE>0");
enumMapStatisticString_.addEntry(Statistic.DEFENSE,"VAR__LANCEUR_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatistic_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatistic_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m119(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("15");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m120(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)6);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m121(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("120");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.TOUS_ADV);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setRankIncrementNbRound((short)17);
damagingMoveData_.setConstUserChoice(true);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.TOUS_ADV);
return damagingMoveData_;
}
static MoveData m122(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("4/5");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("18");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m123(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return statusMoveData_;
}
static MoveData m124(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("10");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.SPEED,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1/10"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatistic_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatistic_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatistic_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
}
