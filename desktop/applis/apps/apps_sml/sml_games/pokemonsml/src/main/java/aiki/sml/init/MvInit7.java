package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit7{
private MvInit7(){}
static MoveData m175(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("TENEBRE");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("TENEBRE");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-1);
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(2));
enumMapStatisticString_.addEntry(Statistic.ATTACK,"VAR__CIBLE_CLONE>0");
enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setSwitchType(SwitchType.LANCEUR);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return statusMoveData_;
}
static MoveData m176(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("200");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectRemainedHpRate effectRemainedHpRate_=Instances.newEffectRemainedHpRate();
effectRemainedHpRate_.setRateHp(Rate.newRate("-1"));
effectRemainedHpRate_.setTargetChoice(TargetChoice.LANCEUR);
effectRemainedHpRate_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectRemainedHpRate_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectRemainedHpRate_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setSecEffectIfNoDamage(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m177(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setPriority((byte)3);
statusMoveData_.setAccuracy("puis(2,-VAR__LANCEUR_NB_UTILISATION__ABRI-VAR__LANCEUR_NB_UTILISATION__DETECTION)");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectProtection effectProtection_=Instances.newEffectProtection();
effectProtection_.setProtSingle(true);
effectProtection_.setTargetChoice(TargetChoice.LANCEUR);
effectProtection_.setFail("");
custListEffect_.add(effectProtection_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setStoppableMovePrio(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m178(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes effectSwitchTypes_=Instances.newEffectSwitchTypes();
effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
effectSwitchTypes_.setExchangeTypes(ExchangeType.GIVE_CONST);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
effectSwitchTypes_.setConstTypes(stringList_);
effectSwitchTypes_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectSwitchTypes_.setFail("");
custListEffect_.add(effectSwitchTypes_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return statusMoveData_;
}
static MoveData m179(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("120");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("SIMPLE_POISON",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SIMPLE_POISON","cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON;POISON_GRAVE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{POISON;ACIER}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m180(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("65");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("SIMPLE_POISON",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SIMPLE_POISON","cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON;POISON_GRAVE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{POISON;ACIER}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m181(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("100");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("cardinal(inter({VAR__CIBLE_STATUTS},{SOMMEIL;SOMMEIL_REPOS}))=0");
custListEffect_.add(effectDamage_);
EffectDamageRate effectDamageRate_=Instances.newEffectDamageRate();
effectDamageRate_.setRateDamage(Rate.newRate("1/2"));
effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
effectDamageRate_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectDamageRate_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectDamageRate_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m182(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("POISON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("80");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("SIMPLE_POISON",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SIMPLE_POISON","cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON;POISON_GRAVE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{POISON;ACIER}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m183(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setPriority((byte)-7);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectGlobal effectGlobal_=Instances.newEffectGlobal();
effectGlobal_.setCanceledIfUsed(true);
effectGlobal_.setReverseOrderOfSortBySpeed(true);
effectGlobal_.setMultAccuracy(Rate.newRate("0"));
effectGlobal_.setDamageEndRound(Rate.newRate("0"));
effectGlobal_.setHealingEndRound(Rate.newRate("0"));
effectGlobal_.setHealingEndRoundGround(Rate.newRate("0"));
effectGlobal_.setMultEffectLovingAlly(Rate.newRate("0"));
effectGlobal_.setInvokedMoveTerrain("");
effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
effectGlobal_.setFail("");
custListEffect_.add(effectGlobal_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setRankIncrementNbRound((short)6);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setStoppableMovePrio(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m184(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("inclusnum({VAR__LANCEUR_OBJET},{})*40+caracferme(cardinal(inter({VAR__LANCEUR_OBJET},{ACCRO_GRIFFE;AIMANT;AMELIORATOR;ANTIDOTE;ANTIGEL;ANTI_BRULE;ANTI_PARA;APPAT_BALL;BALLE_FER;BALLON;BANDEAU;BANDEAU_ETREINTE;BAND_CHOIX;BAND_MUSCLE;BAND_POUV;BATON;BEC_POINTU;BIS_BALL;BIZAR_ENCENS;BOUE_NOIRE;BOULE_FUMEE;BOUTON_FUITE;BRAC_MACHO;BULBE;CALCIUM;CARAPACE_MUE;CARBONE;CARTE_ROUGE;CASQUE_BRUT;CD_DOUTEUX;CEINTURE_PRO;CEINT_FORCE;CEINT_NOIRE;CEINT_POUV;CENDRESACREE;CHAINE_POUV;CHARBON;CHRONO_BALL;COMPET_BALL;COPAIN_BALL;CROC_DRAGON;CROC_RASOIR;CUILLERTORDU;DENT_OCEAN;EAU_FRAICHE;EAU_MYSTIQUE;ECAILLE_DRACO;ECAILLE_OCEAN;ELECTRISEUR;ELIXIR;ENCENS_DOUX;ENCENS_FLEUR;ENCENS_MER;ENCENS_PLEIN;ENCENS_PUR;ENCENS_ROC;ENCENS_VAGUE;ENCENS_VEINE;EVOLUROC;FAIBLO_BALL;FER;FERRAILLE;FILET_BALL;FOSSILE_ARMURE;FOSSILE_CRANE;FOSSILE_DOME;FOSSILE_GRIFFE;FOSSILE_PLAQUE;FOSSILE_PLUME;FOSSILE_RACINE;GLACETERNEL;GRAIN_MIRACL;GRANDE_PERLE;GRELOT_COQUE;GRELOT_ZEN;GRIFFE_RASOIR;GROSSERACINE;GROS_CHAMPI;GUERISON;HERBEBLANCHE;HERBE_MENTAL;HERBE_POUV;HONOR_BALL;HUILE;HUILE_MAX;HYPER_BALL;HYPER_POTION;JUS_DE_BAIE;LAIT_MEUMEU;LENTILSCOPE;LENTIL_ZOOM;LENT_POUV;LIMONADE;LOUPE;LOVE_BALL;LUMARGILE;LUNET_CHOIX;LUNET_NOIRES;LUNET_SAGES;LUNE_BALL;LUXE_BALL;MAGMARISEUR;MASSE_BALL;MASSE_OS;MASTER_BALL;MAX_ELIXIR;MAX_REPOUSSE;METRO;MODULE_AQUA;MODULE_CHOC;MODULE_CRYO;MODULE_PYRO;MORC_ETOILE;MOUCH_CHOIX;MOUCH_SOIE;MULTI_EXP;NAUTILE;NIVEAU_BALL;NOEUD_DESTIN;OEUF_CHANCE;ORBE_ADAMANT;ORBE_FLAMME;ORBE_PERLE;ORBE_PLATINE;ORBE_TOXIQUE;ORBE_VIE;OS_RARE;PEAU_METAL;PEPITE;PERLE;PETIT_CHAMPI;PIC_VENIN;PIECE_RUNE;PIERRALLEGEE;PIERRE_AUBE;PIERRE_DURE;PIERRE_EAU;PIERRE_ECLAT;PIERRE_FEU;PIERRE_FOUDRE;PIERRE_GLACE;PIERRE_LUNE;PIERRE_MOUSSE;PIERRE_NUIT;PIERRE_OVALE;PIERRE_PLANTE;PIERRE_SOLAIRE;PIERRE_STASE;PILE;PIQUANTS;PLAQUESPRIT;PLAQUE_CIEL;PLAQUE_DRACO;PLAQUE_FANTO;PLAQUE_FER;PLAQUE_FLAM;PLAQUE_GLACE;PLAQUE_HERBE;PLAQUE_HYDRO;PLAQUE_OMBRE;PLAQUE_POING;PLAQUE_ROC;PLAQUE_TERRE;PLAQUE_TOXIC;PLAQUE_VOLT;PLAQUINSECT;POIDS_POUV;POIGN_POUV;POING_CHANCE;POKE_BALL;POTION;POTION_MAX;POUDRECLAIRE;POUDRE_ARG;POUDRE_METAL;POUDRE_VITE;POUSS_ETOILE;PP_MAX;PP_PLUS;PROTECTEUR;PROTEINE;PT_DE_MIRE;PV_PLUS;RALENTIQUEUE;RAPIDE_BALL;RAPPEL;RAPPEL_MAX;REPOUSSE;RESTES;REVEIL;ROCHE_CHAUDE;ROCHE_ELECTRIQUE;ROCHE_GLACE;ROCHE_HUMIDE;ROCHE_LISSE;ROCHE_ROYALE;RUNE_PURIF;RUNE_SORT;SABLE_DOUX;SCUBA_BALL;SODA_COOL;SOIN_BALL;SOMBRE_BALL;SPEED_BALL;SUPER_BALL;SUPER_POTION;SUPER_REPOUSSE;TISSU_FAUCHE;TOTAL_SOIN;VIEIL_AMBRE;VIVE_GRIFFE;ZINC})),1,1)*40+caracferme(cardinal(inter({VAR__LANCEUR_OBJET},{BAIE_BABIRI;BAIE_CERIZ;BAIE_CHARTI;BAIE_CHOCCO;BAIE_COBABA;BAIE_FIGUY;BAIE_FRAIGO;BAIE_FRAIVE;BAIE_FRAMBY;BAIE_GOWAV;BAIE_JOUCA;BAIE_KEBIA;BAIE_KIKA;BAIE_LAMPOU;BAIE_MAGO;BAIE_MARON;BAIE_MEPO;BAIE_NANONE;BAIE_ORAN;BAIE_PANGA;BAIE_PAPAYA;BAIE_PARMA;BAIE_PECHA;BAIE_POCPOC;BAIE_POMROZ;BAIE_PRINE;BAIE_RATAM;BAIE_SEDRA;BAIE_SITRUS;BAIE_WIKI;BAIE_WILLIA;BAIE_YAPAP;BAIE_ZALIS})),1,1)*60+caracferme(cardinal(inter({VAR__LANCEUR_OBJET},{BAIE_ALGA;BAIE_GRENA;BAIE_KIWAN;BAIE_LONME;BAIE_MANGOU;BAIE_NANAB;BAIE_NANANA;BAIE_PALMA;BAIE_QUALOT;BAIE_RABUTA;BAIE_REMU;BAIE_REPOI;BAIE_RESIN;BAIE_SIAM;BAIE_TAMATO;BAIE_TRONCI})),1,1)*70+caracferme(cardinal(inter({VAR__LANCEUR_OBJET},{BAIE_ABRIKO;BAIE_CHERIM;BAIE_DURIN;BAIE_ENIGMA;BAIE_FRISTA;BAIE_JABOCA;BAIE_LANSAT;BAIE_LICHII;BAIE_LINGAN;BAIE_MICLE;BAIE_MYRTE;BAIE_PITAYE;BAIE_POMMO;BAIE_SAILAK;BAIE_STEKPA})),1,1)*80");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(277));
stringMapString_.addEntry("","NORMAL");
stringMapString_.addEntry("DENT_OCEAN","NORMAL");
stringMapString_.addEntry("RAPPEL","NORMAL");
stringMapString_.addEntry("BAIE_PITAYE","POISON");
stringMapString_.addEntry("ROCHE_LISSE","NORMAL");
stringMapString_.addEntry("BAIE_LAMPOU","TENEBRE");
stringMapString_.addEntry("POUDRE_VITE","NORMAL");
stringMapString_.addEntry("BAIE_CERIZ","FEU");
stringMapString_.addEntry("PIERRE_FOUDRE","NORMAL");
stringMapString_.addEntry("HYPER_BALL","NORMAL");
stringMapString_.addEntry("GRAIN_MIRACL","NORMAL");
stringMapString_.addEntry("GRIFFE_RASOIR","NORMAL");
stringMapString_.addEntry("CEINTURE_PRO","NORMAL");
stringMapString_.addEntry("BAIE_BABIRI","ACIER");
stringMapString_.addEntry("CEINT_NOIRE","NORMAL");
stringMapString_.addEntry("ROCHE_HUMIDE","NORMAL");
stringMapString_.addEntry("POUDRE_METAL","NORMAL");
stringMapString_.addEntry("EAU_FRAICHE","NORMAL");
stringMapString_.addEntry("PILE","NORMAL");
stringMapString_.addEntry("BAIE_GOWAV","DRAGON");
stringMapString_.addEntry("BAIE_PAPAYA","TENEBRE");
stringMapString_.addEntry("ENCENS_VAGUE","NORMAL");
stringMapString_.addEntry("PIERRE_STASE","NORMAL");
stringMapString_.addEntry("LOVE_BALL","NORMAL");
stringMapString_.addEntry("PLAQUE_DRACO","NORMAL");
stringMapString_.addEntry("GRANDE_PERLE","NORMAL");
stringMapString_.addEntry("PIECE_RUNE","NORMAL");
stringMapString_.addEntry("BAIE_KIKA","SOL");
stringMapString_.addEntry("BAIE_NANONE","GLACE");
stringMapString_.addEntry("BAIE_POCPOC","FEU");
stringMapString_.addEntry("MODULE_AQUA","NORMAL");
stringMapString_.addEntry("PIERRE_ECLAT","NORMAL");
stringMapString_.addEntry("MAX_ELIXIR","NORMAL");
stringMapString_.addEntry("POKE_BALL","NORMAL");
stringMapString_.addEntry("OEUF_CHANCE","NORMAL");
stringMapString_.addEntry("MOUCH_CHOIX","NORMAL");
stringMapString_.addEntry("ENCENS_FLEUR","NORMAL");
stringMapString_.addEntry("PLAQUE_OMBRE","NORMAL");
stringMapString_.addEntry("BAIE_KEBIA","POISON");
stringMapString_.addEntry("ROCHE_GLACE","NORMAL");
stringMapString_.addEntry("BAIE_ENIGMA","INSECTE");
stringMapString_.addEntry("BAIE_RABUTA","SPECTRE");
stringMapString_.addEntry("BAIE_WILLIA","GLACE");
stringMapString_.addEntry("LUMARGILE","NORMAL");
stringMapString_.addEntry("EAU_MYSTIQUE","NORMAL");
stringMapString_.addEntry("CENDRESACREE","NORMAL");
stringMapString_.addEntry("SODA_COOL","NORMAL");
stringMapString_.addEntry("BAIE_JOUCA","SOL");
stringMapString_.addEntry("PIERRE_EAU","NORMAL");
stringMapString_.addEntry("ENCENS_ROC","NORMAL");
stringMapString_.addEntry("BANDEAU","NORMAL");
stringMapString_.addEntry("JUS_DE_BAIE","NORMAL");
stringMapString_.addEntry("LUNET_SAGES","NORMAL");
stringMapString_.addEntry("BAIE_NANAB","EAU");
stringMapString_.addEntry("ORBE_FLAMME","NORMAL");
stringMapString_.addEntry("BOULE_FUMEE","NORMAL");
stringMapString_.addEntry("ACCRO_GRIFFE","NORMAL");
stringMapString_.addEntry("HYPER_POTION","NORMAL");
stringMapString_.addEntry("PEPITE","NORMAL");
stringMapString_.addEntry("ROCHE_CHAUDE","NORMAL");
stringMapString_.addEntry("TOTAL_SOIN","NORMAL");
stringMapString_.addEntry("ENCENS_PUR","NORMAL");
stringMapString_.addEntry("ORBE_VIE","NORMAL");
stringMapString_.addEntry("BAIE_YAPAP","PSY");
stringMapString_.addEntry("MAX_REPOUSSE","NORMAL");
stringMapString_.addEntry("LAIT_MEUMEU","NORMAL");
stringMapString_.addEntry("PIERRE_OVALE","NORMAL");
stringMapString_.addEntry("SABLE_DOUX","NORMAL");
stringMapString_.addEntry("BAIE_SEDRA","SPECTRE");
stringMapString_.addEntry("SUPER_BALL","NORMAL");
stringMapString_.addEntry("BAIE_MEPO","COMBAT");
stringMapString_.addEntry("PP_PLUS","NORMAL");
stringMapString_.addEntry("POTION","NORMAL");
stringMapString_.addEntry("BAIE_TRONCI","DRAGON");
stringMapString_.addEntry("VIEIL_AMBRE","NORMAL");
stringMapString_.addEntry("BAIE_MICLE","ROCHE");
stringMapString_.addEntry("BAIE_ZALIS","NORMAL");
stringMapString_.addEntry("REPOUSSE","NORMAL");
stringMapString_.addEntry("BAIE_STEKPA","FEU");
stringMapString_.addEntry("PV_PLUS","NORMAL");
stringMapString_.addEntry("PIERRE_SOLAIRE","NORMAL");
stringMapString_.addEntry("BAIE_KIWAN","TENEBRE");
stringMapString_.addEntry("NAUTILE","NORMAL");
stringMapString_.addEntry("BAIE_PANGA","INSECTE");
stringMapString_.addEntry("BAIE_FRAIVE","PLANTE");
stringMapString_.addEntry("PIC_VENIN","NORMAL");
stringMapString_.addEntry("GUERISON","NORMAL");
stringMapString_.addEntry("BAIE_POMROZ","COMBAT");
stringMapString_.addEntry("PLAQUE_FLAM","NORMAL");
stringMapString_.addEntry("FILET_BALL","NORMAL");
stringMapString_.addEntry("BAIE_PALMA","ACIER");
stringMapString_.addEntry("CEINT_POUV","NORMAL");
stringMapString_.addEntry("CHRONO_BALL","NORMAL");
stringMapString_.addEntry("GROSSERACINE","NORMAL");
stringMapString_.addEntry("REVEIL","NORMAL");
stringMapString_.addEntry("ENCENS_VEINE","NORMAL");
stringMapString_.addEntry("HERBEBLANCHE","NORMAL");
stringMapString_.addEntry("SOMBRE_BALL","NORMAL");
stringMapString_.addEntry("BAIE_REMU","FEU");
stringMapString_.addEntry("PLAQUINSECT","NORMAL");
stringMapString_.addEntry("BATON","NORMAL");
stringMapString_.addEntry("RUNE_SORT","NORMAL");
stringMapString_.addEntry("COMPET_BALL","NORMAL");
stringMapString_.addEntry("ORBE_ADAMANT","NORMAL");
stringMapString_.addEntry("MOUCH_SOIE","NORMAL");
stringMapString_.addEntry("FOSSILE_GRIFFE","NORMAL");
stringMapString_.addEntry("BAIE_WIKI","ROCHE");
stringMapString_.addEntry("GLACETERNEL","NORMAL");
stringMapString_.addEntry("PT_DE_MIRE","NORMAL");
stringMapString_.addEntry("BAIE_LICHII","PLANTE");
stringMapString_.addEntry("PIERRE_FEU","NORMAL");
stringMapString_.addEntry("PLAQUE_FANTO","NORMAL");
stringMapString_.addEntry("PLAQUESPRIT","NORMAL");
stringMapString_.addEntry("CUILLERTORDU","NORMAL");
stringMapString_.addEntry("FERRAILLE","NORMAL");
stringMapString_.addEntry("BEC_POINTU","NORMAL");
stringMapString_.addEntry("CHAINE_POUV","NORMAL");
stringMapString_.addEntry("BAIE_QUALOT","POISON");
stringMapString_.addEntry("ECAILLE_OCEAN","NORMAL");
stringMapString_.addEntry("PROTEINE","NORMAL");
stringMapString_.addEntry("PETIT_CHAMPI","NORMAL");
stringMapString_.addEntry("LIMONADE","NORMAL");
stringMapString_.addEntry("FOSSILE_RACINE","NORMAL");
stringMapString_.addEntry("POING_CHANCE","NORMAL");
stringMapString_.addEntry("CARTE_ROUGE","NORMAL");
stringMapString_.addEntry("SUPER_POTION","NORMAL");
stringMapString_.addEntry("PIERRE_NUIT","NORMAL");
stringMapString_.addEntry("PIERRE_DURE","NORMAL");
stringMapString_.addEntry("ANTI_BRULE","NORMAL");
stringMapString_.addEntry("RUNE_PURIF","NORMAL");
stringMapString_.addEntry("ORBE_PLATINE","NORMAL");
stringMapString_.addEntry("SPEED_BALL","NORMAL");
stringMapString_.addEntry("PLAQUE_GLACE","NORMAL");
stringMapString_.addEntry("PLAQUE_ROC","NORMAL");
stringMapString_.addEntry("BOUE_NOIRE","NORMAL");
stringMapString_.addEntry("ENCENS_MER","NORMAL");
stringMapString_.addEntry("CEINT_FORCE","NORMAL");
stringMapString_.addEntry("MAGMARISEUR","NORMAL");
stringMapString_.addEntry("BAIE_SIAM","INSECTE");
stringMapString_.addEntry("PIERRE_MOUSSE","NORMAL");
stringMapString_.addEntry("METRO","NORMAL");
stringMapString_.addEntry("PIERRALLEGEE","NORMAL");
stringMapString_.addEntry("BAIE_REPOI","ELECTRIQUE");
stringMapString_.addEntry("VIVE_GRIFFE","NORMAL");
stringMapString_.addEntry("CROC_DRAGON","NORMAL");
stringMapString_.addEntry("CARAPACE_MUE","NORMAL");
stringMapString_.addEntry("SCUBA_BALL","NORMAL");
stringMapString_.addEntry("PLAQUE_FER","NORMAL");
stringMapString_.addEntry("BAND_CHOIX","NORMAL");
stringMapString_.addEntry("BAIE_PRINE","VOL");
stringMapString_.addEntry("MORC_ETOILE","NORMAL");
stringMapString_.addEntry("ANTIDOTE","NORMAL");
stringMapString_.addEntry("BAIE_SAILAK","COMBAT");
stringMapString_.addEntry("BAIE_FRAIGO","DRAGON");
stringMapString_.addEntry("BANDEAU_ETREINTE","NORMAL");
stringMapString_.addEntry("POIDS_POUV","NORMAL");
stringMapString_.addEntry("BAIE_LINGAN","GLACE");
stringMapString_.addEntry("BAND_POUV","NORMAL");
stringMapString_.addEntry("SOIN_BALL","NORMAL");
stringMapString_.addEntry("FOSSILE_PLUME","NORMAL");
stringMapString_.addEntry("PIERRE_LUNE","NORMAL");
stringMapString_.addEntry("RAPPEL_MAX","NORMAL");
stringMapString_.addEntry("BAIE_CHARTI","ROCHE");
stringMapString_.addEntry("BAIE_CHOCCO","FEU");
stringMapString_.addEntry("BAIE_ABRIKO","SOL");
stringMapString_.addEntry("BAIE_JABOCA","DRAGON");
stringMapString_.addEntry("BAIE_FIGUY","INSECTE");
stringMapString_.addEntry("LENTILSCOPE","NORMAL");
stringMapString_.addEntry("COPAIN_BALL","NORMAL");
stringMapString_.addEntry("NOEUD_DESTIN","NORMAL");
stringMapString_.addEntry("BAIE_CHERIM","SPECTRE");
stringMapString_.addEntry("MODULE_CRYO","NORMAL");
stringMapString_.addEntry("HONOR_BALL","NORMAL");
stringMapString_.addEntry("LUNE_BALL","NORMAL");
stringMapString_.addEntry("PLAQUE_HYDRO","NORMAL");
stringMapString_.addEntry("BAIE_NANANA","PLANTE");
stringMapString_.addEntry("HUILE","NORMAL");
stringMapString_.addEntry("LENT_POUV","NORMAL");
stringMapString_.addEntry("RAPIDE_BALL","NORMAL");
stringMapString_.addEntry("BAIE_MYRTE","ELECTRIQUE");
stringMapString_.addEntry("CD_DOUTEUX","NORMAL");
stringMapString_.addEntry("BRAC_MACHO","NORMAL");
stringMapString_.addEntry("LENTIL_ZOOM","NORMAL");
stringMapString_.addEntry("GRELOT_ZEN","NORMAL");
stringMapString_.addEntry("ROCHE_ROYALE","NORMAL");
stringMapString_.addEntry("BAIE_RATAM","PLANTE");
stringMapString_.addEntry("BULBE","NORMAL");
stringMapString_.addEntry("CARBONE","NORMAL");
stringMapString_.addEntry("ORBE_PERLE","NORMAL");
stringMapString_.addEntry("CROC_RASOIR","NORMAL");
stringMapString_.addEntry("PROTECTEUR","NORMAL");
stringMapString_.addEntry("CALCIUM","NORMAL");
stringMapString_.addEntry("CHARBON","NORMAL");
stringMapString_.addEntry("PIERRE_PLANTE","NORMAL");
stringMapString_.addEntry("PIQUANTS","NORMAL");
stringMapString_.addEntry("BAIE_GRENA","GLACE");
stringMapString_.addEntry("HERBE_MENTAL","NORMAL");
stringMapString_.addEntry("BAIE_DURIN","EAU");
stringMapString_.addEntry("PLAQUE_HERBE","NORMAL");
stringMapString_.addEntry("FER","NORMAL");
stringMapString_.addEntry("PLAQUE_CIEL","NORMAL");
stringMapString_.addEntry("BAIE_FRAMBY","ACIER");
stringMapString_.addEntry("BAIE_PARMA","ELECTRIQUE");
stringMapString_.addEntry("BAIE_ORAN","POISON");
stringMapString_.addEntry("PEAU_METAL","NORMAL");
stringMapString_.addEntry("BAIE_POMMO","TENEBRE");
stringMapString_.addEntry("CASQUE_BRUT","NORMAL");
stringMapString_.addEntry("LUNET_CHOIX","NORMAL");
stringMapString_.addEntry("OS_RARE","NORMAL");
stringMapString_.addEntry("PLAQUE_POING","NORMAL");
stringMapString_.addEntry("BALLE_FER","NORMAL");
stringMapString_.addEntry("MASSE_OS","NORMAL");
stringMapString_.addEntry("ECAILLE_DRACO","NORMAL");
stringMapString_.addEntry("ENCENS_PLEIN","NORMAL");
stringMapString_.addEntry("ELIXIR","NORMAL");
stringMapString_.addEntry("PLAQUE_TOXIC","NORMAL");
stringMapString_.addEntry("BAIE_SITRUS","PSY");
stringMapString_.addEntry("MULTI_EXP","NORMAL");
stringMapString_.addEntry("BAIE_COBABA","VOL");
stringMapString_.addEntry("BAIE_MAGO","SPECTRE");
stringMapString_.addEntry("MODULE_PYRO","NORMAL");
stringMapString_.addEntry("BOUTON_FUITE","NORMAL");
stringMapString_.addEntry("FOSSILE_CRANE","NORMAL");
stringMapString_.addEntry("BIZAR_ENCENS","NORMAL");
stringMapString_.addEntry("POUDRECLAIRE","NORMAL");
stringMapString_.addEntry("BAIE_FRISTA","PSY");
stringMapString_.addEntry("HUILE_MAX","NORMAL");
stringMapString_.addEntry("MASSE_BALL","NORMAL");
stringMapString_.addEntry("POUSS_ETOILE","NORMAL");
stringMapString_.addEntry("SUPER_REPOUSSE","NORMAL");
stringMapString_.addEntry("LUNET_NOIRES","NORMAL");
stringMapString_.addEntry("AMELIORATOR","NORMAL");
stringMapString_.addEntry("GRELOT_COQUE","NORMAL");
stringMapString_.addEntry("BAIE_ALGA","COMBAT");
stringMapString_.addEntry("HERBE_POUV","NORMAL");
stringMapString_.addEntry("BAIE_LANSAT","VOL");
stringMapString_.addEntry("TISSU_FAUCHE","NORMAL");
stringMapString_.addEntry("ANTI_PARA","NORMAL");
stringMapString_.addEntry("PIERRE_AUBE","NORMAL");
stringMapString_.addEntry("PERLE","NORMAL");
stringMapString_.addEntry("EVOLUROC","NORMAL");
stringMapString_.addEntry("LUXE_BALL","NORMAL");
stringMapString_.addEntry("BAIE_LONME","SOL");
stringMapString_.addEntry("AIMANT","NORMAL");
stringMapString_.addEntry("POIGN_POUV","NORMAL");
stringMapString_.addEntry("BALLON","NORMAL");
stringMapString_.addEntry("PIERRE_GLACE","NORMAL");
stringMapString_.addEntry("ROCHE_ELECTRIQUE","NORMAL");
stringMapString_.addEntry("APPAT_BALL","NORMAL");
stringMapString_.addEntry("FOSSILE_DOME","NORMAL");
stringMapString_.addEntry("BAIE_TAMATO","PSY");
stringMapString_.addEntry("ENCENS_DOUX","NORMAL");
stringMapString_.addEntry("FAIBLO_BALL","NORMAL");
stringMapString_.addEntry("POUDRE_ARG","NORMAL");
stringMapString_.addEntry("FOSSILE_ARMURE","NORMAL");
stringMapString_.addEntry("RESTES","NORMAL");
stringMapString_.addEntry("BIS_BALL","NORMAL");
stringMapString_.addEntry("BAIE_MARON","EAU");
stringMapString_.addEntry("ANTIGEL","NORMAL");
stringMapString_.addEntry("POTION_MAX","NORMAL");
stringMapString_.addEntry("BAIE_RESIN","VOL");
stringMapString_.addEntry("PP_MAX","NORMAL");
stringMapString_.addEntry("LOUPE","NORMAL");
stringMapString_.addEntry("ORBE_TOXIQUE","NORMAL");
stringMapString_.addEntry("MASTER_BALL","NORMAL");
stringMapString_.addEntry("BAND_MUSCLE","NORMAL");
stringMapString_.addEntry("PLAQUE_TERRE","NORMAL");
stringMapString_.addEntry("ELECTRISEUR","NORMAL");
stringMapString_.addEntry("ZINC","NORMAL");
stringMapString_.addEntry("NIVEAU_BALL","NORMAL");
stringMapString_.addEntry("GROS_CHAMPI","NORMAL");
stringMapString_.addEntry("BAIE_PECHA","ELECTRIQUE");
stringMapString_.addEntry("MODULE_CHOC","NORMAL");
stringMapString_.addEntry("PLAQUE_VOLT","NORMAL");
stringMapString_.addEntry("RALENTIQUEUE","NORMAL");
stringMapString_.addEntry("FOSSILE_PLAQUE","NORMAL");
stringMapString_.addEntry("BAIE_MANGOU","ROCHE");
damagingMoveData_.setTypesByOwnedItem(stringMapString_);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m185(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("40");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m186(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("INSECTE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("INSECTE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("25");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("4"));
monteCarloString_.addQuickEvent("SIMPLE_POISON",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SIMPLE_POISON","cardinal(inter({VAR__CIBLE_STATUTS},{SIMPLE_POISON;POISON_GRAVE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{POISON;ACIER}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m187(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)30);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("30");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m188(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("3/4");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(1));
monteCarloString_.addQuickEvent("CONFUSION",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("CONFUSION","cardinal(inter({VAR__CIBLE_STATUTS},{CONFUSION}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatus_.setFail("");
custListEffect_.add(effectStatus_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return statusMoveData_;
}
static MoveData m189(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.EVASINESS,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.EVASINESS,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return statusMoveData_;
}
static MoveData m190(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("100");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("4"));
monteCarloString_.addQuickEvent("PEUR",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PEUR","VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m191(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("90");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m192(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("80");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m193(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("60");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("PARALYSIE",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PARALYSIE","cardinal(inter({VAR__CIBLE_STATUTS},{PARALYSIE}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m194(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("140");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)-2);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,"VAR__LANCEUR_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatistic_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatistic_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m195(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setPriority((byte)-6);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("60");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("VAR__CIBLE_CLONE>0|VAR__CIBLE_EFFET__RACINES");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMovePrio(true);
damagingMoveData_.setSwitchType(SwitchType.CIBLE);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m196(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setConstDamage(true);
effectDamage_.setPower("40");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m197(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("VOL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("VOL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("120");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-1);
enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(2));
enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,"VAR__CIBLE_CLONE>0");
enumMapStatisticString_.addEntry(Statistic.DEFENSE,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectStatistic_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatistic_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatistic_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m198(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("COMBAT");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1/2");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("100");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(1));
monteCarloString_.addQuickEvent("CONFUSION",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("CONFUSION","cardinal(inter({VAR__CIBLE_STATUTS},{CONFUSION}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m199(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ROCHE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ROCHE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("75");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("PEUR",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PEUR","VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return damagingMoveData_;
}
}
