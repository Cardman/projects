package code.expressionlanguage.utilimpl;
import code.expressionlanguage.options.KeyWords;
import code.sml.util.*;
public final class MessCdmKeywords{
private MessCdmKeywords(){}
public static TranslationsFile en(){
TranslationsFile en_=new TranslationsFile();
en_.add(KeyWords.CLASS,"Class=class");
en_.add(KeyWords.VAR,"Var=var");
en_.add(KeyWords.TRUE,"True=true");
en_.add(KeyWords.FALSE,"False=false");
en_.add(KeyWords.ESC_UNICODE,"EscUnicode=u");
en_.add(KeyWords.ESC_FORM,"EscForm=f");
en_.add(KeyWords.ESC_LINE,"EscLine=n");
en_.add(KeyWords.ESC_FEED,"EscFeed=r");
en_.add(KeyWords.ESC_SPACE,"EscSpace=s");
en_.add(KeyWords.ESC_TAB,"EscTab=t");
en_.add(KeyWords.ESC_BOUND,"EscBound=b");
en_.add(KeyWords.NB_EXP_DEC,"NbExpDec=e");
en_.add(KeyWords.NB_EXP_BIN,"NbExpBin=p");
en_.add(KeyWords.NB_HEX,"NbHex=x");
en_.add(KeyWords.NB_HEX_END,"NbHexEnd=x");
en_.add(KeyWords.NB_BIN,"NbBin=b");
en_.add(KeyWords.NB_SUF_DOUBLE_PRIM,"NbSufDoublePrim=d");
en_.add(KeyWords.NB_SUF_DOUBLE,"NbSufDouble=D");
en_.add(KeyWords.NB_SUF_FLOAT_PRIM,"NbSufFloatPrim=f");
en_.add(KeyWords.NB_SUF_FLOAT,"NbSufFloat=F");
en_.add(KeyWords.NB_SUF_LONG_PRIM,"NbSufLongPrim=l");
en_.add(KeyWords.NB_SUF_LONG,"NbSufLong=L");
en_.add(KeyWords.NB_SUF_INTEGER_PRIM,"NbSufIntegerPrim=i");
en_.add(KeyWords.NB_SUF_INTEGER,"NbSufInteger=I");
en_.add(KeyWords.NB_SUF_CHARACTER_PRIM,"NbSufCharacterPrim=c");
en_.add(KeyWords.NB_SUF_CHARACTER,"NbSufCharacter=C");
en_.add(KeyWords.NB_SUF_SHORT_PRIM,"NbSufShortPrim=s");
en_.add(KeyWords.NB_SUF_SHORT,"NbSufShort=S");
en_.add(KeyWords.NB_SUF_BYTE_PRIM,"NbSufBytePrim=y");
en_.add(KeyWords.NB_SUF_BYTE,"NbSufByte=Y");
en_.add(KeyWords.NB_DIG0,"NbDig0=A");
en_.add(KeyWords.NB_DIG1,"NbDig1=B");
en_.add(KeyWords.NB_DIG2,"NbDig2=C");
en_.add(KeyWords.NB_DIG3,"NbDig3=D");
en_.add(KeyWords.NB_DIG4,"NbDig4=E");
en_.add(KeyWords.NB_DIG5,"NbDig5=F");
en_.add(KeyWords.IF,"If=if");
en_.add(KeyWords.ELSE,"Else=else");
en_.add(KeyWords.ELSEIF,"Elseif=elseif");
en_.add(KeyWords.ITER,"Iter=iter");
en_.add(KeyWords.NEW,"New=new");
en_.add(KeyWords.FOR,"For=for");
en_.add(KeyWords.INTERFACE,"Interface=interface");
en_.add(KeyWords.STATIC,"Static=static");
en_.add(KeyWords.FINAL,"Final=final");
en_.add(KeyWords.ENUM,"Enum=enum");
en_.add(KeyWords.NULL,"Null=null");
en_.add(KeyWords.RETURN,"Return=return");
en_.add(KeyWords.THAT,"That=that");
en_.add(KeyWords.STATIC_CALL,"StaticCall=staticCall");
en_.add(KeyWords.WHILE,"While=while");
en_.add(KeyWords.BREAK,"Break=break");
en_.add(KeyWords.CONTINUE,"Continue=continue");
en_.add(KeyWords.LAMBDA,"Lambda=$lambda");
en_.add(KeyWords.ABSTRACT,"Abstract=abstract");
en_.add(KeyWords.THIS,"This=this");
en_.add(KeyWords.SUPER,"Super=super");
en_.add(KeyWords.INSTANCEOF,"Instanceof=instanceof");
en_.add(KeyWords.SWITCH,"Switch=switch");
en_.add(KeyWords.CASE,"Case=case");
en_.add(KeyWords.DEFAULT,"Default=default");
en_.add(KeyWords.ID,"Id=$id");
en_.add(KeyWords.FIRSTOPT,"Firstopt=$firstopt");
en_.add(KeyWords.VARARG,"Vararg=$vararg");
en_.add(KeyWords.CLASSCHOICE,"Classchoice=classchoice");
en_.add(KeyWords.SUPERACCESS,"Superaccess=superaccess");
en_.add(KeyWords.THISACCESS,"Thisaccess=thisaccess");
en_.add(KeyWords.INTERN,"Intern=$intern");
en_.add(KeyWords.VALUE,"Value=value");
en_.add(KeyWords.INTERFACES,"Interfaces=interfaces");
en_.add(KeyWords.OPERATOR,"Operator=operator");
en_.add(KeyWords.TO_STRING,"ToString=$toString");
en_.add(KeyWords.EXPLICIT,"Explicit=explicit");
en_.add(KeyWords.CAST,"Cast=$");
en_.add(KeyWords.DO,"Do=do");
en_.add(KeyWords.TRY,"Try=try");
en_.add(KeyWords.CATCH,"Catch=catch");
en_.add(KeyWords.FINALLY,"Finally=finally");
en_.add(KeyWords.DEFAULT_VALUE,"DefaultValue=defaultValue");
en_.add(KeyWords.BOOL,"Bool=bool");
en_.add(KeyWords.VALUE_OF,"ValueOf=$valueOf");
en_.add(KeyWords.VALUES,"Values=$values");
en_.add(KeyWords.PARENT,"Parent=$parent");
en_.add(KeyWords.THROW,"Throw=throw");
en_.add(KeyWords.NORMAL,"Normal=normal");
en_.add(KeyWords.FOREACH,"Foreach=foreach");
en_.add(KeyWords.ANNOTATION,"Annotation=annotation");
en_.add(KeyWords.PUBLIC,"Public=public");
en_.add(KeyWords.PACKAGE,"Package=package");
en_.add(KeyWords.PROTECTED,"Protected=protected");
en_.add(KeyWords.PRIVATE,"Private=private");
return en_;
}
public static TranslationsFile fr(){
TranslationsFile fr_=new TranslationsFile();
fr_.add(KeyWords.CLASS,"Class=classe");
fr_.add(KeyWords.VAR,"Var=var");
fr_.add(KeyWords.TRUE,"True=vrai");
fr_.add(KeyWords.FALSE,"False=faux");
fr_.add(KeyWords.ESC_UNICODE,"EscUnicode=u");
fr_.add(KeyWords.ESC_FORM,"EscForm=f");
fr_.add(KeyWords.ESC_LINE,"EscLine=n");
fr_.add(KeyWords.ESC_FEED,"EscFeed=r");
fr_.add(KeyWords.ESC_SPACE,"EscSpace=s");
fr_.add(KeyWords.ESC_TAB,"EscTab=t");
fr_.add(KeyWords.ESC_BOUND,"EscBound=b");
fr_.add(KeyWords.NB_EXP_DEC,"NbExpDec=e");
fr_.add(KeyWords.NB_EXP_BIN,"NbExpBin=p");
fr_.add(KeyWords.NB_HEX,"NbHex=x");
fr_.add(KeyWords.NB_HEX_END,"NbHexEnd=x");
fr_.add(KeyWords.NB_BIN,"NbBin=b");
fr_.add(KeyWords.NB_SUF_DOUBLE_PRIM,"NbSufDoublePrim=d");
fr_.add(KeyWords.NB_SUF_DOUBLE,"NbSufDouble=D");
fr_.add(KeyWords.NB_SUF_FLOAT_PRIM,"NbSufFloatPrim=f");
fr_.add(KeyWords.NB_SUF_FLOAT,"NbSufFloat=F");
fr_.add(KeyWords.NB_SUF_LONG_PRIM,"NbSufLongPrim=o8");
fr_.add(KeyWords.NB_SUF_LONG,"NbSufLong=O8");
fr_.add(KeyWords.NB_SUF_INTEGER_PRIM,"NbSufIntegerPrim=o4");
fr_.add(KeyWords.NB_SUF_INTEGER,"NbSufInteger=O4");
fr_.add(KeyWords.NB_SUF_CHARACTER_PRIM,"NbSufCharacterPrim=c");
fr_.add(KeyWords.NB_SUF_CHARACTER,"NbSufCharacter=C");
fr_.add(KeyWords.NB_SUF_SHORT_PRIM,"NbSufShortPrim=o2");
fr_.add(KeyWords.NB_SUF_SHORT,"NbSufShort=O2");
fr_.add(KeyWords.NB_SUF_BYTE_PRIM,"NbSufBytePrim=o");
fr_.add(KeyWords.NB_SUF_BYTE,"NbSufByte=O");
fr_.add(KeyWords.NB_DIG0,"NbDig0=A");
fr_.add(KeyWords.NB_DIG1,"NbDig1=B");
fr_.add(KeyWords.NB_DIG2,"NbDig2=C");
fr_.add(KeyWords.NB_DIG3,"NbDig3=D");
fr_.add(KeyWords.NB_DIG4,"NbDig4=E");
fr_.add(KeyWords.NB_DIG5,"NbDig5=F");
fr_.add(KeyWords.IF,"If=si");
fr_.add(KeyWords.ELSE,"Else=sinon");
fr_.add(KeyWords.ELSEIF,"Elseif=sinonsi");
fr_.add(KeyWords.ITER,"Iter=iter");
fr_.add(KeyWords.NEW,"New=nouveau");
fr_.add(KeyWords.FOR,"For=pour");
fr_.add(KeyWords.INTERFACE,"Interface=interface");
fr_.add(KeyWords.STATIC,"Static=static");
fr_.add(KeyWords.FINAL,"Final=final");
fr_.add(KeyWords.ENUM,"Enum=enum");
fr_.add(KeyWords.NULL,"Null=nul");
fr_.add(KeyWords.RETURN,"Return=retour");
fr_.add(KeyWords.THAT,"That=cela");
fr_.add(KeyWords.STATIC_CALL,"StaticCall=staticAppel");
fr_.add(KeyWords.WHILE,"While=tantque");
fr_.add(KeyWords.BREAK,"Break=sortir");
fr_.add(KeyWords.CONTINUE,"Continue=iterer");
fr_.add(KeyWords.LAMBDA,"Lambda=$lambda");
fr_.add(KeyWords.ABSTRACT,"Abstract=abstrait");
fr_.add(KeyWords.THIS,"This=ceci");
fr_.add(KeyWords.SUPER,"Super=super");
fr_.add(KeyWords.INSTANCEOF,"Instanceof=instancede");
fr_.add(KeyWords.SWITCH,"Switch=selon");
fr_.add(KeyWords.CASE,"Case=cas");
fr_.add(KeyWords.DEFAULT,"Default=autrement");
fr_.add(KeyWords.ID,"Id=$id");
fr_.add(KeyWords.FIRSTOPT,"Firstopt=$premieropt");
fr_.add(KeyWords.VARARG,"Vararg=$vararg");
fr_.add(KeyWords.CLASSCHOICE,"Classchoice=choixclasse");
fr_.add(KeyWords.SUPERACCESS,"Superaccess=superacces");
fr_.add(KeyWords.THISACCESS,"Thisaccess=cetacces");
fr_.add(KeyWords.INTERN,"Intern=$interne");
fr_.add(KeyWords.VALUE,"Value=valeur");
fr_.add(KeyWords.INTERFACES,"Interfaces=interfaces");
fr_.add(KeyWords.OPERATOR,"Operator=operateur");
fr_.add(KeyWords.TO_STRING,"ToString=$chaine");
fr_.add(KeyWords.EXPLICIT,"Explicit=explicite");
fr_.add(KeyWords.CAST,"Cast=$");
fr_.add(KeyWords.DO,"Do=faire");
fr_.add(KeyWords.TRY,"Try=essai");
fr_.add(KeyWords.CATCH,"Catch=capture");
fr_.add(KeyWords.FINALLY,"Finally=finallement");
fr_.add(KeyWords.DEFAULT_VALUE,"DefaultValue=valDefaut");
fr_.add(KeyWords.BOOL,"Bool=bool");
fr_.add(KeyWords.VALUE_OF,"ValueOf=$valeurDe");
fr_.add(KeyWords.VALUES,"Values=$valeurs");
fr_.add(KeyWords.PARENT,"Parent=$parent");
fr_.add(KeyWords.THROW,"Throw=lancer");
fr_.add(KeyWords.NORMAL,"Normal=normal");
fr_.add(KeyWords.FOREACH,"Foreach=pourchaque");
fr_.add(KeyWords.ANNOTATION,"Annotation=annotation");
fr_.add(KeyWords.PUBLIC,"Public=public");
fr_.add(KeyWords.PACKAGE,"Package=paquetage");
fr_.add(KeyWords.PROTECTED,"Protected=protege");
fr_.add(KeyWords.PRIVATE,"Private=prive");
return fr_;
}
}
