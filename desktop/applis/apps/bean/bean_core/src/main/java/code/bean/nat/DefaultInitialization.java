package code.bean.nat;

import code.formathtml.util.BeanLgNames;

public final class DefaultInitialization {
    public static final String OBJECT = "java.lang.Object";
    public static final String VOID = "$void";
    public static final String CHAR_SEQUENCE = "java.lang.CharSequence";
    public static final String CHAR_SEQUENCE_COMPARE_TO = "compareTo";
    public static final String STRING_COMPARE = "compare";
    public static final String CHAR_SEQUENCE_EQUALS = "equals";
    public static final String COMPARE_TO = "compareTo";
    public static final String COMPARE = "compare";
    public static final String EQUALS_FCT = "equals";
    public static final String TO_STRING_METHOD = "toString";
    public static final String SIGNUM = "sgn";
    public static final String TO_BIN_STRING = "bin";
    public static final String TO_OCT_STRING = "oct";
    public static final String TO_HEX_STRING = "hex";
    public static final String VALUE_OF_METHOD = "valueOf";
    public static final String MAX_VALUE_FIELD = "MAX_VALUE";
    public static final String MIN_VALUE_FIELD = "MIN_VALUE";
    public static final String PLUS_INFINITY_FIELD = "PLUS_INFINITY";
    public static final String MINUS_INFINITY_FIELD = "MINUS_INFINITY";
    public static final String NAN_FIELD = "NAN";
    public static final String ITERATOR_TYPE = "java.lang.$iterator";
    public static final String ITERATOR = "iterator";
    public static final String ITERABLE = "java.lang.$iterable";
    public static final String ENUM_PARAM = "java.lang.$Enum";
    public static final String ENUM_TYPE = "java.lang.$en";
    public static final String ENUMS = "java.lang.$enums";
    public static final String REPLACEMENT = "code.util.Replacement";
    public static final String STORE = "code.expressionlanguage.exceptions.DynamicArrayStoreException";
    public static final String NULL_PE = "code.util.exceptions.NullObjectException";
    public static final String BAD_ENCODE = "java.lang.$enc";
    public static final String BAD_INDEX = "code.expressionlanguage.exceptions.BadIndexException";
    public static final String BAD_ARG_NUMBER = "code.expressionlanguage.exceptions.BadArgNumber";
    public static final String ABSTRACT_TYPE_ERR = "code.expressionlanguage.exceptions.AbstractTypeErr";
    public static final String ILLEGAL_TYPE = "code.expressionlanguage.exceptions.IllegalType";
    public static final String NON_INVOKABLE = "code.expressionlanguage.exceptions.NonInvokable";
    public static final String ILLEGAL_ARG = "code.expressionlanguage.exceptions.IllegalArgument";
    public static final String BAD_SIZE = "code.expressionlanguage.exceptions.NegativeSizeException";
    public static final String ERROR = "java.lang.Exception";
    public static final String ERROR_CURRENT_STACK = "current";
    public static final String ERROR_TO_STRING = "toString";
    public static final String GET_MESSAGE = "getMessage";
    public static final String CAST_TYPE = "code.expressionlanguage.exceptions.DynamicCastClassException";
    public static final String DIVISION_ZERO = "code.expressionlanguage.exceptions.DivideZeroException";
    public static final String MATH = "java.lang.Math";
    public static final String ABS = "abs";
    public static final String MAX = "max";
    public static final String MIN = "min";
    public static final String MOD = "mod";
    public static final String QUOT = "quot";
    public static final String SOF = "code.expressionlanguage.exceptions.StackOverFlow";
    public static final String NB_FORMAT = "java.lang.badFormat";
    public static final String PRIM_BOOLEAN = "$boolean";
    public static final String PRIM_BYTE = "$byte";
    public static final String PRIM_SHORT = "$short";
    public static final String PRIM_CHAR = "$char";
    public static final String PRIM_INTEGER = "$int";
    public static final String PRIM_LONG = "$long";
    public static final String PRIM_FLOAT = "$float";
    public static final String PRIM_DOUBLE = "$double";
    public static final String BOOLEAN = "java.lang.Boolean";
    public static final String BYTE = "java.lang.Byte";
    public static final String SHORT = "java.lang.Short";
    public static final String CHARACTER = "java.lang.Character";
    public static final String INTEGER = "java.lang.Integer";
    public static final String LONG = "java.lang.Long";
    public static final String FLOAT = "java.lang.Float";
    public static final String DOUBLE = "java.lang.Double";
    public static final String NUMBER = "java.lang.Number";
    public static final String PARSE_BOOLEAN = "parseBoolean";
    public static final String PARSE_BYTE = "parseByte";
    public static final String PARSE_SHORT = "parseShort";
    public static final String PARSE_INT = "parseInt";
    public static final String PARSE_LONG = "parseLong";
    public static final String PARSE_FLOAT = "parseFloat";
    public static final String PARSE_DOUBLE = "parseDouble";
    public static final String PARSE_BYTE_OR_NULL = "parseByteOrNull";
    public static final String PARSE_SHORT_OR_NULL = "parseShortOrNull";
    public static final String PARSE_INT_OR_NULL = "parseIntOrNull";
    public static final String PARSE_LONG_OR_NULL = "parseLongOrNull";
    public static final String PARSE_FLOAT_OR_NULL = "parseFloatOrNull";
    public static final String PARSE_DOUBLE_OR_NULL = "parseDoubleOrNull";
    public static final String BOOLEAN_VALUE = "booleanValue";
    public static final String BYTE_VALUE = "byteValue";
    public static final String SHORT_VALUE = "shortValue";
    public static final String CHAR_VALUE = "charValue";
    public static final String INT_VALUE = "intValue";
    public static final String LONG_VALUE = "longValue";
    public static final String FLOAT_VALUE = "floatValue";
    public static final String DOUBLE_VALUE = "doubleValue";
    public static final String DIGIT = "digit";
    public static final String IS_DIGIT = "isDigit";
    public static final String IS_LETTER = "isLetter";
    public static final String IS_LETTER_OR_DIGIT = "isLetterOrDigit";
    public static final String IS_WORD_CHAR = "isWordChar";
    public static final String IS_LOWER_CASE = "isLowerCase";
    public static final String IS_UPPER_CASE = "isUpperCase";
    public static final String IS_WHITESPACE = "isWhitespace";
    public static final String IS_SPACE = "isSpace";
    public static final String IS_INFINITE = "isInfinite";
    public static final String IS_NAN = "isNan";
    public static final String FOR_DIGIT = "forDigit";
    public static final String GET_DIRECTIONALITY = "getDirectionality";
    public static final String GET_TYPE = "getType";
    public static final String GET_CHAR_TYPE = "getType";
    public static final String STRING = "java.lang.String";
    public static final String STRING_VALUE_OF = "valueOf";
    public static final String LENGTH = "length";
    public static final String CHAR_AT = "charAt";
    public static final String TO_CHAR_ARRAY = "toCharArray";
    public static final String CHAR_SEQUENCE_TO_STRING = "toString";
    public static final String SPLIT = "split";
    public static final String SPLIT_CHARS = "splitChars";
    public static final String SPLIT_STRINGS = "splitStrings";
    public static final String REPLACE = "replace";
    public static final String REPLACE_STRING = "replace";
    public static final String REPLACE_MULTIPLE = "replaceMultiple";
    public static final String EQUALS_IGNORE_CASE = "equalsIgnoreCase";
    public static final String COMPARE_TO_IGNORE_CASE = "compareToIgnoreCase";
    public static final String CONTAINS = "contains";
    public static final String ENDS_WITH = "endsWith";
    public static final String STARTS_WITH = "startsWith";
    public static final String INDEX_OF = "indexOf";
    public static final String FORMAT = "format";
    public static final String GET_BYTES = "getBytes";
    public static final String IS_EMPTY = "isEmpty";
    public static final String LAST_INDEX_OF = "lastIndexOf";
    public static final String REGION_MATCHES = "regionMatches";
    public static final String SUBSTRING = "substring";
    public static final String SUB_SEQUENCE = "subSequence";
    public static final String TO_LOWER_CASE = "toLowerCase";
    public static final String TO_UPPER_CASE = "toUpperCase";
    public static final String TO_LOWER_CASE_CHAR = "toLowerCase";
    public static final String TO_UPPER_CASE_CHAR = "toUpperCase";
    public static final String TRIM = "trim";
    public static final String STRING_BUILDER = "java.lang.StringBuilder";
    public static final String APPEND = "append";
    public static final String CAPACITY = "capacity";
    public static final String CLEAR = "clear";
    public static final String DELETE = "delete";
    public static final String DELETE_CHAR_AT = "deleteCharAt";
    public static final String ENSURE_CAPACITY = "ensureCapacity";
    public static final String INSERT = "insert";
    public static final String REVERSE = "reverse";
    public static final String SET_CHAR_AT = "setCharAt";
    public static final String SET_LENGTH = "setLength";
    public static final String SAME = "same";
    public static final String TRIM_TO_SIZE = "trimToSize";
    public static final String ERROR_INIT_CLASS = "java.lang.$defErrorClass";
    public static final String CLONE = "clone";
    public static final String READ_RESOURCES = "readContent";
    public static final String READ_RESOURCES_INDEX = "index";
    public static final String READ_RESOURCES_NAMES = "readNames";
    public static final String READ_RESOURCES_NAMES_LENGTH = "nbNames";
    public static final String RESOURCES = "java.lang.Resources";
    public static final String ARRAY_LENGTH = "length";
    public static final String ENUM_VALUES = "values";
    public static final String INVOKE_TARGET = "java.lang.$invokeTaget";
    public static final String GET_CAUSE = "getCause";
    public static final String CLASS_NOT_FOUND_ERROR = "java.lang.$classNotFound";
    public static final String GET_VARIABLE_OWNER = "getVariableOwner";
    public static final String GET_GENERIC_VARIABLE_OWNER = "getGenericVariableOwner";
    public static final String GET_STRING = "getString";
    public static final String CLASS_TYPE = "java.lang.$Class";
    public static final String STACK_TRACE_ELEMENT = "java.lang.$stack";
    public static final String CURRENT_STACK = "current";
    public static final String CURRENT_FULL_STACK = "currentFull";
    public static final String STACK_TRACE_ELEMENT_TO_STRING = "toString";
    public static final String FCT = "java.lang.$Fct";
    public static final String CALL = "call";
    public static final String META_INFO = "metaInfo";
    public static final String INSTANCE = "instance";
    public static final String ANNOTATION_TYPE = "java.lang.$Annotation";
    public static final String ANNOTATED = "java.lang.$Annotated";
    public static final String GET_ANNOTATIONS = "getAnnotations";
    public static final String GET_DEFAULT_VALUE = "getDefaultValue";
    public static final String GET_ANNOTATIONS_PARAMETERS = "getAnnotationsParameters";
    public static final String GET_DECLARED_CONSTRUCTORS = "getDeclaredConstructors";
    public static final String GET_DECLARED_FIELDS = "getDeclaredFields";
    public static final String GET_DECLARED_ANONYMOUS_TYPES = "getDeclaredAnonymousTypes";
    public static final String GET_DECLARED_ANONYMOUS_LAMBDA = "getDeclaredAnonymousLambda";
    public static final String GET_DECLARED_ANONYMOUS_LAMBDA_LOCAL_VARS = "getDeclaredAnonymousLambdaLocVars";
    public static final String GET_DECLARED_ANONYMOUS_LAMBDA_LOCAL_VARS_NB = "getDeclaredAnonymousLambdaLocVarsNb";
    public static final String GET_DECLARED_ANONYMOUS_LAMBDA_LOOP_VARS = "getDeclaredAnonymousLambdaLoopVars";
    public static final String GET_DECLARED_LOCAL_TYPES = "getDeclaredLocalTypes";
    public static final String GET_DECLARED_BLOCKS = "getDeclaredBlocks";
    public static final String GET_DECLARED_SWITCH_METHODS = "getDeclaredSwitchMethods";
    public static final String GET_DECLARED_METHODS = "getDeclaredMethods";
    public static final String GET_DECLARED_EXPLICITS = "getDeclaredExplicits";
    public static final String GET_DECLARED_IMPLICITS = "getDeclaredImplicits";
    public static final String GET_DECLARED_TRUE_OPERATORS = "getDeclaredTrueOperators";
    public static final String GET_DECLARED_FALSE_OPERATORS = "getDeclaredFalseOperators";
    public static final String GET_DECLARED_STATIC_METHODS = "getDeclaredStaticMethods";
    public static final String MAKE_GENERIC = "makeGeneric";
    public static final String GET_ALL_CLASSES = "getAllClasses";
    public static final String GET_OPERATORS = "getOperators";
    public static final String CONSTRUCTOR = "java.lang.$Constructor";
    public static final String FIELD = "java.lang.$Field";
    public static final String METHOD = "java.lang.$Method";
    public static final String INVOKE = "invoke";
    public static final String INVOKE_DIRECT = "invokeDirect";
    public static final String NEW_INSTANCE = "newInstance";
    public static final String IS_ABSTRACT = "isAbstract";
    public static final String GET_FILE_NAME = "getFileName";
    public static final String GET_NAME = "getName";
    public static final String GET_PRETTY_NAME = "getPrettyName";
    public static final String GET_PRETTY_SINGLE_NAME = "getPrettySingleName";
    public static final String GET_FIELD = "get";
    public static final String SET_FIELD = "set";
    public static final String GET_CLASS = "getClass";
    public static final String GET_ENCLOSING_TYPE = "getEnclosingType";
    public static final String GET_DECLARED_CLASSES = "getDeclaredClasses";
    public static final String FOR_NAME = "forName";
    public static final String RANGE = "java.lang.Range";
    public static final String RANGE_LOWER = "lower";
    public static final String RANGE_UPPER = "upper";
    public static final String RANGE_UNLIMITED = "unlimited";
    public static final String RANGE_UNLIMITED_STEP = "unlimitedStep";
    public static final String OBJECTS_UTIL = "java.lang.$ObjectsUtil";
    public static final String STRING_UTIL = "java.lang.$StringUtil";
    public static final String STRING_UTIL_VALUE_OF = "valueOf";
    public static final String SAME_REF = "eq";
    public static final String GET_PARENT = "getParent";
    public static final String SET_PARENT = "setParent";
    public static final String GET_FCT = "getFct";
    public static final String NEXT = "next";
    public static final String HAS_NEXT = "hasNext";
    public static final String ITERABLE_TABLE = "java.lang.$iterableTable";
    public static final String ITERATOR_TABLE = "iteratorTable";
    public static final String ITERATOR_TABLE_TYPE = "java.lang.$iteratorTable";
    public static final String HAS_NEXT_PAIR = "hasNextPair";
    public static final String NEXT_PAIR = "nextPair";
    public static final String PAIR_TYPE = "java.lang.$pair";
    public static final String GET_FIRST = "getFirst";
    public static final String GET_SECOND = "getSecond";
    public static final String NAME = "name";
    public static final String ORDINAL = "ordinal";
    public static final String ENUM_NAME = "$name";
    public static final String ENUM_ORDINAL = "$ordinal";
    public static final String ENUM_PRED_VALUE_OF = "valueOf";
    public static final String ITERABLE_VAR = "T";
    public static final String ITERATOR_TYPE_VAR = "T";
    public static final String ITERABLE_TABLE_VAR_FIRST = "T";
    public static final String ITERABLE_TABLE_VAR_SECOND = "U";
    public static final String ITERATOR_TABLE_TYPE_VAR_FIRST = "T";
    public static final String ITERATOR_TABLE_TYPE_VAR_SECOND = "U";
    public static final String PAIR_TYPE_VAR_FIRST = "T";
    public static final String PAIR_TYPE_VAR_SECOND = "U";
    public static final String ENUM_PARAM_VAR = "T";
    public static final String SEED_GENERATOR = "java.lang.Generator";
    public static final String SEED_DOUBLE_GENERATOR = "java.lang.DoubleGenerator";
    public static final String SEED_GET = "get";
    public static final String GET_OLD_STRING = "getOldString";
    public static final String GET_NEW_STRING = "getNewString";
    public static final String GET_SUPER_CLASS = "getSuperClass";
    public static final String GET_GENERIC_SUPER_CLASS = "getGenericSuperClass";
    public static final String GET_INTERFACES = "getInterfaces";
    public static final String GET_GENERIC_INTERFACES = "getGenericInterfaces";
    public static final String GET_LOWER_BOUNDS = "getLowerBounds";
    public static final String GET_UPPER_BOUNDS = "getUpperBounds";
    public static final String GET_COMPONENT_TYPE = "getComponentType";
    public static final String MAKE_ARRAY = "makeArray";
    public static final String GET_PARAMETER_TYPES = "getParameterTypes";
    public static final String GET_TYPE_PARAMETERS = "getTypeParameters";
    public static final String GET_PARAMETER_NAMES = "getGenericParameterTypes";
    public static final String GET_GENERIC_RETURN_TYPE = "getGenericReturnType";
    public static final String GET_RETURN_TYPE = "getReturnType";
    public static final String GET_ACTUAL_TYPE_ARGUMENTS = "getActualTypeArguments";
    public static final String GET_GENERIC_TYPE = "getGenericType";
    public static final String IS_FINAL = "isFinal";
    public static final String IS_TYPE_VARIABLE = "isTypeVariable";
    public static final String IS_VARIABLE = "isVariable";
    public static final String IS_STATIC = "isStatic";
    public static final String IS_STATIC_CALL = "isStaticCall";
    public static final String IS_INSTANCE_METHOD = "isInstanceMethod";
    public static final String IS_VARARGS = "isVarargs";
    public static final String IS_NORMAL = "isNormal";
    public static final String IS_PUBLIC = "isPublic";
    public static final String IS_PROTECTED = "isProtected";
    public static final String IS_PACKAGE = "isPackage";
    public static final String IS_PRIVATE = "isPrivate";
    public static final String IS_CLASS = "isClass";
    public static final String IS_SPECIAL_CLASS = "isSpeClass";
    public static final String IS_SPECIAL_MU_CLASS = "isSpeMuClass";
    public static final String IS_WILD_CARD = "isWildCard";
    public static final String IS_REF_TYPE = "isRefType";
    public static final String IS_INTERFACE = "isInterface";
    public static final String IS_ENUM = "isEnum";
    public static final String IS_PRIMITIVE = "isPrimitive";
    public static final String IS_ARRAY = "isArray";
    public static final String IS_ANNOTATION = "isAnnotation";
    public static final String MAKE_WILD_CARD = "makeWildCard";
    public static final String MAKE_REF = "makeRefType";
    public static final String IS_INSTANCE = "isInstance";
    public static final String IS_ASSIGNABLE_FROM = "isAssignableFrom";
    public static final String INIT = "init";
    public static final String TRY_WRAP = "tryWrap";
    public static final String DEFAULT_INSTANCE = "defaultInstance";
    public static final String ENUM_VALUE_OF = "enumValueOf";
    public static final String GET_ENUM_CONSTANTS = "getEnumConstants";
    public static final String GET_GENERIC_BOUNDS = "getGenericBounds";
    public static final String GET_BOUNDS = "getBounds";
    public static final String ARRAY_NEW_INSTANCE = "newArrayInstance";
    public static final String ARRAY_GET = "get";
    public static final String ARRAY_SET = "set";
    public static final String ARRAY_GET_LENGTH = "getLength";
    public static final String GET_DECLARING_CLASS = "getDeclaringClass";
    public static final String BIN_QUOT = "binQuot";
    public static final String BIN_MOD = "binMod";
    public static final String PLUS = "plus";
    public static final String MINUS = "minus";
    public static final String MULT = "mult";
    public static final String AND = "and";
    public static final String OR = "or";
    public static final String XOR = "xor";
    public static final String NEG_BIN = "negBin";
    public static final String NEG = "neg";
    public static final String LT = "lt";
    public static final String GT = "gt";
    public static final String LE = "le";
    public static final String GE = "ge";
    public static final String SHIFT_LEFT = "shiftLeft";
    public static final String SHIFT_RIGHT = "shiftRight";
    public static final String BIT_SHIFT_LEFT = "bitShiftLeft";
    public static final String BIT_SHIFT_RIGHT = "bitShiftRight";
    public static final String ROTATE_LEFT = "rotateLeft";
    public static final String ROTATE_RIGHT = "rotateRight";
    public static final String RANDOM = "random";
    public static final String NATIVE_RANDOM = "natRandom";
    public static final String EVAL = "eval";
    public static final String SEED = "seed";
    public static final String SEED_SPEC_GENERATOR = "seedGenerator";
    public static final String SEED_SPEC_DOUBLE_GENERATOR = "seedDoubleGenerator";
    public static final String CST_FALSE_STRING = "false";
    public static final String CST_TRUE_STRING = "true";
    public static final String CST_NULL_STRING = "";
    public static final String CST_NOT_NULL_COVER_STRING = "not null";
    public static final String CST_NULL_COVER_STRING = "null";
    public static final String CST_STATIC_CALL_STRING = "staticCall";
    public static final String CST_STATIC_STRING = "static";
    public static final String CST_INFINITY = "Infinity";
    public static final String CST_NAN = "Nan";
    public static final String CST_EXPONENT = "E";
    public static final String CST_DEFAULT_PKG = "java.lang";
    private DefaultInitialization() {
    }
    public static void basicStandards(BeanLgNames _lgNames) {
        _lgNames.getContent().getCoreNames().setAliasObject(OBJECT);
        _lgNames.getContent().getCoreNames().setAliasVoid(VOID);
        _lgNames.getContent().getCharSeq().setAliasCharSequence(CHAR_SEQUENCE);
        _lgNames.getContent().getCharSeq().setAliasCharSequenceCompareTo(CHAR_SEQUENCE_COMPARE_TO);
        _lgNames.getContent().getCharSeq().setAliasStringCompare(STRING_COMPARE);
        _lgNames.getContent().getCharSeq().setAliasCharSequenceEquals(CHAR_SEQUENCE_EQUALS);
        _lgNames.getContent().getNbAlias().setAliasCompareTo(COMPARE_TO);
        _lgNames.getContent().getNbAlias().setAliasCompare(COMPARE);
        _lgNames.getContent().getNbAlias().setAliasEquals(EQUALS_FCT);
        _lgNames.getContent().getNbAlias().setAliasToStringMethod(TO_STRING_METHOD);
        _lgNames.getContent().getNbAlias().setAliasSignum(SIGNUM);
        _lgNames.getContent().getNbAlias().setAliasToBinString(TO_BIN_STRING);
        _lgNames.getContent().getNbAlias().setAliasToOctString(TO_OCT_STRING);
        _lgNames.getContent().getNbAlias().setAliasToHexString(TO_HEX_STRING);
        _lgNames.getContent().getNbAlias().setAliasValueOfMethod(VALUE_OF_METHOD);
        _lgNames.getContent().getNbAlias().setAliasMaxValueField(MAX_VALUE_FIELD);
        _lgNames.getContent().getNbAlias().setAliasMinValueField(MIN_VALUE_FIELD);
        _lgNames.getContent().getNbAlias().setAliasPlusInfinityField(PLUS_INFINITY_FIELD);
        _lgNames.getContent().getNbAlias().setAliasMinusInfinityField(MINUS_INFINITY_FIELD);
        _lgNames.getContent().getNbAlias().setAliasNanField(NAN_FIELD);
        _lgNames.getContent().getPredefTypes().setAliasIteratorType(ITERATOR_TYPE);
        _lgNames.getContent().getPredefTypes().setAliasIterator(ITERATOR);
        _lgNames.getContent().getPredefTypes().setAliasIterable(ITERABLE);
        _lgNames.getContent().getPredefTypes().setAliasEnumParam(ENUM_PARAM);
        _lgNames.getContent().getPredefTypes().setAliasEnumType(ENUM_TYPE);
        _lgNames.getContent().getCoreNames().setAliasEnums(ENUMS);
        _lgNames.getContent().getCharSeq().setAliasReplacement(REPLACEMENT);
        _lgNames.getContent().getCoreNames().setAliasStore(STORE);
        _lgNames.getContent().getCoreNames().setAliasNullPe(NULL_PE);
        _lgNames.getContent().getCoreNames().setAliasBadEncode(BAD_ENCODE);
        _lgNames.getContent().getCoreNames().setAliasBadIndex(BAD_INDEX);
        _lgNames.getContent().getCoreNames().setAliasBadArgNumber(BAD_ARG_NUMBER);
        _lgNames.getContent().getCoreNames().setAliasAbstractTypeErr(ABSTRACT_TYPE_ERR);
        _lgNames.getContent().getCoreNames().setAliasIllegalType(ILLEGAL_TYPE);
        _lgNames.getContent().getCoreNames().setAliasNonInvokable(NON_INVOKABLE);
        _lgNames.getContent().getCoreNames().setAliasIllegalArg(ILLEGAL_ARG);
        _lgNames.getContent().getCoreNames().setAliasBadSize(BAD_SIZE);
        _lgNames.getContent().getCoreNames().setAliasError(ERROR);
        _lgNames.getContent().getCoreNames().setAliasErrorCurrentStack(ERROR_CURRENT_STACK);
        _lgNames.getContent().getCoreNames().setAliasErrorToString(ERROR_TO_STRING);
        _lgNames.getContent().getCoreNames().setAliasGetMessage(GET_MESSAGE);
        _lgNames.getContent().getCoreNames().setAliasCastType(CAST_TYPE);
        _lgNames.getContent().getCoreNames().setAliasDivisionZero(DIVISION_ZERO);
        _lgNames.getContent().getMathRef().setAliasMath(MATH);
        _lgNames.getContent().getMathRef().setAliasAbs(ABS);
        _lgNames.getContent().getMathRef().setAliasMax(MAX);
        _lgNames.getContent().getMathRef().setAliasMin(MIN);
        _lgNames.getContent().getMathRef().setAliasMod(MOD);
        _lgNames.getContent().getMathRef().setAliasQuot(QUOT);
        _lgNames.getContent().getCoreNames().setAliasSof(SOF);
        _lgNames.getContent().getCoreNames().setAliasNbFormat(NB_FORMAT);
        _lgNames.getContent().getPrimTypes().setAliasPrimBoolean(PRIM_BOOLEAN);
        _lgNames.getContent().getPrimTypes().setAliasPrimByte(PRIM_BYTE);
        _lgNames.getContent().getPrimTypes().setAliasPrimShort(PRIM_SHORT);
        _lgNames.getContent().getPrimTypes().setAliasPrimChar(PRIM_CHAR);
        _lgNames.getContent().getPrimTypes().setAliasPrimInteger(PRIM_INTEGER);
        _lgNames.getContent().getPrimTypes().setAliasPrimLong(PRIM_LONG);
        _lgNames.getContent().getPrimTypes().setAliasPrimFloat(PRIM_FLOAT);
        _lgNames.getContent().getPrimTypes().setAliasPrimDouble(PRIM_DOUBLE);
        _lgNames.getContent().getNbAlias().setAliasBoolean(BOOLEAN);
        _lgNames.getContent().getNbAlias().setAliasByte(BYTE);
        _lgNames.getContent().getNbAlias().setAliasShort(SHORT);
        _lgNames.getContent().getNbAlias().setAliasCharacter(CHARACTER);
        _lgNames.getContent().getNbAlias().setAliasInteger(INTEGER);
        _lgNames.getContent().getNbAlias().setAliasLong(LONG);
        _lgNames.getContent().getNbAlias().setAliasFloat(FLOAT);
        _lgNames.getContent().getNbAlias().setAliasDouble(DOUBLE);
        _lgNames.getContent().getNbAlias().setAliasNumber(NUMBER);
        _lgNames.getContent().getNbAlias().setAliasParseBoolean(PARSE_BOOLEAN);
        _lgNames.getContent().getNbAlias().setAliasParseByte(PARSE_BYTE);
        _lgNames.getContent().getNbAlias().setAliasParseShort(PARSE_SHORT);
        _lgNames.getContent().getNbAlias().setAliasParseInt(PARSE_INT);
        _lgNames.getContent().getNbAlias().setAliasParseLong(PARSE_LONG);
        _lgNames.getContent().getNbAlias().setAliasParseFloat(PARSE_FLOAT);
        _lgNames.getContent().getNbAlias().setAliasParseDouble(PARSE_DOUBLE);
        _lgNames.getContent().getNbAlias().setAliasParseByteOrNull(PARSE_BYTE_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasParseShortOrNull(PARSE_SHORT_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasParseIntOrNull(PARSE_INT_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasParseLongOrNull(PARSE_LONG_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasParseFloatOrNull(PARSE_FLOAT_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasParseDoubleOrNull(PARSE_DOUBLE_OR_NULL);
        _lgNames.getContent().getNbAlias().setAliasBooleanValue(BOOLEAN_VALUE);
        _lgNames.getContent().getNbAlias().setAliasByteValue(BYTE_VALUE);
        _lgNames.getContent().getNbAlias().setAliasShortValue(SHORT_VALUE);
        _lgNames.getContent().getNbAlias().setAliasCharValue(CHAR_VALUE);
        _lgNames.getContent().getNbAlias().setAliasIntValue(INT_VALUE);
        _lgNames.getContent().getNbAlias().setAliasLongValue(LONG_VALUE);
        _lgNames.getContent().getNbAlias().setAliasFloatValue(FLOAT_VALUE);
        _lgNames.getContent().getNbAlias().setAliasDoubleValue(DOUBLE_VALUE);
        _lgNames.getContent().getNbAlias().setAliasDigit(DIGIT);
        _lgNames.getContent().getNbAlias().setAliasIsDigit(IS_DIGIT);
        _lgNames.getContent().getNbAlias().setAliasIsLetter(IS_LETTER);
        _lgNames.getContent().getNbAlias().setAliasIsLetterOrDigit(IS_LETTER_OR_DIGIT);
        _lgNames.getContent().getNbAlias().setAliasIsWordChar(IS_WORD_CHAR);
        _lgNames.getContent().getNbAlias().setAliasIsLowerCase(IS_LOWER_CASE);
        _lgNames.getContent().getNbAlias().setAliasIsUpperCase(IS_UPPER_CASE);
        _lgNames.getContent().getNbAlias().setAliasIsWhitespace(IS_WHITESPACE);
        _lgNames.getContent().getNbAlias().setAliasIsSpace(IS_SPACE);
        _lgNames.getContent().getNbAlias().setAliasIsInfinite(IS_INFINITE);
        _lgNames.getContent().getNbAlias().setAliasIsNan(IS_NAN);
        _lgNames.getContent().getNbAlias().setAliasForDigit(FOR_DIGIT);
        _lgNames.getContent().getNbAlias().setAliasGetDirectionality(GET_DIRECTIONALITY);
        _lgNames.getContent().getReflect().setAliasGetType(GET_TYPE);
        _lgNames.getContent().getNbAlias().setAliasGetCharType(GET_CHAR_TYPE);
        _lgNames.getContent().getCharSeq().setAliasString(STRING);
        _lgNames.getContent().getCharSeq().setAliasStringValueOf(STRING_VALUE_OF);
        _lgNames.getContent().getCharSeq().setAliasLength(LENGTH);
        _lgNames.getContent().getCharSeq().setAliasCharAt(CHAR_AT);
        _lgNames.getContent().getCharSeq().setAliasToCharArray(TO_CHAR_ARRAY);
        _lgNames.getContent().getCharSeq().setAliasCharSequenceToString(CHAR_SEQUENCE_TO_STRING);
        _lgNames.getContent().getCharSeq().setAliasSplit(SPLIT);
        _lgNames.getContent().getCharSeq().setAliasSplitChars(SPLIT_CHARS);
        _lgNames.getContent().getCharSeq().setAliasSplitStrings(SPLIT_STRINGS);
        _lgNames.getContent().getCharSeq().setAliasReplace(REPLACE);
        _lgNames.getContent().getCharSeq().setAliasReplaceString(REPLACE_STRING);
        _lgNames.getContent().getCharSeq().setAliasReplaceMultiple(REPLACE_MULTIPLE);
        _lgNames.getContent().getCharSeq().setAliasEqualsIgnoreCase(EQUALS_IGNORE_CASE);
        _lgNames.getContent().getCharSeq().setAliasCompareToIgnoreCase(COMPARE_TO_IGNORE_CASE);
        _lgNames.getContent().getCharSeq().setAliasContains(CONTAINS);
        _lgNames.getContent().getCharSeq().setAliasEndsWith(ENDS_WITH);
        _lgNames.getContent().getCharSeq().setAliasStartsWith(STARTS_WITH);
        _lgNames.getContent().getCharSeq().setAliasIndexOf(INDEX_OF);
        _lgNames.getContent().getCharSeq().setAliasFormat(FORMAT);
        _lgNames.getContent().getCharSeq().setAliasGetBytes(GET_BYTES);
        _lgNames.getContent().getCharSeq().setAliasIsEmpty(IS_EMPTY);
        _lgNames.getContent().getCharSeq().setAliasLastIndexOf(LAST_INDEX_OF);
        _lgNames.getContent().getCharSeq().setAliasRegionMatches(REGION_MATCHES);
        _lgNames.getContent().getCharSeq().setAliasSubstring(SUBSTRING);
        _lgNames.getContent().getCharSeq().setAliasSubSequence(SUB_SEQUENCE);
        _lgNames.getContent().getCharSeq().setAliasToLowerCase(TO_LOWER_CASE);
        _lgNames.getContent().getCharSeq().setAliasToUpperCase(TO_UPPER_CASE);
        _lgNames.getContent().getNbAlias().setAliasToLowerCaseChar(TO_LOWER_CASE_CHAR);
        _lgNames.getContent().getNbAlias().setAliasToUpperCaseChar(TO_UPPER_CASE_CHAR);
        _lgNames.getContent().getCharSeq().setAliasTrim(TRIM);
        _lgNames.getContent().getCharSeq().setAliasStringBuilder(STRING_BUILDER);
        _lgNames.getContent().getCharSeq().setAliasAppend(APPEND);
        _lgNames.getContent().getCharSeq().setAliasCapacity(CAPACITY);
        _lgNames.getContent().getCharSeq().setAliasClear(CLEAR);
        _lgNames.getContent().getCharSeq().setAliasDelete(DELETE);
        _lgNames.getContent().getCharSeq().setAliasDeleteCharAt(DELETE_CHAR_AT);
        _lgNames.getContent().getCharSeq().setAliasEnsureCapacity(ENSURE_CAPACITY);
        _lgNames.getContent().getCharSeq().setAliasInsert(INSERT);
        _lgNames.getContent().getCharSeq().setAliasReverse(REVERSE);
        _lgNames.getContent().getCharSeq().setAliasSetCharAt(SET_CHAR_AT);
        _lgNames.getContent().getCharSeq().setAliasSetLength(SET_LENGTH);
        _lgNames.getContent().getCharSeq().setAliasSame(SAME);
        _lgNames.getContent().getCharSeq().setAliasTrimToSize(TRIM_TO_SIZE);
        _lgNames.getContent().getCoreNames().setAliasErrorInitClass(ERROR_INIT_CLASS);
        _lgNames.getContent().getCoreNames().setAliasClone(CLONE);
        _lgNames.getContent().getCoreNames().setAliasReadResources(READ_RESOURCES);
        _lgNames.getContent().getCoreNames().setAliasReadResourcesIndex(READ_RESOURCES_INDEX);
        _lgNames.getContent().getCoreNames().setAliasReadResourcesNames(READ_RESOURCES_NAMES);
        _lgNames.getContent().getCoreNames().setAliasReadResourcesNamesLength(READ_RESOURCES_NAMES_LENGTH);
        _lgNames.getContent().getCoreNames().setAliasResources(RESOURCES);
        _lgNames.getContent().getCoreNames().setAliasArrayLength(ARRAY_LENGTH);
        _lgNames.getContent().getPredefTypes().setAliasEnumValues(ENUM_VALUES);
        _lgNames.getContent().getReflect().setAliasInvokeTarget(INVOKE_TARGET);
        _lgNames.getContent().getCoreNames().setAliasGetCause(GET_CAUSE);
        _lgNames.getContent().getReflect().setAliasClassNotFoundError(CLASS_NOT_FOUND_ERROR);
        _lgNames.getContent().getReflect().setAliasGetVariableOwner(GET_VARIABLE_OWNER);
        _lgNames.getContent().getReflect().setAliasGetGenericVariableOwner(GET_GENERIC_VARIABLE_OWNER);
        _lgNames.getContent().getReflect().setAliasGetString(GET_STRING);
        _lgNames.getContent().getReflect().setAliasClassType(CLASS_TYPE);
        _lgNames.getContent().getStackElt().setAliasStackTraceElement(STACK_TRACE_ELEMENT);
        _lgNames.getContent().getStackElt().setAliasCurrentStack(CURRENT_STACK);
        _lgNames.getContent().getStackElt().setAliasCurrentFullStack(CURRENT_FULL_STACK);
        _lgNames.getContent().getStackElt().setAliasStackTraceElementToString(STACK_TRACE_ELEMENT_TO_STRING);
        _lgNames.getContent().getReflect().setAliasFct(FCT);
        _lgNames.getContent().getReflect().setAliasCall(CALL);
        _lgNames.getContent().getReflect().setAliasMetaInfo(META_INFO);
        _lgNames.getContent().getReflect().setAliasInstance(INSTANCE);
        _lgNames.getContent().getReflect().setAliasAnnotationType(ANNOTATION_TYPE);
        _lgNames.getContent().getReflect().setAliasAnnotated(ANNOTATED);
        _lgNames.getContent().getReflect().setAliasGetAnnotations(GET_ANNOTATIONS);
        _lgNames.getContent().getReflect().setAliasGetDefaultValue(GET_DEFAULT_VALUE);
        _lgNames.getContent().getReflect().setAliasGetAnnotationsParameters(GET_ANNOTATIONS_PARAMETERS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredConstructors(GET_DECLARED_CONSTRUCTORS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredFields(GET_DECLARED_FIELDS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredAnonymousTypes(GET_DECLARED_ANONYMOUS_TYPES);
        _lgNames.getContent().getReflect().setAliasGetDeclaredAnonymousLambda(GET_DECLARED_ANONYMOUS_LAMBDA);
        _lgNames.getContent().getReflect().setAliasGetDeclaredAnonymousLambdaLocalVars(GET_DECLARED_ANONYMOUS_LAMBDA_LOCAL_VARS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredAnonymousLambdaLocalVarsNb(GET_DECLARED_ANONYMOUS_LAMBDA_LOCAL_VARS_NB);
        _lgNames.getContent().getReflect().setAliasGetDeclaredAnonymousLambdaLoopVars(GET_DECLARED_ANONYMOUS_LAMBDA_LOOP_VARS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredLocalTypes(GET_DECLARED_LOCAL_TYPES);
        _lgNames.getContent().getReflect().setAliasGetDeclaredBlocks(GET_DECLARED_BLOCKS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredSwitchMethods(GET_DECLARED_SWITCH_METHODS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredMethods(GET_DECLARED_METHODS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredExplicits(GET_DECLARED_EXPLICITS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredImplicits(GET_DECLARED_IMPLICITS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredTrueOperators(GET_DECLARED_TRUE_OPERATORS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredFalseOperators(GET_DECLARED_FALSE_OPERATORS);
        _lgNames.getContent().getReflect().setAliasGetDeclaredStaticMethods(GET_DECLARED_STATIC_METHODS);
        _lgNames.getContent().getReflect().setAliasMakeGeneric(MAKE_GENERIC);
        _lgNames.getContent().getReflect().setAliasGetAllClasses(GET_ALL_CLASSES);
        _lgNames.getContent().getReflect().setAliasGetOperators(GET_OPERATORS);
        _lgNames.getContent().getReflect().setAliasConstructor(CONSTRUCTOR);
        _lgNames.getContent().getReflect().setAliasField(FIELD);
        _lgNames.getContent().getReflect().setAliasMethod(METHOD);
        _lgNames.getContent().getReflect().setAliasInvoke(INVOKE);
        _lgNames.getContent().getReflect().setAliasInvokeDirect(INVOKE_DIRECT);
        _lgNames.getContent().getReflect().setAliasNewInstance(NEW_INSTANCE);
        _lgNames.getContent().getReflect().setAliasIsAbstract(IS_ABSTRACT);
        _lgNames.getContent().getReflect().setAliasGetFileName(GET_FILE_NAME);
        _lgNames.getContent().getReflect().setAliasGetName(GET_NAME);
        _lgNames.getContent().getReflect().setAliasGetPrettyName(GET_PRETTY_NAME);
        _lgNames.getContent().getReflect().setAliasGetPrettySingleName(GET_PRETTY_SINGLE_NAME);
        _lgNames.getContent().getReflect().setAliasGetField(GET_FIELD);
        _lgNames.getContent().getReflect().setAliasSetField(SET_FIELD);
        _lgNames.getContent().getReflect().setAliasGetClass(GET_CLASS);
        _lgNames.getContent().getReflect().setAliasGetEnclosingType(GET_ENCLOSING_TYPE);
        _lgNames.getContent().getReflect().setAliasGetDeclaredClasses(GET_DECLARED_CLASSES);
        _lgNames.getContent().getReflect().setAliasForName(FOR_NAME);
        _lgNames.getContent().getCoreNames().setAliasRange(RANGE);
        _lgNames.getContent().getCoreNames().setAliasRangeLower(RANGE_LOWER);
        _lgNames.getContent().getCoreNames().setAliasRangeUpper(RANGE_UPPER);
        _lgNames.getContent().getCoreNames().setAliasRangeUnlimited(RANGE_UNLIMITED);
        _lgNames.getContent().getCoreNames().setAliasRangeUnlimitedStep(RANGE_UNLIMITED_STEP);
        _lgNames.getContent().getCoreNames().setAliasObjectsUtil(OBJECTS_UTIL);
        _lgNames.getContent().getCoreNames().setAliasStringUtil(STRING_UTIL);
        _lgNames.getContent().getCoreNames().setAliasStringUtilValueOf(STRING_UTIL_VALUE_OF);
        _lgNames.getContent().getCoreNames().setAliasSameRef(SAME_REF);
        _lgNames.getContent().getCoreNames().setAliasGetParent(GET_PARENT);
        _lgNames.getContent().getCoreNames().setAliasSetParent(SET_PARENT);
        _lgNames.getContent().getCoreNames().setAliasGetFct(GET_FCT);
        _lgNames.getContent().getPredefTypes().setAliasNext(NEXT);
        _lgNames.getContent().getPredefTypes().setAliasHasNext(HAS_NEXT);
        _lgNames.getContent().getPredefTypes().setAliasIterableTable(ITERABLE_TABLE);
        _lgNames.getContent().getPredefTypes().setAliasIteratorTable(ITERATOR_TABLE);
        _lgNames.getContent().getPredefTypes().setAliasIteratorTableType(ITERATOR_TABLE_TYPE);
        _lgNames.getContent().getPredefTypes().setAliasHasNextPair(HAS_NEXT_PAIR);
        _lgNames.getContent().getPredefTypes().setAliasNextPair(NEXT_PAIR);
        _lgNames.getContent().getPredefTypes().setAliasPairType(PAIR_TYPE);
        _lgNames.getContent().getPredefTypes().setAliasGetFirst(GET_FIRST);
        _lgNames.getContent().getPredefTypes().setAliasGetSecond(GET_SECOND);
        _lgNames.getContent().getCoreNames().setAliasName(NAME);
        _lgNames.getContent().getCoreNames().setAliasOrdinal(ORDINAL);
        _lgNames.getContent().getPredefTypes().setAliasEnumName(ENUM_NAME);
        _lgNames.getContent().getPredefTypes().setAliasEnumOrdinal(ENUM_ORDINAL);
        _lgNames.getContent().getPredefTypes().setAliasEnumPredValueOf(ENUM_PRED_VALUE_OF);
        _lgNames.getContent().getPredefTypes().setAliasIterableVar(ITERABLE_VAR);
        _lgNames.getContent().getPredefTypes().setAliasIteratorTypeVar(ITERATOR_TYPE_VAR);
        _lgNames.getContent().getPredefTypes().setAliasIterableTableVarFirst(ITERABLE_TABLE_VAR_FIRST);
        _lgNames.getContent().getPredefTypes().setAliasIterableTableVarSecond(ITERABLE_TABLE_VAR_SECOND);
        _lgNames.getContent().getPredefTypes().setAliasIteratorTableTypeVarFirst(ITERATOR_TABLE_TYPE_VAR_FIRST);
        _lgNames.getContent().getPredefTypes().setAliasIteratorTableTypeVarSecond(ITERATOR_TABLE_TYPE_VAR_SECOND);
        _lgNames.getContent().getPredefTypes().setAliasPairTypeVarFirst(PAIR_TYPE_VAR_FIRST);
        _lgNames.getContent().getPredefTypes().setAliasPairTypeVarSecond(PAIR_TYPE_VAR_SECOND);
        _lgNames.getContent().getPredefTypes().setAliasEnumParamVar(ENUM_PARAM_VAR);
        _lgNames.getContent().getPredefTypes().setAliasSeedGenerator(SEED_GENERATOR);
        _lgNames.getContent().getPredefTypes().setAliasSeedDoubleGenerator(SEED_DOUBLE_GENERATOR);
        _lgNames.getContent().getPredefTypes().setAliasSeedGet(SEED_GET);
        _lgNames.getContent().getCharSeq().setAliasGetOldString(GET_OLD_STRING);
        _lgNames.getContent().getCharSeq().setAliasGetNewString(GET_NEW_STRING);
        _lgNames.getContent().getReflect().setAliasGetSuperClass(GET_SUPER_CLASS);
        _lgNames.getContent().getReflect().setAliasGetGenericSuperClass(GET_GENERIC_SUPER_CLASS);
        _lgNames.getContent().getReflect().setAliasGetInterfaces(GET_INTERFACES);
        _lgNames.getContent().getReflect().setAliasGetGenericInterfaces(GET_GENERIC_INTERFACES);
        _lgNames.getContent().getReflect().setAliasGetLowerBounds(GET_LOWER_BOUNDS);
        _lgNames.getContent().getReflect().setAliasGetUpperBounds(GET_UPPER_BOUNDS);
        _lgNames.getContent().getReflect().setAliasGetComponentType(GET_COMPONENT_TYPE);
        _lgNames.getContent().getReflect().setAliasMakeArray(MAKE_ARRAY);
        _lgNames.getContent().getReflect().setAliasGetParameterTypes(GET_PARAMETER_TYPES);
        _lgNames.getContent().getReflect().setAliasGetTypeParameters(GET_TYPE_PARAMETERS);
        _lgNames.getContent().getReflect().setAliasGetParameterNames(GET_PARAMETER_NAMES);
        _lgNames.getContent().getReflect().setAliasGetGenericReturnType(GET_GENERIC_RETURN_TYPE);
        _lgNames.getContent().getReflect().setAliasGetReturnType(GET_RETURN_TYPE);
        _lgNames.getContent().getReflect().setAliasGetActualTypeArguments(GET_ACTUAL_TYPE_ARGUMENTS);
        _lgNames.getContent().getReflect().setAliasGetType(GET_TYPE);
        _lgNames.getContent().getReflect().setAliasGetGenericType(GET_GENERIC_TYPE);
        _lgNames.getContent().getReflect().setAliasIsFinal(IS_FINAL);
        _lgNames.getContent().getReflect().setAliasIsTypeVariable(IS_TYPE_VARIABLE);
        _lgNames.getContent().getReflect().setAliasIsVariable(IS_VARIABLE);
        _lgNames.getContent().getReflect().setAliasIsStatic(IS_STATIC);
        _lgNames.getContent().getReflect().setAliasIsStaticCall(IS_STATIC_CALL);
        _lgNames.getContent().getReflect().setAliasIsInstanceMethod(IS_INSTANCE_METHOD);
        _lgNames.getContent().getReflect().setAliasIsVarargs(IS_VARARGS);
        _lgNames.getContent().getReflect().setAliasIsNormal(IS_NORMAL);
        _lgNames.getContent().getReflect().setAliasIsPublic(IS_PUBLIC);
        _lgNames.getContent().getReflect().setAliasIsProtected(IS_PROTECTED);
        _lgNames.getContent().getReflect().setAliasIsPackage(IS_PACKAGE);
        _lgNames.getContent().getReflect().setAliasIsPrivate(IS_PRIVATE);
        _lgNames.getContent().getReflect().setAliasIsClass(IS_CLASS);
        _lgNames.getContent().getReflect().setAliasIsSpecialClass(IS_SPECIAL_CLASS);
        _lgNames.getContent().getReflect().setAliasIsSpecialMuClass(IS_SPECIAL_MU_CLASS);
        _lgNames.getContent().getReflect().setAliasIsWildCard(IS_WILD_CARD);
        _lgNames.getContent().getReflect().setAliasIsRefType(IS_REF_TYPE);
        _lgNames.getContent().getReflect().setAliasIsInterface(IS_INTERFACE);
        _lgNames.getContent().getReflect().setAliasIsEnum(IS_ENUM);
        _lgNames.getContent().getReflect().setAliasIsPrimitive(IS_PRIMITIVE);
        _lgNames.getContent().getReflect().setAliasIsArray(IS_ARRAY);
        _lgNames.getContent().getReflect().setAliasIsAnnotation(IS_ANNOTATION);
        _lgNames.getContent().getReflect().setAliasMakeWildCard(MAKE_WILD_CARD);
        _lgNames.getContent().getReflect().setAliasMakeRef(MAKE_REF);
        _lgNames.getContent().getReflect().setAliasIsInstance(IS_INSTANCE);
        _lgNames.getContent().getReflect().setAliasIsAssignableFrom(IS_ASSIGNABLE_FROM);
        _lgNames.getContent().getReflect().setAliasInit(INIT);
        _lgNames.getContent().getReflect().setAliasTryWrap(TRY_WRAP);
        _lgNames.getContent().getReflect().setAliasDefaultInstance(DEFAULT_INSTANCE);
        _lgNames.getContent().getReflect().setAliasEnumValueOf(ENUM_VALUE_OF);
        _lgNames.getContent().getReflect().setAliasGetEnumConstants(GET_ENUM_CONSTANTS);
        _lgNames.getContent().getReflect().setAliasGetGenericBounds(GET_GENERIC_BOUNDS);
        _lgNames.getContent().getReflect().setAliasGetBounds(GET_BOUNDS);
        _lgNames.getContent().getReflect().setAliasArrayNewInstance(ARRAY_NEW_INSTANCE);
        _lgNames.getContent().getReflect().setAliasArrayGet(ARRAY_GET);
        _lgNames.getContent().getReflect().setAliasArraySet(ARRAY_SET);
        _lgNames.getContent().getReflect().setAliasArrayGetLength(ARRAY_GET_LENGTH);
        _lgNames.getContent().getReflect().setAliasGetDeclaringClass(GET_DECLARING_CLASS);
        _lgNames.getContent().getMathRef().setAliasBinQuot(BIN_QUOT);
        _lgNames.getContent().getMathRef().setAliasBinMod(BIN_MOD);
        _lgNames.getContent().getMathRef().setAliasPlus(PLUS);
        _lgNames.getContent().getMathRef().setAliasMinus(MINUS);
        _lgNames.getContent().getMathRef().setAliasMult(MULT);
        _lgNames.getContent().getMathRef().setAliasAnd(AND);
        _lgNames.getContent().getMathRef().setAliasOr(OR);
        _lgNames.getContent().getMathRef().setAliasXor(XOR);
        _lgNames.getContent().getMathRef().setAliasNegBin(NEG_BIN);
        _lgNames.getContent().getMathRef().setAliasNeg(NEG);
        _lgNames.getContent().getMathRef().setAliasLt(LT);
        _lgNames.getContent().getMathRef().setAliasGt(GT);
        _lgNames.getContent().getMathRef().setAliasLe(LE);
        _lgNames.getContent().getMathRef().setAliasGe(GE);
        _lgNames.getContent().getMathRef().setAliasShiftLeft(SHIFT_LEFT);
        _lgNames.getContent().getMathRef().setAliasShiftRight(SHIFT_RIGHT);
        _lgNames.getContent().getMathRef().setAliasBitShiftLeft(BIT_SHIFT_LEFT);
        _lgNames.getContent().getMathRef().setAliasBitShiftRight(BIT_SHIFT_RIGHT);
        _lgNames.getContent().getMathRef().setAliasRotateLeft(ROTATE_LEFT);
        _lgNames.getContent().getMathRef().setAliasRotateRight(ROTATE_RIGHT);
        _lgNames.getContent().getMathRef().setAliasRandom(RANDOM);
        _lgNames.getContent().getMathRef().setAliasNativeRandom(NATIVE_RANDOM);
        _lgNames.getContent().getMathRef().setAliasEval(EVAL);
        _lgNames.getContent().getMathRef().setAliasSeed(SEED);
        _lgNames.getContent().getMathRef().setAliasSeedSpecGenerator(SEED_SPEC_GENERATOR);
        _lgNames.getContent().getMathRef().setAliasSeedSpecDoubleGenerator(SEED_SPEC_DOUBLE_GENERATOR);
        _lgNames.getDisplayedStrings().setFalseString(CST_FALSE_STRING);
        _lgNames.getDisplayedStrings().setTrueString(CST_TRUE_STRING);
        _lgNames.getDisplayedStrings().setNullString(CST_NULL_STRING);
        _lgNames.getDisplayedStrings().setNotNullCoverString(CST_NOT_NULL_COVER_STRING);
        _lgNames.getDisplayedStrings().setNullCoverString(CST_NULL_COVER_STRING);
        _lgNames.getDisplayedStrings().setStaticCallString(CST_STATIC_CALL_STRING);
        _lgNames.getDisplayedStrings().setStaticString(CST_STATIC_STRING);
        _lgNames.getDisplayedStrings().setInfinity(CST_INFINITY);
        _lgNames.getDisplayedStrings().setNan(CST_NAN);
        _lgNames.getDisplayedStrings().setExponent(CST_EXPONENT);
        _lgNames.getContent().setDefaultPkg(CST_DEFAULT_PKG);
    }
}
