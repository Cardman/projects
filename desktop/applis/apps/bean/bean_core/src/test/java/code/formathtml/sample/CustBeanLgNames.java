package code.formathtml.sample;

import code.bean.Bean;
import code.bean.nat.*;
import code.bean.nat.analyze.NatConfigurationCore;
import code.bean.nat.exec.NatImportingPage;
import code.bean.nat.exec.NatImportingPageAbs;
import code.bean.nat.exec.NatRendStackCall;
import code.bean.nat.exec.blocks.NatDocumentBlock;
import code.bean.nat.fwd.AbstractNatBlockBuilder;
import code.bean.nat.fwd.DefNatBlockBuilder;
import code.expressionlanguage.stds.StandardConstructor;
import code.expressionlanguage.structs.Struct;
import code.formathtml.Configuration;
import code.util.*;

public final class CustBeanLgNames extends BeanNatCommonLgNames {

    private static final String TYPE_INTS = "code.formathtml.classes.Ints";
    private static final String GET_VALUE = "getValue";
    private static final String EQ = "eq";
    private static final String REMOVE_AND_EXIST_AFTER = "removeAndExistAfter";
    private static final String CLEAR = "clear";
    private static final String LAST = "last";
    private static final String ADD = "add";
    private static final String SUM = "sum";
    private static final String NB_BEANS = "NB_BEANS";
    private static final String UPDATE_VALUE = "updateValue";
    private static final String SET_STRING = "setString";
    private static final String GET_STRING_ELT = "getStringElt";
    private static final String SUMMUM = "summum";
    private static final String GET_STRING = "getString";
    private static final String PRIVATE_METHOD = "privateMethod";
    private static final String INTERN_METHOD = "internMethod";
    private static final String STRINGS = "strings";
    private static final String STRINGS_SEC = "strings2";
    private static final String STRINGS_SE = "strings3";
    private static final String STRING_FCT = "string";
    private static final String MY_CHAR = "myChar";
    private static final String INTEGER = "integer";
    private static final String DISPLAYED = "displayed";
    private static final String SET_TYPED_TEXT = "setTypedText";
    private static final String SET_RADIO_LONG = "setRadioLong";
    private static final String SET_COMBO_NUMBERS = "setComboNumbers";
    private static final String SET_COMBO_NUMBER_TWO = "setComboNumberTwo";
    private static final String SET_COMBO_NUMBER = "setComboNumber";
    private static final String SET_CHECK_BOX = "setCheckBox";
    private static final String SETUP = "setup";
    private static final String GET_RADIO_LONG = "getRadioLong";
    private static final String GET_TYPED_TEXT = "getTypedText";
    private static final String GET_TYPED_STRING = "getTypedString";
    private static final String GET_COMBOBOX_MAP = "getComboboxMap";
    private static final String GET_COMBOBOX = "getCombobox";
    private static final String GET_COMBO_NUMBERS = "getComboNumbers";
    private static final String GET_COMBO_NUMBER_TWO = "getComboNumberTwo";
    private static final String GET_COMBO_NUMBER = "getComboNumber";
    private static final String IS_CHECK_BOX = "isCheckBox";
    private static final String GET_DATA_BASE = "getDataBase";
    private static final String VALIDATE_STRINGS_SAVE = "validateStringsSave";
    private static final String VALIDATE_MAP = "validateMap";
    private static final String VALIDATE_INTS_SAVE = "validateIntsSave";
    private static final String GO_TWO_ARGS = "goTwoArgs";
    private static final String GET_STRINGS = "getStrings";
    private static final String GET_TREE = "getTree";
    private static final String ARRAY_INT = "arrayInt";
    private static final String MY_ENUM_TWO = "myEnumTwo";
    private static final String MY_ENUM_THREE = "myEnumThree";
    private static final String MY_ENUM_ONE = "myEnumOne";
    private static final String GET_DEFAULT_CHOICES = "getDefaultChoices";
    private static final String SELECTED_STRINGS = "selectedStrings";
    private static final String SETTER = "setter";
    private static final String SET_INVISIBLE_INT_FIELD = "setInvisibleIntField";
    private static final String SET_INVISIBLE_FIELD = "setInvisibleField";
    private static final String NUMBERS_TWO = "numbersTwo";
    private static final String INDEX_TWO = "indexTwo";
    private static final String INDEX = "index";
    private static final String VALIDATE = "validate";
    private static final String SET_TYPED_STRING = "setTypedString";
    private static final String SET_TYPED_INT = "setTypedInt";
    private static final String GO_TEXT_AREA = "goTextArea";
    private static final String GO = "go";
    private static final String GO2 = "go2";
    private static final String GO3 = "go3";
    private static final String GET_CHOSEN_NUMBERS = "getChosenNumbers";
    private static final String TYPED_STRING = "typedString";
    private static final String TYPED_STRING2 = "typedString2";
    private static final String TYPED_INT = "typedInt";
    private static final String TYPED_INT2 = "typedInt2";
    private static final String TYPED_SHORT = "typedShort";
    private static final String RATE = "rate";
    private static final String NULLABLE_INT = "nullableInt";
    private static final String NULLABLE_INT_2 = "nullableInt2";
    private static final String NULLABLE_CHECKBOX = "nullableCheckbox";
    private static final String FIELD = "field";
    private static final String CHOOSE = "choose";
    private static final String CHECKED = "checked";
    private static final String VALIDATE_STRINGS = "validateStrings";
    private static final String GET_TRANS = "getTrans";
    private static final String GET_STANDARD = "getStandard";
    private static final String GET_SPAN_CLASSES = "getSpanClasses";
    private static final String GET_SPAN_CLASS = "getSpanClass";
    private static final String GET_COMPOSITES = "getComposites";
    private static final String GET_DEFAULT_CHOICE = "getDefaultChoice";
    private static final String GET_COMPOSITE = "getComposite";
    private static final String HAS_MORE_THAN_ONE = "hasMoreThanOne";
    private static final String INVOKE_METHOD = "invokeMethod";
    private static final String GO_TO_PAGE = "goToPage";
    private static final String GO_TO_PAGE3 = "goToPage3";
    private static final String GO_TO_PAGE2 = "goToPage2";
    private static final String GO_TO_PAGE1 = "goToPage1";
    private static final String GO_TO_NULL_PAGE = "goToNullPage";
    private static final String GET_DOUBLE = "getDouble";
    private static final String GET_LIST = "getList";
    private static final String TREE = "tree";
    private static final String TRANSLATIONS = "translations";
    private static final String SELECTED_STRING = "selectedString";
    private static final String NUMBERS = "numbers";
    private static final String MESSAGE = "message";
    private static final String MAP = "map";
    private static final String COMPOSITE = "composite";
    private static final String COMMON_CLASS = "commonClass";
    private static final String COMBOBOX = "combobox";
    private static final String CHOSEN_NUMBERS = "chosenNumbers";
    private static final String CHOSEN_NUMBERS_NULL = "chosenNumbersNull";
    private static final String CHOSEN_NUMBER = "chosenNumber";
    private static final String GET = "get";
    private static final String GET_REVERSE = "getReverse";
    private static final String TYPE_SIMPLE_DATA_BASE = "code.formathtml.classes.SimpleDataBase";
    private static final String TYPE_NAT_TREE_MAP_STRING_INTEGER = "code.formathtml.classes.NatTreeMapStringInteger";
    private static final String TYPE_RATE_EQ = "code.formathtml.classes.RateEq";
    private static final String TYPE_ENCAPS_FIELDS = "code.formathtml.classes.EncapsFields";
    private static final String TYPE_PICKABLE_LIST = "code.formathtml.classes.PickableList";
    private static final String TYPE_GENE_OBJECTS = "code.formathtml.classes.GeneObjects";
    private static final String TYPE_GENE_OBJS = "code.formathtml.classes.GeneObjs";
    private static final String TYPE_ENUM_NUMBERS = "code.formathtml.classes.EnumNumbers";
    private static final String TYPE_ENUM_NUMBER = "code.formathtml.classes.EnumNumber";
    private static final String TYPE_BEAN_UTIL = "code.formathtml.classes.BeanUtil";
    private static final String TYPE_COMPOSITE = "code.formathtml.classes.Composite";
    private static final String TYPE_BEAN_EIGHT = "code.formathtml.classes.BeanEight";
    private static final String TYPE_BEAN_SEVEN = "code.formathtml.classes.BeanSeven";
    private static final String TYPE_BEAN_SIX = "code.formathtml.classes.BeanSix";
    private static final String TYPE_BEAN_FIVE = "code.formathtml.classes.BeanFive";
    private static final String TYPE_BEAN_FOUR = "code.formathtml.classes.BeanFour";
    private static final String TYPE_BEAN_THREE = "code.formathtml.classes.BeanThree";
    private static final String TYPE_BEAN_TWO = "code.formathtml.classes.BeanTwo";
    private static final String TYPE_BEAN_ONE = "code.formathtml.classes.BeanOne";
    private static final String TYPE_UNSELECTED_RADIO = "code.formathtml.classes.UnselectedRadio";
    private static final String TYPE_MY_VALIDATOR_ENUMS = "code.formathtml.classes.MyValidatorEnums";
    private static final String TYPE_MY_VALIDATOR_ENUM = "code.formathtml.classes.MyValidatorEnum";
    private static final String TYPE_MY_VALIDATOR = "code.formathtml.classes.MyValidator";
    private static final String TYPE_STRING_LIST = "code.util.StringList";
    private static final String TYPE_STRING_LIST_SEC = "code.util.StringList2";
    private static final String ALIAS_LS = "ls";
    private static final String ALIAS_LSE = "lse";

    public CustBeanLgNames() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        cl_.getDirectInterfaces().add(TYPE_COUNTABLE);
        getStds().addEntry(TYPE_INTS, cl_);
        getIterables().put(TYPE_INTS, PRIM_INTEGER);
    }
    @Override
    public void buildOther() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        cl_.getDirectInterfaces().add(TYPE_COUNTABLE);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(GET, STRING, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_STRING_LIST, cl_);
        getIterables().put(TYPE_STRING_LIST, STRING);
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        cl_.getDirectInterfaces().add(TYPE_COUNTABLE);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(GET, STRING, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_STRING_LIST_SEC, cl_);
        getIterables().put(TYPE_STRING_LIST_SEC, OBJECT);
        buildBeanOne();
        buildBeanTwo();
        buildBeanThree();
        buildBeanFour();
        buildBeanFive();
        buildBeanSix();
        buildBeanSeven();
        buildBeanEight();
        buildComposite();
        buildBeanUtil();
        buildEnumNumber();
        buildEnumNumbers();
        buildEncapsFields();
        buildGeneObjs();
        buildGeneObjects();
        buildPickableList();
        buildPickableList();
        buildRate();
        buildRateEq();
        buildSimpleDataBase();
        buildNatTreeMapStringInteger();
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_VALIDATOR);
        getStds().addEntry(TYPE_MY_VALIDATOR, cl_);
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_VALIDATOR);
        getStds().addEntry(TYPE_MY_VALIDATOR_ENUM, cl_);
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_VALIDATOR);
        getStds().addEntry(TYPE_MY_VALIDATOR_ENUMS, cl_);
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_VALIDATOR);
        getStds().addEntry(TYPE_UNSELECTED_RADIO, cl_);
    }
    private void buildBeanOne() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(CHOSEN_NUMBER, STRING, new SampleStrFct(),new SampleStrFct()));
        fields_.add(new StandardField(CHOSEN_NUMBERS, TYPE_ENUM_NUMBERS, null,null));
        fields_.add(new StandardField(COMBOBOX, TYPE_ENUM_NUMBERS, null,null));
        fields_.add(new StandardField(COMMON_CLASS, STRING, null,null));
        fields_.add(new StandardField(COMPOSITE,TYPE_COMPOSITE, new SampleCompositeInfo(),null));
        fields_.add(new StandardField(MAP, TYPE_MAP, new SampleBeanOneMap(),null));
        fields_.add(new StandardField(MESSAGE, STRING, new SampleBeanOneMessage(), null));
        fields_.add(new StandardField(NUMBERS, TYPE_MAP, null,null));
        fields_.add(new StandardField(SELECTED_STRING, STRING, new SampleBeanOneSelectedString(), new SampleBeanOneSelectedString2()));
        fields_.add(new StandardField(TRANSLATIONS, TYPE_MAP, null,null));
        fields_.add(new StandardField(TREE, TYPE_MAP, new SampleBeanOneTree(),null));
        fields_.add(new StandardField(STRINGS, TYPE_STRING_LIST, null,null));
        fields_.add(new StandardField(STRINGS_SEC, TYPE_STRING_LIST_SEC, null,null));
        fields_.add(new StandardField(GO_TO_PAGE2, TYPE_STRING_LIST_SEC, new CstNatCaller("page2.html"),null));
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(GO_TO_PAGE3, STRING, new CstNatCaller("page3.html"));
        methods_.add( method_);
        method_ = new SpecNatMethod(GO_TO_PAGE1, STRING, new CstNatCaller("page1.html"));
        methods_.add( method_);
        method_ = new SpecNatMethod(GET_LIST, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(GET_DOUBLE, PRIM_INTEGER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GO_TO_NULL_PAGE, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(OBJECT);
        method_ = new SpecNatMethod("length", PRIM_INTEGER, new SampleBeanOneLen());
        methods_.add( method_);
        //params_ = new StringList(OBJECT,OBJECT);
        method_ = new SpecNatMethod("length2", PRIM_INTEGER, new SampleBeanOneLen());
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GO_TO_PAGE, STRING, new CstNatCaller("page1.html"));
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
//        method_ = new SpecNatMethod(GO_TO_PAGE, STRING, false, MethodModifier.NORMAL, null);
//        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(INVOKE_METHOD, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(HAS_MORE_THAN_ONE, PRIM_BOOLEAN, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMPOSITE, TYPE_COMPOSITE, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_DEFAULT_CHOICE, TYPE_ENUM_NUMBER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMPOSITES, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(GET_SPAN_CLASS, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG, PRIM_LONG, PRIM_LONG);
        method_ = new SpecNatMethod(GET_SPAN_CLASSES, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(GET_STANDARD, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(GET_TRANS, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE_STRINGS, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_ONE, cl_);
    }
    private void buildBeanTwo() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(GO_TO_PAGE2, TYPE_STRING_LIST_SEC, new CstNatCaller("page2.html"),null));
        fields_.add(new StandardField(COMPOSITE,TYPE_COMPOSITE, new SampleCompositeInfo(),null));
//        fields_.add(new StandardField(CHECKED, PRIM_BOOLEAN,false,false, new SampleBeanTwoChecked(),new SampleBeanTwoCheckedSet()));
        fields_.add(new StandardField(CHOOSE, STRING, null,null));
        fields_.add(new StandardField(CHOSEN_NUMBER, TYPE_ENUM_NUMBER, null,null));
        fields_.add(new StandardField(FIELD, STRING, null,null));
        fields_.add(new StandardField(NULLABLE_CHECKBOX, PRIM_BOOLEAN, null,null));
//        fields_.add(new StandardField(NULLABLE_INT, TYPE_RATE,false,false, new NaNuIntGet(), new NaNuIntSet()));
//        fields_.add(new StandardField(NULLABLE_INT_2, TYPE_RATE,false,false, new NaNuIntGet(), new NaNuIntSet()));
        fields_.add(new StandardField(RATE, TYPE_RATE, null,null));
        fields_.add(new StandardField(TYPED_INT, PRIM_INTEGER, new SampleStrFct(),new SampleStrFct()));
//        fields_.add(new StandardField(TYPED_INT2, PRIM_INTEGER,false,false,new SampleBeanTwoTypedInt(),new SampleBeanTwoTypedIntSet()));
//        fields_.add(new StandardField(TYPED_SHORT, PRIM_INTEGER,false,false, new SampleBeanTwoTypedShort(),new SampleBeanTwoTypedShortSet()));
//        fields_.add(new StandardField(TYPED_STRING, STRING,false,false, new SampleBeanTwoTypedString(),new SampleBeanTwoTypedStringSet()));
        fields_.add(new StandardField(TYPED_STRING2, STRING, new SampleBeanTwoTypedString2(),new SampleBeanTwoTypedStringSet2()));
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_CHOSEN_NUMBERS, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GO, STRING, new SampleBeanTwoGo());
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(GO, STRING, new SampleBeanTwoGo());
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(GO2, STRING, new SampleStrFct());
        methods_.add( method_);
        method_ = new SpecNatMethod(GO3, STRING, new SampleStrFctEmp());
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GO_TEXT_AREA, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(SET_TYPED_INT, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_TYPED_STRING, VOID, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_TWO, cl_);
    }
    private void buildBeanThree() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(INDEX, PRIM_INTEGER, null,null));
        fields_.add(new StandardField(INDEX_TWO, PRIM_INTEGER, null,null));
        fields_.add(new StandardField(NUMBERS, TYPE_LIST, null,null));
        fields_.add(new StandardField(NUMBERS_TWO, TYPE_LIST, null,null));
        getStds().addEntry(TYPE_BEAN_THREE, cl_);
    }
    private void buildBeanFour() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(SET_INVISIBLE_FIELD, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(SET_INVISIBLE_INT_FIELD, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SETTER, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_FOUR, cl_);
    }
    private void buildBeanFive() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(CHOSEN_NUMBERS, TYPE_ENUM_NUMBERS, null,null));
        fields_.add(new StandardField(CHOSEN_NUMBERS_NULL, TYPE_LIST, null,null));
        fields_.add(new StandardField(COMBOBOX, TYPE_ENUM_NUMBERS, null,null));
        fields_.add(new StandardField(SELECTED_STRINGS, TYPE_STRING_LIST, null,null));
        fields_.add(new StandardField(TRANSLATIONS, TYPE_MAP, null,null));
        fields_.add(new StandardField(TREE, TYPE_MAP, null,null));
        //params_ = new StringList();
        method_ = new SpecNatMethod(GO, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_DEFAULT_CHOICES, TYPE_LIST, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_FIVE, cl_);
    }
    private void buildBeanSix() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(MY_ENUM_ONE, TYPE_ENUM_NUMBER, null,null));
        fields_.add(new StandardField(MY_ENUM_THREE, TYPE_ENUM_NUMBER, null,null));
        fields_.add(new StandardField(MY_ENUM_TWO, TYPE_ENUM_NUMBER, null,null));
        getStds().addEntry(TYPE_BEAN_SIX, cl_);
    }
    private void buildBeanSeven() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        fields_.add(new StandardField(ARRAY_INT, TYPE_INTS, null,null));
        fields_.add(new StandardField(COMPOSITE, TYPE_COMPOSITE, null,null));
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_TREE, TYPE_NAT_TREE_MAP_STRING_INTEGER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_STRINGS, TYPE_STRING_LIST, null);
        methods_.add( method_);
//        //params_ = new StringList(getContent().getNbAlias().getAliasDouble());
//        method_ = new SpecNatMethod(GET_DOUBLE,params_, getContent().getPrimTypes().getAliasPrimDouble(), false, MethodModifier.NORMAL);
//        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER, PRIM_INTEGER);
        method_ = new SpecNatMethod(GO_TWO_ARGS, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE_INTS_SAVE, VOID, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE_MAP, VOID, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE_STRINGS, VOID, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(VALIDATE_STRINGS_SAVE, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_SEVEN, cl_);
    }
    private void buildBeanEight() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_BEAN);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_DATA_BASE, TYPE_SIMPLE_DATA_BASE, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(IS_CHECK_BOX, PRIM_BOOLEAN, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBER, TYPE_ENUM_NUMBER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBER_TWO, TYPE_ENUM_NUMBER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBERS, TYPE_ENUM_NUMBERS, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBOBOX, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMPOSITES, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBOBOX_MAP, TYPE_MAP, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_TYPED_STRING, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_TYPED_TEXT, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_RADIO_LONG, PRIM_LONG, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(SETUP, STRING, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_BOOLEAN);
        method_ = new SpecNatMethod(SET_CHECK_BOX, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBER);
        method_ = new SpecNatMethod(SET_COMBO_NUMBER, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBER);
        method_ = new SpecNatMethod(SET_COMBO_NUMBER_TWO, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBERS);
        method_ = new SpecNatMethod(SET_COMBO_NUMBERS, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(SET_RADIO_LONG, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_TYPED_STRING, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_TYPED_TEXT, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_EIGHT, cl_);
    }
    private void buildComposite() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        StandardConstructor ctor_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        fields_.add(new StandardField(DISPLAYED, PRIM_BOOLEAN, null,null));
//        fields_.add(new StandardField(INTEGER, PRIM_INTEGER,false,false,new SampleCompositeInteger(),new SampleCompositeIntegerSet()));
//        fields_.add(new StandardField(INTEGER+2, PRIM_INTEGER,false,false,new SampleCompositeInteger(),new SampleCompositeIntegerSet()));
        fields_.add(new StandardField(INTEGER+0, PRIM_INTEGER, new SampleCompositeInteger0(),null));
        fields_.add(new StandardField(INTEGER+1, PRIM_INTEGER, new SampleCompositeInteger1(),null));
        fields_.add(new StandardField(MAP, TYPE_MAP, null,null));
//        fields_.add(new StandardField(MY_CHAR, getContent().getPrimTypes().getAliasPrimChar(),false,false));
        fields_.add(new StandardField(STRING_FCT, STRING, new SampleStrFct(),new SampleStrFct()));
        fields_.add(new StandardField(STRINGS,TYPE_STRING_LIST, new SampleCompositeStrings(),null));
        fields_.add(new StandardField(STRINGS_SEC,TYPE_STRING_LIST_SEC, new SampleCompositeEmStrings(),null));
        fields_.add(new StandardField(STRINGS_SE,TYPE_STRING_LIST_SEC, new SampleCompositeEmsStrings(),null));
        //params_ = new StringList();
        method_ = new SpecNatMethod(INTERN_METHOD, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(PRIVATE_METHOD, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_STRING, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_STRINGS, TYPE_STRING_LIST, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(SUMMUM, PRIM_INTEGER, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(GET_STRING_ELT, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod("sum", PRIM_INTEGER, new SampleCompositeSum());
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_STRING, VOID, null);
        methods_.add( method_);
        //params_ = new StringList("code.formathtml.util.ValueChangeEvent");
        method_ = new SpecNatMethod(UPDATE_VALUE, VOID, null);
        methods_.add( method_);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        getStds().addEntry(TYPE_COMPOSITE, cl_);
    }
    private void buildBeanUtil() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        fields_.add(new StandardField(NB_BEANS, PRIM_BOOLEAN, null,null));
        //params_ = new StringList(PRIM_INTEGER, PRIM_INTEGER);
        method_ = new SpecNatMethod(SUM, PRIM_INTEGER, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_BEAN_UTIL, cl_);
    }
    private void buildEnumNumber() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        getStds().addEntry(TYPE_ENUM_NUMBER, cl_);
    }
    private void buildEnumNumbers() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        getStds().addEntry(TYPE_ENUM_NUMBERS, cl_);
        getIterables().put(TYPE_ENUM_NUMBERS,TYPE_ENUM_NUMBER);
    }
    private void buildGeneObjs() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        //params_ = new StringList(OBJECT);
        method_ = new SpecNatMethod(ADD, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(GET, OBJECT, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_GENE_OBJS, cl_);
    }
    private void buildGeneObjects() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        StandardConstructor ctor_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        //params_ = new StringList(OBJECT);
        method_ = new SpecNatMethod(ADD, VOID, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(LAST, OBJECT, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(CLEAR, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_GENE_OBJECTS, cl_);
    }
    private void buildPickableList() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        StandardConstructor ctor_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_LIST);
        //params_ = new StringList(PRIM_INTEGER);
        method_ = new SpecNatMethod(REMOVE_AND_EXIST_AFTER, PRIM_BOOLEAN, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_LIST, TYPE_GENE_OBJECTS, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_PICKABLE_LIST, cl_);
    }
    private void buildEncapsFields() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        //params_ = new StringList();
        method_ = new SpecNatMethod(IS_CHECK_BOX, PRIM_BOOLEAN, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBER, TYPE_ENUM_NUMBER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBER_TWO, TYPE_ENUM_NUMBER, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBO_NUMBERS, TYPE_ENUM_NUMBERS, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBOBOX, TYPE_LIST, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_COMBOBOX_MAP, TYPE_MAP, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_TYPED_STRING, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_TYPED_TEXT, STRING, null);
        methods_.add( method_);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_RADIO_LONG, PRIM_LONG, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_BOOLEAN);
        method_ = new SpecNatMethod(SET_CHECK_BOX, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBER);
        method_ = new SpecNatMethod(SET_COMBO_NUMBER, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBER);
        method_ = new SpecNatMethod(SET_COMBO_NUMBER_TWO, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(TYPE_ENUM_NUMBERS);
        method_ = new SpecNatMethod(SET_COMBO_NUMBERS, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(PRIM_LONG);
        method_ = new SpecNatMethod(SET_RADIO_LONG, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_TYPED_STRING, VOID, null);
        methods_.add( method_);
        //params_ = new StringList(getAliasString());
        method_ = new SpecNatMethod(SET_TYPED_TEXT, VOID, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_ENCAPS_FIELDS, cl_);
    }
    private void buildRate() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        getStds().addEntry(TYPE_RATE, cl_);
    }
    private void buildRateEq() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        StandardConstructor ctor_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        //params_ = new StringList(TYPE_RATE_EQ);
        method_ = new SpecNatMethod(EQ, PRIM_BOOLEAN, null);
        methods_.add( method_);
        cl_.getDirectInterfaces().add(TYPE_DISPLAYABLE);
        getStds().addEntry(TYPE_RATE_EQ, cl_);
    }
    private void buildNatTreeMapStringInteger() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, TYPE_MAP);
        getStds().addEntry(TYPE_NAT_TREE_MAP_STRING_INTEGER, cl_);
    }
    private void buildSimpleDataBase() {
        CustList<StandardField> fields_;
        CustList<SpecNatMethod> methods_;
        CustList<StandardConstructor> constructors_;
        constructors_ = new CustList<StandardConstructor>();
        fields_ = new CustList<StandardField>();
        methods_ = new CustList<SpecNatMethod>();
        SpecNatMethod method_;
        StringList params_;
        SpecialNatClass cl_;
        cl_ = new SpecialNatClass(fields_, methods_, OBJECT);
        //params_ = new StringList();
        method_ = new SpecNatMethod(GET_VALUE, PRIM_INTEGER, null);
        methods_.add( method_);
        getStds().addEntry(TYPE_SIMPLE_DATA_BASE, cl_);
    }

    public InvokedPageOutput processAfterInvoke(NatConfigurationCore _conf, String _dest, String _curUrl, Struct _bean, String _language, NatRendStackCall _rendStack) {
        NatImportingPageAbs ip_ = new NatImportingPage();
        _rendStack.addPage(ip_);
//        StringMapObjectBase forms_ = new StringMapObjectBase();
////        forms_.put("typedShort",0);
////        forms_.put("typedInt2",0);
//        forms_.putAllMapBase(_bean);
//        String currentBeanName_;
        NatDocumentBlock rendDocumentBlock_ = getRenders().getVal(_dest);
//        currentBeanName_ = rendDocumentBlock_.getBeanName();
//        Struct bean_ = getBeanOrNull(currentBeanName_);
//        StringMap<Integer> oldMap_ = ((SampleBeanStruct) bean_).getMap();
//        StringMap<Struct> others_ = ((SampleBeanStruct) bean_).getOthers();
////        ((SampleBeanStruct) bean_).setForms(forms_);
//        ((SampleBeanStruct) bean_).getMap().addAllEntries(oldMap_);
//        ((SampleBeanStruct) bean_).getOthers().addAllEntries(others_);
        _rendStack.clearPages();
        String res_ = getRes(rendDocumentBlock_, _conf, _rendStack,ip_);
        return new InvokedPageOutput(_dest,res_);
    }

//    @Override
//    public BeanNatCommonLgNames setBeanForms(Struct _mainBean, Struct _called) {
////        StringMapObjectBase forms_ = ((SampleBeanStruct)_called).getForms();
////        StringMapObjectBase formsMap_ = ((SampleBeanStruct)_mainBean).getForms();
////        forms_.putAllMapBase(formsMap_);
//        return this;
//    }

    @Override
    public void initBeans(NatConfigurationCore _conf, String _language) {
//        super.initBeans(_conf, _language);
        getBeansStruct().setValue(0,bean(new BeanOne()));
        getBeansStruct().setValue(1,bean(new BeanTwo()));
//        getBeansStruct().setValue(1,bean(new TeamBean(), AikiBeansFightStd.TYPE_TEAM_BEAN,_language));
    }

    private SampleBeanStruct bean(Bean _bean) {
//        _bean.getBaseForms().getBeansOthers().put("other",new BasicBeanStruct(new BeanThree()));
//        _bean.getBaseForms().put("typedShort",0);
//        _bean.getBaseForms().put("typedInt2",0);
        return (new SampleBeanStruct(_bean));
    }

    @Override
    protected AbstractNatBlockBuilder blockBuilder() {
        return new DefNatBlockBuilder();
    }

//    public static NatArrayStruct getTree(AbsMap<String, Integer> _tree) {
//        return getStrInteger(_tree);
//    }

    @Override
    protected NatRendStackCall newNatRendStackCall() {
        return new NatRendStackCall();
    }
}
