package aiki.beans.moves.effects;

import aiki.beans.AikiBeansStd;
import aiki.beans.PokemonStandards;
import code.bean.nat.BeanNatCommonLgNames;
import code.bean.nat.SpecNatMethod;
import code.bean.nat.SpecialNatClass;
import code.bean.nat.StandardField;
import code.expressionlanguage.functionid.MethodModifier;
import code.util.CustList;
public final class AikiBeansMovesEffectsStd{
    public static final String BEAN_EFFECT="effect";
    public static final String BEAN_EFFECT_DAMAGE="eff_damage";
    public static final String BEAN_EFFECT_DAMAGE_RATE="eff_damagerate";
    public static final String BEAN_EFFECT_ENDROUND="eff_endround";
    public static final String BEAN_EFFECT_GLOBAL="eff_global";
    public static final String BEAN_EFFECT_STATIS="eff_statis";
    public static final String BEAN_EFFECT_STATUS="eff_status";
    public static final String BEAN_EFFECT_TEAM="eff_team";
    public static final String BEAN_EFFECT_TEAMWHILESENDINGFOE="eff_teamwhilesendingfoe";
    public static final String WEB_HTML_MOVES_EFFECTS_EFF_HTML="web/html/moves/effects/eff.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFDAMAGE_HTML="web/html/moves/effects/effdamage.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFDAMAGERATE_HTML="web/html/moves/effects/effdamagerate.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFENDROUND_HTML="web/html/moves/effects/effendround.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFGLOBAL_HTML="web/html/moves/effects/effglobal.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFSTATIS_HTML = "web/html/moves/effects/effstatis.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFSTATUS_HTML = "web/html/moves/effects/effstatus.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFTEAM_HTML = "web/html/moves/effects/effteam.html";
    public static final String WEB_HTML_MOVES_EFFECTS_EFFTEAMWHILESENDINGFOE_HTML = "web/html/moves/effects/effteamwhilesendingfoe.html";
    public static final String TYPE_EFFECT_ALLY_BEAN = "aiki.beans.moves.effects.EffectAllyBean";
    public static final String TYPE_EFFECT_BATON_PASS_BEAN = "aiki.beans.moves.effects.EffectBatonPassBean";
    public static final String TYPE_EFFECT_BEAN = "aiki.beans.moves.effects.EffectBean";
    public static final String TYPE_EFFECT_CLONE_BEAN = "aiki.beans.moves.effects.EffectCloneBean";
    public static final String TYPE_EFFECT_COMMON_STATISTICS_BEAN = "aiki.beans.moves.effects.EffectCommonStatisticsBean";
    public static final String TYPE_EFFECT_COPY_FIGHTER_BEAN = "aiki.beans.moves.effects.EffectCopyFighterBean";
    public static final String TYPE_EFFECT_COPY_MOVE_BEAN = "aiki.beans.moves.effects.EffectCopyMoveBean";
    public static final String TYPE_EFFECT_COUNTER_ATTACK_BEAN = "aiki.beans.moves.effects.EffectCounterAttackBean";
    public static final String TYPE_EFFECT_DAMAGE_BEAN = "aiki.beans.moves.effects.EffectDamageBean";
    public static final String TYPE_EFFECT_DAMAGE_RATE_BEAN = "aiki.beans.moves.effects.EffectDamageRateBean";
    public static final String TYPE_EFFECT_END_ROUND_MOVE_BEAN = "aiki.beans.moves.effects.EffectEndRoundMoveBean";
    public static final String TYPE_EFFECT_FULL_HP_RATE_BEAN = "aiki.beans.moves.effects.EffectFullHpRateBean";
    public static final String TYPE_EFFECT_GLOBAL_BEAN = "aiki.beans.moves.effects.EffectGlobalBean";
    public static final String TYPE_EFFECT_INVOKE_BEAN = "aiki.beans.moves.effects.EffectInvokeBean";
    public static final String TYPE_EFFECT_MULT_SUFFERED_MOVE_POWER_BEAN = "aiki.beans.moves.effects.EffectMultSufferedMovePowerBean";
    public static final String TYPE_EFFECT_MULT_USED_MOVE_POWER_BEAN = "aiki.beans.moves.effects.EffectMultUsedMovePowerBean";
    public static final String TYPE_EFFECT_ORDER_BEAN = "aiki.beans.moves.effects.EffectOrderBean";
    public static final String TYPE_EFFECT_PROTECT_FROM_TYPES_BEAN = "aiki.beans.moves.effects.EffectProtectFromTypesBean";
    public static final String TYPE_EFFECT_PROTECTION_BEAN = "aiki.beans.moves.effects.EffectProtectionBean";
    public static final String TYPE_EFFECT_REMAINED_HP_RATE_BEAN = "aiki.beans.moves.effects.EffectRemainedHpRateBean";
    public static final String TYPE_EFFECT_RESTRICTION_BEAN = "aiki.beans.moves.effects.EffectRestrictionBean";
    public static final String TYPE_EFFECT_STATISTIC_BEAN = "aiki.beans.moves.effects.EffectStatisticBean";
    public static final String TYPE_EFFECT_STATUS_BEAN = "aiki.beans.moves.effects.EffectStatusBean";
    public static final String TYPE_EFFECT_SWITCH_ABILITIES_BEAN = "aiki.beans.moves.effects.EffectSwitchAbilitiesBean";
    public static final String TYPE_EFFECT_SWITCH_ITEMS_BEAN = "aiki.beans.moves.effects.EffectSwitchItemsBean";
    public static final String TYPE_EFFECT_SWITCH_MOVE_TYPES_BEAN = "aiki.beans.moves.effects.EffectSwitchMoveTypesBean";
    public static final String TYPE_EFFECT_SWITCH_POINT_VIEW_BEAN = "aiki.beans.moves.effects.EffectSwitchPointViewBean";
    public static final String TYPE_EFFECT_SWITCH_TYPES_BEAN = "aiki.beans.moves.effects.EffectSwitchTypesBean";
    public static final String TYPE_EFFECT_TEAM_BEAN = "aiki.beans.moves.effects.EffectTeamBean";
    public static final String TYPE_EFFECT_TEAM_WHILE_SEND_FOE_BEAN = "aiki.beans.moves.effects.EffectTeamWhileSendFoeBean";
    public static final String TYPE_EFFECT_UNPROTECT_FROM_TYPES_BEAN = "aiki.beans.moves.effects.EffectUnprotectFromTypesBean";
    public static final String TYPE_EFFECT_VAR_P_P_BEAN = "aiki.beans.moves.effects.EffectVarPPBean";
    public static final String TYPE_EFFECT_WIN_MONEY_BEAN = "aiki.beans.moves.effects.EffectWinMoneyBean";
    private static final String M_IS_ADJ_ADV = "isAdjAdv";
    private static final String M_IS_ADJ_MULT = "isAdjMult";
    private static final String M_IS_ADJ_UNIQ = "isAdjUniq";
    private static final String M_IS_ALLIE = "isAllie";
    private static final String M_IS_ALLIES = "isAllies";
    private static final String M_IS_ANY_FOE = "isAnyFoe";
    private static final String M_IS_AUTRE_UNIQ = "isAutreUniq";
    private static final String M_IS_GLOBALE = "isGlobale";
    private static final String M_IS_LANCEUR = "isLanceur";
    private static final String M_IS_PSEUDO_GLOBALE = "isPseudoGlobale";
    private static final String M_IS_TOUS_ADV = "isTousAdv";
    private static final String M_IS_UNIQUE_IMPORTE = "isUniqueImporte";
    private static final String CLICK_MOVE = "clickMove";
    private static final String GET_TR_MOVE = "getTrMove";
    private static final String CLICK_MOVE_END_ROUND = "clickMoveEndRound";
    private static final String GET_TR_MOVES_END_ROUND = "getTrMovesEndRound";
    private static final String CLICK_MOVE_BATON_PASS = "clickMoveBatonPass";
    private static final String GET_TR_MOVES_BATON_PASS = "getTrMovesBatonPass";
    private static final String CLICK_MOVE_SENDING = "clickMoveSending";
    private static final String GET_TR_MOVES_SENDING = "getTrMovesSending";
    private static final String GET_TR_STATISTIC = "getTrStatistic";
    private static final String CLICK_DEFAULT_MOVE = "clickDefaultMove";
    private static final String GET_TR_DEFAULT_MOVE = "getTrDefaultMove";
    private static final String COPY_MOVE_FOR_USER = "copyMoveForUser";
    private static final String CLICK_MOVE_TRANS = "clickMoveTrans";
    private static final String GET_TR_MOVE_TRANS = "getTrMoveTrans";
    private static final String GET_TR_SUFFERING_DAMAGE_TYPES = "getTrSufferingDamageTypes";
    private static final String GET_TR_DROPPED_STAT_DIRECT_MOVE = "getTrDroppedStatDirectMove";
    private static final String GET_MAP_VARS_FAIL_COUNTER = "getMapVarsFailCounter";
    private static final String HAS_LAW_FOR_DAMAGE = "hasLawForDamage";
    private static final String HAS_DETERMINATED_LAW_FOR_DAMAGE = "hasDeterminatedLawForDamage";
    private static final String COUNTER_DAMAGE_CAT = "counterDamageCat";
    private static final String CONST_POWER = "constPower";
    private static final String HAS_CONST_POWER = "hasConstPower";
    private static final String GET_TRANSLATED_STATIS_TARGET = "getTranslatedStatisTarget";
    private static final String GET_TRANSLATED_STATIS_USER = "getTranslatedStatisUser";
    private static final String GET_TRANSLATED_STATIS_KO = "getTranslatedStatisKo";
    private static final String CLICK_PREVENTED_STATUS = "clickPreventedStatus";
    private static final String GET_TR_PREVENTED_STATUS = "getTrPreventedStatus";
    private static final String CLICK_CANCELLED_ABILITY = "clickCancelledAbility";
    private static final String GET_TR_CANCELLED_ABILITY = "getTrCancelledAbility";
    private static final String CLICK_UNUSABLE_MOVE = "clickUnusableMove";
    private static final String GET_TR_UNUSABLE_MOVES = "getTrUnusableMoves";
    private static final String CLICK_CANCELLED_EFFECT = "clickCancelledEffect";
    private static final String GET_TR_CANCELLED_EFFECT = "getTrCancelledEffect";
    private static final String CLICK_MULT_MOVE_POWER = "clickMultMovePower";
    private static final String GET_TR_MULT_MOVE_POWER = "getTrMultMovePower";
    private static final String CLICK_INVOKED_MOVE = "clickInvokedMove";
    private static final String GET_TR_INVOKED_MOVE_TERRAIN = "getTrInvokedMoveTerrain";
    private static final String CLICK_INVOKING_MOVE = "clickInvokingMove";
    private static final String GET_TR_INVOKING_MOVE = "getTrInvokingMove";
    private static final String CLICK_INVOKING_MOVE_TYPES = "clickInvokingMoveTypes";
    private static final String GET_TR_INVOKING_MOVE_TYPES = "getTrInvokingMoveTypes";
    private static final String GET_TR_MULT_STAT_IF_DAMGE_TYPE_FIRST = "getTrMultStatIfDamgeTypeFirst";
    private static final String GET_TR_MULT_STAT_IF_DAMGE_TYPE_SECOND = "getTrMultStatIfDamgeTypeSecond";
    private static final String CLICK_MOVES_TARGET = "clickMovesTarget";
    private static final String GET_TR_MOVES_TARGET = "getTrMovesTarget";
    private static final String GET_TR_ENV = "getTrEnv";
    private static final String CLICK_MOVE_FCT_ENV = "clickMoveFctEnv";
    private static final String GET_TR_MOVE_FCT_ENV = "getTrMoveFctEnv";
    private static final String CLICK_GLOBAL_MOVE_FCT_ENV = "clickGlobalMoveFctEnv";
    private static final String GET_TR_GLOBAL_MOVE_FCT_ENV = "getTrGlobalMoveFctEnv";
    private static final String IS_TYPE = "isType";
    private static final String GET_TR_USER_TYPES = "getTrUserTypes";
    private static final String CLICK_MOVE_USER_TYPES = "clickMoveUserTypes";
    private static final String GET_TR_MOVE_USER_TYPES = "getTrMoveUserTypes";
    private static final String CLICK_MOVE_NOT_INVOK = "clickMoveNotInvok";
    private static final String GET_TR_MOVE_NOT_INVOK = "getTrMoveNotInvok";
    private static final String GET_TR_TYPE = "getTrType";
    private static final String FORBID = "forbid";
    private static final String FORBID_STATUS_MOVE = "forbidStatusMove";
    private static final String FORBID_LAST_MOVE = "forbidLastMove";
    private static final String FORBID_USER_MOVES = "forbidUserMoves";
    private static final String FORBID_USE_MOVE = "forbidUseMove";
    private static final String FORCE_USE_MOVE = "forceUseMove";
    private static final String RANDOM_STATIS = "randomStatis";
    private static final String IS_ALWAYS_ENABLED = "isAlwaysEnabled";
    private static final String NOT_EMPTY_VAR_BOOST = "notEmptyVarBoost";
    private static final String GET_FAIL = "getFail";
    private static final String GET_RATE = "getRate";
    private static final String GET_SWAP_FAIL = "getSwapFail";
    private static final String IS_STATUS = "isStatus";
    private static final String CLICK_LINK = "clickLink";
    private static final String GET_TR_LINK = "getTrLink";
    private static final String CLICK_LINK_DELETED = "clickLinkDeleted";
    private static final String GET_TR_LINK_DELETED = "getTrLinkDeleted";
    private static final String GIVE_TO_TARGET = "giveToTarget";
    private static final String GIVE_TO_USER = "giveToUser";
    private static final String GIVE_CONST = "giveConst";
    private static final String IS_DEF_ABILITY = "isDefAbility";
    private static final String CLICK_ABILITY = "clickAbility";
    private static final String GET_TR_ABILITY = "getTrAbility";
    private static final String SWITCH_ABILITIES = "switchAbilities";
    private static final String DELETE_TARGET_BERRY = "deleteTargetBerry";
    private static final String TAKE_ITEM = "takeItem";
    private static final String REMOVE_TARGET_ITEM = "removeTargetItem";
    private static final String SWITCH_ITEMS = "switchItems";
    private static final String RESUSE_LAST_ITEM = "resuseLastItem";
    private static final String GIVE_TARGET_ITEM = "giveTargetItem";
    private static final String USE_ITEM_AS_POSSIBLE = "useItemAsPossible";
    private static final String GET_TR_REPLACING_TYPES = "getTrReplacingTypes";
    private static final String GET_TR_CHANGED_TYPES = "getTrChangedTypes";
    private static final String THIEVE_BONUS = "thieveBonus";
    private static final String MIRROR_AGAINST_USER = "mirrorAgainstUser";
    private static final String ATTRACT_DAMAGE_MOVES = "attractDamageMoves";
    private static final String IS_RES_TYPES = "isResTypes";
    private static final String IS_USER_TYPES = "isUserTypes";
    private static final String IS_CONST_TYPES = "isConstTypes";
    private static final String GET_TR_ADDED_TYPE = "getTrAddedType";
    private static final String SWITCH_TYPES = "switchTypes";
    private static final String GET_TR_CONST_TYPE = "getTrConstType";
    private static final String CLICK_STATUS = "clickStatus";
    private static final String GET_TR_STATUS = "getTrStatus";
    private static final String GET_TR_UNUSABLE_MOVE = "getTrUnusableMove";
    private static final String CLICK_DISABLE_FOE_TEAM_EFFECTS = "clickDisableFoeTeamEffects";
    private static final String GET_TR_DISABLE_FOE_TEAM_EFFECTS = "getTrDisableFoeTeamEffects";
    private static final String CLICK_DISABLE_FOE_TEAM_STATUS = "clickDisableFoeTeamStatus";
    private static final String GET_TR_DISABLE_FOE_TEAM_STATUS = "getTrDisableFoeTeamStatus";
    private static final String GET_TRANSLATED_STATISTIC = "getTranslatedStatistic";
    private static final String GET_TRANSLATED_STATUS = "getTranslatedStatus";
    private static final String GET_TRANSLATED_TYPE = "getTranslatedType";
    private static final String GET_TR_DAMAGE_TYPE = "getTrDamageType";
    private static final String GET_TR_POKEMON_TYPE = "getTrPokemonType";
    private static final String GET_TR_DISABLE_IMMU_TYPE = "getTrDisableImmuType";
    private static final String GET_TR_DISABLE_IMMU_MOVE = "getTrDisableImmuMove";
    private static final String GET_TR_ATTACK_TARGET_TYPE = "getTrAttackTargetType";
    private static final String INDEX = "index";
    private static final String MOVE = "move";
    private static final String REASONS = "reasons";
    private static final String MAP_VARS_FAIL = "mapVarsFail";
    private static final String NEED_SUCCESS_FIRST_EFFECT = "needSuccessFirstEffect";
    private static final String EFFECT_BEAN = "effectBean";
    private static final String MULT_ALLY_DAMAGE = "multAllyDamage";
    private static final String MOVES = "moves";
    private static final String HP_RATE_CLONE = "hpRateClone";
    private static final String MOVES_END_ROUND = "movesEndRound";
    private static final String MOVES_BATON_PASS = "movesBatonPass";
    private static final String MOVES_SENDING = "movesSending";
    private static final String COMMON_VALUE = "commonValue";
    private static final String MAP_VARS_COMMON_STATISTICS = "mapVarsCommonStatistics";
    private static final String PP_FOR_MOVES = "ppForMoves";
    private static final String DISPLAY_NAME = "displayName";
    private static final String COPYING_MOVE_FOR_USER = "copyingMoveForUser";
    private static final String COPYING_MOVE_FOR_USER_DEF = "copyingMoveForUserDef";
    private static final String MOVES_TRANSFORMING = "movesTransforming";
    private static final String MOVES_NOT_TO_BE_COPIED = "movesNotToBeCopied";
    private static final String SUFFERING_DAMAGE_TYPES = "sufferingDamageTypes";
    private static final String DROPPED_STAT_DIRECT_MOVE = "droppedStatDirectMove";
    private static final String SUFFERING_DAMAGE_DIRECT_MOVE = "sufferingDamageDirectMove";
    private static final String REASONS_PROTECT = "reasonsProtect";
    private static final String REASONS_COUNTER = "reasonsCounter";
    private static final String HITS_LAW = "hitsLaw";
    private static final String NB_HITS = "nbHits";
    private static final String CONST_DAMAGE = "constDamage";
    private static final String POWER = "power";
    private static final String DAMAGE_LAW = "damageLaw";
    private static final String MAP_VARS_DAMAGE = "mapVarsDamage";
    private static final String MULT_DAMAGE_AGAINST = "multDamageAgainst";
    private static final String CH_RATE = "chRate";
    private static final String CH_LAW = "chLaw";
    private static final String USER_ATTACK = "userAttack";
    private static final String STATIS_ATT = "statisAtt";
    private static final String TARGET_DEFENSE = "targetDefense";
    private static final String STATIS_DEF = "statisDef";
    private static final String IGN_VAR_STAT_TARGET_POS = "ignVarStatTargetPos";
    private static final String IGN_VAR_STAT_USER_NEG = "ignVarStatUserNeg";
    private static final String RAND_MAX = "randMax";
    private static final String BOOST_STATIS_ONCE_KO_FOE = "boostStatisOnceKoFoe";
    private static final String SUMMING_USER_TEAM_OK_FIGHTER = "summingUserTeamOkFighter";
    private static final String WIN_HP = "winHp";
    private static final String RATE_DAMAGE = "rateDamage";
    private static final String END_ROUND_RANK = "endRoundRank";
    private static final String REASONS_END_ROUND = "reasonsEndRound";
    private static final String MAP_VARS_FAIL_END_ROUND = "mapVarsFailEndRound";
    private static final String LEFT_USER_HP = "leftUserHp";
    private static final String RESTORED_HP = "restoredHp";
    private static final String MAP_VARS_RESTORED = "mapVarsRestored";
    private static final String CLOSEST_FOE_DAMAGE_RATE_HP = "closestFoeDamageRateHp";
    private static final String WEATHER = "weather";
    private static final String CANCELED_IF_USED = "canceledIfUsed";
    private static final String REVERSE_ORDER_OF_SORT_BY_SPEED = "reverseOrderOfSortBySpeed";
    private static final String UNUSABLE_ITEM = "unusableItem";
    private static final String PUTTING_KO = "puttingKo";
    private static final String MULT_ACCURACY = "multAccuracy";
    private static final String DAMAGE_END_ROUND = "damageEndRound";
    private static final String HEALING_END_ROUND_GROUND = "healingEndRoundGround";
    private static final String HEALING_END_ROUND = "healingEndRound";
    private static final String MULT_EFFECT_LOVING_ALLY = "multEffectLovingAlly";
    private static final String PREVENT_STATUS = "preventStatus";
    private static final String IMMUNE_TYPES = "immuneTypes";
    private static final String EFFICIENCY_MOVES = "efficiencyMoves";
    private static final String DISABLE_IMMU_AGAINST_TYPES = "disableImmuAgainstTypes";
    private static final String CANCEL_PROTECTING_ABILITIES = "cancelProtectingAbilities";
    private static final String UNUSABLE_MOVES = "unusableMoves";
    private static final String CANCEL_EFFECTS = "cancelEffects";
    private static final String MULT_POWER_MOVES = "multPowerMoves";
    private static final String MULT_DAMAGE_TYPES_MOVES = "multDamageTypesMoves";
    private static final String CANCEL_CHGT_STAT = "cancelChgtStat";
    private static final String INVOKED_MOVE_TERRAIN = "invokedMoveTerrain";
    private static final String INVOKING_MOVES = "invokingMoves";
    private static final String CHANGED_TYPES_TERRAIN = "changedTypesTerrain";
    private static final String INVOKING_MOVES_CHANGING_TYPES = "invokingMovesChangingTypes";
    private static final String MULT_STAT_IF_CONTAINS_TYPE = "multStatIfContainsType";
    private static final String MULT_DAMAGE_PREPA_ROUND = "multDamagePrepaRound";
    private static final String MOVES_USED_BY_TARGETED_FIGHTERS = "movesUsedByTargetedFighters";
    private static final String INVOKING_MOVE_BUT_USER = "invokingMoveButUser";
    private static final String INVOKING_TARGET_CHOSEN_MOVE = "invokingTargetChosenMove";
    private static final String INVOKING_USER_MOVE_WHILE_SLEEP = "invokingUserMoveWhileSleep";
    private static final String INVOKING_ALLY_MOVE = "invokingAllyMove";
    private static final String INVOKING_TARGET_SUCCESFUL_MOVE = "invokingTargetSuccesfulMove";
    private static final String INVOKING_SUFFERED_MOVE = "invokingSufferedMove";
    private static final String RATE_INVOKATION_MOVE = "rateInvokationMove";
    private static final String MOVE_FCT_ENV = "moveFctEnv";
    private static final String GLOBAL_MOVES = "globalMoves";
    private static final String INVOKING_MOVE_BY_USER_TYPES = "invokingMoveByUserTypes";
    private static final String MOVES_NOT_TO_BE_INVOKED = "movesNotToBeInvoked";
    private static final String MULT_MOVE_POWER_FCT_TYPE = "multMovePowerFctType";
    private static final String TARGET_ATTACKS_LAST = "targetAttacksLast";
    private static final String IMMU_AGAINST_TYPES = "immuAgainstTypes";
    private static final String PROT_SINGLE = "protSingle";
    private static final String PROT_SINGLE_AGAINST_KO = "protSingleAgainstKo";
    private static final String PROT_TEAM_AGAINST_MULT_TARGETS = "protTeamAgainstMultTargets";
    private static final String PROT_TEAM_AGAINST_PRIO = "protTeamAgainstPrio";
    private static final String PROT_TEAM_AGAINST_STATUS_MOVES = "protTeamAgainstStatusMoves";
    private static final String PROT_TEAM_AGAINST_DAMAGE_MOVES = "protTeamAgainstDamageMoves";
    private static final String RATE_HP = "rateHp";
    private static final String FORBID_TARGET_USING_ITEM = "forbidTargetUsingItem";
    private static final String EVT_RATE = "evtRate";
    private static final String EVT_RATE_PER_CENT = "evtRatePerCent";
    private static final String STATIS_VAR_RANK = "statisVarRank";
    private static final String MAP_VARS_STATISTICS = "mapVarsStatistics";
    private static final String SWAP_BOOST_STATIS = "swapBoostStatis";
    private static final String CANCEL_LOW_STAT = "cancelLowStat";
    private static final String DEFAULT_BOOST = "defaultBoost";
    private static final String COPY_BOOST = "copyBoost";
    private static final String LAW_STATUS = "lawStatus";
    private static final String MAP_VARS_STATUS = "mapVarsStatus";
    private static final String DELETED_STATUS = "deletedStatus";
    private static final String KO_USER_HEAL_SUBST = "koUserHealSubst";
    private static final String STATUS_FROM_USER = "statusFromUser";
    private static final String REPLACING_TYPES = "replacingTypes";
    private static final String CHANGE_TYPES = "changeTypes";
    private static final String CHGT_TYPE_BY_ENV = "chgtTypeByEnv";
    private static final String ADDED_TYPES = "addedTypes";
    private static final String CONST_TYPES = "constTypes";
    private static final String FORBIDDING_HEALING = "forbiddingHealing";
    private static final String PROTECT_AGAINST_CH = "protectAgainstCh";
    private static final String FORBIDDEN_BOOST = "forbiddenBoost";
    private static final String CANCEL_CHGT_STAT_FOE_TEAM = "cancelChgtStatFoeTeam";
    private static final String CANCEL_CHGT_STAT_TEAM = "cancelChgtStatTeam";
    private static final String PROTECT_AGAINST_LOW_STAT = "protectAgainstLowStat";
    private static final String PROTECT_AGAINST_STATUS = "protectAgainstStatus";
    private static final String MULT_STATISTIC = "multStatistic";
    private static final String MULT_STATISTIC_FOE = "multStatisticFoe";
    private static final String MULT_DAMAGE = "multDamage";
    private static final String DISABLE_FOE_TEAM_EFFECTS = "disableFoeTeamEffects";
    private static final String DISABLE_FOE_TEAM_STATUS = "disableFoeTeamStatus";
    private static final String DAMAGE_RATE_AGAINST_FOE = "damageRateAgainstFoe";
    private static final String MAP_VARS_DAMAGE_SENT_FOE = "mapVarsDamageSentFoe";
    private static final String STATISTICS = "statistics";
    private static final String STATUS_BY_NB_USES = "statusByNbUses";
    private static final String REASONS_SENDING = "reasonsSending";
    private static final String MAP_VARS_FAIL_SENDING = "mapVarsFailSending";
    private static final String DELETED_BY_FOE_TYPES = "deletedByFoeTypes";
    private static final String TYPES = "types";
    private static final String DISABLE_IMMU_FROM_MOVES = "disableImmuFromMoves";
    private static final String ATTACK_TARGET_WITH_TYPES = "attackTargetWithTypes";
    private static final String DELETE_PP = "deletePp";
    private static final String WINNING_RATE_BY_SUM_TARGET_USER = "winningRateBySumTargetUser";
    private AikiBeansMovesEffectsStd(){}
    public static void build(PokemonStandards _std) {
        buildEffectAllyBean(_std);
        buildEffectBatonPassBean(_std);
        buildEffectBean(_std);
        buildEffectCloneBean(_std);
        buildEffectCommonStatisticsBean(_std);
        buildEffectCopyFighterBean(_std);
        buildEffectCopyMoveBean(_std);
        buildEffectCounterAttackBean(_std);
        buildEffectDamageBean(_std);
        buildEffectDamageRateBean(_std);
        buildEffectEndRoundMoveBean(_std);
        buildEffectFullHpRateBean(_std);
        buildEffectGlobalBean(_std);
        buildEffectInvokeBean(_std);
        buildEffectMultSufferedMovePowerBean(_std);
        buildEffectMultUsedMovePowerBean(_std);
        buildEffectOrderBean(_std);
        buildEffectProtectFromTypesBean(_std);
        buildEffectProtectionBean(_std);
        buildEffectRemainedHpRateBean(_std);
        buildEffectRestrictionBean(_std);
        buildEffectStatisticBean(_std);
        buildEffectStatusBean(_std);
        buildEffectSwitchAbilitiesBean(_std);
        buildEffectSwitchItemsBean(_std);
        buildEffectSwitchMoveTypesBean(_std);
        buildEffectSwitchPointViewBean(_std);
        buildEffectSwitchTypesBean(_std);
        buildEffectTeamBean(_std);
        buildEffectTeamWhileSendFoeBean(_std);
        buildEffectUnprotectFromTypesBean(_std);
        buildEffectVarPPBean(_std);
        buildEffectWinMoneyBean(_std);
    }
    private static void buildEffectAllyBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_ALLY_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(MULT_ALLY_DAMAGE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectAllyBeanMultAllyDamageGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_ALLY_BEAN, type_);
    }
    private static void buildEffectBatonPassBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_BATON_PASS_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectBatonPassBeanMovesGet(),null));
        methods_.add( new SpecNatMethod(CLICK_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectBatonPassBeanClickMove()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectBatonPassBeanGetTrMove()));
        _std.getStds().addEntry(TYPE_EFFECT_BATON_PASS_BEAN, type_);
    }
    private static void buildEffectBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_BEAN, fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(INDEX, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectBeanIndexGet(),new EffectBeanIndexSet()));
        fields_.add(new StandardField(MOVE,BeanNatCommonLgNames.STRING,false,false,new EffectBeanMoveGet(),new EffectBeanMoveSet()));
        fields_.add(new StandardField(REASONS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectBeanReasonsGet(),null));
        fields_.add(new StandardField(MAP_VARS_FAIL, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectBeanMapVarsFailGet(),null));
        fields_.add(new StandardField(NEED_SUCCESS_FIRST_EFFECT,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectBeanNeedSuccessFirstEffectGet(),null));
        fields_.add(new StandardField(EFFECT_BEAN,BeanNatCommonLgNames.STRING,false,false,new EffectBeanEffectBeanGet(),null));
        methods_.add( new SpecNatMethod(M_IS_ADJ_ADV,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAdjAdv()));
        methods_.add( new SpecNatMethod(M_IS_ADJ_MULT,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAdjMult()));
        methods_.add( new SpecNatMethod(M_IS_ADJ_UNIQ,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAdjUniq()));
        methods_.add( new SpecNatMethod(M_IS_ALLIE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAllie()));
        methods_.add( new SpecNatMethod(M_IS_ALLIES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAllies()));
        methods_.add( new SpecNatMethod(M_IS_ANY_FOE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAnyFoe()));
        methods_.add( new SpecNatMethod(M_IS_AUTRE_UNIQ,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsAutreUniq()));
        methods_.add( new SpecNatMethod(M_IS_GLOBALE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsGlobale()));
        methods_.add( new SpecNatMethod(M_IS_LANCEUR,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsLanceur()));
        methods_.add( new SpecNatMethod(M_IS_PSEUDO_GLOBALE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsPseudoGlobale()));
        methods_.add( new SpecNatMethod(M_IS_TOUS_ADV,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsTousAdv()));
        methods_.add( new SpecNatMethod(M_IS_UNIQUE_IMPORTE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectBeanIsUniqueImporte()));
        _std.getStds().addEntry(TYPE_EFFECT_BEAN, type_);
    }
    private static void buildEffectCloneBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_CLONE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(HP_RATE_CLONE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectCloneBeanHpRateCloneGet(),null));
        fields_.add(new StandardField(MOVES_END_ROUND, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCloneBeanMovesEndRoundGet(),null));
        fields_.add(new StandardField(MOVES_BATON_PASS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCloneBeanMovesBatonPassGet(),null));
        fields_.add(new StandardField(MOVES_SENDING, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCloneBeanMovesSendingGet(),null));
        methods_.add( new SpecNatMethod(CLICK_MOVE_END_ROUND,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanClickMoveEndRound()));
        methods_.add( new SpecNatMethod(GET_TR_MOVES_END_ROUND,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanGetTrMovesEndRound()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_BATON_PASS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanClickMoveBatonPass()));
        methods_.add( new SpecNatMethod(GET_TR_MOVES_BATON_PASS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanGetTrMovesBatonPass()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_SENDING,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanClickMoveSending()));
        methods_.add( new SpecNatMethod(GET_TR_MOVES_SENDING,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCloneBeanGetTrMovesSending()));
        _std.getStds().addEntry(TYPE_EFFECT_CLONE_BEAN, type_);
    }
    private static void buildEffectCommonStatisticsBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_COMMON_STATISTICS_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(COMMON_VALUE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectCommonStatisticsBeanCommonValueGet(),null));
        fields_.add(new StandardField(MAP_VARS_COMMON_STATISTICS, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectCommonStatisticsBeanMapVarsCommonStatisticsGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_STATISTIC,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCommonStatisticsBeanGetTrStatistic()));
        _std.getStds().addEntry(TYPE_EFFECT_COMMON_STATISTICS_BEAN, type_);
    }
    private static void buildEffectCopyFighterBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_COPY_FIGHTER_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(PP_FOR_MOVES, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectCopyFighterBeanPpForMovesGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_COPY_FIGHTER_BEAN, type_);
    }
    private static void buildEffectCopyMoveBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_COPY_MOVE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(DISPLAY_NAME,BeanNatCommonLgNames.STRING,false,false,new EffectCopyMoveBeanDisplayNameGet(),null));
        fields_.add(new StandardField(COPYING_MOVE_FOR_USER, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectCopyMoveBeanCopyingMoveForUserGet(),null));
        fields_.add(new StandardField(COPYING_MOVE_FOR_USER_DEF,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectCopyMoveBeanCopyingMoveForUserDefGet(),null));
        fields_.add(new StandardField(MOVES_TRANSFORMING, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCopyMoveBeanMovesTransformingGet(),null));
        fields_.add(new StandardField(MOVES_NOT_TO_BE_COPIED, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCopyMoveBeanMovesNotToBeCopiedGet(),null));
        methods_.add( new SpecNatMethod(CLICK_DEFAULT_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanClickDefaultMove()));
        methods_.add( new SpecNatMethod(GET_TR_DEFAULT_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanGetTrDefaultMove()));
        methods_.add( new SpecNatMethod(COPY_MOVE_FOR_USER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectCopyMoveBeanCopyMoveForUser()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_TRANS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanClickMoveTrans()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE_TRANS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanGetTrMoveTrans()));
        methods_.add( new SpecNatMethod(CLICK_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanClickMove()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCopyMoveBeanGetTrMove()));
        _std.getStds().addEntry(TYPE_EFFECT_COPY_MOVE_BEAN, type_);
    }
    private static void buildEffectCounterAttackBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_COUNTER_ATTACK_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(SUFFERING_DAMAGE_TYPES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectCounterAttackBeanSufferingDamageTypesGet(),null));
        fields_.add(new StandardField(DROPPED_STAT_DIRECT_MOVE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectCounterAttackBeanDroppedStatDirectMoveGet(),null));
        fields_.add(new StandardField(SUFFERING_DAMAGE_DIRECT_MOVE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectCounterAttackBeanSufferingDamageDirectMoveGet(),null));
        fields_.add(new StandardField(REASONS_PROTECT, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCounterAttackBeanReasonsProtectGet(),null));
        fields_.add(new StandardField(REASONS_COUNTER, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectCounterAttackBeanReasonsCounterGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_SUFFERING_DAMAGE_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCounterAttackBeanGetTrSufferingDamageTypes()));
        methods_.add( new SpecNatMethod(GET_TR_DROPPED_STAT_DIRECT_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectCounterAttackBeanGetTrDroppedStatDirectMove()));
        methods_.add( new SpecNatMethod(GET_MAP_VARS_FAIL_COUNTER, BeanNatCommonLgNames.TYPE_MAP, false, MethodModifier.NORMAL,new EffectCounterAttackBeanGetMapVarsFailCounter()));
        _std.getStds().addEntry(TYPE_EFFECT_COUNTER_ATTACK_BEAN, type_);
    }
    private static void buildEffectDamageBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_DAMAGE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(HITS_LAW, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanHitsLawGet(),null));
        fields_.add(new StandardField(NB_HITS,BeanNatCommonLgNames.PRIM_LONG,false,false,new EffectDamageBeanNbHitsGet(),null));
        fields_.add(new StandardField(CONST_DAMAGE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageBeanConstDamageGet(),null));
        fields_.add(new StandardField(POWER,BeanNatCommonLgNames.STRING,false,false,new EffectDamageBeanPowerGet(),null));
        fields_.add(new StandardField(DAMAGE_LAW, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanDamageLawGet(),null));
        fields_.add(new StandardField(MAP_VARS_DAMAGE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanMapVarsDamageGet(),null));
        fields_.add(new StandardField(MULT_DAMAGE_AGAINST, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanMultDamageAgainstGet(),null));
        fields_.add(new StandardField(CH_RATE, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectDamageBeanChRateGet(),null));
        fields_.add(new StandardField(CH_LAW, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanChLawGet(),null));
        fields_.add(new StandardField(USER_ATTACK,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageBeanUserAttackGet(),null));
        fields_.add(new StandardField(STATIS_ATT,BeanNatCommonLgNames.STRING,false,false,new EffectDamageBeanStatisAttGet(),null));
        fields_.add(new StandardField(TARGET_DEFENSE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageBeanTargetDefenseGet(),null));
        fields_.add(new StandardField(STATIS_DEF,BeanNatCommonLgNames.STRING,false,false,new EffectDamageBeanStatisDefGet(),null));
        fields_.add(new StandardField(IGN_VAR_STAT_TARGET_POS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectDamageBeanIgnVarStatTargetPosGet(),null));
        fields_.add(new StandardField(IGN_VAR_STAT_USER_NEG, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectDamageBeanIgnVarStatUserNegGet(),null));
        fields_.add(new StandardField(RAND_MAX,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageBeanRandMaxGet(),null));
        fields_.add(new StandardField(BOOST_STATIS_ONCE_KO_FOE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectDamageBeanBoostStatisOnceKoFoeGet(),null));
        fields_.add(new StandardField(SUMMING_USER_TEAM_OK_FIGHTER,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageBeanSummingUserTeamOkFighterGet(),null));
        methods_.add( new SpecNatMethod(HAS_LAW_FOR_DAMAGE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectDamageBeanHasLawForDamage()));
        methods_.add( new SpecNatMethod(HAS_DETERMINATED_LAW_FOR_DAMAGE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectDamageBeanHasDeterminatedLawForDamage()));
        methods_.add( new SpecNatMethod(COUNTER_DAMAGE_CAT,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectDamageBeanCounterDamageCat()));
        methods_.add( new SpecNatMethod(CONST_POWER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectDamageBeanConstPower()));
        methods_.add( new SpecNatMethod(HAS_CONST_POWER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectDamageBeanHasConstPower()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATIS_TARGET,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectDamageBeanGetTranslatedStatisTarget()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATIS_USER,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectDamageBeanGetTranslatedStatisUser()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATIS_KO,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectDamageBeanGetTranslatedStatisKo()));
        _std.getStds().addEntry(TYPE_EFFECT_DAMAGE_BEAN, type_);
    }
    private static void buildEffectDamageRateBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_DAMAGE_RATE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(WIN_HP,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectDamageRateBeanWinHpGet(),null));
        fields_.add(new StandardField(RATE_DAMAGE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectDamageRateBeanRateDamageGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_DAMAGE_RATE_BEAN, type_);
    }
    private static void buildEffectEndRoundMoveBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_END_ROUND_MOVE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(END_ROUND_RANK, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectEndRoundMoveBeanEndRoundRankGet(),null));
        fields_.add(new StandardField(REASONS_END_ROUND, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectEndRoundMoveBeanReasonsEndRoundGet(),null));
        fields_.add(new StandardField(MAP_VARS_FAIL_END_ROUND, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectEndRoundMoveBeanMapVarsFailEndRoundGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_END_ROUND_MOVE_BEAN, type_);
    }
    private static void buildEffectFullHpRateBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_FULL_HP_RATE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(LEFT_USER_HP,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectFullHpRateBeanLeftUserHpGet(),null));
        fields_.add(new StandardField(RESTORED_HP,BeanNatCommonLgNames.STRING,false,false,new EffectFullHpRateBeanRestoredHpGet(),null));
        fields_.add(new StandardField(MAP_VARS_RESTORED, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectFullHpRateBeanMapVarsRestoredGet(),null));
        fields_.add(new StandardField(CLOSEST_FOE_DAMAGE_RATE_HP,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectFullHpRateBeanClosestFoeDamageRateHpGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_FULL_HP_RATE_BEAN, type_);
    }
    private static void buildEffectGlobalBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_GLOBAL_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(WEATHER,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectGlobalBeanWeatherGet(),null));
        fields_.add(new StandardField(CANCELED_IF_USED,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectGlobalBeanCanceledIfUsedGet(),null));
        fields_.add(new StandardField(REVERSE_ORDER_OF_SORT_BY_SPEED,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectGlobalBeanReverseOrderOfSortBySpeedGet(),null));
        fields_.add(new StandardField(UNUSABLE_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectGlobalBeanUnusableItemGet(),null));
        fields_.add(new StandardField(PUTTING_KO,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectGlobalBeanPuttingKoGet(),null));
        fields_.add(new StandardField(MULT_ACCURACY,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectGlobalBeanMultAccuracyGet(),null));
        fields_.add(new StandardField(DAMAGE_END_ROUND,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectGlobalBeanDamageEndRoundGet(),null));
        fields_.add(new StandardField(HEALING_END_ROUND_GROUND,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectGlobalBeanHealingEndRoundGroundGet(),null));
        fields_.add(new StandardField(HEALING_END_ROUND,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectGlobalBeanHealingEndRoundGet(),null));
        fields_.add(new StandardField(MULT_EFFECT_LOVING_ALLY,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectGlobalBeanMultEffectLovingAllyGet(),null));
        fields_.add(new StandardField(PREVENT_STATUS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanPreventStatusGet(),null));
        fields_.add(new StandardField(IMMUNE_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanImmuneTypesGet(),null));
        fields_.add(new StandardField(EFFICIENCY_MOVES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectGlobalBeanEfficiencyMovesGet(),null));
        fields_.add(new StandardField(DISABLE_IMMU_AGAINST_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanDisableImmuAgainstTypesGet(),null));
        fields_.add(new StandardField(CANCEL_PROTECTING_ABILITIES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanCancelProtectingAbilitiesGet(),null));
        fields_.add(new StandardField(UNUSABLE_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanUnusableMovesGet(),null));
        fields_.add(new StandardField(CANCEL_EFFECTS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanCancelEffectsGet(),null));
        fields_.add(new StandardField(MULT_POWER_MOVES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectGlobalBeanMultPowerMovesGet(),null));
        fields_.add(new StandardField(MULT_DAMAGE_TYPES_MOVES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectGlobalBeanMultDamageTypesMovesGet(),null));
        fields_.add(new StandardField(CANCEL_CHGT_STAT, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanCancelChgtStatGet(),null));
        fields_.add(new StandardField(INVOKED_MOVE_TERRAIN,BeanNatCommonLgNames.STRING,false,false,new EffectGlobalBeanInvokedMoveTerrainGet(),null));
        fields_.add(new StandardField(INVOKING_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanInvokingMovesGet(),null));
        fields_.add(new StandardField(CHANGED_TYPES_TERRAIN, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanChangedTypesTerrainGet(),null));
        fields_.add(new StandardField(INVOKING_MOVES_CHANGING_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanInvokingMovesChangingTypesGet(),null));
        fields_.add(new StandardField(MULT_STAT_IF_CONTAINS_TYPE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectGlobalBeanMultStatIfContainsTypeGet(),null));
        fields_.add(new StandardField(MULT_DAMAGE_PREPA_ROUND, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectGlobalBeanMultDamagePrepaRoundGet(),null));
        fields_.add(new StandardField(MOVES_USED_BY_TARGETED_FIGHTERS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectGlobalBeanMovesUsedByTargetedFightersGet(),null));
        methods_.add( new SpecNatMethod(CLICK_PREVENTED_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickPreventedStatus()));
        methods_.add( new SpecNatMethod(GET_TR_PREVENTED_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrPreventedStatus()));
        methods_.add( new SpecNatMethod(CLICK_CANCELLED_ABILITY,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickCancelledAbility()));
        methods_.add( new SpecNatMethod(GET_TR_CANCELLED_ABILITY,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrCancelledAbility()));
        methods_.add( new SpecNatMethod(CLICK_UNUSABLE_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickUnusableMove()));
        methods_.add( new SpecNatMethod(GET_TR_UNUSABLE_MOVES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrUnusableMoves()));
        methods_.add( new SpecNatMethod(CLICK_CANCELLED_EFFECT,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickCancelledEffect()));
        methods_.add( new SpecNatMethod(GET_TR_CANCELLED_EFFECT,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrCancelledEffect()));
        methods_.add( new SpecNatMethod(CLICK_MULT_MOVE_POWER,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickMultMovePower()));
        methods_.add( new SpecNatMethod(GET_TR_MULT_MOVE_POWER,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrMultMovePower()));
        methods_.add( new SpecNatMethod(CLICK_INVOKED_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickInvokedMove()));
        methods_.add( new SpecNatMethod(GET_TR_INVOKED_MOVE_TERRAIN,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrInvokedMoveTerrain()));
        methods_.add( new SpecNatMethod(CLICK_INVOKING_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickInvokingMove()));
        methods_.add( new SpecNatMethod(GET_TR_INVOKING_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrInvokingMove()));
        methods_.add( new SpecNatMethod(CLICK_INVOKING_MOVE_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickInvokingMoveTypes()));
        methods_.add( new SpecNatMethod(GET_TR_INVOKING_MOVE_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrInvokingMoveTypes()));
        methods_.add( new SpecNatMethod(GET_TR_MULT_STAT_IF_DAMGE_TYPE_FIRST,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrMultStatIfDamgeTypeFirst()));
        methods_.add( new SpecNatMethod(GET_TR_MULT_STAT_IF_DAMGE_TYPE_SECOND,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrMultStatIfDamgeTypeSecond()));
        methods_.add( new SpecNatMethod(CLICK_MOVES_TARGET,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanClickMovesTarget()));
        methods_.add( new SpecNatMethod(GET_TR_MOVES_TARGET,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectGlobalBeanGetTrMovesTarget()));
        _std.getStds().addEntry(TYPE_EFFECT_GLOBAL_BEAN, type_);
    }
    private static void buildEffectInvokeBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_INVOKE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(INVOKING_MOVE_BUT_USER,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingMoveButUserGet(),null));
        fields_.add(new StandardField(INVOKING_TARGET_CHOSEN_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingTargetChosenMoveGet(),null));
        fields_.add(new StandardField(INVOKING_USER_MOVE_WHILE_SLEEP,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingUserMoveWhileSleepGet(),null));
        fields_.add(new StandardField(INVOKING_ALLY_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingAllyMoveGet(),null));
        fields_.add(new StandardField(INVOKING_TARGET_SUCCESFUL_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingTargetSuccesfulMoveGet(),null));
        fields_.add(new StandardField(INVOKING_SUFFERED_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectInvokeBeanInvokingSufferedMoveGet(),null));
        fields_.add(new StandardField(RATE_INVOKATION_MOVE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectInvokeBeanRateInvokationMoveGet(),null));
        fields_.add(new StandardField(MOVE_FCT_ENV, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectInvokeBeanMoveFctEnvGet(),null));
        fields_.add(new StandardField(GLOBAL_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectInvokeBeanGlobalMovesGet(),null));
        fields_.add(new StandardField(INVOKING_MOVE_BY_USER_TYPES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectInvokeBeanInvokingMoveByUserTypesGet(),null));
        fields_.add(new StandardField(MOVES_NOT_TO_BE_INVOKED, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectInvokeBeanMovesNotToBeInvokedGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrEnv()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanClickMoveFctEnv()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrMoveFctEnv()));
        methods_.add( new SpecNatMethod(CLICK_GLOBAL_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanClickGlobalMoveFctEnv()));
        methods_.add( new SpecNatMethod(GET_TR_GLOBAL_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrGlobalMoveFctEnv()));
        methods_.add( new SpecNatMethod(IS_TYPE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectInvokeBeanIsType()));
        methods_.add( new SpecNatMethod(GET_TR_USER_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrUserTypes()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_USER_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanClickMoveUserTypes()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE_USER_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrMoveUserTypes()));
        methods_.add( new SpecNatMethod(CLICK_MOVE_NOT_INVOK,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanClickMoveNotInvok()));
        methods_.add( new SpecNatMethod(GET_TR_MOVE_NOT_INVOK,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectInvokeBeanGetTrMoveNotInvok()));
        _std.getStds().addEntry(TYPE_EFFECT_INVOKE_BEAN, type_);
    }
    private static void buildEffectMultSufferedMovePowerBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_MULT_SUFFERED_MOVE_POWER_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(MULT_MOVE_POWER_FCT_TYPE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectMultSufferedMovePowerBeanMultMovePowerFctTypeGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectMultSufferedMovePowerBeanGetTrType()));
        _std.getStds().addEntry(TYPE_EFFECT_MULT_SUFFERED_MOVE_POWER_BEAN, type_);
    }
    private static void buildEffectMultUsedMovePowerBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_MULT_USED_MOVE_POWER_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(MULT_MOVE_POWER_FCT_TYPE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectMultUsedMovePowerBeanMultMovePowerFctTypeGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectMultUsedMovePowerBeanGetTrType()));
        _std.getStds().addEntry(TYPE_EFFECT_MULT_USED_MOVE_POWER_BEAN, type_);
    }
    private static void buildEffectOrderBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_ORDER_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(TARGET_ATTACKS_LAST,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectOrderBeanTargetAttacksLastGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_ORDER_BEAN, type_);
    }
    private static void buildEffectProtectFromTypesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_PROTECT_FROM_TYPES_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(IMMU_AGAINST_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectProtectFromTypesBeanImmuAgainstTypesGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectProtectFromTypesBeanGetTrType()));
        _std.getStds().addEntry(TYPE_EFFECT_PROTECT_FROM_TYPES_BEAN, type_);
    }
    private static void buildEffectProtectionBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_PROTECTION_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(PROT_SINGLE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectProtectionBeanProtSingleGet(),null));
        fields_.add(new StandardField(PROT_SINGLE_AGAINST_KO,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectProtectionBeanProtSingleAgainstKoGet(),null));
        fields_.add(new StandardField(PROT_TEAM_AGAINST_MULT_TARGETS,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectProtectionBeanProtTeamAgainstMultTargetsGet(),null));
        fields_.add(new StandardField(PROT_TEAM_AGAINST_PRIO,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectProtectionBeanProtTeamAgainstPrioGet(),null));
        fields_.add(new StandardField(PROT_TEAM_AGAINST_STATUS_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectProtectionBeanProtTeamAgainstStatusMovesGet(),null));
        fields_.add(new StandardField(PROT_TEAM_AGAINST_DAMAGE_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectProtectionBeanProtTeamAgainstDamageMovesGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_PROTECTION_BEAN, type_);
    }
    private static void buildEffectRemainedHpRateBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_REMAINED_HP_RATE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(WIN_HP,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectRemainedHpRateBeanWinHpGet(),null));
        fields_.add(new StandardField(RATE_HP,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectRemainedHpRateBeanRateHpGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_REMAINED_HP_RATE_BEAN, type_);
    }
    private static void buildEffectRestrictionBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_RESTRICTION_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(FORBID_TARGET_USING_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectRestrictionBeanForbidTargetUsingItemGet(),null));
        methods_.add( new SpecNatMethod(FORBID,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForbid()));
        methods_.add( new SpecNatMethod(FORBID_STATUS_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForbidStatusMove()));
        methods_.add( new SpecNatMethod(FORBID_LAST_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForbidLastMove()));
        methods_.add( new SpecNatMethod(FORBID_USER_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForbidUserMoves()));
        methods_.add( new SpecNatMethod(FORBID_USE_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForbidUseMove()));
        methods_.add( new SpecNatMethod(FORCE_USE_MOVE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectRestrictionBeanForceUseMove()));
        _std.getStds().addEntry(TYPE_EFFECT_RESTRICTION_BEAN, type_);
    }
    private static void buildEffectStatisticBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_STATISTIC_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(EVT_RATE,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectStatisticBeanEvtRateGet(),null));
        fields_.add(new StandardField(EVT_RATE_PER_CENT,BeanNatCommonLgNames.STRING,false,false,new EffectStatisticBeanEvtRatePerCentGet(),null));
        fields_.add(new StandardField(STATIS_VAR_RANK, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectStatisticBeanStatisVarRankGet(),null));
        fields_.add(new StandardField(MAP_VARS_STATISTICS, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectStatisticBeanMapVarsStatisticsGet(),null));
        fields_.add(new StandardField(SWAP_BOOST_STATIS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectStatisticBeanSwapBoostStatisGet(),null));
        fields_.add(new StandardField(CANCEL_LOW_STAT, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectStatisticBeanCancelLowStatGet(),null));
        fields_.add(new StandardField(DEFAULT_BOOST, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectStatisticBeanDefaultBoostGet(),null));
        fields_.add(new StandardField(CANCEL_CHGT_STAT, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectStatisticBeanCancelChgtStatGet(),null));
        fields_.add(new StandardField(COPY_BOOST, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectStatisticBeanCopyBoostGet(),null));
        methods_.add( new SpecNatMethod(RANDOM_STATIS,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectStatisticBeanRandomStatis()));
        methods_.add( new SpecNatMethod(IS_ALWAYS_ENABLED,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectStatisticBeanIsAlwaysEnabled()));
        methods_.add( new SpecNatMethod(NOT_EMPTY_VAR_BOOST,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectStatisticBeanNotEmptyVarBoost()));
        methods_.add( new SpecNatMethod(GET_FAIL,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatisticBeanGetFail()));
        methods_.add( new SpecNatMethod(GET_RATE,BeanNatCommonLgNames.TYPE_RATE, false, MethodModifier.NORMAL,new EffectStatisticBeanGetRate()));
        methods_.add( new SpecNatMethod(GET_SWAP_FAIL,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatisticBeanGetSwapFail()));
        _std.getStds().addEntry(TYPE_EFFECT_STATISTIC_BEAN, type_);
    }
    private static void buildEffectStatusBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_STATUS_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(LAW_STATUS, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectStatusBeanLawStatusGet(),null));
        fields_.add(new StandardField(MAP_VARS_STATUS, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectStatusBeanMapVarsStatusGet(),null));
        fields_.add(new StandardField(DELETED_STATUS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectStatusBeanDeletedStatusGet(),null));
        fields_.add(new StandardField(KO_USER_HEAL_SUBST,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectStatusBeanKoUserHealSubstGet(),null));
        fields_.add(new StandardField(STATUS_FROM_USER,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectStatusBeanStatusFromUserGet(),null));
        methods_.add( new SpecNatMethod(IS_STATUS,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectStatusBeanIsStatus()));
        methods_.add( new SpecNatMethod(CLICK_LINK,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatusBeanClickLink()));
        methods_.add( new SpecNatMethod(GET_TR_LINK,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatusBeanGetTrLink()));
        methods_.add( new SpecNatMethod(GET_FAIL,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatusBeanGetFail()));
        methods_.add( new SpecNatMethod(CLICK_LINK_DELETED,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatusBeanClickLinkDeleted()));
        methods_.add( new SpecNatMethod(GET_TR_LINK_DELETED,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectStatusBeanGetTrLinkDeleted()));
        _std.getStds().addEntry(TYPE_EFFECT_STATUS_BEAN, type_);
    }
    private static void buildEffectSwitchAbilitiesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_SWITCH_ABILITIES_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        methods_.add( new SpecNatMethod(GIVE_TO_TARGET,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanGiveToTarget()));
        methods_.add( new SpecNatMethod(GIVE_TO_USER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanGiveToUser()));
        methods_.add( new SpecNatMethod(GIVE_CONST,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanGiveConst()));
        methods_.add( new SpecNatMethod(IS_DEF_ABILITY,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanIsDefAbility()));
        methods_.add( new SpecNatMethod(CLICK_ABILITY,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanClickAbility()));
        methods_.add( new SpecNatMethod(GET_TR_ABILITY,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanGetTrAbility()));
        methods_.add( new SpecNatMethod(SWITCH_ABILITIES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchAbilitiesBeanSwitchAbilities()));
        _std.getStds().addEntry(TYPE_EFFECT_SWITCH_ABILITIES_BEAN, type_);
    }
    private static void buildEffectSwitchItemsBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_SWITCH_ITEMS_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        methods_.add( new SpecNatMethod(DELETE_TARGET_BERRY,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanDeleteTargetBerry()));
        methods_.add( new SpecNatMethod(TAKE_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanTakeItem()));
        methods_.add( new SpecNatMethod(REMOVE_TARGET_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanRemoveTargetItem()));
        methods_.add( new SpecNatMethod(SWITCH_ITEMS,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanSwitchItems()));
        methods_.add( new SpecNatMethod(RESUSE_LAST_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanResuseLastItem()));
        methods_.add( new SpecNatMethod(GIVE_TARGET_ITEM,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanGiveTargetItem()));
        methods_.add( new SpecNatMethod(USE_ITEM_AS_POSSIBLE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchItemsBeanUseItemAsPossible()));
        _std.getStds().addEntry(TYPE_EFFECT_SWITCH_ITEMS_BEAN, type_);
    }
    private static void buildEffectSwitchMoveTypesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_SWITCH_MOVE_TYPES_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(REPLACING_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectSwitchMoveTypesBeanReplacingTypesGet(),null));
        fields_.add(new StandardField(CHANGE_TYPES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectSwitchMoveTypesBeanChangeTypesGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_REPLACING_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchMoveTypesBeanGetTrReplacingTypes()));
        methods_.add( new SpecNatMethod(GET_TR_CHANGED_TYPES,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchMoveTypesBeanGetTrChangedTypes()));
        _std.getStds().addEntry(TYPE_EFFECT_SWITCH_MOVE_TYPES_BEAN, type_);
    }
    private static void buildEffectSwitchPointViewBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_SWITCH_POINT_VIEW_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        methods_.add( new SpecNatMethod(THIEVE_BONUS,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchPointViewBeanThieveBonus()));
        methods_.add( new SpecNatMethod(MIRROR_AGAINST_USER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchPointViewBeanMirrorAgainstUser()));
        methods_.add( new SpecNatMethod(ATTRACT_DAMAGE_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchPointViewBeanAttractDamageMoves()));
        _std.getStds().addEntry(TYPE_EFFECT_SWITCH_POINT_VIEW_BEAN, type_);
    }
    private static void buildEffectSwitchTypesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_SWITCH_TYPES_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(CHGT_TYPE_BY_ENV, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectSwitchTypesBeanChgtTypeByEnvGet(),null));
        fields_.add(new StandardField(GLOBAL_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectSwitchTypesBeanGlobalMovesGet(),null));
        fields_.add(new StandardField(ADDED_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectSwitchTypesBeanAddedTypesGet(),null));
        fields_.add(new StandardField(CONST_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectSwitchTypesBeanConstTypesGet(),null));
        methods_.add( new SpecNatMethod(IS_RES_TYPES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanIsResTypes()));
        methods_.add( new SpecNatMethod(IS_USER_TYPES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanIsUserTypes()));
        methods_.add( new SpecNatMethod(IS_CONST_TYPES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanIsConstTypes()));
        methods_.add( new SpecNatMethod(GET_TR_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGetTrEnv()));
        methods_.add( new SpecNatMethod(CLICK_GLOBAL_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanClickGlobalMoveFctEnv()));
        methods_.add( new SpecNatMethod(GET_TR_GLOBAL_MOVE_FCT_ENV,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGetTrGlobalMoveFctEnv()));
        methods_.add( new SpecNatMethod(GET_TR_ADDED_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGetTrAddedType()));
        methods_.add( new SpecNatMethod(GIVE_TO_TARGET,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGiveToTarget()));
        methods_.add( new SpecNatMethod(GIVE_TO_USER,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGiveToUser()));
        methods_.add( new SpecNatMethod(SWITCH_TYPES,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanSwitchTypes()));
        methods_.add( new SpecNatMethod(GIVE_CONST,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGiveConst()));
        methods_.add( new SpecNatMethod(GET_TR_CONST_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectSwitchTypesBeanGetTrConstType()));
        _std.getStds().addEntry(TYPE_EFFECT_SWITCH_TYPES_BEAN, type_);
    }
    private static void buildEffectTeamBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_TEAM_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(FORBIDDING_HEALING,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectTeamBeanForbiddingHealingGet(),null));
        fields_.add(new StandardField(PROTECT_AGAINST_CH,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new EffectTeamBeanProtectAgainstChGet(),null));
        fields_.add(new StandardField(FORBIDDEN_BOOST, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanForbiddenBoostGet(),null));
        fields_.add(new StandardField(CANCEL_CHGT_STAT_FOE_TEAM, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanCancelChgtStatFoeTeamGet(),null));
        fields_.add(new StandardField(DEFAULT_BOOST, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectTeamBeanDefaultBoostGet(),null));
        fields_.add(new StandardField(CANCEL_CHGT_STAT_TEAM, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanCancelChgtStatTeamGet(),null));
        fields_.add(new StandardField(PROTECT_AGAINST_LOW_STAT, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanProtectAgainstLowStatGet(),null));
        fields_.add(new StandardField(PROTECT_AGAINST_STATUS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanProtectAgainstStatusGet(),null));
        fields_.add(new StandardField(MULT_STATISTIC, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamBeanMultStatisticGet(),null));
        fields_.add(new StandardField(MULT_STATISTIC_FOE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamBeanMultStatisticFoeGet(),null));
        fields_.add(new StandardField(MULT_DAMAGE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamBeanMultDamageGet(),null));
        fields_.add(new StandardField(UNUSABLE_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanUnusableMovesGet(),null));
        fields_.add(new StandardField(DISABLE_FOE_TEAM_EFFECTS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanDisableFoeTeamEffectsGet(),null));
        fields_.add(new StandardField(DISABLE_FOE_TEAM_STATUS, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamBeanDisableFoeTeamStatusGet(),null));
        methods_.add( new SpecNatMethod(CLICK_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanClickStatus()));
        methods_.add( new SpecNatMethod(GET_TR_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanGetTrStatus()));
        methods_.add( new SpecNatMethod(CLICK_UNUSABLE_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanClickUnusableMove()));
        methods_.add( new SpecNatMethod(GET_TR_UNUSABLE_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanGetTrUnusableMove()));
        methods_.add( new SpecNatMethod(CLICK_DISABLE_FOE_TEAM_EFFECTS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanClickDisableFoeTeamEffects()));
        methods_.add( new SpecNatMethod(GET_TR_DISABLE_FOE_TEAM_EFFECTS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanGetTrDisableFoeTeamEffects()));
        methods_.add( new SpecNatMethod(CLICK_DISABLE_FOE_TEAM_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanClickDisableFoeTeamStatus()));
        methods_.add( new SpecNatMethod(GET_TR_DISABLE_FOE_TEAM_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamBeanGetTrDisableFoeTeamStatus()));
        _std.getStds().addEntry(TYPE_EFFECT_TEAM_BEAN, type_);
    }
    private static void buildEffectTeamWhileSendFoeBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_TEAM_WHILE_SEND_FOE_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(DAMAGE_RATE_AGAINST_FOE,BeanNatCommonLgNames.STRING,false,false,new EffectTeamWhileSendFoeBeanDamageRateAgainstFoeGet(),null));
        fields_.add(new StandardField(MAP_VARS_DAMAGE_SENT_FOE, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamWhileSendFoeBeanMapVarsDamageSentFoeGet(),null));
        fields_.add(new StandardField(STATISTICS, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamWhileSendFoeBeanStatisticsGet(),null));
        fields_.add(new StandardField(STATUS_BY_NB_USES, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamWhileSendFoeBeanStatusByNbUsesGet(),null));
        fields_.add(new StandardField(REASONS_SENDING, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamWhileSendFoeBeanReasonsSendingGet(),null));
        fields_.add(new StandardField(MAP_VARS_FAIL_SENDING, BeanNatCommonLgNames.TYPE_MAP,false,false,new EffectTeamWhileSendFoeBeanMapVarsFailSendingGet(),null));
        fields_.add(new StandardField(DELETED_BY_FOE_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectTeamWhileSendFoeBeanDeletedByFoeTypesGet(),null));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATISTIC,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamWhileSendFoeBeanGetTranslatedStatistic()));
        methods_.add( new SpecNatMethod(CLICK_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamWhileSendFoeBeanClickStatus()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATUS,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamWhileSendFoeBeanGetTranslatedStatus()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectTeamWhileSendFoeBeanGetTranslatedType()));
        _std.getStds().addEntry(TYPE_EFFECT_TEAM_WHILE_SEND_FOE_BEAN, type_);
    }
    private static void buildEffectUnprotectFromTypesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_UNPROTECT_FROM_TYPES_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectUnprotectFromTypesBeanTypesGet(),null));
        fields_.add(new StandardField(DISABLE_IMMU_AGAINST_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectUnprotectFromTypesBeanDisableImmuAgainstTypesGet(),null));
        fields_.add(new StandardField(DISABLE_IMMU_FROM_MOVES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectUnprotectFromTypesBeanDisableImmuFromMovesGet(),null));
        fields_.add(new StandardField(ATTACK_TARGET_WITH_TYPES, BeanNatCommonLgNames.TYPE_LIST,false,false,new EffectUnprotectFromTypesBeanAttackTargetWithTypesGet(),null));
        methods_.add( new SpecNatMethod(GET_TR_DAMAGE_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanGetTrDamageType()));
        methods_.add( new SpecNatMethod(GET_TR_POKEMON_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanGetTrPokemonType()));
        methods_.add( new SpecNatMethod(GET_TR_DISABLE_IMMU_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanGetTrDisableImmuType()));
        methods_.add( new SpecNatMethod(CLICK_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanClickMove()));
        methods_.add( new SpecNatMethod(GET_TR_DISABLE_IMMU_MOVE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanGetTrDisableImmuMove()));
        methods_.add( new SpecNatMethod(GET_TR_ATTACK_TARGET_TYPE,BeanNatCommonLgNames.STRING, false, MethodModifier.NORMAL,new EffectUnprotectFromTypesBeanGetTrAttackTargetType()));
        _std.getStds().addEntry(TYPE_EFFECT_UNPROTECT_FROM_TYPES_BEAN, type_);
    }
    private static void buildEffectVarPPBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_VAR_P_P_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(DELETE_PP, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new EffectVarPPBeanDeletePpGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_VAR_P_P_BEAN, type_);
    }
    private static void buildEffectWinMoneyBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(TYPE_EFFECT_WIN_MONEY_BEAN, fields_, methods_, AikiBeansMovesEffectsStd.TYPE_EFFECT_BEAN);
        fields_.add(new StandardField(WINNING_RATE_BY_SUM_TARGET_USER,BeanNatCommonLgNames.TYPE_RATE,false,false,new EffectWinMoneyBeanWinningRateBySumTargetUserGet(),null));
        _std.getStds().addEntry(TYPE_EFFECT_WIN_MONEY_BEAN, type_);
    }
}
