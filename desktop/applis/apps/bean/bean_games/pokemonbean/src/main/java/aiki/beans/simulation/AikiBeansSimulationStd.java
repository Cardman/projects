package aiki.beans.simulation;

import aiki.beans.AikiBeansStd;
import aiki.beans.PokemonStandards;
import aiki.beans.facade.simulation.enums.TeamCrud;
import aiki.beans.game.AikiBeansGameStd;
import aiki.beans.game.DifficultyBeanComGet;
import code.bean.nat.*;
import code.scripts.confs.PkScriptPages;
import code.util.CustList;
public final class AikiBeansSimulationStd{
    public static final String BEAN_SIMULATION="simulation";
    public static final String BEAN_ADDPOKEMON="addpokemon";
    public static final String BEAN_EDITPOKEMON="editpokemon";
    public static final String BEAN_EDITPOKEMONMOVES="editpokemonmoves";
    public static final String BEAN_EDITTRAINERPOKEMON="edittrainerpokemon";
    public static final String BEAN_LEVEL_SIMU="level_simu";
    public static final String BEAN_SELECTABILITY="selectability";
    public static final String BEAN_SELECTITEM="selectitem";
    public static final String BEAN_SELECTPOKEMON="selectpokemon";
    public static final String TYPE_ADD_POKEMON_BEAN = "aiki.beans.simulation.AddPokemonBean";
    public static final String TYPE_EDIT_POKEMON_BEAN = "aiki.beans.simulation.EditPokemonBean";
    public static final String TYPE_EDIT_POKEMON_MOVES_BEAN = "aiki.beans.simulation.EditPokemonMovesBean";
    public static final String TYPE_EDIT_TRAINER_POKEMON_BEAN = "aiki.beans.simulation.EditTrainerPokemonBean";
    public static final String TYPE_SELECT_ABILITY_BEAN = "aiki.beans.simulation.SelectAbilityBean";
    public static final String TYPE_SELECT_ITEM_BEAN = "aiki.beans.simulation.SelectItemBean";
    public static final String TYPE_SELECT_POKEMON_BEAN = "aiki.beans.simulation.SelectPokemonBean";
    public static final String TYPE_SIMULATION_BEAN = "aiki.beans.simulation.SimulationBean";
    public static final String TYPE_SIMULATION_LEVEL_BEAN = "aiki.beans.simulation.SimulationLevelBean";
    private static final String CANCEL = "cancel";
    private static final String ADD = "add";
    private static final String SEARCH = "search";
    private static final String GET_MINI_IMAGE = "getMiniImage";
    private static final String CLICK_LINK = "clickLink";
    private static final String TRANSLATE_NAME = "translateName";
    private static final String TRANSLATE_ITEM = "translateItem";
    private static final String CHOOSE_ITEM = "chooseItem";
    private static final String ADD_MOVES = "addMoves";
    private static final String DELETE_MOVES = "deleteMoves";
    private static final String EDIT = "edit";
    private static final String GET_TRANSLATED_STATISTIC = "getTranslatedStatistic";
    private static final String CHOOSE_NAME = "chooseName";
    private static final String CHOOSE_ABILITY = "chooseAbility";
    private static final String VALIDATE_TRAINER_PK = "validateTrainerPk";
    private static final String GET_TRANSLATED_NAME = "getTranslatedName";
    private static final String GET_TRANSLATED_ABILITY = "getTranslatedAbility";
    private static final String GET_TRANSLATED_ITEM = "getTranslatedItem";
    private static final String CLICK_ABILITY = "clickAbility";
    private static final String GET_TR_ABILITY = "getTrAbility";
    private static final String CANCEL_ITEM = "cancelItem";
    private static final String GET_REAL_STEP_NUMBER = "getRealStepNumber";
    private static final String QUIT = "quit";
    private static final String IS_DIFF_STATE = "isDiffState";
    private static final String VALIDATE_DIFF_CHOICE = "validateDiffChoice";
    private static final String IS_FOE_STATE = "isFoeState";
    private static final String ADD_PK_TRAINER = "addPkTrainer";
    private static final String SELECT_FOE_PK = "selectFoePk";
    private static final String GET_IMAGE_FOE = "getImageFoe";
    private static final String GET_NAME_FOE = "getNameFoe";
    private static final String GET_LEVEL_FOE = "getLevelFoe";
    private static final String GET_ABILITY_FOE = "getAbilityFoe";
    private static final String GET_GENDER_FOE = "getGenderFoe";
    private static final String GET_ITEM_FOE = "getItemFoe";
    private static final String GET_MOVES_FOE = "getMovesFoe";
    private static final String SELECT_ALLY_PK = "selectAllyPk";
    private static final String GET_IMAGE_ALLY = "getImageAlly";
    private static final String GET_NAME_ALLY = "getNameAlly";
    private static final String GET_LEVEL_ALLY = "getLevelAlly";
    private static final String GET_ABILITY_ALLY = "getAbilityAlly";
    private static final String GET_GENDER_ALLY = "getGenderAlly";
    private static final String GET_ITEM_ALLY = "getItemAlly";
    private static final String GET_MOVES_ALLY = "getMovesAlly";
    private static final String IS_MULTI_LAYER = "isMultiLayer";
    private static final String LAYERS = "layers";
    private static final String CLICK_LEVEL = "clickLevel";
    private static final String CLICK_LEVEL_ZERO = "clickLevelZero";
    private static final String GET_TRAINER_NAME = "getTrainerName";
    private static final String CANCEL_DIFF_CHOICE = "cancelDiffChoice";
    private static final String VALIDATE_FOE_CHOICE_FREE = "validateFoeChoiceFree";
    private static final String VALIDATE_FOE_CHOICE = "validateFoeChoice";
    private static final String IS_TEAM_STATE = "isTeamState";
    private static final String SELECT_PK = "selectPk";
    private static final String GET_IMAGE = "getImage";
    private static final String GET_NAME = "getName";
    private static final String GET_LEVEL = "getLevel";
    private static final String GET_ABILITY = "getAbility";
    private static final String GET_GENDER = "getGender";
    private static final String GET_ITEM = "getItem";
    private static final String GET_MOVES = "getMoves";
    private static final String CANCEL_TEAM = "cancelTeam";
    private static final String VALIDATE_TEAM = "validateTeam";
    private static final String VALIDATE_FOE_CHOICE_SKIP_EVOLUTIONS = "validateFoeChoiceSkipEvolutions";
    private static final String IS_EVOLUTIONS_STATE = "isEvolutionsState";
    private static final String DISPLAY_EVOLUTIONS = "displayEvolutions";
    private static final String SELECTED_INDEX = "selectedIndex";
    private static final String VALIDATE_EVO = "validateEvo";
    private static final String CANCEL_EVO = "cancelEvo";
    private static final String CANCEL_EVOLUTIONS = "cancelEvolutions";
    private static final String VALIDATE_EVOLUTIONS = "validateEvolutions";
    private static final String IS_FRONT_STATE = "isFrontState";
    private static final String VALIDATE_FRONT_FIGHTER = "validateFrontFighter";
    private static final String CANCEL_FRONT_FIGHTERS = "cancelFrontFighters";
    private static final String VALIDATE_FRONT_FIGHTERS = "validateFrontFighters";
    private static final String IS_MOVES_STATE = "isMovesState";
    private static final String SELECTED_INDEX_FOR_MOVES = "selectedIndexForMoves";
    private static final String IS_AVAILABLE_MOVES = "isAvailableMoves";
    private static final String VALIDATE_MOVES = "validateMoves";
    private static final String IS_AVAILABLE_ABILITIES = "isAvailableAbilities";
    private static final String CANCEL_MOVES = "cancelMoves";
    private static final String CANCEL_MOVES_SETS = "cancelMovesSets";
    private static final String VALIDATE_MOVES_SETS = "validateMovesSets";
    private static final String IS_MOVES_FIGHT_STATE = "isMovesFightState";
    private static final String VALIDATE_MOVES_CHOICE = "validateMovesChoice";
    private static final String CANCEL_MOVES_EVOS = "cancelMovesEvos";
    private static final String SIMULATE_FIGHT = "simulateFight";
    private static final String IS_SIMULATION_STATE = "isSimulationState";
    private static final String IS_ISSUE = "isIssue";
    private static final String GET_KO_PLAYERS = "getKoPlayers";
    private static final String GET_NOT_KO_FRONT_FOES = "getNotKoFrontFoes";
    private static final String GET_KO_FOES = "getKoFoes";
//    private static final String IS_RULES_ISSUE = "isRulesIssue";
//    private static final String IS_RULES_MOVES_ISSUE = "isRulesMovesIssue";
//    private static final String IS_RULES_LEARN_ISSUE = "isRulesLearnIssue";
//    private static final String IS_RULES_SWITCH_ISSUE = "isRulesSwitchIssue";
//    private static final String IS_SENDING_ISSUE = "isSendingIssue";
//    private static final String IS_RANDOM_ISSUE = "isRandomIssue";
//    private static final String IS_USING_ISSUE = "isUsingIssue";
//    private static final String IS_HARD_SIMULATION_ISSUE = "isHardSimulationIssue";
//    private static final String IS_ISSUE_AFTER_FIGHT = "isIssueAfterFight";
    private static final String GET_IMAGE_AFTER_FIGHT = "getImageAfterFight";
    private static final String GET_NAME_AFTER_FIGHT = "getNameAfterFight";
    private static final String GET_LEVEL_AFTER_FIGHT = "getLevelAfterFight";
    private static final String GET_ABILITY_AFTER_FIGHT = "getAbilityAfterFight";
    private static final String GET_GENDER_AFTER_FIGHT = "getGenderAfterFight";
    private static final String GET_ITEM_AFTER_FIGHT = "getItemAfterFight";
    private static final String GET_MOVES_AFTER_FIGHT = "getMovesAfterFight";
    private static final String GET_REMAINING_LIFE_RATE = "getRemainingLifeRate";
    private static final String NUMBER_NECESSARY_POINTS_FOR_GROWING_LEVEL = "numberNecessaryPointsForGrowingLevel";
    private static final String CHANGE_FIGHT = "changeFight";
    private static final String IS_FIGHT_AFTER = "isFightAfter";
    private static final String NEXT_FIGHT = "nextFight";
    private static final String DISPLAY_COMMENTS = "displayComments";
    private static final String HIDE_COMMENTS = "hideComments";
    private static final String IS_EVOLUTION_AFTER_FIGHT_STATE = "isEvolutionAfterFightState";
    private static final String SELECT_PK_AFTER_FIGHT = "selectPkAfterFight";
    private static final String VALIDATE_EVOLUTION_AFTER_FIGHT = "validateEvolutionAfterFight";
    private static final String CANCEL_EVOLUTIONS_AFTER_FIGHT = "cancelEvolutionsAfterFight";
    private static final String VALIDATE_MOVES_ABILITY_AFTER_FIGHT = "validateMovesAbilityAfterFight";
    private static final String CHANGE_FIGHT_WHILE_END = "changeFightWhileEnd";
    private static final String VALIDATE_MOVES_AFTER_FIGHT = "validateMovesAfterFight";
    private static final String CLICK_TILE = "clickTile";
    private static final String NAME_PK = "namePk";
    private static final String ABILITIES = "abilities";
    private static final String ABILITY = "ability";
    private static final String GENDERS = "genders";
    private static final String GENDER = "gender";
    private static final String LEVEL = "level";
    private static final String TYPED_NAME = "typedName";
    private static final String TYPED_TYPE = "typedType";
    private static final String WHOLE_WORD = "wholeWord";
    private static final String BOOLEANS = "booleans";
    private static final String HAS_EVO = "hasEvo";
    private static final String IS_EVO = "isEvo";
    private static final String IS_LEG = "isLeg";
    private static final String POKEDEX = "pokedex";
    private static final String MOVES = "moves";
    private static final String EXPERIENCE = "experience";
    private static final String BALLS = "balls";
    private static final String BALL = "ball";
    private static final String HAPPINESS = "happiness";
    private static final String REMAINING_HP = "remainingHp";
    private static final String HEAL = "heal";
    private static final String EV = "ev";
    private static final String CATEGORIES = "categories";
    private static final String CATEGORY = "category";
    private static final String PLAYER = "player";
    private static final String AVAILABLE_MOVES_ONLY = "availableMovesOnly";
    private static final String ALLY_PK = "allyPk";
    private static final String TYPED_ABILITY = "typedAbility";
    private static final String SORTED_ABILITIES = "sortedAbilities";
    private static final String TYPED_PRICE = "typedPrice";
    private static final String TYPED_CLASS = "typedClass";
    private static final String ITEMS = "items";
//    private static final String WIN_POINTS_FIGHT = "winPointsFight";
//    private static final String DIFF_WINNING_EXP_PTS_FIGHT = "diffWinningExpPtsFight";
//    private static final String ALLOW_CATCHING_KO = "allowCatchingKo";
//    private static final String ALLOWED_SWITCH_PLACES_END_ROUND = "allowedSwitchPlacesEndRound";
//    private static final String WIN_TRAINER_EXP = "winTrainerExp";
//    private static final String RATE_WINNING_EXP_PTS_FIGHT = "rateWinningExpPtsFight";
//    private static final String END_FIGHT_IF_ONE_TEAM_KO = "endFightIfOneTeamKo";
//    private static final String IV_PLAYER = "ivPlayer";
//    private static final String IV_FOE = "ivFoe";
//    private static final String RATE_WIN_MONEY_BASE = "rateWinMoneyBase";
//    private static final String RATE_LOOSE_MONEY_WIN = "rateLooseMoneyWin";
//    private static final String RESTORED_MOVES_END_FIGHT = "restoredMovesEndFight";
//    private static final String ENABLED_CLOSING = "enabledClosing";
//    private static final String RANDOM_WILD_FIGHT = "randomWildFight";
//    private static final String STILL_POSSIBLE_FLEE = "stillPossibleFlee";
//    private static final String SKIP_LEARNING_MOVES_WHILE_NOT_GROWING_LEVEL = "skipLearningMovesWhileNotGrowingLevel";
//    private static final String DAMAGE_RATES = "damageRates";
//    private static final String DAMAGE_RATE_PLAYER = "damageRatePlayer";
//    private static final String DAMAGE_RATE_PLAYER_TABLE = "damageRatePlayerTable";
//    private static final String DAMAGE_RATE_LAW_FOE = "damageRateLawFoe";
//    private static final String DAMAGE_RATE_FOE_TABLE = "damageRateFoeTable";
    private static final String FREE_TEAMS = "freeTeams";
    private static final String NB_TEAMS = "nbTeams";
    private static final String INDEX_TEAM = "indexTeam";
    private static final String SELECTED_TEAM_NUMBER = "selectedTeamNumber";
    private static final String NUMBERS = "numbers";
    private static final String EDIT_CST = "editCst";
    private static final String REMOVE_CST = "removeCst";
    private static final String MULTIPLICITY = "multiplicity";
    private static final String ENVIRONMENTS = "environments";
    private static final String ENVIRONMENT = "environment";
    private static final String FOE_TEAM = "foeTeam";
    private static final String ERROR_SELECTED_FOE_PK = "errorSelectedFoePk";
    private static final String SELECTED_FOE_PK = "selectedFoePk";
    private static final String SELECTED_FOE_ACTION = "selectedFoeAction";
    private static final String ALLY_TEAM = "allyTeam";
    private static final String ERROR_SELECTED_ALLY_PK = "errorSelectedAllyPk";
    private static final String SELECTED_ALLY_PK = "selectedAllyPk";
    private static final String SELECTED_ALLY_ACTION = "selectedAllyAction";
    private static final String PLACES = "places";
    private static final String OK = "ok";
    private static final String TEAM = "team";
    private static final String ERROR_SELECTED_PK = "errorSelectedPk";
    private static final String SELECTED_PK = "selectedPk";
    private static final String SELECTED_ACTION = "selectedAction";
    private static final String AVAILABLE_EVOS = "availableEvos";
    private static final String CHOSEN_EVO = "chosenEvo";
    private static final String LEVEL_EVO = "levelEvo";
    private static final String ROUND = "round";
    private static final String SELECTED_ROUND = "selectedRound";
    private static final String PLACES_FIGHT = "placesFight";
    private static final String PLACE_FIGHT = "placeFight";
    private static final String DISPLAY_IF_ERROR = "displayIfError";
    private static final String CURRENT_ABILITY = "currentAbility";
    private static final String KEPT_MOVES = "keptMoves";
    private static final String MOVES_SET = "movesSet";
    private static final String SELECTED_MOVE = "selectedMove";
    private static final String ALLY_CHOICE = "allyChoice";
    private static final String TARGET_FIGHT = "targetFight";
    private static final String TARGET = "target";
    private static final String COMMENTS = "comments";
    private static final String TEAM_AFTER_FIGHT = "teamAfterFight";
    private static final String EVOLUTIONS_AFTER_FIGHT = "evolutionsAfterFight";
    private static final String EVOLUTION_AFTER_FIGHT = "evolutionAfterFight";
    private static final String ABILITIES_AFTER_FIGHT = "abilitiesAfterFight";
    private static final String ABILITY_AFTER_FIGHT = "abilityAfterFight";
    private static final String KEPT_MOVES_AFTER_FIGHT = "keptMovesAfterFight";
    private static final String NO_FIGHT = "noFight";
    private static final String GS = "gs";
    private static final String GSL = "l";

    private AikiBeansSimulationStd(){}
    public static void build(PokemonStandards _std) {
        buildAddPokemonBean(_std);
        buildEditPokemonBean(_std);
        buildEditPokemonMovesBean(_std);
        buildEditTrainerPokemonBean(_std);
        buildSelectAbilityBean(_std);
        buildSelectItemBean(_std);
        buildSelectPokemonBean(_std);
        buildSimulationBean(_std);
        buildSimulationLevelBean(_std);
    }
    private static void buildAddPokemonBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(NAME_PK,BeanNatCommonLgNames.STRING, new AddPokemonBeanNamePkGet(),null));
        fields_.add(new StandardField(ABILITIES, BeanNatCommonLgNames.TYPE_MAP, new AddPokemonBeanAbilitiesGet(),null));
        fields_.add(new StandardField(ABILITY,BeanNatCommonLgNames.STRING, new AddPokemonBeanAbilityGet(),new AddPokemonBeanAbilitySet()));
        fields_.add(new StandardField(GENDERS, BeanNatCommonLgNames.TYPE_MAP, new AddPokemonBeanGendersGet(),null));
        fields_.add(new StandardField(GENDER,BeanNatCommonLgNames.STRING, new AddPokemonBeanGenderGet(),new AddPokemonBeanGenderSet()));
        fields_.add(new StandardField(LEVEL, BeanNatCommonLgNames.PRIM_INTEGER, new AddPokemonBeanLevelGet(),new AddPokemonBeanLevelSet()));
        fields_.add(new StandardField(TYPED_NAME,BeanNatCommonLgNames.STRING, new AddPokemonBeanTypedNameGet(),new AddPokemonBeanTypedNameSet()));
        fields_.add(new StandardField(TYPED_TYPE,BeanNatCommonLgNames.STRING, new AddPokemonBeanTypedTypeGet(),new AddPokemonBeanTypedTypeSet()));
        fields_.add(new StandardField(WHOLE_WORD,BeanNatCommonLgNames.PRIM_BOOLEAN, new AddPokemonBeanWholeWordGet(),new AddPokemonBeanWholeWordSet()));
        fields_.add(new StandardField(BOOLEANS, BeanNatCommonLgNames.TYPE_MAP, new AddPokemonBeanBooleansGet(),null));
        fields_.add(new StandardField(HAS_EVO,BeanNatCommonLgNames.STRING, new AddPokemonBeanHasEvoGet(),new AddPokemonBeanHasEvoSet()));
        fields_.add(new StandardField(IS_EVO,BeanNatCommonLgNames.STRING, new AddPokemonBeanIsEvoGet(),new AddPokemonBeanIsEvoSet()));
        fields_.add(new StandardField(IS_LEG,BeanNatCommonLgNames.STRING, new AddPokemonBeanIsLegGet(),new AddPokemonBeanIsLegSet()));
        fields_.add(new StandardField(POKEDEX, BeanNatCommonLgNames.TYPE_LIST, new AddPokemonBeanPokedexGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new AddPokemonBeanCancel()));
        methods_.add( new SpecNatMethod(ADD,BeanNatCommonLgNames.STRING, new AddPokemonBeanAdd()));
        methods_.add( new SpecNatMethod(SEARCH, BeanNatCommonLgNames.VOID, new AddPokemonBeanSearch()));
        methods_.add( new SpecNatMethod(GET_MINI_IMAGE,BeanNatCommonLgNames.STRING, new AddPokemonBeanGetMiniImage()));
        methods_.add( new SpecNatMethod(CLICK_LINK, BeanNatCommonLgNames.VOID, new AddPokemonBeanClickLink()));
        _std.getStds().addEntry(TYPE_ADD_POKEMON_BEAN, type_);
    }
    private static void buildEditPokemonBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(LEVEL, BeanNatCommonLgNames.PRIM_INTEGER, new EditPokemonBeanLevelGet(),null));
        fields_.add(new StandardField(NAME_PK,BeanNatCommonLgNames.STRING, new EditPokemonBeanNamePkGet(),null));
        fields_.add(new StandardField(MOVES, BeanNatCommonLgNames.TYPE_LIST, new EditPokemonBeanMovesGet(),null));
        fields_.add(new StandardField(EXPERIENCE,BeanNatCommonLgNames.TYPE_RATE, new EditPokemonBeanExperienceGet(),new EditPokemonBeanExperienceSet()));
        fields_.add(new StandardField(BALLS, BeanNatCommonLgNames.TYPE_MAP, new EditPokemonBeanBallsGet(),null));
        fields_.add(new StandardField(BALL,BeanNatCommonLgNames.STRING, new EditPokemonBeanBallGet(),new EditPokemonBeanBallSet()));
        fields_.add(new StandardField(HAPPINESS, BeanNatCommonLgNames.PRIM_INTEGER, new EditPokemonBeanHappinessGet(),new EditPokemonBeanHappinessSet()));
        fields_.add(new StandardField(REMAINING_HP,BeanNatCommonLgNames.TYPE_RATE, new EditPokemonBeanRemainingHpGet(),new EditPokemonBeanRemainingHpSet()));
        fields_.add(new StandardField(HEAL,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditPokemonBeanHealGet(),new EditPokemonBeanHealSet()));
        fields_.add(new StandardField(EV, BeanNatCommonLgNames.TYPE_MAP, new EditPokemonBeanEvGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new EditPokemonBeanCancel()));
        methods_.add( new SpecNatMethod(TRANSLATE_NAME,BeanNatCommonLgNames.STRING, new EditPokemonBeanTranslateName()));
        methods_.add( new SpecNatMethod(TRANSLATE_ITEM,BeanNatCommonLgNames.STRING, new EditPokemonBeanTranslateItem()));
        methods_.add( new SpecNatMethod(CHOOSE_ITEM,BeanNatCommonLgNames.STRING, new EditPokemonBeanChooseItem()));
        methods_.add( new SpecNatMethod(ADD_MOVES,BeanNatCommonLgNames.STRING, new EditPokemonBeanAddMoves()));
        methods_.add( new SpecNatMethod(DELETE_MOVES, BeanNatCommonLgNames.VOID, new EditPokemonBeanDeleteMoves()));
        methods_.add( new SpecNatMethod(EDIT,BeanNatCommonLgNames.STRING, new EditPokemonBeanEdit()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_STATISTIC,BeanNatCommonLgNames.STRING, new EditPokemonBeanGetTranslatedStatistic()));
        _std.getStds().addEntry(TYPE_EDIT_POKEMON_BEAN, type_);
    }
    private static void buildEditPokemonMovesBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(TYPED_NAME,BeanNatCommonLgNames.STRING, new EditPokemonMovesBeanTypedNameGet(),new EditPokemonMovesBeanTypedNameSet()));
        fields_.add(new StandardField(CATEGORIES, BeanNatCommonLgNames.TYPE_MAP, new EditPokemonMovesBeanCategoriesGet(),null));
        fields_.add(new StandardField(CATEGORY,BeanNatCommonLgNames.STRING, new EditPokemonMovesBeanCategoryGet(),new EditPokemonMovesBeanCategorySet()));
        fields_.add(new StandardField(TYPED_TYPE,BeanNatCommonLgNames.STRING, new EditPokemonMovesBeanTypedTypeGet(),new EditPokemonMovesBeanTypedTypeSet()));
        fields_.add(new StandardField(WHOLE_WORD,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditPokemonMovesBeanWholeWordGet(),new EditPokemonMovesBeanWholeWordSet()));
        fields_.add(new StandardField(PLAYER,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditPokemonMovesBeanPlayerGet(),null));
        fields_.add(new StandardField(AVAILABLE_MOVES_ONLY,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditPokemonMovesBeanAvailableMovesOnlyGet(),new EditPokemonMovesBeanAvailableMovesOnlySet()));
        fields_.add(new StandardField(MOVES, BeanNatCommonLgNames.TYPE_LIST, new EditPokemonMovesBeanMovesGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new EditPokemonMovesBeanCancel()));
        methods_.add( new SpecNatMethod(SEARCH, BeanNatCommonLgNames.VOID, new EditPokemonMovesBeanSearch()));
        methods_.add( new SpecNatMethod(ADD_MOVES,BeanNatCommonLgNames.STRING, new EditPokemonMovesBeanAddMoves()));
        _std.getStds().addEntry(TYPE_EDIT_POKEMON_MOVES_BEAN, type_);
    }
    private static void buildEditTrainerPokemonBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(MOVES, BeanNatCommonLgNames.TYPE_LIST, new EditTrainerPokemonBeanMovesGet(),null));
        fields_.add(new StandardField(GENDERS, BeanNatCommonLgNames.TYPE_MAP, new EditTrainerPokemonBeanGendersGet(),null));
        fields_.add(new StandardField(GENDER,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanGenderGet(),new EditTrainerPokemonBeanGenderSet()));
        fields_.add(new StandardField(LEVEL, BeanNatCommonLgNames.PRIM_INTEGER, new EditTrainerPokemonBeanLevelGet(),new EditTrainerPokemonBeanLevelSet()));
        fields_.add(new StandardField(ADD,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditTrainerPokemonBeanAddGet(),null));
        fields_.add(new StandardField(ALLY_PK,BeanNatCommonLgNames.PRIM_BOOLEAN, new EditTrainerPokemonBeanAllyPkGet(),new EditTrainerPokemonBeanAllyPkSet()));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanCancel()));
        methods_.add( new SpecNatMethod(CHOOSE_NAME,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanChooseName()));
        methods_.add( new SpecNatMethod(CHOOSE_ITEM,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanChooseItem()));
        methods_.add( new SpecNatMethod(CHOOSE_ABILITY,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanChooseAbility()));
        methods_.add( new SpecNatMethod(ADD_MOVES,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanAddMoves()));
        methods_.add( new SpecNatMethod(DELETE_MOVES, BeanNatCommonLgNames.VOID, new EditTrainerPokemonBeanDeleteMoves()));
        methods_.add( new SpecNatMethod(VALIDATE_TRAINER_PK,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanValidateTrainerPk()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_NAME,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanGetTranslatedName()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_ABILITY,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanGetTranslatedAbility()));
        methods_.add( new SpecNatMethod(GET_TRANSLATED_ITEM,BeanNatCommonLgNames.STRING, new EditTrainerPokemonBeanGetTranslatedItem()));
        _std.getStds().addEntry(TYPE_EDIT_TRAINER_POKEMON_BEAN, type_);
    }
    private static void buildSelectAbilityBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(TYPED_ABILITY,BeanNatCommonLgNames.STRING, new SelectAbilityBeanTypedAbilityGet(),new SelectAbilityBeanTypedAbilitySet()));
        fields_.add(new StandardField(SORTED_ABILITIES, BeanNatCommonLgNames.TYPE_LIST, new SelectAbilityBeanSortedAbilitiesGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new SelectAbilityBeanCancel()));
        methods_.add( new SpecNatMethod(SEARCH,BeanNatCommonLgNames.STRING, new SelectAbilityBeanSearch()));
        methods_.add( new SpecNatMethod(CLICK_ABILITY,BeanNatCommonLgNames.STRING, new SelectAbilityBeanClickAbility()));
        methods_.add( new SpecNatMethod(GET_TR_ABILITY,BeanNatCommonLgNames.STRING, new SelectAbilityBeanGetTrAbility()));
        _std.getStds().addEntry(TYPE_SELECT_ABILITY_BEAN, type_);
    }
    private static void buildSelectItemBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(TYPED_NAME,BeanNatCommonLgNames.STRING, new SelectItemBeanTypedNameGet(),new SelectItemBeanTypedNameSet()));
        fields_.add(new StandardField(TYPED_PRICE,BeanNatCommonLgNames.STRING, new SelectItemBeanTypedPriceGet(),new SelectItemBeanTypedPriceSet()));
        fields_.add(new StandardField(TYPED_CLASS,BeanNatCommonLgNames.STRING, new SelectItemBeanTypedClassGet(),new SelectItemBeanTypedClassSet()));
        fields_.add(new StandardField(ITEMS, BeanNatCommonLgNames.TYPE_LIST, new SelectItemBeanItemsGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new SelectItemBeanCancel()));
        methods_.add( new SpecNatMethod(CANCEL_ITEM,BeanNatCommonLgNames.STRING, new SelectItemBeanCancelItem()));
        methods_.add( new SpecNatMethod(SEARCH,BeanNatCommonLgNames.STRING, new SelectItemBeanSearch()));
        methods_.add( new SpecNatMethod(GET_MINI_IMAGE,BeanNatCommonLgNames.STRING, new SelectItemBeanGetMiniImage()));
        methods_.add( new SpecNatMethod(CLICK_LINK,BeanNatCommonLgNames.STRING, new SelectItemBeanClickLink()));
        _std.getStds().addEntry(TYPE_SELECT_ITEM_BEAN, type_);
    }
    private static void buildSelectPokemonBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField(TYPED_NAME,BeanNatCommonLgNames.STRING, new SelectPokemonBeanTypedNameGet(),new SelectPokemonBeanTypedNameSet()));
        fields_.add(new StandardField(TYPED_TYPE,BeanNatCommonLgNames.STRING, new SelectPokemonBeanTypedTypeGet(),new SelectPokemonBeanTypedTypeSet()));
        fields_.add(new StandardField(WHOLE_WORD,BeanNatCommonLgNames.PRIM_BOOLEAN, new SelectPokemonBeanWholeWordGet(),new SelectPokemonBeanWholeWordSet()));
        fields_.add(new StandardField(BOOLEANS, BeanNatCommonLgNames.TYPE_MAP, new SelectPokemonBeanBooleansGet(),null));
        fields_.add(new StandardField(HAS_EVO,BeanNatCommonLgNames.STRING, new SelectPokemonBeanHasEvoGet(),new SelectPokemonBeanHasEvoSet()));
        fields_.add(new StandardField(IS_EVO,BeanNatCommonLgNames.STRING, new SelectPokemonBeanIsEvoGet(),new SelectPokemonBeanIsEvoSet()));
        fields_.add(new StandardField(IS_LEG,BeanNatCommonLgNames.STRING, new SelectPokemonBeanIsLegGet(),new SelectPokemonBeanIsLegSet()));
        fields_.add(new StandardField(POKEDEX, BeanNatCommonLgNames.TYPE_LIST, new SelectPokemonBeanPokedexGet(),null));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new SelectPokemonBeanCancel()));
        methods_.add( new SpecNatMethod(SEARCH,BeanNatCommonLgNames.STRING, new SelectPokemonBeanSearch()));
        methods_.add( new SpecNatMethod(GET_MINI_IMAGE,BeanNatCommonLgNames.STRING, new SelectPokemonBeanGetMiniImage()));
        methods_.add( new SpecNatMethod(CLICK_LINK,BeanNatCommonLgNames.STRING, new SelectPokemonBeanClickLink()));
        _std.getStds().addEntry(TYPE_SELECT_POKEMON_BEAN, type_);
    }
    private static void buildSimulationBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_COMMON_BEAN);
        fields_.add(new StandardField("d", BeanNatCommonLgNames.STRING, new CstNatCaller(PkScriptPages.DIFF_COMMON_HTML),null));
        fields_.add(new StandardField("c", AikiBeansGameStd.TYPE_DIFFICULTY_COMMON_BEAN, new DifficultyBeanComGet(),null));
//        fields_.add(new StandardField(WIN_POINTS_FIGHT, BeanNatCommonLgNames.TYPE_MAP,false,false,new SimulationBeanWinPointsFightGet(),null));
//        fields_.add(new StandardField(DIFF_WINNING_EXP_PTS_FIGHT,BeanNatCommonLgNames.STRING,false,false,new SimulationBeanDiffWinningExpPtsFightGet(),new SimulationBeanDiffWinningExpPtsFightSet()));
//        fields_.add(new StandardField(ALLOW_CATCHING_KO,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanAllowCatchingKoGet(),new SimulationBeanAllowCatchingKoSet()));
//        fields_.add(new StandardField(ALLOWED_SWITCH_PLACES_END_ROUND,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanAllowedSwitchPlacesEndRoundGet(),new SimulationBeanAllowedSwitchPlacesEndRoundSet()));
//        fields_.add(new StandardField(WIN_TRAINER_EXP,BeanNatCommonLgNames.TYPE_RATE,false,false,new SimulationBeanWinTrainerExpGet(),new SimulationBeanWinTrainerExpSet()));
//        fields_.add(new StandardField(RATE_WINNING_EXP_PTS_FIGHT,BeanNatCommonLgNames.TYPE_RATE,false,false,new SimulationBeanRateWinningExpPtsFightGet(),new SimulationBeanRateWinningExpPtsFightSet()));
//        fields_.add(new StandardField(END_FIGHT_IF_ONE_TEAM_KO,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanEndFightIfOneTeamKoGet(),new SimulationBeanEndFightIfOneTeamKoSet()));
//        fields_.add(new StandardField(IV_PLAYER, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new SimulationBeanIvPlayerGet(),new SimulationBeanIvPlayerSet()));
//        fields_.add(new StandardField(IV_FOE, BeanNatCommonLgNames.PRIM_INTEGER,false,false,new SimulationBeanIvFoeGet(),new SimulationBeanIvFoeSet()));
//        fields_.add(new StandardField(RATE_WIN_MONEY_BASE,BeanNatCommonLgNames.TYPE_RATE,false,false,new SimulationBeanRateWinMoneyBaseGet(),new SimulationBeanRateWinMoneyBaseSet()));
//        fields_.add(new StandardField(RATE_LOOSE_MONEY_WIN,BeanNatCommonLgNames.TYPE_RATE,false,false,new SimulationBeanRateLooseMoneyWinGet(),new SimulationBeanRateLooseMoneyWinSet()));
//        fields_.add(new StandardField(RESTORED_MOVES_END_FIGHT,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanRestoredMovesEndFightGet(),new SimulationBeanRestoredMovesEndFightSet()));
//        fields_.add(new StandardField(ENABLED_CLOSING,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanEnabledClosingGet(),new SimulationBeanEnabledClosingSet()));
//        fields_.add(new StandardField(RANDOM_WILD_FIGHT,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanRandomWildFightGet(),new SimulationBeanRandomWildFightSet()));
//        fields_.add(new StandardField(STILL_POSSIBLE_FLEE,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanStillPossibleFleeGet(),new SimulationBeanStillPossibleFleeSet()));
//        fields_.add(new StandardField(SKIP_LEARNING_MOVES_WHILE_NOT_GROWING_LEVEL,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanSkipLearningMovesWhileNotGrowingLevelGet(),new SimulationBeanSkipLearningMovesWhileNotGrowingLevelSet()));
//        fields_.add(new StandardField(DAMAGE_RATES, BeanNatCommonLgNames.TYPE_MAP,false,false,new SimulationBeanDamageRatesGet(),null));
//        fields_.add(new StandardField(DAMAGE_RATE_PLAYER,BeanNatCommonLgNames.STRING,false,false,new SimulationBeanDamageRatePlayerGet(),new SimulationBeanDamageRatePlayerSet()));
//        fields_.add(new StandardField(DAMAGE_RATE_PLAYER_TABLE, BeanNatCommonLgNames.TYPE_MAP,false,false,new SimulationBeanDamageRatePlayerTableGet(),null));
//        fields_.add(new StandardField(DAMAGE_RATE_LAW_FOE,BeanNatCommonLgNames.STRING,false,false,new SimulationBeanDamageRateLawFoeGet(),new SimulationBeanDamageRateLawFoeSet()));
//        fields_.add(new StandardField(DAMAGE_RATE_FOE_TABLE, BeanNatCommonLgNames.TYPE_MAP,false,false,new SimulationBeanDamageRateFoeTableGet(),null));
        fields_.add(new StandardField(FREE_TEAMS,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanFreeTeamsGet(),null));
//        fields_.add(new StandardField(FREE_TEAMS,BeanNatCommonLgNames.PRIM_BOOLEAN,false,false,new SimulationBeanFreeTeamsGet(),new SimulationBeanFreeTeamsSet()));
        fields_.add(new StandardField(NB_TEAMS,BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanNbTeamsGet(),new SimulationBeanNbTeamsSet()));
        fields_.add(new StandardField(INDEX_TEAM,BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanIndexTeamGet(),new SimulationBeanIndexTeamSet()));
        fields_.add(new StandardField(SELECTED_TEAM_NUMBER,BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanSelectedTeamNumberGet(),null));
        fields_.add(new StandardField(NUMBERS,BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanNumbers(),null));
        fields_.add(new StandardField(EDIT_CST,BeanNatCommonLgNames.STRING, new CstNatCaller(TeamCrud.EDIT.getTeamCrudString()),null));
        fields_.add(new StandardField(REMOVE_CST,BeanNatCommonLgNames.STRING, new CstNatCaller(TeamCrud.REMOVE.getTeamCrudString()),null));
        fields_.add(new StandardField(MULTIPLICITY, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanMultiplicityGet(),new SimulationBeanMultiplicitySet()));
        fields_.add(new StandardField(ENVIRONMENTS, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanEnvironmentsGet(),null));
        fields_.add(new StandardField(ENVIRONMENT,BeanNatCommonLgNames.STRING, new SimulationBeanEnvironmentGet(),new SimulationBeanEnvironmentSet()));
        fields_.add(new StandardField(FOE_TEAM, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanFoeTeamGet(),null));
        fields_.add(new StandardField(ERROR_SELECTED_FOE_PK, BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanErrorSelectedFoePkGet(),null));
        fields_.add(new StandardField(SELECTED_FOE_PK, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanSelectedFoePkGet(),new SimulationBeanSelectedFoePkSet()));
        fields_.add(new StandardField(SELECTED_FOE_ACTION,BeanNatCommonLgNames.STRING, new SimulationBeanSelectedFoeActionGet(),new SimulationBeanSelectedFoeActionSet()));
        fields_.add(new StandardField(ALLY_TEAM, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanAllyTeamGet(),null));
        fields_.add(new StandardField(ERROR_SELECTED_ALLY_PK, BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanErrorSelectedAllyPkGet(),null));
        fields_.add(new StandardField(SELECTED_ALLY_PK, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanSelectedAllyPkGet(),new SimulationBeanSelectedAllyPkSet()));
        fields_.add(new StandardField(SELECTED_ALLY_ACTION,BeanNatCommonLgNames.STRING, new SimulationBeanSelectedAllyActionGet(),new SimulationBeanSelectedAllyActionSet()));
        fields_.add(new StandardField(PLACES, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanPlacesGet(),null));
        fields_.add(new StandardField(OK,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanOkGet(),null));
        fields_.add(new StandardField(TEAM, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanTeamGet(),null));
        fields_.add(new StandardField(ERROR_SELECTED_PK, BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanErrorSelectedPkGet(),null));
        fields_.add(new StandardField(SELECTED_PK, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanSelectedPkGet(),new SimulationBeanSelectedPkSet()));
        fields_.add(new StandardField(SELECTED_ACTION,BeanNatCommonLgNames.STRING, new SimulationBeanSelectedActionGet(),new SimulationBeanSelectedActionSet()));
        fields_.add(new StandardField(AVAILABLE_EVOS, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanAvailableEvosGet(),null));
        fields_.add(new StandardField(CHOSEN_EVO,BeanNatCommonLgNames.STRING, new SimulationBeanChosenEvoGet(),new SimulationBeanChosenEvoSet()));
        fields_.add(new StandardField(LEVEL_EVO, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanLevelEvoGet(),new SimulationBeanLevelEvoSet()));
        fields_.add(new StandardField(ROUND, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanRoundGet(),null));
        fields_.add(new StandardField(SELECTED_ROUND,BeanNatCommonLgNames.STRING, new SimulationBeanSelectedRoundGet(),new SimulationBeanSelectedRoundSet()));
        fields_.add(new StandardField(PLACES_FIGHT, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanPlacesFightGet(),null));
        fields_.add(new StandardField(PLACE_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanPlaceFightGet(),new SimulationBeanPlaceFightSet()));
        fields_.add(new StandardField(DISPLAY_IF_ERROR,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanDisplayIfErrorGet(),null));
        fields_.add(new StandardField(ABILITIES, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanAbilitiesGet(),null));
        fields_.add(new StandardField(CURRENT_ABILITY,BeanNatCommonLgNames.STRING, new SimulationBeanCurrentAbilityGet(),new SimulationBeanCurrentAbilitySet()));
        fields_.add(new StandardField(KEPT_MOVES, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanKeptMovesGet(),null));
        fields_.add(new StandardField(MOVES_SET, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanMovesSetGet(),null));
        fields_.add(new StandardField(SELECTED_MOVE, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanSelectedMoveGet(),new SimulationBeanSelectedMoveSet()));
        fields_.add(new StandardField(ALLY_CHOICE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanAllyChoiceGet(),new SimulationBeanAllyChoiceSet()));
        fields_.add(new StandardField(TARGET_FIGHT, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanTargetFightGet(),null));
        fields_.add(new StandardField(TARGET,BeanNatCommonLgNames.STRING, new SimulationBeanTargetGet(),new SimulationBeanTargetSet()));
        fields_.add(new StandardField(COMMENTS, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanCommentsGet(),null));
        fields_.add(new StandardField(TEAM_AFTER_FIGHT, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanTeamAfterFightGet(),null));
        fields_.add(new StandardField(EVOLUTIONS_AFTER_FIGHT, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanEvolutionsAfterFightGet(),null));
        fields_.add(new StandardField(EVOLUTION_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanEvolutionAfterFightGet(),new SimulationBeanEvolutionAfterFightSet()));
        fields_.add(new StandardField(ABILITIES_AFTER_FIGHT, BeanNatCommonLgNames.TYPE_MAP, new SimulationBeanAbilitiesAfterFightGet(),null));
        fields_.add(new StandardField(ABILITY_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanAbilityAfterFightGet(),new SimulationBeanAbilityAfterFightSet()));
        fields_.add(new StandardField(KEPT_MOVES_AFTER_FIGHT, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanKeptMovesAfterFightGet(),null));
        methods_.add( new SpecNatMethod(GET_REAL_STEP_NUMBER, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanGetRealStepNumber()));
        methods_.add( new SpecNatMethod(QUIT,BeanNatCommonLgNames.STRING, new SimulationBeanQuit()));
        methods_.add( new SpecNatMethod(IS_DIFF_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsDiffState()));
        methods_.add( new SpecNatMethod(VALIDATE_DIFF_CHOICE, BeanNatCommonLgNames.VOID, new SimulationBeanValidateDiffChoice()));
        methods_.add( new SpecNatMethod(IS_FOE_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsFoeState()));
        methods_.add( new SpecNatMethod(ADD_PK_TRAINER,BeanNatCommonLgNames.STRING, new SimulationBeanAddPkTrainer()));
        methods_.add( new SpecNatMethod(SELECT_FOE_PK,BeanNatCommonLgNames.STRING, new SimulationBeanSelectFoePk()));
        methods_.add( new SpecNatMethod(GET_IMAGE_FOE,BeanNatCommonLgNames.STRING, new SimulationBeanGetImageFoe()));
        methods_.add( new SpecNatMethod(GET_NAME_FOE,BeanNatCommonLgNames.STRING, new SimulationBeanGetNameFoe()));
        methods_.add( new SpecNatMethod(GET_LEVEL_FOE, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanGetLevelFoe()));
        methods_.add( new SpecNatMethod(GET_ABILITY_FOE,BeanNatCommonLgNames.STRING, new SimulationBeanGetAbilityFoe()));
        methods_.add( new SpecNatMethod(GET_GENDER_FOE,BeanNatCommonLgNames.STRING, new SimulationBeanGetGenderFoe()));
        methods_.add( new SpecNatMethod(GET_ITEM_FOE,BeanNatCommonLgNames.STRING, new SimulationBeanGetItemFoe()));
        methods_.add( new SpecNatMethod(GET_MOVES_FOE, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetMovesFoe()));
        methods_.add( new SpecNatMethod(SELECT_ALLY_PK,BeanNatCommonLgNames.STRING, new SimulationBeanSelectAllyPk()));
        methods_.add( new SpecNatMethod(GET_IMAGE_ALLY,BeanNatCommonLgNames.STRING, new SimulationBeanGetImageAlly()));
        methods_.add( new SpecNatMethod(GET_NAME_ALLY,BeanNatCommonLgNames.STRING, new SimulationBeanGetNameAlly()));
        methods_.add( new SpecNatMethod(GET_LEVEL_ALLY, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanGetLevelAlly()));
        methods_.add( new SpecNatMethod(GET_ABILITY_ALLY,BeanNatCommonLgNames.STRING, new SimulationBeanGetAbilityAlly()));
        methods_.add( new SpecNatMethod(GET_GENDER_ALLY,BeanNatCommonLgNames.STRING, new SimulationBeanGetGenderAlly()));
        methods_.add( new SpecNatMethod(GET_ITEM_ALLY,BeanNatCommonLgNames.STRING, new SimulationBeanGetItemAlly()));
        methods_.add( new SpecNatMethod(GET_MOVES_ALLY, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetMovesAlly()));
        methods_.add( new SpecNatMethod(IS_MULTI_LAYER,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsMultiLayer()));
        methods_.add( new SpecNatMethod(LAYERS, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanLayers()));
        methods_.add( new SpecNatMethod(CLICK_LEVEL,BeanNatCommonLgNames.STRING, new SimulationBeanClickLevel()));
        methods_.add( new SpecNatMethod(CLICK_LEVEL_ZERO,BeanNatCommonLgNames.STRING, new SimulationBeanClickLevelZero()));
        methods_.add( new SpecNatMethod(GET_TRAINER_NAME,BeanNatCommonLgNames.STRING, new SimulationBeanGetTrainerName()));
        methods_.add( new SpecNatMethod(CANCEL_DIFF_CHOICE, BeanNatCommonLgNames.VOID, new SimulationBeanCancelDiffChoice()));
        methods_.add( new SpecNatMethod(VALIDATE_FOE_CHOICE_FREE, BeanNatCommonLgNames.VOID, new SimulationBeanValidateFoeChoiceFree()));
        methods_.add( new SpecNatMethod(VALIDATE_FOE_CHOICE, BeanNatCommonLgNames.VOID, new SimulationBeanValidateFoeChoice()));
        methods_.add( new SpecNatMethod(IS_TEAM_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsTeamState()));
        methods_.add( new SpecNatMethod(ADD,BeanNatCommonLgNames.STRING, new SimulationBeanAdd()));
        methods_.add( new SpecNatMethod(SELECT_PK,BeanNatCommonLgNames.STRING, new SimulationBeanSelectPk()));
        methods_.add( new SpecNatMethod(GET_IMAGE,BeanNatCommonLgNames.STRING, new SimulationBeanGetImage()));
        methods_.add( new SpecNatMethod(GET_NAME,BeanNatCommonLgNames.STRING, new SimulationBeanGetName()));
        methods_.add( new SpecNatMethod(GET_LEVEL, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanGetLevel()));
        methods_.add( new SpecNatMethod(GET_ABILITY,BeanNatCommonLgNames.STRING, new SimulationBeanGetAbility()));
        methods_.add( new SpecNatMethod(GET_GENDER,BeanNatCommonLgNames.STRING, new SimulationBeanGetGender()));
        methods_.add( new SpecNatMethod(GET_ITEM,BeanNatCommonLgNames.STRING, new SimulationBeanGetItem()));
        methods_.add( new SpecNatMethod(GET_MOVES, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetMoves()));
        methods_.add( new SpecNatMethod(CANCEL_TEAM, BeanNatCommonLgNames.VOID, new SimulationBeanCancelTeam()));
        methods_.add( new SpecNatMethod(VALIDATE_TEAM, BeanNatCommonLgNames.VOID, new SimulationBeanValidateTeam()));
        methods_.add( new SpecNatMethod(VALIDATE_FOE_CHOICE_SKIP_EVOLUTIONS, BeanNatCommonLgNames.VOID, new SimulationBeanValidateFoeChoiceSkipEvolutions()));
        methods_.add( new SpecNatMethod(IS_EVOLUTIONS_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsEvolutionsState()));
        methods_.add( new SpecNatMethod(DISPLAY_EVOLUTIONS, BeanNatCommonLgNames.VOID, new SimulationBeanDisplayEvolutions()));
        methods_.add( new SpecNatMethod(SELECTED_INDEX,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanSelectedIndex()));
        methods_.add( new SpecNatMethod(VALIDATE_EVO, BeanNatCommonLgNames.VOID, new SimulationBeanValidateEvo()));
        methods_.add( new SpecNatMethod(CANCEL_EVO, BeanNatCommonLgNames.VOID, new SimulationBeanCancelEvo()));
        methods_.add( new SpecNatMethod(CANCEL_EVOLUTIONS, BeanNatCommonLgNames.VOID, new SimulationBeanCancelEvolutions()));
        methods_.add( new SpecNatMethod(VALIDATE_EVOLUTIONS, BeanNatCommonLgNames.VOID, new SimulationBeanValidateEvolutions()));
        methods_.add( new SpecNatMethod(IS_FRONT_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsFrontState()));
        methods_.add( new SpecNatMethod(VALIDATE_FRONT_FIGHTER, BeanNatCommonLgNames.VOID, new SimulationBeanValidateFrontFighter()));
        methods_.add( new SpecNatMethod(CANCEL_FRONT_FIGHTERS, BeanNatCommonLgNames.VOID, new SimulationBeanCancelFrontFighters()));
        methods_.add( new SpecNatMethod(VALIDATE_FRONT_FIGHTERS, BeanNatCommonLgNames.VOID, new SimulationBeanValidateFrontFighters()));
        methods_.add( new SpecNatMethod(IS_MOVES_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsMovesState()));
        methods_.add( new SpecNatMethod(SELECTED_INDEX_FOR_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanSelectedIndexForMoves()));
        methods_.add( new SpecNatMethod(IS_AVAILABLE_MOVES,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsAvailableMoves()));
        methods_.add( new SpecNatMethod(VALIDATE_MOVES, BeanNatCommonLgNames.VOID, new SimulationBeanValidateMoves()));
        methods_.add( new SpecNatMethod(IS_AVAILABLE_ABILITIES,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsAvailableAbilities()));
        methods_.add( new SpecNatMethod(CANCEL_MOVES, BeanNatCommonLgNames.VOID, new SimulationBeanCancelMoves()));
        methods_.add( new SpecNatMethod(CANCEL_MOVES_SETS, BeanNatCommonLgNames.VOID, new SimulationBeanCancelMovesSets()));
        methods_.add( new SpecNatMethod(VALIDATE_MOVES_SETS, BeanNatCommonLgNames.VOID, new SimulationBeanValidateMovesSets()));
        methods_.add( new SpecNatMethod(IS_MOVES_FIGHT_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsMovesFightState()));
        methods_.add( new SpecNatMethod(VALIDATE_MOVES_CHOICE, BeanNatCommonLgNames.VOID, new SimulationBeanValidateMovesChoice()));
        methods_.add( new SpecNatMethod(CANCEL_MOVES_EVOS, BeanNatCommonLgNames.VOID, new SimulationBeanCancelMovesEvos()));
        methods_.add( new SpecNatMethod(SIMULATE_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanSimulateFight()));
        methods_.add( new SpecNatMethod(IS_SIMULATION_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsSimulationState()));
        methods_.add( new SpecNatMethod(IS_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsIssue()));
        methods_.add( new SpecNatMethod(GET_KO_PLAYERS, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetKoPlayers()));
        methods_.add( new SpecNatMethod(GET_NOT_KO_FRONT_FOES, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetNotKoFrontFoes()));
        methods_.add( new SpecNatMethod(GET_KO_FOES, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetKoFoes()));
//        methods_.add( new SpecNatMethod(IS_RULES_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsRulesIssue()));
//        methods_.add( new SpecNatMethod(IS_RULES_MOVES_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsRulesMovesIssue()));
//        methods_.add( new SpecNatMethod(IS_RULES_LEARN_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsRulesLearnIssue()));
//        methods_.add( new SpecNatMethod(IS_RULES_SWITCH_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsRulesSwitchIssue()));
//        methods_.add( new SpecNatMethod(IS_SENDING_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsSendingIssue()));
//        methods_.add( new SpecNatMethod(IS_RANDOM_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsRandomIssue()));
//        methods_.add( new SpecNatMethod(IS_USING_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsUsingIssue()));
//        methods_.add( new SpecNatMethod(IS_HARD_SIMULATION_ISSUE,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsHardSimulationIssue()));
//        methods_.add( new SpecNatMethod(IS_ISSUE_AFTER_FIGHT,BeanNatCommonLgNames.PRIM_BOOLEAN, false, MethodModifier.NORMAL,new SimulationBeanIsIssueAfterFight()));
        methods_.add( new SpecNatMethod(GET_IMAGE_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanGetImageAfterFight()));
        methods_.add( new SpecNatMethod(GET_NAME_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanGetNameAfterFight()));
        methods_.add( new SpecNatMethod(GET_LEVEL_AFTER_FIGHT, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationBeanGetLevelAfterFight()));
        methods_.add( new SpecNatMethod(GET_ABILITY_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanGetAbilityAfterFight()));
        methods_.add( new SpecNatMethod(GET_GENDER_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanGetGenderAfterFight()));
        methods_.add( new SpecNatMethod(GET_ITEM_AFTER_FIGHT,BeanNatCommonLgNames.STRING, new SimulationBeanGetItemAfterFight()));
        methods_.add( new SpecNatMethod(GET_MOVES_AFTER_FIGHT, BeanNatCommonLgNames.TYPE_LIST, new SimulationBeanGetMovesAfterFight()));
        methods_.add( new SpecNatMethod(GET_REMAINING_LIFE_RATE,BeanNatCommonLgNames.TYPE_LG_INT, new SimulationBeanGetRemainingLifeRate()));
        methods_.add( new SpecNatMethod(NUMBER_NECESSARY_POINTS_FOR_GROWING_LEVEL,BeanNatCommonLgNames.TYPE_RATE, new SimulationBeanNumberNecessaryPointsForGrowingLevel()));
        methods_.add( new SpecNatMethod(CHANGE_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanChangeFight()));
        methods_.add( new SpecNatMethod(IS_FIGHT_AFTER,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsFightAfter()));
        methods_.add( new SpecNatMethod(NEXT_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanNextFight()));
        methods_.add( new SpecNatMethod(DISPLAY_COMMENTS, BeanNatCommonLgNames.VOID, new SimulationBeanDisplayComments()));
        methods_.add( new SpecNatMethod(HIDE_COMMENTS, BeanNatCommonLgNames.VOID, new SimulationBeanHideComments()));
        methods_.add( new SpecNatMethod(IS_EVOLUTION_AFTER_FIGHT_STATE,BeanNatCommonLgNames.PRIM_BOOLEAN, new SimulationBeanIsEvolutionAfterFightState()));
        methods_.add( new SpecNatMethod(SELECT_PK_AFTER_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanSelectPkAfterFight()));
        methods_.add( new SpecNatMethod(VALIDATE_EVOLUTION_AFTER_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanValidateEvolutionAfterFight()));
        methods_.add( new SpecNatMethod(CANCEL_EVOLUTIONS_AFTER_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanCancelEvolutionsAfterFight()));
        methods_.add( new SpecNatMethod(VALIDATE_MOVES_ABILITY_AFTER_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanValidateMovesAbilityAfterFight()));
        methods_.add( new SpecNatMethod(CHANGE_FIGHT_WHILE_END, BeanNatCommonLgNames.VOID, new SimulationBeanChangeFightWhileEnd()));
        methods_.add( new SpecNatMethod(VALIDATE_MOVES_AFTER_FIGHT, BeanNatCommonLgNames.VOID, new SimulationBeanValidateMovesAfterFight()));
        methods_.add( new SpecNatMethod(GS, BeanNatCommonLgNames.STRING, new CstNatCaller(PkScriptPages.REN_ADD_WEB_HTML_SIMULATION_SIMULATION_HTML)));
        _std.getStds().addEntry(TYPE_SIMULATION_BEAN, type_);
    }
    private static void buildSimulationLevelBean(PokemonStandards _std){
        CustList<StandardField> fields_=new CustList<StandardField>();
        CustList<SpecNatMethod> methods_=new CustList<SpecNatMethod>();
        SpecialNatClass type_ = new SpecialNatClass(fields_, methods_, AikiBeansStd.TYPE_ABS_LEVEL_BEAN);
        fields_.add(new StandardField(NO_FIGHT, BeanNatCommonLgNames.PRIM_INTEGER, new SimulationLevelBeanNoFightGet(),new SimulationLevelBeanNoFightSet()));
        methods_.add( new SpecNatMethod(CANCEL,BeanNatCommonLgNames.STRING, new CstNatCaller(PkScriptPages.REN_ADD_WEB_HTML_SIMULATION_SIMULATION_HTML)));
        methods_.add( new SpecNatMethod(CLICK_TILE,BeanNatCommonLgNames.STRING, new SimulationLevelBeanClickTile()));
        methods_.add( new SpecNatMethod(GSL, BeanNatCommonLgNames.STRING, new CstNatCaller(PkScriptPages.REN_ADD_WEB_HTML_SIMULATION_SIMULATIONLEVEL_HTML)));
        _std.getStds().addEntry(TYPE_SIMULATION_LEVEL_BEAN, type_);
    }
}
