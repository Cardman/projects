package code.scripts.pages.aiki;
import code.scripts.confs.*;
import code.sml.*;
import code.util.*;
final class PageDataItemsHealingstatus extends PageCardsCommon{
private static final String C_P_125_0="javahtml";
private static final String C_P_125_1="healingstatus";
private static final String C_P_125_2="msg_item,title";
private static final String C_P_125_3="displayName";
private static final String C_P_125_4=PkScriptPages.REN_ADD_WEB_CSS_ITEMS_CSS;
private static final String C_P_125_5="stylesheet";
private static final String C_P_125_6="text/css";
private static final String C_P_125_7="healingItemBean";
private static final String C_P_125_8="aiki.beans.items";
private static final String C_P_125_9="ItemBean";
private static final String C_P_125_10="$intern.name=name";
private static final String C_P_125_11="healingKo";
private static final String C_P_125_12="msg_healingstatus,heal_ko";
private static final String C_P_125_13="!status.isEmpty()";
private static final String C_P_125_14="msg_healingstatus,status";
private static final String C_P_125_15="status";
private static final String C_P_125_16="s";
private static final String C_P_125_17="$clickStatus({([s])})";
private static final String C_P_125_18="";
private static final String C_P_125_19="{getTrStatus(([s]))}";
private PageDataItemsHealingstatus(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc30){
Element elt0_=el(_doc30,HTML);
CustList<Attr> attrs0_=al(2);
attrs0_.add(at(XMLNS_C,C_P_125_0));
attrs0_.add(at(C_BEAN,C_P_125_1));
at(elt0_,attrs0_);
Element elt1_=el(_doc30,HEAD);
Element elt2_=el(_doc30,TITLE);
Element elt3_=el(_doc30,C_MESSAGE);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(VALUE,C_P_125_2));
at(elt3_,attrs1_);
Element elt4_=el(_doc30,PARAM);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(VALUE,C_P_125_3));
at(elt4_,attrs2_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt5_=el(_doc30,LINK);
CustList<Attr> attrs3_=al(3);
attrs3_.add(at(HREF,C_P_125_4));
attrs3_.add(at(REL,C_P_125_5));
attrs3_.add(at(TYPE,C_P_125_6));
at(elt5_,attrs3_);
ad(elt1_,elt5_);
ad(elt0_,elt1_);
Element elt6_=el(_doc30,BODY);
build0(elt6_,_doc30);
build1(elt6_,_doc30);
ad(elt0_,elt6_);
_doc30.appendChild(elt0_);
}
static void build0(Element _body,Document _doc30){
Element elt0_=el(_doc30,C_IMPORT);
CustList<Attr> attrs0_=al(1);
attrs0_.add(at(PAGE,C_P_125_7));
at(elt0_,attrs0_);
Element elt1_=el(_doc30,C_PACKAGE);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(NAME,C_P_125_8));
at(elt1_,attrs1_);
Element elt2_=el(_doc30,C_CLASS);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(NAME,C_P_125_9));
at(elt2_,attrs2_);
Element elt3_=el(_doc30,C_FIELD);
CustList<Attr> attrs3_=al(1);
attrs3_.add(at(PREPARE,C_P_125_10));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build1(Element _body,Document _doc30){
Element elt0_=el(_doc30,P);
Element elt1_=el(_doc30,C_IF);
CustList<Attr> attrs0_=al(1);
attrs0_.add(at(CONDITION,C_P_125_11));
at(elt1_,attrs0_);
Element elt2_=el(_doc30,C_MESSAGE);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(VALUE,C_P_125_12));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc30,C_IF);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(CONDITION,C_P_125_13));
at(elt3_,attrs2_);
Element elt4_=el(_doc30,C_MESSAGE);
CustList<Attr> attrs3_=al(1);
attrs3_.add(at(VALUE,C_P_125_14));
at(elt4_,attrs3_);
ad(elt3_,elt4_);
Element elt5_=el(_doc30,UL);
Element elt6_=el(_doc30,C_FOR);
CustList<Attr> attrs4_=al(2);
attrs4_.add(at(LIST,C_P_125_15));
attrs4_.add(at(VAR,C_P_125_16));
at(elt6_,attrs4_);
Element elt7_=el(_doc30,LI);
Element elt8_=el(_doc30,A);
CustList<Attr> attrs5_=al(2);
attrs5_.add(at(C_COMMAND,C_P_125_17));
attrs5_.add(at(HREF,C_P_125_18));
at(elt8_,attrs5_);
Text txt0_=tx(_doc30,C_P_125_19);
ad(elt8_,txt0_);
ad(elt7_,elt8_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
ad(elt3_,elt5_);
Element elt9_=el(_doc30,BR);
ad(elt3_,elt9_);
ad(elt0_,elt3_);
ad(_body,elt0_);
}
}
