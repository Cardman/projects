package code.scripts.pages.aiki;
import aiki.beans.moves.effects.AikiBeansMovesEffectsStd;
import code.scripts.confs.*;
import code.sml.*;
import code.util.*;
final class PageDataMovesEffectsEffcounterattack extends PageCardsCommon{
private static final String C_P_152_0="javahtml";
private static final String C_P_152_1=AikiBeansMovesEffectsStd.BEAN_EFFECT_COUNTER_ATTACK;
private static final String C_P_152_2=PkScriptPages.REN_ADD_WEB_CSS_MOVES_CSS;
private static final String C_P_152_3="stylesheet";
private static final String C_P_152_4="text/css";
private static final String C_P_152_5="msg_effcounterattack,effect";
private static final String C_P_152_6="effectBean";
private static final String C_P_152_7="aiki.beans.moves.effects";
private static final String C_P_152_8="EffectBean";
private static final String C_P_152_9="$intern.index=index";
private static final String C_P_152_10="$intern.move=move";
private static final String C_P_152_11="!sufferingDamageTypes.isEmpty()";
private static final String C_P_152_12="msg_effcounterattack,suffering_types";
private static final String C_P_152_13="move";
private static final String C_P_152_14="msg_effcounterattack,suffering_types_t";
private static final String C_P_152_15="msg_effcounterattack,suffering_types_hp";
private static final String C_P_152_16="c";
private static final String C_P_152_17="sufferingDamageTypes";
private static final String C_P_152_18="r";
private static final String C_P_152_19="java.lang.Object";
private static final String C_P_152_20="r";
private static final String C_P_152_21="{getTrSufferingDamageTypes(([c]))}";
private static final String C_P_152_22="{r}";
private static final String C_P_152_23="!droppedStatDirectMove.isEmpty()";
private static final String C_P_152_24="msg_effcounterattack,dropped_stat";
private static final String C_P_152_25="move";
private static final String C_P_152_26="msg_effcounterattack,dropped_stat_s";
private static final String C_P_152_27="msg_effcounterattack,dropped_stat_v";
private static final String C_P_152_28="c";
private static final String C_P_152_29="droppedStatDirectMove";
private static final String C_P_152_30="r";
private static final String C_P_152_31="java.lang.Object";
private static final String C_P_152_32="java.lang.Byte";
private static final String C_P_152_33="{getTrDroppedStatDirectMove(([c]))}";
private static final String C_P_152_34="{r}";
private static final String C_P_152_35="!sufferingDamageDirectMove.isZero()";
private static final String C_P_152_36="msg_effcounterattack,suffering_direct";
private static final String C_P_152_37="move";
private static final String C_P_152_38="sufferingDamageDirectMove";
private static final String C_P_152_39="!reasonsProtect.isEmpty()";
private static final String C_P_152_40="msg_effcounterattack,fail_protect";
private static final String C_P_152_41="move";
private static final String C_P_152_42="reasonsProtect";
private static final String C_P_152_43="r";
private static final String C_P_152_44="java.lang.String";
private static final String C_P_152_45="{r}";
private static final String C_P_152_46="!reasonsCounter.isEmpty()";
private static final String C_P_152_47="msg_effcounterattack,counter_protect";
private static final String C_P_152_48="move";
private static final String C_P_152_49="reasonsCounter";
private static final String C_P_152_50="r";
private static final String C_P_152_51="java.lang.String";
private static final String C_P_152_52="{r}";
private static final String C_P_152_53="!getMapVarsFailCounter().isEmpty()";
private static final String C_P_152_54="c";
private static final String C_P_152_55="getMapVarsFailCounter()";
private static final String C_P_152_56="r";
private static final String C_P_152_57="java.lang.String";
private static final String C_P_152_58="java.lang.String";
private static final String C_P_152_59="{c} :";
private static final String C_P_152_60="";
private static final String C_P_152_61="msg_effcounterattack,formula";
private static final String C_P_152_62="r";
private PageDataMovesEffectsEffcounterattack(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc57){
Element elt0_=el(_doc57,HTML);
CustList<Attr> attrs0_=al(2);
attrs0_.add(at(XMLNS_C,C_P_152_0));
attrs0_.add(at(C_BEAN,C_P_152_1));
at(elt0_,attrs0_);
Element elt1_=el(_doc57,HEAD);
Element elt2_=el(_doc57,LINK);
CustList<Attr> attrs1_=al(3);
attrs1_.add(at(HREF,C_P_152_2));
attrs1_.add(at(REL,C_P_152_3));
attrs1_.add(at(TYPE,C_P_152_4));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc57,BODY);
build0(elt3_,_doc57);
ad(elt0_,elt3_);
_doc57.appendChild(elt0_);
}
static void build0(Element _body,Document _doc57){
Element elt0_=el(_doc57,P);
Element elt1_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs0_=al(1);
attrs0_.add(at(VALUE,C_P_152_5));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
Element elt2_=el(_doc57,C_IMPORT);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(PAGE,C_P_152_6));
at(elt2_,attrs1_);
Element elt3_=el(_doc57,C_PACKAGE);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(NAME,C_P_152_7));
at(elt3_,attrs2_);
Element elt4_=el(_doc57,C_CLASS);
CustList<Attr> attrs3_=al(1);
attrs3_.add(at(NAME,C_P_152_8));
at(elt4_,attrs3_);
Element elt5_=el(_doc57,C_FIELD);
CustList<Attr> attrs4_=al(1);
attrs4_.add(at(PREPARE,C_P_152_9));
at(elt5_,attrs4_);
ad(elt4_,elt5_);
Element elt6_=el(_doc57,C_FIELD);
CustList<Attr> attrs5_=al(1);
attrs5_.add(at(PREPARE,C_P_152_10));
at(elt6_,attrs5_);
ad(elt4_,elt6_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt7_=el(_doc57,C_IF);
CustList<Attr> attrs6_=al(1);
attrs6_.add(at(CONDITION,C_P_152_11));
at(elt7_,attrs6_);
Element elt8_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs7_=al(1);
attrs7_.add(at(VALUE,C_P_152_12));
at(elt8_,attrs7_);
Element elt9_=el(_doc57,PARAM);
CustList<Attr> attrs8_=al(1);
attrs8_.add(at(VALUE,C_P_152_13));
at(elt9_,attrs8_);
ad(elt8_,elt9_);
ad(elt7_,elt8_);
Element elt10_=el(_doc57,TABLE);
Element elt11_=el(_doc57,THEAD);
Element elt12_=el(_doc57,TR);
Element elt13_=el(_doc57,TH);
Element elt14_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs9_=al(1);
attrs9_.add(at(VALUE,C_P_152_14));
at(elt14_,attrs9_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt15_=el(_doc57,TH);
Element elt16_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs10_=al(1);
attrs10_.add(at(VALUE,C_P_152_15));
at(elt16_,attrs10_);
ad(elt15_,elt16_);
ad(elt12_,elt15_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
Element elt17_=el(_doc57,TBODY);
Element elt18_=el(_doc57,C_FOR);
CustList<Attr> attrs11_=al(5);
attrs11_.add(at(KEY,C_P_152_16));
attrs11_.add(at(MAP,C_P_152_17));
attrs11_.add(at(VALUE,C_P_152_18));
attrs11_.add(at(KEYCLASSNAME,C_P_152_19));
attrs11_.add(at(VARCLASSNAME,C_P_152_20));
at(elt18_,attrs11_);
Element elt19_=el(_doc57,TR);
Element elt20_=el(_doc57,TD);
Text txt0_=tx(_doc57,C_P_152_21);
ad(elt20_,txt0_);
ad(elt19_,elt20_);
Element elt21_=el(_doc57,TD);
Text txt1_=tx(_doc57,C_P_152_22);
ad(elt21_,txt1_);
ad(elt19_,elt21_);
ad(elt18_,elt19_);
ad(elt17_,elt18_);
ad(elt10_,elt17_);
ad(elt7_,elt10_);
Element elt22_=el(_doc57,BR);
ad(elt7_,elt22_);
ad(elt0_,elt7_);
Element elt23_=el(_doc57,C_IF);
CustList<Attr> attrs12_=al(1);
attrs12_.add(at(CONDITION,C_P_152_23));
at(elt23_,attrs12_);
Element elt24_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs13_=al(1);
attrs13_.add(at(VALUE,C_P_152_24));
at(elt24_,attrs13_);
Element elt25_=el(_doc57,PARAM);
CustList<Attr> attrs14_=al(1);
attrs14_.add(at(VALUE,C_P_152_25));
at(elt25_,attrs14_);
ad(elt24_,elt25_);
ad(elt23_,elt24_);
Element elt26_=el(_doc57,TABLE);
Element elt27_=el(_doc57,THEAD);
Element elt28_=el(_doc57,TR);
Element elt29_=el(_doc57,TH);
Element elt30_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs15_=al(1);
attrs15_.add(at(VALUE,C_P_152_26));
at(elt30_,attrs15_);
ad(elt29_,elt30_);
ad(elt28_,elt29_);
Element elt31_=el(_doc57,TH);
Element elt32_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs16_=al(1);
attrs16_.add(at(VALUE,C_P_152_27));
at(elt32_,attrs16_);
ad(elt31_,elt32_);
ad(elt28_,elt31_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
Element elt33_=el(_doc57,TBODY);
Element elt34_=el(_doc57,C_FOR);
CustList<Attr> attrs17_=al(5);
attrs17_.add(at(KEY,C_P_152_28));
attrs17_.add(at(MAP,C_P_152_29));
attrs17_.add(at(VALUE,C_P_152_30));
attrs17_.add(at(KEYCLASSNAME,C_P_152_31));
attrs17_.add(at(VARCLASSNAME,C_P_152_32));
at(elt34_,attrs17_);
Element elt35_=el(_doc57,TR);
Element elt36_=el(_doc57,TD);
Text txt2_=tx(_doc57,C_P_152_33);
ad(elt36_,txt2_);
ad(elt35_,elt36_);
Element elt37_=el(_doc57,TD);
Text txt3_=tx(_doc57,C_P_152_34);
ad(elt37_,txt3_);
ad(elt35_,elt37_);
ad(elt34_,elt35_);
ad(elt33_,elt34_);
ad(elt26_,elt33_);
ad(elt23_,elt26_);
Element elt38_=el(_doc57,BR);
ad(elt23_,elt38_);
ad(elt0_,elt23_);
Element elt39_=el(_doc57,C_IF);
CustList<Attr> attrs18_=al(1);
attrs18_.add(at(CONDITION,C_P_152_35));
at(elt39_,attrs18_);
Element elt40_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs19_=al(1);
attrs19_.add(at(VALUE,C_P_152_36));
at(elt40_,attrs19_);
Element elt41_=el(_doc57,PARAM);
CustList<Attr> attrs20_=al(1);
attrs20_.add(at(VALUE,C_P_152_37));
at(elt41_,attrs20_);
ad(elt40_,elt41_);
Element elt42_=el(_doc57,PARAM);
CustList<Attr> attrs21_=al(1);
attrs21_.add(at(VALUE,C_P_152_38));
at(elt42_,attrs21_);
ad(elt40_,elt42_);
ad(elt39_,elt40_);
ad(elt0_,elt39_);
Element elt43_=el(_doc57,C_IF);
CustList<Attr> attrs22_=al(1);
attrs22_.add(at(CONDITION,C_P_152_39));
at(elt43_,attrs22_);
Element elt44_=el(_doc57,P);
Element elt45_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs23_=al(1);
attrs23_.add(at(VALUE,C_P_152_40));
at(elt45_,attrs23_);
Element elt46_=el(_doc57,PARAM);
CustList<Attr> attrs24_=al(1);
attrs24_.add(at(VALUE,C_P_152_41));
at(elt46_,attrs24_);
ad(elt45_,elt46_);
ad(elt44_,elt45_);
Element elt47_=el(_doc57,UL);
Element elt48_=el(_doc57,C_FOR);
CustList<Attr> attrs25_=al(3);
attrs25_.add(at(LIST,C_P_152_42));
attrs25_.add(at(VAR,C_P_152_43));
attrs25_.add(at(CLASSNAME,C_P_152_44));
at(elt48_,attrs25_);
Element elt49_=el(_doc57,LI);
Text txt4_=tx(_doc57,C_P_152_45);
ad(elt49_,txt4_);
ad(elt48_,elt49_);
ad(elt47_,elt48_);
ad(elt44_,elt47_);
Element elt50_=el(_doc57,BR);
ad(elt44_,elt50_);
ad(elt43_,elt44_);
ad(elt0_,elt43_);
Element elt51_=el(_doc57,C_IF);
CustList<Attr> attrs26_=al(1);
attrs26_.add(at(CONDITION,C_P_152_46));
at(elt51_,attrs26_);
Element elt52_=el(_doc57,P);
Element elt53_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs27_=al(1);
attrs27_.add(at(VALUE,C_P_152_47));
at(elt53_,attrs27_);
Element elt54_=el(_doc57,PARAM);
CustList<Attr> attrs28_=al(1);
attrs28_.add(at(VALUE,C_P_152_48));
at(elt54_,attrs28_);
ad(elt53_,elt54_);
ad(elt52_,elt53_);
Element elt55_=el(_doc57,UL);
Element elt56_=el(_doc57,C_FOR);
CustList<Attr> attrs29_=al(3);
attrs29_.add(at(LIST,C_P_152_49));
attrs29_.add(at(VAR,C_P_152_50));
attrs29_.add(at(CLASSNAME,C_P_152_51));
at(elt56_,attrs29_);
Element elt57_=el(_doc57,LI);
Text txt5_=tx(_doc57,C_P_152_52);
ad(elt57_,txt5_);
ad(elt56_,elt57_);
ad(elt55_,elt56_);
ad(elt52_,elt55_);
Element elt58_=el(_doc57,BR);
ad(elt52_,elt58_);
ad(elt51_,elt52_);
ad(elt0_,elt51_);
Element elt59_=el(_doc57,C_IF);
CustList<Attr> attrs30_=al(1);
attrs30_.add(at(CONDITION,C_P_152_53));
at(elt59_,attrs30_);
Element elt60_=el(_doc57,UL);
Element elt61_=el(_doc57,C_FOR);
CustList<Attr> attrs31_=al(5);
attrs31_.add(at(KEY,C_P_152_54));
attrs31_.add(at(MAP,C_P_152_55));
attrs31_.add(at(VALUE,C_P_152_56));
attrs31_.add(at(KEYCLASSNAME,C_P_152_57));
attrs31_.add(at(VARCLASSNAME,C_P_152_58));
at(elt61_,attrs31_);
Element elt62_=el(_doc57,LI);
Text txt6_=tx(_doc57,C_P_152_59);
ad(elt62_,txt6_);
Element elt63_=el(_doc57,C_MESSAGE);
CustList<Attr> attrs32_=al(2);
attrs32_.add(at(QUOTED,C_P_152_60));
attrs32_.add(at(VALUE,C_P_152_61));
at(elt63_,attrs32_);
Element elt64_=el(_doc57,PARAM);
CustList<Attr> attrs33_=al(1);
attrs33_.add(at(VALUE,C_P_152_62));
at(elt64_,attrs33_);
ad(elt63_,elt64_);
ad(elt62_,elt63_);
ad(elt61_,elt62_);
ad(elt60_,elt61_);
ad(elt59_,elt60_);
ad(elt0_,elt59_);
ad(_body,elt0_);
}
}
