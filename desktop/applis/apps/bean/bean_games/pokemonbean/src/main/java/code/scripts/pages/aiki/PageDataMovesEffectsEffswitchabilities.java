package code.scripts.pages.aiki;
import aiki.beans.moves.effects.AikiBeansMovesEffectsStd;
import code.scripts.confs.*;
import code.sml.*;
import code.util.*;
final class PageDataMovesEffectsEffswitchabilities extends PageCardsCommon{
private static final String C_P_168_0="javahtml";
private static final String C_P_168_1=AikiBeansMovesEffectsStd.BEAN_EFFECT_SWITCHABILITIES;
private static final String C_P_168_2=PkScriptPages.REN_ADD_WEB_CSS_MOVES_CSS;
private static final String C_P_168_3="stylesheet";
private static final String C_P_168_4="text/css";
private static final String C_P_168_5="msg_effswitchabilities,effect";
private static final String C_P_168_6="effectBean";
private static final String C_P_168_7="aiki.beans.moves.effects";
private static final String C_P_168_8="EffectBean";
private static final String C_P_168_9="$intern.index=index";
private static final String C_P_168_10="$intern.move=move";
private static final String C_P_168_11="giveToTarget()";
private static final String C_P_168_12="msg_effswitchabilities,give_to_target";
private static final String C_P_168_13="giveToUser()";
private static final String C_P_168_14="msg_effswitchabilities,give_to_user";
private static final String C_P_168_15="giveConst()";
private static final String C_P_168_16="isDefAbility()";
private static final String C_P_168_17="msg_effswitchabilities,give_const";
private static final String C_P_168_18="{getTrAbility(index)}";
private static final String C_P_168_19="$clickAbility({index})";
private static final String C_P_168_20="!isDefAbility()";
private static final String C_P_168_21="msg_effswitchabilities,give_const_empty";
private static final String C_P_168_22="switchAbilities()";
private static final String C_P_168_23="msg_effswitchabilities,swicth_abilities";
private PageDataMovesEffectsEffswitchabilities(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc73){
Element elt0_=el(_doc73,HTML);
CustList<Attr> attrs0_=al(2);
attrs0_.add(at(XMLNS_C,C_P_168_0));
attrs0_.add(at(C_BEAN,C_P_168_1));
at(elt0_,attrs0_);
Element elt1_=el(_doc73,HEAD);
Element elt2_=el(_doc73,LINK);
CustList<Attr> attrs1_=al(3);
attrs1_.add(at(HREF,C_P_168_2));
attrs1_.add(at(REL,C_P_168_3));
attrs1_.add(at(TYPE,C_P_168_4));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc73,BODY);
build0(elt3_,_doc73);
ad(elt0_,elt3_);
_doc73.appendChild(elt0_);
}
static void build0(Element _body,Document _doc73){
Element elt0_=el(_doc73,P);
Element elt1_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs0_=al(1);
attrs0_.add(at(VALUE,C_P_168_5));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
Element elt2_=el(_doc73,C_IMPORT);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(PAGE,C_P_168_6));
at(elt2_,attrs1_);
Element elt3_=el(_doc73,C_PACKAGE);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(NAME,C_P_168_7));
at(elt3_,attrs2_);
Element elt4_=el(_doc73,C_CLASS);
CustList<Attr> attrs3_=al(1);
attrs3_.add(at(NAME,C_P_168_8));
at(elt4_,attrs3_);
Element elt5_=el(_doc73,C_FIELD);
CustList<Attr> attrs4_=al(1);
attrs4_.add(at(PREPARE,C_P_168_9));
at(elt5_,attrs4_);
ad(elt4_,elt5_);
Element elt6_=el(_doc73,C_FIELD);
CustList<Attr> attrs5_=al(1);
attrs5_.add(at(PREPARE,C_P_168_10));
at(elt6_,attrs5_);
ad(elt4_,elt6_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt7_=el(_doc73,C_IF);
CustList<Attr> attrs6_=al(1);
attrs6_.add(at(CONDITION,C_P_168_11));
at(elt7_,attrs6_);
Element elt8_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs7_=al(1);
attrs7_.add(at(VALUE,C_P_168_12));
at(elt8_,attrs7_);
ad(elt7_,elt8_);
ad(elt0_,elt7_);
Element elt9_=el(_doc73,C_IF);
CustList<Attr> attrs8_=al(1);
attrs8_.add(at(CONDITION,C_P_168_13));
at(elt9_,attrs8_);
Element elt10_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs9_=al(1);
attrs9_.add(at(VALUE,C_P_168_14));
at(elt10_,attrs9_);
ad(elt9_,elt10_);
ad(elt0_,elt9_);
Element elt11_=el(_doc73,C_IF);
CustList<Attr> attrs10_=al(1);
attrs10_.add(at(CONDITION,C_P_168_15));
at(elt11_,attrs10_);
Element elt12_=el(_doc73,C_IF);
CustList<Attr> attrs11_=al(1);
attrs11_.add(at(CONDITION,C_P_168_16));
at(elt12_,attrs11_);
Element elt13_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs12_=al(1);
attrs12_.add(at(VALUE,C_P_168_17));
at(elt13_,attrs12_);
ad(elt12_,elt13_);
Element elt12a_=el(_doc73,A);
CustList<Attr> attrs12a_=al(1);
attrs12a_.add(at(C_COMMAND,C_P_168_19));
at(elt12a_,attrs12a_);
Text txt3_=tx(_doc73,C_P_168_18);
ad(elt12a_,txt3_);
ad(elt12_,elt12a_);
br(elt12_,_doc73);
ad(elt11_,elt12_);
Element elt16_=el(_doc73,C_IF);
CustList<Attr> attrs15_=al(1);
attrs15_.add(at(CONDITION,C_P_168_20));
at(elt16_,attrs15_);
Element elt17_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs16_=al(1);
attrs16_.add(at(VALUE,C_P_168_21));
at(elt17_,attrs16_);
ad(elt16_,elt17_);
ad(elt11_,elt16_);
ad(elt0_,elt11_);
Element elt18_=el(_doc73,C_IF);
CustList<Attr> attrs17_=al(1);
attrs17_.add(at(CONDITION,C_P_168_22));
at(elt18_,attrs17_);
Element elt19_=el(_doc73,C_MESSAGE);
CustList<Attr> attrs18_=al(1);
attrs18_.add(at(VALUE,C_P_168_23));
at(elt19_,attrs18_);
ad(elt18_,elt19_);
ad(elt0_,elt18_);
ad(_body,elt0_);
}
}
