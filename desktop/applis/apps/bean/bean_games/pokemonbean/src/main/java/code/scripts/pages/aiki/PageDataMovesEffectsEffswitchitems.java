package code.scripts.pages.aiki;
import aiki.beans.moves.effects.AikiBeansMovesEffectsStd;
import code.scripts.confs.*;
import code.sml.*;
import code.util.*;
final class PageDataMovesEffectsEffswitchitems extends PageCardsCommon{
private static final String C_P_169_0="javahtml";
private static final String C_P_169_1=AikiBeansMovesEffectsStd.BEAN_EFFECT_SWITCHITEMS;
private static final String C_P_169_2=PkScriptPages.REN_ADD_WEB_CSS_MOVES_CSS;
private static final String C_P_169_3="stylesheet";
private static final String C_P_169_4="text/css";
private static final String C_P_169_5="msg_effswitchitems,effect";
private static final String C_P_169_6="effectBean";
private static final String C_P_169_7="aiki.beans.moves.effects";
private static final String C_P_169_8="EffectBean";
private static final String C_P_169_9="$intern.index=index";
private static final String C_P_169_10="$intern.move=move";
private static final String C_P_169_11="deleteTargetBerry()";
private static final String C_P_169_12="msg_effswitchitems,delete_berry";
private static final String C_P_169_13="takeItem()";
private static final String C_P_169_14="msg_effswitchitems,take_item";
private static final String C_P_169_15="removeTargetItem()";
private static final String C_P_169_16="msg_effswitchitems,remove_item";
private static final String C_P_169_17="switchItems()";
private static final String C_P_169_18="msg_effswitchitems,switch_items";
private static final String C_P_169_19="resuseLastItem()";
private static final String C_P_169_20="msg_effswitchitems,reuse_item";
private static final String C_P_169_21="giveTargetItem()";
private static final String C_P_169_22="msg_effswitchitems,give_to_target";
private static final String C_P_169_23="useItemAsPossible()";
private static final String C_P_169_24="msg_effswitchitems,use_item_if_possible";
private PageDataMovesEffectsEffswitchitems(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc74){
Element elt0_=el(_doc74,HTML);
CustList<Attr> attrs0_=al(2);
attrs0_.add(at(XMLNS_C,C_P_169_0));
attrs0_.add(at(C_BEAN,C_P_169_1));
at(elt0_,attrs0_);
Element elt1_=el(_doc74,HEAD);
Element elt2_=el(_doc74,LINK);
CustList<Attr> attrs1_=al(3);
attrs1_.add(at(HREF,C_P_169_2));
attrs1_.add(at(REL,C_P_169_3));
attrs1_.add(at(TYPE,C_P_169_4));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc74,BODY);
build0(elt3_,_doc74);
ad(elt0_,elt3_);
_doc74.appendChild(elt0_);
}
static void build0(Element _body,Document _doc74){
Element elt0_=el(_doc74,P);
Element elt1_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs0_=al(1);
attrs0_.add(at(VALUE,C_P_169_5));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
Element elt2_=el(_doc74,C_IMPORT);
CustList<Attr> attrs1_=al(1);
attrs1_.add(at(PAGE,C_P_169_6));
at(elt2_,attrs1_);
Element elt3_=el(_doc74,C_PACKAGE);
CustList<Attr> attrs2_=al(1);
attrs2_.add(at(NAME,C_P_169_7));
at(elt3_,attrs2_);
Element elt4_=el(_doc74,C_CLASS);
CustList<Attr> attrs3_=al(1);
attrs3_.add(at(NAME,C_P_169_8));
at(elt4_,attrs3_);
Element elt5_=el(_doc74,C_FIELD);
CustList<Attr> attrs4_=al(1);
attrs4_.add(at(PREPARE,C_P_169_9));
at(elt5_,attrs4_);
ad(elt4_,elt5_);
Element elt6_=el(_doc74,C_FIELD);
CustList<Attr> attrs5_=al(1);
attrs5_.add(at(PREPARE,C_P_169_10));
at(elt6_,attrs5_);
ad(elt4_,elt6_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt7_=el(_doc74,C_IF);
CustList<Attr> attrs6_=al(1);
attrs6_.add(at(CONDITION,C_P_169_11));
at(elt7_,attrs6_);
Element elt8_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs7_=al(1);
attrs7_.add(at(VALUE,C_P_169_12));
at(elt8_,attrs7_);
ad(elt7_,elt8_);
ad(elt0_,elt7_);
Element elt9_=el(_doc74,C_IF);
CustList<Attr> attrs8_=al(1);
attrs8_.add(at(CONDITION,C_P_169_13));
at(elt9_,attrs8_);
Element elt10_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs9_=al(1);
attrs9_.add(at(VALUE,C_P_169_14));
at(elt10_,attrs9_);
ad(elt9_,elt10_);
ad(elt0_,elt9_);
Element elt11_=el(_doc74,C_IF);
CustList<Attr> attrs10_=al(1);
attrs10_.add(at(CONDITION,C_P_169_15));
at(elt11_,attrs10_);
Element elt12_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs11_=al(1);
attrs11_.add(at(VALUE,C_P_169_16));
at(elt12_,attrs11_);
ad(elt11_,elt12_);
ad(elt0_,elt11_);
Element elt13_=el(_doc74,C_IF);
CustList<Attr> attrs12_=al(1);
attrs12_.add(at(CONDITION,C_P_169_17));
at(elt13_,attrs12_);
Element elt14_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs13_=al(1);
attrs13_.add(at(VALUE,C_P_169_18));
at(elt14_,attrs13_);
ad(elt13_,elt14_);
ad(elt0_,elt13_);
Element elt15_=el(_doc74,C_IF);
CustList<Attr> attrs14_=al(1);
attrs14_.add(at(CONDITION,C_P_169_19));
at(elt15_,attrs14_);
Element elt16_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs15_=al(1);
attrs15_.add(at(VALUE,C_P_169_20));
at(elt16_,attrs15_);
ad(elt15_,elt16_);
ad(elt0_,elt15_);
Element elt17_=el(_doc74,C_IF);
CustList<Attr> attrs16_=al(1);
attrs16_.add(at(CONDITION,C_P_169_21));
at(elt17_,attrs16_);
Element elt18_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs17_=al(1);
attrs17_.add(at(VALUE,C_P_169_22));
at(elt18_,attrs17_);
ad(elt17_,elt18_);
ad(elt0_,elt17_);
Element elt19_=el(_doc74,C_IF);
CustList<Attr> attrs18_=al(1);
attrs18_.add(at(CONDITION,C_P_169_23));
at(elt19_,attrs18_);
Element elt20_=el(_doc74,C_MESSAGE);
CustList<Attr> attrs19_=al(1);
attrs19_.add(at(VALUE,C_P_169_24));
at(elt20_,attrs19_);
ad(elt19_,elt20_);
ad(elt0_,elt19_);
ad(_body,elt0_);
}
}
