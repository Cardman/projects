package code.expressionlanguage.analyze.files;

import code.expressionlanguage.analyze.AnalyzedPageEl;
import code.expressionlanguage.analyze.blocks.*;

import code.expressionlanguage.common.AccessEnum;
import code.expressionlanguage.common.DefaultFileEscapedCalc;
import code.expressionlanguage.common.StringExpUtil;

import code.expressionlanguage.methods.ProcessMethodCommon;
import code.expressionlanguage.options.*;
import code.expressionlanguage.stds.LgNames;
import code.util.*;
import code.util.core.IndexConstants;
import code.util.core.StringUtil;
import org.junit.Test;


public final class FileResolverTest extends ProcessMethodCommon {
    @Test
    public void parseFile1Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq(43,cl_.getAccessOffset());
        assertEq(51,cl_.getBegin());
        assertNull(cl_.getFirstChild());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile1001Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("*comment*\\\n");
        file_.append("$interface pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof InterfaceBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1002Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$final $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1003Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$abstract $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1004Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\\\ multi line\n");
        file_.append("$annotation pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof AnnotationBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1005Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\\\ multi line\n");
        file_.append("$package $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1006Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\\\ multi line\n");
        file_.append("$private $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1007Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$class pkgtwo.ExClass {");
        file_.append("}");
        file_.append("\\* multi line*\n");
        file_.append("comment*\\\n");
        file_.append("$interface pkgtwo.ExInt {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        assertEq("pkgtwo.ExInt", getCustomTypes(context_, 1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
        r_ = getClassBody(context_, "pkgtwo.ExInt");
        assertTrue(r_ instanceof InterfaceBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1008Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$class pkgtwo.ExClass {");
        file_.append("}");
        file_.append("\\\\ multi line\n");
        file_.append("$interface pkgtwo.ExInt {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        assertEq("pkgtwo.ExInt", getCustomTypes(context_, 1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertNull(r_.getFirstChild());
        r_ = getClassBody(context_, "pkgtwo.ExInt");
        assertTrue(r_ instanceof InterfaceBlock);
        assertNull(r_.getFirstChild());
    }
    @Test
    public void parseFile1009Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\\\ multi line\n");
        file_.append("$annotation pkgtwo.ExClass {");
        file_.append(" $enum Inner {:");
        file_.append(" }");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        assertEq("pkgtwo.ExClass..Inner", getCustomTypes(context_, 1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof AnnotationBlock);
        RootBlock i_ = getClassBody(context_, "pkgtwo.ExClass..Inner");
        assertTrue(i_ instanceof EnumBlock);
        assertSame(i_,r_.getFirstChild());
    }
    @Test
    public void parseFile1010Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$enum pkgtwo.ExClass {\n");
        file_.append(" ONE<TWO,THREE>(\"\"<\"\"),\n");
        file_.append(" FOUR<FIVE,SIX>(\"\">\"\");\n");
        file_.append(" $public $static $void m(){}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof EnumBlock);
        AbsBk eltOne_ = r_.getFirstChild();
        assertTrue(eltOne_ instanceof ElementBlock);
        ElementBlock eOne_ = (ElementBlock) eltOne_;
        assertEq("ONE",eOne_.getUniqueFieldName());
        assertEq("<TWO,THREE>",eOne_.getTempClass());
        assertEq("\"\"<\"\"",eOne_.getValue());
        AbsBk eltTwo_ = eltOne_.getNextSibling();
        assertTrue(eltTwo_ instanceof ElementBlock);
        ElementBlock eTwo_ = (ElementBlock) eltTwo_;
        assertEq("FOUR",eTwo_.getUniqueFieldName());
        assertEq("<FIVE,SIX>",eTwo_.getTempClass());
        assertEq("\"\">\"\"",eTwo_.getValue());
        NamedCalledFunctionBlock m_ = (NamedCalledFunctionBlock) eTwo_.getNextSibling();
        assertEq("m",m_.getName());
        assertEq("$void",m_.getReturnType());
    }
    @Test
    public void parseFile1011Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$enum pkgtwo.ExClass {\n");
        file_.append(" ONE<TWO,THREE>(\"\"<\"\"){},\n");
        file_.append(" FOUR<FIVE,SIX>(\"\">\"\"){};\n");
        file_.append(" $public $static $void m(){}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(3, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_, 0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof EnumBlock);
        AbsBk eltOne_ = r_.getFirstChild();
        assertTrue(eltOne_ instanceof InnerElementBlock);
        InnerElementBlock eOne_ = (InnerElementBlock) eltOne_;
        assertEq("ONE",eOne_.getUniqueFieldName());
        assertEq("<TWO,THREE>",eOne_.getTempClass());
        assertEq("\"\"<\"\"",eOne_.getValue());
        assertSame(eOne_, getCustomTypes(context_, 1));
        assertEq(24, eOne_.getFieldNameOffset());
        assertEq(27, eOne_.getTempClassOffset());
        assertEq(39, eOne_.getValueOffest());
        AbsBk eltTwo_ = eltOne_.getNextSibling();
        assertTrue(eltTwo_ instanceof InnerElementBlock);
        InnerElementBlock eTwo_ = (InnerElementBlock) eltTwo_;
        assertEq("FOUR",eTwo_.getUniqueFieldName());
        assertEq("<FIVE,SIX>",eTwo_.getTempClass());
        assertEq("\"\">\"\"",eTwo_.getValue());
        assertEq(50, eTwo_.getFieldNameOffset());
        assertEq(54, eTwo_.getTempClassOffset());
        assertEq(65, eTwo_.getValueOffest());
        NamedCalledFunctionBlock m_ = (NamedCalledFunctionBlock) eTwo_.getNextSibling();
        assertEq("m",m_.getName());
        assertEq("$void",m_.getReturnType());
        assertSame(eTwo_, getCustomTypes(context_, 2));
    }
    @Test
    public void parseFile2Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.ExClass<#T> {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertEq("<#T>",r_.getTemplateDef());
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile3Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pktwo.Content> {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#T:pktwo.Content>",r_.getTemplateDef());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile4Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#Param> : pkgthree.Inherit {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param>",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit", getDirectSuperTypes(r_).first());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile5Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#Param> : pkgthree.Inherit<#Param> {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param>",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#Param>", getDirectSuperTypes(r_).first());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile6Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#Param,#SecondParam> : pkgthree.Inherit<#Param> : pkgfour.Inherit<#SecondParam> {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param,#SecondParam>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#Param>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#SecondParam>", getDirectSuperTypes(r_).last());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile7Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#T>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(137, ((FieldBlock) child_).getAccessOffset());
        assertEq(154, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(146, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(154, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile8Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$iter($int i=0i;10i;;1i){\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(348, method_.getModifierOffset());
        assertEq(356, method_.getReturnTypeOffset());
        assertEq(364, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq("i",for_.getVariableName());
        assertEq("",for_.getLabel());
        assertTrue(for_.isEq());
        assertEq(380, for_.getClassIndexNameOffset());
        assertEq(380, for_.getClassNameOffset());
        assertEq(385, for_.getVariableNameOffset());
        assertEq(387, for_.getInitOffset());
        assertEq(390, for_.getExpressionOffset());
        assertEq(393, for_.getEqOffset());
        assertEq(395, for_.getStepOffset());
        assertEq(398,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(411, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(439, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile9Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\tONE,\n");
        file_.append("\t\\\\Simple comment\n");
        file_.append("\tTHERE(1i,\n3i),\n");
        file_.append("\tHERE;\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String other(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload($int i,\n $int j){\n");
        file_.append("\t\t$throw $badthrowsbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload(){\n");
        file_.append("\t\t$iter($int i=0i;10i;1i){\n");
        file_.append("\t\t\t$return $unreachablebis;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(102, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(105, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("THERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        assertEq(126, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(132, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("HERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(142, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(146, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(149, ((FieldBlock) child_).getAccessOffset());
        assertEq(166, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(158, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(166, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(213, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("other", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(228, method_.getAccessOffset());
        assertEq(237, method_.getModifierOffset());
        assertEq(245, method_.getReturnTypeOffset());
        assertEq(253, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(271, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(293, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(2, method_.getParametersNames().size());
        assertEq("i", method_.getParametersNames().first());
        assertEq("j", method_.getParametersNames().last());
        assertEq(2, method_.getParametersTypes().size());
        assertEq("$int", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().last());
        assertEq(311, method_.getAccessOffset());
        assertEq(320, method_.getModifierOffset());
        assertEq(328, method_.getReturnTypeOffset());
        assertEq(336, method_.getNameOffset());
        assertEq(2, method_.getParametersTypesOffset().size());
        assertEq(345, method_.getParametersTypesOffset().first());
        assertEq(354, method_.getParametersTypesOffset().last());
        assertEq(2, method_.getParametersNamesOffset().size());
        assertEq(350, method_.getParametersNamesOffset().first());
        assertEq(359, method_.getParametersNamesOffset().last());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(372, th_.getExpressionOffset());
        assertEq("$badthrowsbis",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq(397, ret_.getExpressionOffset());
        assertEq("$unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(418, method_.getAccessOffset());
        assertEq(427, method_.getModifierOffset());
        assertEq(435, method_.getReturnTypeOffset());
        assertEq(443, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq("i",for_.getVariableName());
        assertEq("",for_.getLabel());
        assertTrue(!for_.isEq());
        assertEq(463, for_.getClassIndexNameOffset());
        assertEq(463, for_.getClassNameOffset());
        assertEq(468, for_.getVariableNameOffset());
        assertEq(470, for_.getInitOffset());
        assertEq(473, for_.getExpressionOffset());
        assertEq(476, for_.getEqOffset());
        assertEq(477, for_.getStepOffset());
        assertEq(480,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(493, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(524, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile10Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $static $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(111, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq(119, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(127, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertEq(127, ((FieldBlock) child_).getValueOffset());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(174, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(189, method_.getAccessOffset());
        assertEq(197, method_.getModifierOffset());
        assertEq(207, method_.getReturnTypeOffset());
        assertEq(215, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(226, method_.getAccessOffset());
        assertEq(234, method_.getModifierOffset());
        assertEq(244, method_.getReturnTypeOffset());
        assertEq(252, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(263, method_.getAccessOffset());
        assertEq(272, method_.getModifierOffset());
        assertEq(280, method_.getReturnTypeOffset());
        assertEq(288, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(305, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(327, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile11Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(111, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq(126, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(118, ((FieldBlock) child_).getClassNameOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertEq(126, ((FieldBlock) child_).getValueOffset());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(173, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(188, method_.getAccessOffset());
        assertEq(196, method_.getModifierOffset());
        assertEq(206, method_.getReturnTypeOffset());
        assertEq(214, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(225, method_.getAccessOffset());
        assertEq(233, method_.getModifierOffset());
        assertEq(243, method_.getReturnTypeOffset());
        assertEq(251, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(262, method_.getAccessOffset());
        assertEq(271, method_.getModifierOffset());
        assertEq(279, method_.getReturnTypeOffset());
        assertEq(287, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(304, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(326, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile12Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$int[] array;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq("$int[]",decl_.getClassName());
        assertEq(320, decl_.getClassNameOffset());
        assertTrue(!decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        assertEq("array",((Line)instr_).getExpression());
        assertEq(327, ((Line)instr_).getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(343, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(365, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile13Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.ExClass {\n");
        file_.append("}\n");
        file_.append("$public $class pkgtwo.ExClassTwo {\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("pkgtwo.ExClassTwo", getCustomTypes(context_,1).getFullName());
        r_ = getClassBody(context_, "pkgtwo.ExClassTwo");
        assertTrue(r_ instanceof ClassBlock);
        cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
    }

    @Test
    public void parseFile14Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo(#T pOne, $int pTwo, pkg.ParType pThree);\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq(119, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(111, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(119, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(166, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(181, method_.getAccessOffset());
        assertEq(189, method_.getModifierOffset());
        assertEq(199, method_.getReturnTypeOffset());
        assertEq(207, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(3, method_.getParametersNames().size());
        assertEq("pOne", method_.getParametersNames().first());
        assertEq("pTwo", method_.getParametersNames().get(1));
        assertEq("pThree", method_.getParametersNames().last());
        assertEq(3, method_.getParametersTypes().size());
        assertEq("#T", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().get(1));
        assertEq("pkg.ParType", method_.getParametersTypes().last());
        assertEq(218, method_.getAccessOffset());
        assertEq(226, method_.getModifierOffset());
        assertEq(236, method_.getReturnTypeOffset());
        assertEq(244, method_.getNameOffset());
        assertEq(3, method_.getParametersTypesOffset().size());
        assertEq(251, method_.getParametersTypesOffset().first());
        assertEq(260, method_.getParametersTypesOffset().get(1));
        assertEq(271, method_.getParametersTypesOffset().last());
        assertEq(3, method_.getParametersNamesOffset().size());
        assertEq(254, method_.getParametersNamesOffset().first());
        assertEq(265, method_.getParametersNamesOffset().get(1));
        assertEq(283, method_.getParametersNamesOffset().last());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(293, method_.getAccessOffset());
        assertEq(302, method_.getModifierOffset());
        assertEq(310, method_.getReturnTypeOffset());
        assertEq(318, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(335, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(357, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile15Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$int[] array = $null;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        assertEq("", ((ElementBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq(320, decl_.getClassNameOffset());
        assertEq("$int[]",decl_.getClassName());
        assertTrue(!decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq(327, line_.getExpressionOffset());
        assertEq("array = $null",line_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(351, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(373, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile16Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public (Ex pOne, $int pTwo, pkg.ParType pThree){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$int[] array = $null;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(74, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(80, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(84, ((FieldBlock) child_).getAccessOffset());
        assertEq(93, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(101, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(116, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(163, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        ConstructorBlock ctor_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PUBLIC, ctor_.getAccess());
        assertEq("", ctor_.getName());
        assertEq("", ctor_.getReturnType());
        assertEq(3, ctor_.getParametersNames().size());
        assertEq("pOne", ctor_.getParametersNames().first());
        assertEq("pTwo", ctor_.getParametersNames().get(1));
        assertEq("pThree", ctor_.getParametersNames().last());
        assertEq(3, ctor_.getParametersTypes().size());
        assertEq("Ex", ctor_.getParametersTypes().first());
        assertEq("$int", ctor_.getParametersTypes().get(1));
        assertEq("pkg.ParType", ctor_.getParametersTypes().last());
        assertEq(179, ctor_.getAccessOffset());
        assertEq(179, ctor_.getReturnTypeOffset());
        assertEq(179, ctor_.getNameOffset());
        assertEq(3, ctor_.getParametersTypesOffset().size());
        assertEq(188, ctor_.getParametersTypesOffset().first());
        assertEq(197, ctor_.getParametersTypesOffset().get(1));
        assertEq(208, ctor_.getParametersTypesOffset().last());
        assertEq(3, ctor_.getParametersNamesOffset().size());
        assertEq(191, ctor_.getParametersNamesOffset().first());
        assertEq(202, ctor_.getParametersNamesOffset().get(1));
        assertEq(220, ctor_.getParametersNamesOffset().last());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(233, method_.getAccessOffset());
        assertEq(241, method_.getModifierOffset());
        assertEq(251, method_.getReturnTypeOffset());
        assertEq(259, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(270, method_.getAccessOffset());
        assertEq(278, method_.getModifierOffset());
        assertEq(288, method_.getReturnTypeOffset());
        assertEq(296, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(307, method_.getAccessOffset());
        assertEq(316, method_.getModifierOffset());
        assertEq(324, method_.getReturnTypeOffset());
        assertEq(332, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq(342, decl_.getClassNameOffset());
        assertEq("$int[]",decl_.getClassName());
        assertTrue(!decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq(349, line_.getExpressionOffset());
        assertEq("array = $null",line_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(373, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(395, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile17Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public (Ex pOne, $int pTwo, pkg.ParType pThree){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$int[] array = $null;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(74, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(80, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(84, ((FieldBlock) child_).getAccessOffset());
        assertEq(93, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(101, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(116, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(163, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        ConstructorBlock ctor_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PUBLIC, ctor_.getAccess());
        assertEq("", ctor_.getName());
        assertEq("", ctor_.getReturnType());
        assertEq(3, ctor_.getParametersNames().size());
        assertEq("pOne", ctor_.getParametersNames().first());
        assertEq("pTwo", ctor_.getParametersNames().get(1));
        assertEq("pThree", ctor_.getParametersNames().last());
        assertEq(3, ctor_.getParametersTypes().size());
        assertEq("Ex", ctor_.getParametersTypes().first());
        assertEq("$int", ctor_.getParametersTypes().get(1));
        assertEq("pkg.ParType", ctor_.getParametersTypes().last());
        assertEq(179, ctor_.getAccessOffset());
        assertEq(179, ctor_.getReturnTypeOffset());
        assertEq(179, ctor_.getNameOffset());
        assertEq(3, ctor_.getParametersTypesOffset().size());
        assertEq(188, ctor_.getParametersTypesOffset().first());
        assertEq(197, ctor_.getParametersTypesOffset().get(1));
        assertEq(208, ctor_.getParametersTypesOffset().last());
        assertEq(3, ctor_.getParametersNamesOffset().size());
        assertEq(191, ctor_.getParametersNamesOffset().first());
        assertEq(202, ctor_.getParametersNamesOffset().get(1));
        assertEq(220, ctor_.getParametersNamesOffset().last());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(233, method_.getAccessOffset());
        assertEq(241, method_.getModifierOffset());
        assertEq(251, method_.getReturnTypeOffset());
        assertEq(259, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(270, method_.getAccessOffset());
        assertEq(278, method_.getModifierOffset());
        assertEq(288, method_.getReturnTypeOffset());
        assertEq(296, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(307, method_.getAccessOffset());
        assertEq(316, method_.getModifierOffset());
        assertEq(324, method_.getReturnTypeOffset());
        assertEq(332, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq(342, decl_.getClassNameOffset());
        assertEq("$int[]",decl_.getClassName());
        assertTrue(!decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq(349, line_.getExpressionOffset());
        assertEq("array = $null",line_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(373, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(395, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile18Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tarray = 0i;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq(320, decl_.getExpressionOffset());
        assertEq("array = 0i",decl_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(341, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(363, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile19Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call();\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(320, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(344, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(366, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile20Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield;\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call();\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(169, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(185, method_.getAccessOffset());
        assertEq(193, method_.getModifierOffset());
        assertEq(203, method_.getReturnTypeOffset());
        assertEq(211, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(222, method_.getAccessOffset());
        assertEq(230, method_.getModifierOffset());
        assertEq(240, method_.getReturnTypeOffset());
        assertEq(248, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(259, method_.getAccessOffset());
        assertEq(268, method_.getModifierOffset());
        assertEq(276, method_.getReturnTypeOffset());
        assertEq(284, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(294, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(318, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(340, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile21Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {;\n");
        file_.append("\t$private $static $final $String exfield;\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call();\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(107, ((FieldBlock) child_).getAccessOffset());
        assertEq(116, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(124, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(139, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(131, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(139, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(160,th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(176, method_.getAccessOffset());
        assertEq(184, method_.getModifierOffset());
        assertEq(194, method_.getReturnTypeOffset());
        assertEq(202, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(213, method_.getAccessOffset());
        assertEq(221, method_.getModifierOffset());
        assertEq(231, method_.getReturnTypeOffset());
        assertEq(239, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(250, method_.getAccessOffset());
        assertEq(259, method_.getModifierOffset());
        assertEq(267, method_.getReturnTypeOffset());
        assertEq(275, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(285, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(309, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(331, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile22Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(68,th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile23Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$while(condition;.){\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof WhileCondition);
        WhileCondition th_ = (WhileCondition) instr_;
        assertEq("condition;.",th_.getCondition());
        assertEq(68, th_.getConditionOffset());
        assertEq("",th_.getLabel());
        assertEq(80, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(85, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(93, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile24Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$do {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t} $while(condition;.);\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof DoBlock);
        DoBlock th_ = (DoBlock) instr_;
        assertEq("", th_.getLabel());
        assertEq(64, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(70, ((Line) instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(78, ((Line) instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof DoWhileCondition);
        assertEq(94, ((ConditionBlock) instr_).getConditionOffset());
        assertEq("condition;.",((ConditionBlock) instr_).getCondition());
        assertNull(instr_.getFirstChild());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile25Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$if (condOne;.) {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $elseif (condTwo;.) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $else {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof IfCondition);
        ConditionBlock th_ = (ConditionBlock) instr_;
        assertEq(66, th_.getConditionOffset());
        assertEq("condOne;.",((ConditionBlock) instr_).getCondition());
        assertEq("",((IfCondition) instr_).getLabel());
        assertEq(76, ((IfCondition) instr_).getLabelOffset());
        AbsBk instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertEq(82, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseIfCondition);
        assertEq("condTwo;.",((ConditionBlock) instr_).getCondition());
        th_ = (ConditionBlock) instr_;
        assertEq(100, th_.getConditionOffset());
        instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertEq(116, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseCondition);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertEq(136, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile26Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch ($ex e) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch ($extwo f) {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("", ((TryEval)instr_).getLabel());
        assertEq(65, ((TryEval)instr_).getLabelOffset());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertEq(71, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof CatchEval);
        CatchEval catch_ = (CatchEval) instr_;
        assertEq("$ex", catch_.getClassName());
        assertEq("e", catch_.getVariableName());
        assertEq(88, catch_.getClassNameOffset());
        assertEq(92, catch_.getVariableNameOffset());
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertEq(100, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (CatchEval) instr_;
        assertTrue(instr_ instanceof CatchEval);
        assertEq("$extwo", catch_.getClassName());
        assertEq("f", catch_.getVariableName());
        assertEq(117, catch_.getClassNameOffset());
        assertEq(124, catch_.getVariableNameOffset());
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertEq(147, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile261Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch ($ex<T >.Inner e) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch ($extwo f) {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("", ((TryEval)instr_).getLabel());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof CatchEval);
        CatchEval catch_ = (CatchEval) instr_;
        assertEq("$ex<T >.Inner", catch_.getClassName());
        assertEq("e", catch_.getVariableName());
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (CatchEval) instr_;
        assertTrue(instr_ instanceof CatchEval);
        assertEq("$extwo", catch_.getClassName());
        assertEq("f", catch_.getVariableName());
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile262Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch ($ex<T>. Inner e) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch ($extwo f) {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("", ((TryEval)instr_).getLabel());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof CatchEval);
        CatchEval catch_ = (CatchEval) instr_;
        assertEq("$ex<T>. Inner", catch_.getClassName());
        assertEq("e", catch_.getVariableName());
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (CatchEval) instr_;
        assertTrue(instr_ instanceof CatchEval);
        assertEq("$extwo", catch_.getClassName());
        assertEq("f", catch_.getVariableName());
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile263Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch ($ex .Inner e) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch ($extwo f) {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("", ((TryEval)instr_).getLabel());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof CatchEval);
        CatchEval catch_ = (CatchEval) instr_;
        assertEq("$ex .Inner", catch_.getClassName());
        assertEq("e", catch_.getVariableName());
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (CatchEval) instr_;
        assertTrue(instr_ instanceof CatchEval);
        assertEq("$extwo", catch_.getClassName());
        assertEq("f", catch_.getVariableName());
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile27Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$foreach($int i: list;.){\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof ForEachLoop);
        ForEachLoop th_ = (ForEachLoop) instr_;
        assertEq("$int",th_.getClassIndexName());
        assertEq("$int",th_.getClassName());
        assertEq("i",th_.getVariableName());
        assertEq("list;.",th_.getExpression());
        assertEq("",th_.getLabel());
        assertEq(70, th_.getClassIndexNameOffset());
        assertEq(70, th_.getClassNameOffset());
        assertEq(75, th_.getVariableNameOffset());
        assertEq(78, th_.getExpressionOffset());
        assertEq(85, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(90, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(98, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile28Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$switch(a){\n");
        file_.append("\t\t\t$case (1);\n");
        file_.append("\t\t\t$case (2);\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$break;\n");
        file_.append("\t\t\t$default;\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof SwitchBlock);
        assertEq("a",((SwitchBlock)instr_).getValue());
        assertEq(69,((SwitchBlock)instr_).getValueOffset());
        assertEq("",((SwitchBlock)instr_).getLabel());
        assertEq(71,((SwitchBlock)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(1)",((CaseCondition)case_).getValue());
        assertEq(82,((CaseCondition)case_).getValueOffset());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(2)",((CaseCondition)case_).getValue());
        assertEq(96,((CaseCondition)case_).getValueOffset());
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(105, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof BreakBlock);
        assertEq("", ((BreakBlock)instrWhile_).getLabel());
        assertEq(120, ((BreakBlock)instrWhile_).getLabelOffset());
        assertNull(instrWhile_.getNextSibling());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof DefaultCondition);
        instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(139, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile29Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$while(a;.){\n");
        file_.append("\t\t\t$if (b;.){\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$return;\n");
        file_.append("\t\t\t} $else {\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t\t\t$continue;\n");
        file_.append("\t\t\t}\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof WhileCondition);
        assertEq("a;.",((WhileCondition)instr_).getCondition());
        assertEq(68,((WhileCondition)instr_).getConditionOffset());
        assertEq("",((WhileCondition)instr_).getLabel());
        assertEq(72, ((WhileCondition)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof IfCondition);
        assertEq("b;.",((IfCondition)case_).getCondition());
        assertEq(82,((IfCondition)case_).getConditionOffset());
        assertEq("",((IfCondition) case_).getLabel());
        assertEq(86, ((IfCondition) case_).getLabelOffset());
        AbsBk instrIf_ = case_.getFirstChild();
        assertTrue(instrIf_ instanceof Line);
        assertEq("i++", ((Line)instrIf_).getExpression());
        assertEq(92, ((Line)instrIf_).getExpressionOffset());
        instrIf_ = instrIf_.getNextSibling();
        assertTrue(instrIf_ instanceof ReturnMethod);
        assertEq("", ((ReturnMethod)instrIf_).getExpression());
        assertEq(108, ((ReturnMethod)instrIf_).getExpressionOffset());
        assertNull(instrIf_.getFirstChild());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof ElseCondition);
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(127, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof ContinueBlock);
        assertEq("", ((ContinueBlock)instrWhile_).getLabel());
        assertEq(145, ((ContinueBlock)instrWhile_).getLabelOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile30Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\n");
        file_.append("\t\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#T>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(140, ((FieldBlock) child_).getAccessOffset());
        assertEq(157, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(149, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(157, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }

    @Test
    public void parseFile31Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class $interfaces(pkg.Int,pkg.Int2) pkgtwo.ExClass {\n");
        file_.append("}\n");
        file_.append("$public $class pkgtwo.ExClassTwo {\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        StringList ints_;
        Ints offs_;
        ints_ = cl_.getStaticInitInterfaces();
        assertEq(2, ints_.size());
        assertEq("pkg.Int", ints_.first());
        assertEq("pkg.Int2", ints_.last());
        offs_ = cl_.getStaticInitInterfacesOffset();
        assertEq(2, offs_.size());
        assertEq(70, offs_.first());
        assertEq(78, offs_.last());
        assertEq("pkgtwo.ExClassTwo", getCustomTypes(context_,1).getFullName());
        r_ = getClassBody(context_, "pkgtwo.ExClassTwo");
        assertTrue(r_ instanceof ClassBlock);
        cl_ = (ClassBlock) r_;
        ints_ = cl_.getStaticInitInterfaces();
        assertEq(0, ints_.size());
        offs_ = cl_.getStaticInitInterfacesOffset();
        assertEq(0, offs_.size());
        assertNull(cl_.getFirstChild());
    }
    @Test
    public void parseFile32Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class $interfaces(pkg.Int) pkgtwo.ExClass {\n");
        file_.append("}\n");
        file_.append("$public $class pkgtwo.ExClassTwo {\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        StringList ints_;
        Ints offs_;
        ints_ = cl_.getStaticInitInterfaces();
        assertEq(1, ints_.size());
        assertEq("pkg.Int", ints_.first());
        offs_ = cl_.getStaticInitInterfacesOffset();
        assertEq(1, offs_.size());
        assertEq(70, offs_.first());
        assertEq("pkgtwo.ExClassTwo", getCustomTypes(context_,1).getFullName());
        r_ = getClassBody(context_, "pkgtwo.ExClassTwo");
        assertTrue(r_ instanceof ClassBlock);
        cl_ = (ClassBlock) r_;
        ints_ = cl_.getStaticInitInterfaces();
        assertEq(0, ints_.size());
        offs_ = cl_.getStaticInitInterfacesOffset();
        assertEq(0, offs_.size());
        assertNull(cl_.getFirstChild());
    }
    @Test
    public void parseFile33Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$final $int[] array;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq("$int[]",decl_.getClassName());
        assertEq(327, decl_.getClassNameOffset());
        assertEq(320, decl_.getFinalVariableOffset());
        assertTrue(decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        assertEq("array",((Line)instr_).getExpression());
        assertEq(334, ((Line)instr_).getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(350, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(372, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile34Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$final $int[] array = $null;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        assertEq("", ((ElementBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq(327, decl_.getClassNameOffset());
        assertEq("$int[]",decl_.getClassName());
        assertEq(320, decl_.getFinalVariableOffset());
        assertTrue(decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq(334, line_.getExpressionOffset());
        assertEq("array = $null",line_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(358, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(380, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile35Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("", ((TryEval)instr_).getLabel());
        assertEq(65, ((TryEval)instr_).getLabelOffset());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertEq(71, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof NullCatchEval);
        NullCatchEval catch_ = (NullCatchEval) instr_;
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertEq(92, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (NullCatchEval) instr_;
        assertTrue(instr_ instanceof NullCatchEval);
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertEq(128, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile36Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$while(a;.)label{\n");
        file_.append("\t\t\t$if (b;.){\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$return;\n");
        file_.append("\t\t\t} $else {\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t\t\t$continue;\n");
        file_.append("\t\t\t}\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof WhileCondition);
        assertEq("a;.",((WhileCondition)instr_).getCondition());
        assertEq(68,((WhileCondition)instr_).getConditionOffset());
        assertEq("label",((WhileCondition)instr_).getLabel());
        assertEq(72, ((WhileCondition)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof IfCondition);
        assertEq("b;.",((IfCondition)case_).getCondition());
        assertEq(87,((IfCondition)case_).getConditionOffset());
        assertEq("",((IfCondition) case_).getLabel());
        assertEq(91, ((IfCondition) case_).getLabelOffset());
        AbsBk instrIf_ = case_.getFirstChild();
        assertTrue(instrIf_ instanceof Line);
        assertEq("i++", ((Line)instrIf_).getExpression());
        assertEq(97, ((Line)instrIf_).getExpressionOffset());
        instrIf_ = instrIf_.getNextSibling();
        assertTrue(instrIf_ instanceof ReturnMethod);
        assertEq("", ((ReturnMethod)instrIf_).getExpression());
        assertEq(113, ((ReturnMethod)instrIf_).getExpressionOffset());
        assertNull(instrIf_.getFirstChild());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof ElseCondition);
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(132, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof ContinueBlock);
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile37Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$if (condOne;.) label {\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $elseif (condTwo;.) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $else {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof IfCondition);
        ConditionBlock th_ = (ConditionBlock) instr_;
        assertEq(66, th_.getConditionOffset());
        assertEq("condOne;.",((ConditionBlock) instr_).getCondition());
        assertEq("label",((IfCondition) instr_).getLabel());
        assertEq(77, ((IfCondition) instr_).getLabelOffset());
        AbsBk instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertEq(88, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseIfCondition);
        assertEq("condTwo;.",((ConditionBlock) instr_).getCondition());
        th_ = (ConditionBlock) instr_;
        assertEq(106, th_.getConditionOffset());
        instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertEq(122, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseCondition);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertEq(142, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile38Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$do label{\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t} $while(condition);\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof DoBlock);
        DoBlock th_ = (DoBlock) instr_;
        assertEq("label", th_.getLabel());
        assertEq(65, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(75, ((Line) instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(83, ((Line) instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof DoWhileCondition);
        assertEq(99, ((ConditionBlock) instr_).getConditionOffset());
        assertEq("condition",((ConditionBlock) instr_).getCondition());
        assertNull(instr_.getFirstChild());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile39Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$try label{\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t} $catch ($ex e) {\n");
        file_.append("\t\t\tj++;\n");
        file_.append("\t\t} $catch ($extwo f) {\n");
        file_.append("\t\t} $finally {\n");
        file_.append("\t\t\tk++;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof TryEval);
        assertEq("label", ((TryEval)instr_).getLabel());
        assertEq(66, ((TryEval)instr_).getLabelOffset());
        AbsBk instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("i++", ((Line)instrCond_).getExpression());
        assertEq(76, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof CatchEval);
        CatchEval catch_ = (CatchEval) instr_;
        assertEq("$ex", catch_.getClassName());
        assertEq("e", catch_.getVariableName());
        assertEq(93, catch_.getClassNameOffset());
        assertEq(97, catch_.getVariableNameOffset());
        instrCond_ = catch_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("j++", ((Line)instrCond_).getExpression());
        assertEq(105, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        catch_ = (CatchEval) instr_;
        assertTrue(instr_ instanceof CatchEval);
        assertEq("$extwo", catch_.getClassName());
        assertEq("f", catch_.getVariableName());
        assertEq(122, catch_.getClassNameOffset());
        assertEq(129, catch_.getVariableNameOffset());
        assertTrue(instr_.getFirstChild() instanceof EmptyInstruction);
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof FinallyEval);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof Line);
        assertEq("k++", ((Line)instrCond_).getExpression());
        assertEq(152, ((Line)instrCond_).getExpressionOffset());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile40Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$switch(a)label{\n");
        file_.append("\t\t\t$case (1);\n");
        file_.append("\t\t\t$case (2);\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$break;\n");
        file_.append("\t\t\t$default;\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof SwitchBlock);
        assertEq("a",((SwitchBlock)instr_).getValue());
        assertEq(69,((SwitchBlock)instr_).getValueOffset());
        assertEq("label",((SwitchBlock)instr_).getLabel());
        assertEq(71,((SwitchBlock)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(1)",((CaseCondition)case_).getValue());
        assertEq(87,((CaseCondition)case_).getValueOffset());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(2)",((CaseCondition)case_).getValue());
        assertEq(101,((CaseCondition)case_).getValueOffset());
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(110, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof BreakBlock);
        assertNull(instrWhile_.getNextSibling());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof DefaultCondition);
        instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(144, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile41Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$iter($int i=0i;10i;;1i)label{\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(348, method_.getModifierOffset());
        assertEq(356, method_.getReturnTypeOffset());
        assertEq(364, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq("i",for_.getVariableName());
        assertEq("label",for_.getLabel());
        assertTrue(for_.isEq());
        assertEq(380, for_.getClassIndexNameOffset());
        assertEq(380, for_.getClassNameOffset());
        assertEq(385, for_.getVariableNameOffset());
        assertEq(387, for_.getInitOffset());
        assertEq(390, for_.getExpressionOffset());
        assertEq(393, for_.getEqOffset());
        assertEq(395, for_.getStepOffset());
        assertEq(398,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(416, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(444, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile42Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$foreach($int i: list;.)label{\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof ForEachLoop);
        ForEachLoop th_ = (ForEachLoop) instr_;
        assertEq("$int",th_.getClassIndexName());
        assertEq("$int",th_.getClassName());
        assertEq("i",th_.getVariableName());
        assertEq("list;.",th_.getExpression());
        assertEq("label",th_.getLabel());
        assertEq(70, th_.getClassIndexNameOffset());
        assertEq(70, th_.getClassNameOffset());
        assertEq(75, th_.getVariableNameOffset());
        assertEq(78, th_.getExpressionOffset());
        assertEq(85, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(95, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(103, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile43Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$switch(a){\n");
        file_.append("\t\t\t$case (1);\n");
        file_.append("\t\t\t$case (2);\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$break label;\n");
        file_.append("\t\t\t$default;\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof SwitchBlock);
        assertEq("a",((SwitchBlock)instr_).getValue());
        assertEq(69,((SwitchBlock)instr_).getValueOffset());
        assertEq("",((SwitchBlock)instr_).getLabel());
        assertEq(71,((SwitchBlock)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(1)",((CaseCondition)case_).getValue());
        assertEq(82,((CaseCondition)case_).getValueOffset());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof CaseCondition);
        assertEq("(2)",((CaseCondition)case_).getValue());
        assertEq(96,((CaseCondition)case_).getValueOffset());
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(105, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof BreakBlock);
        assertEq("label", ((BreakBlock)instrWhile_).getLabel());
        assertEq(121, ((BreakBlock)instrWhile_).getLabelOffset());
        assertNull(instrWhile_.getNextSibling());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof DefaultCondition);
        instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(145, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile44Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$while(a;.){\n");
        file_.append("\t\t\t$if (b;.){\n");
        file_.append("\t\t\t\ti++;\n");
        file_.append("\t\t\t\t$return;\n");
        file_.append("\t\t\t} $else {\n");
        file_.append("\t\t\t\tj--;\n");
        file_.append("\t\t\t\t$continue label;\n");
        file_.append("\t\t\t}\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof WhileCondition);
        assertEq("a;.",((WhileCondition)instr_).getCondition());
        assertEq(68,((WhileCondition)instr_).getConditionOffset());
        assertEq("",((WhileCondition)instr_).getLabel());
        assertEq(72, ((WhileCondition)instr_).getLabelOffset());
        AbsBk case_ = instr_.getFirstChild();
        assertTrue(case_ instanceof IfCondition);
        assertEq("b;.",((IfCondition)case_).getCondition());
        assertEq(82,((IfCondition)case_).getConditionOffset());
        assertEq("",((IfCondition) case_).getLabel());
        assertEq(86, ((IfCondition) case_).getLabelOffset());
        AbsBk instrIf_ = case_.getFirstChild();
        assertTrue(instrIf_ instanceof Line);
        assertEq("i++", ((Line)instrIf_).getExpression());
        assertEq(92, ((Line)instrIf_).getExpressionOffset());
        instrIf_ = instrIf_.getNextSibling();
        assertTrue(instrIf_ instanceof ReturnMethod);
        assertEq("", ((ReturnMethod)instrIf_).getExpression());
        assertEq(108, ((ReturnMethod)instrIf_).getExpressionOffset());
        assertNull(instrIf_.getFirstChild());
        case_ = case_.getNextSibling();
        assertTrue(case_ instanceof ElseCondition);
        AbsBk instrWhile_ = case_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(127, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof ContinueBlock);
        assertEq("label", ((ContinueBlock)instrWhile_).getLabel());
        assertEq(146, ((ContinueBlock)instrWhile_).getLabelOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile45Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\t$private $String exfield='{IN_BRACE}(){}'({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#T>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(137, ((FieldBlock) child_).getAccessOffset());
        assertEq(154, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(146, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(154, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield='{IN_BRACE}(){}'({INNER})", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile46Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\t$private $String exfield={INNER};\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#T>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(137, ((FieldBlock) child_).getAccessOffset());
        assertEq(154, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(146, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(154, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield={INNER}", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile47Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\t$private $String exfield=$new pkg.Ex[]{INNER};\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("pkgthree.Inherit<#T>", getDirectSuperTypes(r_).first());
        assertEq("pkgfour.Inherit<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(137, ((FieldBlock) child_).getAccessOffset());
        assertEq(154, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(146, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(154, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=$new pkg.Ex[]{INNER}", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile48Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\t\\\\Simple comment\n");
        file_.append("\tONE,\n");
        file_.append("\tTHERE(1i,\n3i),\n");
        file_.append("\tHERE;\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String other(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload($int i,\n $int j){\n");
        file_.append("\t\t$throw $badthrowsbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload(){\n");
        file_.append("\t\t$iter($int i=0i;10i;1i){\n");
        file_.append("\t\t\t$return $unreachablebis;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(120, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(123, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("THERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        assertEq(126, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(132, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("HERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(142, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(146, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(149, ((FieldBlock) child_).getAccessOffset());
        assertEq(166, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(158, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(166, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(213, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("other", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(228, method_.getAccessOffset());
        assertEq(237, method_.getModifierOffset());
        assertEq(245, method_.getReturnTypeOffset());
        assertEq(253, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(271, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(293, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(2, method_.getParametersNames().size());
        assertEq("i", method_.getParametersNames().first());
        assertEq("j", method_.getParametersNames().last());
        assertEq(2, method_.getParametersTypes().size());
        assertEq("$int", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().last());
        assertEq(311, method_.getAccessOffset());
        assertEq(320, method_.getModifierOffset());
        assertEq(328, method_.getReturnTypeOffset());
        assertEq(336, method_.getNameOffset());
        assertEq(2, method_.getParametersTypesOffset().size());
        assertEq(345, method_.getParametersTypesOffset().first());
        assertEq(354, method_.getParametersTypesOffset().last());
        assertEq(2, method_.getParametersNamesOffset().size());
        assertEq(350, method_.getParametersNamesOffset().first());
        assertEq(359, method_.getParametersNamesOffset().last());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(372, th_.getExpressionOffset());
        assertEq("$badthrowsbis",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq(397, ret_.getExpressionOffset());
        assertEq("$unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(418, method_.getAccessOffset());
        assertEq(427, method_.getModifierOffset());
        assertEq(435, method_.getReturnTypeOffset());
        assertEq(443, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq("i",for_.getVariableName());
        assertEq("",for_.getLabel());
        assertTrue(!for_.isEq());
        assertEq(463, for_.getClassIndexNameOffset());
        assertEq(463, for_.getClassNameOffset());
        assertEq(468, for_.getVariableNameOffset());
        assertEq(470, for_.getInitOffset());
        assertEq(473, for_.getExpressionOffset());
        assertEq(476, for_.getEqOffset());
        assertEq(477, for_.getStepOffset());
        assertEq(480,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(493, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(524, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile49Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\t\\*Simple commt*\\\n");
        file_.append("\tONE,\n");
        file_.append("\tTHERE(1i,\n3i),\n");
        file_.append("\tHERE;\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String other(){\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload($int i,\n $int j){\n");
        file_.append("\t\t$throw $badthrowsbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload(){\n");
        file_.append("\t\t$iter($int i=0i;10i;1i){\n");
        file_.append("\t\t\t$return $unreachablebis;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        assertEq(3, r_.getRowColDirectSuperTypes().size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", r_.getRowColDirectSuperTypes().getVal(-1));
        assertEq(" hello.word<Ex> ", r_.getRowColDirectSuperTypes().getVal(70));
        assertEq(" every.body", r_.getRowColDirectSuperTypes().getVal(87));
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(120, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(123, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("THERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        assertEq(126, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(132, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("HERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(142, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(146, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(149, ((FieldBlock) child_).getAccessOffset());
        assertEq(166, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(158, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(166, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(213, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("other", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(228, method_.getAccessOffset());
        assertEq(237, method_.getModifierOffset());
        assertEq(245, method_.getReturnTypeOffset());
        assertEq(253, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(271, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(293, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(2, method_.getParametersNames().size());
        assertEq("i", method_.getParametersNames().first());
        assertEq("j", method_.getParametersNames().last());
        assertEq(2, method_.getParametersTypes().size());
        assertEq("$int", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().last());
        assertEq(311, method_.getAccessOffset());
        assertEq(320, method_.getModifierOffset());
        assertEq(328, method_.getReturnTypeOffset());
        assertEq(336, method_.getNameOffset());
        assertEq(2, method_.getParametersTypesOffset().size());
        assertEq(345, method_.getParametersTypesOffset().first());
        assertEq(354, method_.getParametersTypesOffset().last());
        assertEq(2, method_.getParametersNamesOffset().size());
        assertEq(350, method_.getParametersNamesOffset().first());
        assertEq(359, method_.getParametersNamesOffset().last());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(372, th_.getExpressionOffset());
        assertEq("$badthrowsbis",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq(397, ret_.getExpressionOffset());
        assertEq("$unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(418, method_.getAccessOffset());
        assertEq(427, method_.getModifierOffset());
        assertEq(435, method_.getReturnTypeOffset());
        assertEq(443, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq("i",for_.getVariableName());
        assertEq("",for_.getLabel());
        assertTrue(!for_.isEq());
        assertEq(463, for_.getClassIndexNameOffset());
        assertEq(463, for_.getClassNameOffset());
        assertEq(468, for_.getVariableNameOffset());
        assertEq(470, for_.getInitOffset());
        assertEq(473, for_.getExpressionOffset());
        assertEq(476, for_.getEqOffset());
        assertEq(477, for_.getStepOffset());
        assertEq(480,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(493, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(524, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile50Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$static pkg.Ex.method;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.ExClass {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertEq(1, countFileTypes(context_));
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq(2, cl_.getFile().getImports().size());
        assertEq("$static pkg.Ex.method", cl_.getFile().getImports().first());
        assertEq("\npkg.ExTwo", cl_.getFile().getImports().last());
        AbsBk ch_ = cl_.getFirstChild();
        assertTrue(ch_ instanceof FieldBlock);
        assertNull(ch_.getNextSibling());
    }
    @Test
    public void parseFile51Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$static pkg.Ex.method;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class [pkg.ExThree;$static pkg.ExFour.methodtwo;] pkgtwo.ExClass {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertEq(1, countFileTypes(context_));
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq(2, cl_.getFile().getImports().size());
        assertEq("$static pkg.Ex.method", cl_.getFile().getImports().first());
        assertEq("\npkg.ExTwo", cl_.getFile().getImports().last());
        assertEq(2, cl_.getImports().size());
        assertEq("pkg.ExThree", cl_.getImports().first());
        assertEq("$static pkg.ExFour.methodtwo", cl_.getImports().last());
        AbsBk ch_ = cl_.getFirstChild();
        assertTrue(ch_ instanceof FieldBlock);
        assertNull(ch_.getNextSibling());
    }
    @Test
    public void parseFile52Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\tONE<ExTwo>,\n");
        file_.append("\t\\\\Simple comment\n");
        file_.append("\tTHERE<ExThree>(1i,\n3i),\n");
        file_.append("\tHERE;\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());
        assertEq("<ExTwo>", ((ElementBlock)field_).getTempClass());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(102, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        assertEq(105, ((ElementBlock) child_).getTempClassOffset());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("THERE", ((ElementBlock)field_).getUniqueFieldName());
        assertEq("<ExThree>", ((ElementBlock)field_).getTempClass());

        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        assertEq(133, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(138, ((ElementBlock) child_).getTempClassOffset());
        assertEq(148, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("HERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(158, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(162, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(165, ((FieldBlock) child_).getAccessOffset());
        assertEq(182, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(174, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(182, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertNull(child_);
    }
    @Test
    public void parseFile53Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkgtwo.MyClassTwo;\n");
        file_.append("@MyAnnot\n");
        file_.append("$public $class pkg.MyClass{}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyClass");
        assertEq(1,getAnnotations(r_).size());
        assertEq("@MyAnnot",getAnnotations(r_).first());
        assertEq(1,getAnnotationsIndexes(r_).size());
        assertEq(19,getAnnotationsIndexes(r_).first());
    }
    @Test
    public void parseFile54Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\tONE,\n");
        file_.append("\t\\\\Simple comment\n");
        file_.append("\t@MyAnnot THERE(1i,\n3i),\n");
        file_.append("\tHERE;\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(102, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(105, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("THERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        StringList annots_ = getAnnotations((ElementBlock)field_);
        assertEq(1, annots_.size());
        assertEq("@MyAnnot", annots_.first());
        Ints annotsInd_ = getAnnotationsIndexes((ElementBlock)field_);
        assertEq(1, annotsInd_.size());
        assertEq(126, annotsInd_.first());
        assertEq(135, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(141, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("HERE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(151, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(155, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertNull(child_);
    }
    @Test
    public void parseFile55Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t@MyAnnot $private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(1, getAnnotations((FieldBlock)child_).size());
        assertEq("@MyAnnot", getAnnotations((FieldBlock)child_).first());
        assertEq(1, getAnnotationsIndexes((FieldBlock) child_).size());
        assertEq(73, getAnnotationsIndexes((FieldBlock) child_).first());
        assertEq(82, ((FieldBlock) child_).getAccessOffset());
        assertEq(99, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(91, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(99, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile56Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t@MyAnnot $private $normal $String exmethod(){}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertEq(1, getAnnotations(method_).size());
        assertEq("@MyAnnot", getAnnotations(method_).first());
        assertEq(1, getAnnotationsIndexes(method_).size());
        assertEq(73, getAnnotationsIndexes(method_).first());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq(82, method_.getAccessOffset());
        assertEq("exmethod", method_.getName());
        assertEq(91, method_.getModifierOffset());
        assertEq(107, method_.getNameOffset());
        assertEq(99, method_.getReturnTypeOffset());
        assertEq(0, method_.getParametersTypes().size());
        assertEq("$String", method_.getReturnType());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile57Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t@MyAnnot $private $normal $String exmethod(@MyAnnotTwo $int p){}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertEq(1, getAnnotations(method_).size());
        assertEq("@MyAnnot", getAnnotations(method_).first());
        assertEq(1, getAnnotationsIndexes(method_).size());
        assertEq(73, getAnnotationsIndexes(method_).first());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq(82, method_.getAccessOffset());
        assertEq("exmethod", method_.getName());
        assertEq(91, method_.getModifierOffset());
        assertEq(107, method_.getNameOffset());
        assertEq(99, method_.getReturnTypeOffset());
        assertEq("$String", method_.getReturnType());
        assertNull(child_.getNextSibling());
        assertEq(1, method_.getParametersTypes().size());
        assertEq("$int", method_.getParametersTypes().first());
        assertEq(1, method_.getParametersNames().size());
        assertEq("p", method_.getParametersNames().first());
        assertEq(1, getAnnotationsParams(method_).size());
        assertEq(1, getAnnotationsIndexesParams(method_).size());
        assertEq(1, getAnnotationsParams(method_).first().size());
        assertEq(1, getAnnotationsIndexesParams(method_).first().size());
        assertEq(1, getAnnotationsParams(method_).first().size());
        assertEq("@MyAnnotTwo", getAnnotationsParams(method_).first().first());
        assertEq(116, getAnnotationsIndexesParams(method_).first().first());
        assertEq(128, method_.getParametersTypesOffset().first());
        assertEq(133, method_.getParametersNamesOffset().first());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile58Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertNull(child_);
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile59Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exmethod();\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isAnnotBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("exmethod", method_.getName());
        assertEq(86, method_.getNameOffset());
        assertEq(78, method_.getReturnTypeOffset());
        assertEq("$String", method_.getReturnType());
        assertEq("", method_.getDefaultValue());
        assertNull(child_.getNextSibling());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getAnnotationsParams().size());
        assertEq(0, getAnnotationsIndexesParams(method_).size());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile60Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exmethod()\"sample\";\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isAnnotBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        
        assertEq("exmethod", method_.getName());
        assertEq(86, method_.getNameOffset());
        assertEq(78, method_.getReturnTypeOffset());
        assertEq(96, method_.getDefaultValueOffset());
        assertEq("$String", method_.getReturnType());
        assertEq("\"sample\"", method_.getDefaultValue());
        assertNull(child_.getNextSibling());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getAnnotationsParams().size());
        assertEq(0, getAnnotationsIndexesParams(method_).size());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile61Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t@MyAnnot $String exmethod();\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isAnnotBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("exmethod", method_.getName());
        assertEq(95, method_.getNameOffset());
        assertEq(87, method_.getReturnTypeOffset());
        assertEq("$String", method_.getReturnType());
        assertEq("", method_.getDefaultValue());
        assertEq(1, getAnnotations(method_).size());
        assertEq("@MyAnnot", getAnnotations(method_).first());
        assertEq(1, getAnnotationsIndexes(method_).size());
        assertEq(78, getAnnotationsIndexes(method_).first());
        assertNull(child_.getNextSibling());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getAnnotationsParams().size());
        assertEq(0, getAnnotationsIndexesParams(method_).size());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile62Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exmethod(){\"sample\"};\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isAnnotBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        
        assertEq("exmethod", method_.getName());
        assertEq(86, method_.getNameOffset());
        assertEq(78, method_.getReturnTypeOffset());
        assertEq(96, method_.getDefaultValueOffset());
        assertEq("$String", method_.getReturnType());
        assertEq("{\"sample\"}", method_.getDefaultValue());
        assertNull(child_.getNextSibling());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getAnnotationsParams().size());
        assertEq(0, getAnnotationsIndexesParams(method_).size());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile63Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exmethod()(\"sample\")+\" test\";\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isAnnotBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        
        assertEq("exmethod", method_.getName());
        assertEq(86, method_.getNameOffset());
        assertEq(78, method_.getReturnTypeOffset());
        assertEq(96, method_.getDefaultValueOffset());
        assertEq("$String", method_.getReturnType());
        assertEq("(\"sample\")+\" test\"", method_.getDefaultValue());
        assertNull(child_.getNextSibling());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getAnnotationsParams().size());
        assertEq(0, getAnnotationsIndexesParams(method_).size());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile64Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ $long ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq(9, op_.getNameOffset());
        assertEq("$long", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        assertEq(2, op_.getParametersTypesOffset().size());
        assertEq(18, op_.getParametersTypesOffset().get(0));
        assertEq(26, op_.getParametersTypesOffset().get(1));
        assertEq(2, op_.getParametersNamesOffset().size());
        assertEq(23, op_.getParametersNamesOffset().get(0));
        assertEq(33, op_.getParametersNamesOffset().get(1));
        assertTrue(op_.isStaticMethod());
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        assertEq(39, b_.getOffset());
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
        assertEq(47, r_.getExpressionOffset());
        assertTrue(!op_.isAbstractMethod());
        assertTrue(!op_.isFinalMethod());
    }

    @Test
    public void parseFile65Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("@MyAnnot\n");
        file_.append("$operator+ $long ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq(1, getAnnotations(op_).size());
        assertEq("@MyAnnot", getAnnotations(op_).first());
        assertEq(1, getAnnotationsIndexes(op_).size());
        assertEq(0, getAnnotationsIndexes(op_).first());
        assertEq("+", op_.getName());
        assertEq(18, op_.getNameOffset());
        assertEq("$long", op_.getReturnType());
        assertEq(20, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        assertEq(2, op_.getParametersTypesOffset().size());
        assertEq(27, op_.getParametersTypesOffset().get(0));
        assertEq(35, op_.getParametersTypesOffset().get(1));
        assertEq(2, op_.getParametersNamesOffset().size());
        assertEq(32, op_.getParametersNamesOffset().get(0));
        assertEq(42, op_.getParametersNamesOffset().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        assertEq(48, b_.getOffset());
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
        assertEq(56, r_.getExpressionOffset());
    }
    @Test
    public void parseFile66Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ $long (@MyAnnot\n$int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq(9, op_.getNameOffset());
        assertEq("$long", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, getAnnotationsParams(op_).size());
        assertEq(1, getAnnotationsParams(op_).first().size());
        assertEq("@MyAnnot", getAnnotationsParams(op_).first().first());
        assertEq(2, getAnnotationsIndexesParams(op_).size());
        assertEq(1, getAnnotationsIndexesParams(op_).first().size());
        assertEq(18, getAnnotationsIndexesParams(op_).first().first());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        assertEq(2, op_.getParametersTypesOffset().size());
        assertEq(27, op_.getParametersTypesOffset().get(0));
        assertEq(35, op_.getParametersTypesOffset().get(1));
        assertEq(2, op_.getParametersNamesOffset().size());
        assertEq(32, op_.getParametersNamesOffset().get(0));
        assertEq(42, op_.getParametersNamesOffset().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        assertEq(48, b_.getOffset());
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
        assertEq(56, r_.getExpressionOffset());
    }

    @Test
    public void parseFile67Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("\t$public $class [] Inner{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile671Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("\t$abstract $class [] Inner{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile672Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("\t$final $class [] Inner{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile68Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t$public $class [] Inner<#S>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile69Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t$public $static $class [] Inner<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile70Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exfield;\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock method_ = (FieldBlock) child_;
        assertTrue(method_.isStaticField());
        assertTrue(!method_.isFinalField());
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq(86, method_.getFieldNameOffset());
        assertEq(78, method_.getClassNameOffset());
        assertEq("$String", method_.getClassName());
        assertEq("exfield", method_.getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile71Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$final $String exfield;\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock method_ = (FieldBlock) child_;
        assertTrue(method_.isStaticField());
        assertTrue(method_.isFinalField());
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq(78, method_.getFinalFieldOffset());
        assertEq(93, method_.getFieldNameOffset());
        assertEq(85, method_.getClassNameOffset());
        assertEq("$String", method_.getClassName());
        assertEq("exfield", method_.getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile72Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$String exfield = \"\";\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock method_ = (FieldBlock) child_;
        assertTrue(method_.isStaticField());
        assertTrue(!method_.isFinalField());
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq(86, method_.getFieldNameOffset());
        assertEq(78, method_.getClassNameOffset());
        assertEq("$String", method_.getClassName());
        assertEq("exfield = \"\"", method_.getValue());
        assertEq(86, method_.getValueOffset());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile73Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append("\t$final $String exfield = \"\";\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock method_ = (FieldBlock) child_;
        assertTrue(method_.isStaticField());
        assertTrue(method_.isFinalField());
        assertEq(0, getAnnotations(method_).size());
        assertEq(0, getAnnotationsIndexes(method_).size());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq(78, method_.getFinalFieldOffset());
        assertEq(93, method_.getFieldNameOffset());
        assertEq(85, method_.getClassNameOffset());
        assertEq("$String", method_.getClassName());
        assertEq("exfield = \"\"", method_.getValue());
        assertEq(93, method_.getValueOffset());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile74Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t$public $static $class Inner<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile75Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t$public $static $class Inner<#T>:pkg.Outer<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile76Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t@Annot\n");
        file_.append("\t$public $static $class Inner<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile77Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t@Annot\n");
        file_.append("\t$public $static $class Inner<#T>:pkg.Outer<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
    }
    @Test
    public void parseFile78Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $normal $void exfields(){\n");
        file_.append("\t\t$class(MyClass).method();\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$void", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line th_ = (Line) instr_;
        assertEq("$class(MyClass).method()",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertNull(instr_);
    }
    @Test
    public void parseFile79Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $normal $void exfields(){\n");
        file_.append("\t\t$class (MyClass).method();\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$void", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line th_ = (Line) instr_;
        assertEq("$class (MyClass).method()",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertNull(instr_);
    }
    @Test
    public void parseFile80Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $normal $void exfields(){\n");
        file_.append("\t\t$class  (MyClass).method();\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$void", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line th_ = (Line) instr_;
        assertEq("$class  (MyClass).method()",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertNull(instr_);
    }
    @Test
    public void parseFile81Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append(" $class StaticInner{\n");
        file_.append(" }\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ClassBlock);
        RootBlock i_ = getClassBody(context_, "pkg.MyAnnot..StaticInner");
        assertSame(i_, child_);
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile82Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append(" $public $class [my.Class;] StaticInner{\n");
        file_.append(" }\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ClassBlock);
        RootBlock i_ = getClassBody(context_, "pkg.MyAnnot..StaticInner");
        assertSame(i_, child_);
        assertEq(1, i_.getImports().size());
        assertEq("my.Class", i_.getImports().first());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile83Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $annotation pkg.MyAnnot {\n");
        file_.append(" $public $class StaticInner{\n");
        file_.append(" }\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.MyAnnot", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.MyAnnot");
        assertTrue(r_ instanceof AnnotationBlock);
        AnnotationBlock cl_ = (AnnotationBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ClassBlock);
        RootBlock i_ = getClassBody(context_, "pkg.MyAnnot..StaticInner");
        assertSame(i_, child_);
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }

    @Test
    public void parseFile84Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("\t@MyAnnot\n");
        file_.append("\t$public $class [my.Import;] Inner{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(2, countCustomTypes(context_));
        assertEq("pkg.Outer", getCustomTypes(context_,0).getFullName());
        assertEq("pkg.Outer..Inner", getCustomTypes(context_,1).getFullName());
        RootBlock r_ = getClassBody(context_, "pkg.Outer");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk inner_ = cl_.getFirstChild();
        assertTrue(inner_ instanceof ClassBlock);
        assertNull(inner_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertSame(inner_, getClassBody(context_, "pkg.Outer..Inner"));
        assertEq(1, getAnnotations(((RootBlock)inner_)).size());
        assertEq("@MyAnnot", getAnnotations(((RootBlock)inner_)).first());
        assertEq(1, ((RootBlock)inner_).getImports().size());
        assertEq("my.Import", ((RootBlock)inner_).getImports().first());
    }
    @Test
    public void parseFile86Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$int[][] array;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq("$int[][]",decl_.getClassName());
        assertEq(320, decl_.getClassNameOffset());
        assertTrue(!decl_.isFinalVariable());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Line);
        assertEq("array",((Line)instr_).getExpression());
        assertEq(329, ((Line)instr_).getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(345, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(367, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile87Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST();\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo();\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tarray[0]=1;\n");
        file_.append("\t\t$throw $badthrows;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<pkgtwo.Inherit>", getDirectSuperTypes(r_).first());
        assertEq("every.body<pkgtwo.Inherit>", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getUniqueFieldName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffset());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(195, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(211, method_.getAccessOffset());
        assertEq(219, method_.getModifierOffset());
        assertEq(229, method_.getReturnTypeOffset());
        assertEq(237, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(256, method_.getModifierOffset());
        assertEq(266, method_.getReturnTypeOffset());
        assertEq(274, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(285, method_.getAccessOffset());
        assertEq(294, method_.getModifierOffset());
        assertEq(302, method_.getReturnTypeOffset());
        assertEq(310, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        assertEq("array[0]=1",((Line)instr_).getExpression());
        assertEq(320, ((Line)instr_).getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrows",th_.getExpression());
        assertEq(341, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(363, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile88Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$for($int i:$new $int[]{})for{\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
    }
    @Test
    public void parseFile89Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $final $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $String exfield='\\'';\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        assertTrue(!cl_.isAbstractType());
        assertTrue(cl_.isFinalType());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("exfield='\\''", ((FieldBlock) child_).getValue());
        assertNull(field_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile90Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $abstract $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $String exfield=\"\\\"\";\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        assertTrue(cl_.isAbstractType());
        assertTrue(!cl_.isFinalType());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("exfield=\"\\\"\"", ((FieldBlock) child_).getValue());
        assertNull(field_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile91Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $abstract $final $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $String exfield=\"\";\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertTrue(cl_.isAbstractType());
        assertTrue(cl_.isFinalType());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq("exfield=\"\"", ((FieldBlock) child_).getValue());
        assertNull(field_.getNextSibling());
        assertNull(cl_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile92Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $String loop(){\n");
        file_.append("\t\tvariable = 5i;\n");
        file_.append("\t\t$if (test){\n");
        file_.append("\t\t\t$return;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$while(condition){\n");
        file_.append("\t\t\t$return;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock  method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq("variable = 5i",line_.getExpression());
        assertEq(104, line_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof IfCondition);
        IfCondition for_ = (IfCondition) instr_;
        assertEq("test",for_.getCondition());
        assertEq(126, for_.getConditionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof WhileCondition);
        WhileCondition w_ = (WhileCondition) instr_;
        assertEq("condition",w_.getCondition());
        assertEq(158, w_.getConditionOffset());
    }
    @Test
    public void parseFile93Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $String loop(){\n");
        file_.append("\t\tvariable = 5i;\n");
        file_.append("\t\t$if (test){\n");
        file_.append("\t\t\t$return;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$else $if(condition){\n");
        file_.append("\t\t\t$return;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock  method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line line_ = (Line) instr_;
        assertEq("variable = 5i",line_.getExpression());
        assertEq(104, line_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof IfCondition);
        IfCondition for_ = (IfCondition) instr_;
        assertEq("test",for_.getCondition());
        assertEq(126, for_.getConditionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseIfCondition);
        ElseIfCondition w_ = (ElseIfCondition) instr_;
        assertEq("condition",w_.getCondition());
        assertEq(161, w_.getConditionOffset());
    }
    @Test
    public void parseFile94Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$String loop(){\n");
        file_.append("\t\t$for($final $int i=0i;i<10i;i++){\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PACKAGE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(339, method_.getModifierOffset());
        assertEq(339, method_.getReturnTypeOffset());
        assertEq(347, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForMutableIterativeLoop);
        ForMutableIterativeLoop for_ = (ForMutableIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("i=0i",for_.getInit());
        assertEq("i<10i",for_.getExpression());
        assertEq("i++",for_.getStep());
        assertEq("",for_.getLabel());
        assertTrue(for_.isFinalVariable());
        assertEq(362, for_.getClassIndexNameOffset());
        assertEq(362, for_.getFinalOffset());
        assertEq(369, for_.getClassNameOffset());
        assertEq(374, for_.getInitOffset());
        assertEq(379, for_.getExpressionOffset());
        assertEq(385, for_.getStepOffset());
        assertEq(389,for_.getLabelOffset());
    }
    @Test
    public void parseFile95Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private Toto exfield(){\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(99, ((FieldBlock) child_).getAccessOffset());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(116, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("Toto", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(152, method_.getAccessOffset());
        assertEq(161, method_.getModifierOffset());
        assertEq(161, method_.getReturnTypeOffset());
        assertEq(166, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(187, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
    }
    @Test
    public void parseFile96Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private Toto(){\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(99, ((FieldBlock) child_).getAccessOffset());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(116, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ConstructorBlock);
        ConstructorBlock method_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("", method_.getName());
        assertEq("", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(152, method_.getAccessOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(179, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
    }
    @Test
    public void parseFile97Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private Toto(){\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ConstructorBlock);
        ConstructorBlock method_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("", method_.getName());
        assertEq("", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(191, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
    }
    @Test
    public void parseFile98Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$for($int i:$new $int[]{})for{\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(348, method_.getModifierOffset());
        assertEq(356, method_.getReturnTypeOffset());
        assertEq(364, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForEachLoop);
        ForEachLoop for_ = (ForEachLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("i",for_.getVariableName());
        assertEq("$new $int[]{}",for_.getExpression());
        assertEq("for",for_.getLabel());
        assertEq(379, for_.getClassIndexNameOffset());
        assertEq(379, for_.getClassNameOffset());
        assertEq(384, for_.getVariableNameOffset());
        assertEq(386, for_.getExpressionOffset());
        assertEq(400,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(416, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(444, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile99Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$for($int i=0;i<1;i++)for{\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(348, method_.getModifierOffset());
        assertEq(356, method_.getReturnTypeOffset());
        assertEq(364, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForMutableIterativeLoop);
        ForMutableIterativeLoop for_ = (ForMutableIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("i=0",for_.getInit());
        assertEq("i<1",for_.getExpression());
        assertEq("i++",for_.getStep());
        assertEq("for",for_.getLabel());
        assertEq(379, for_.getClassIndexNameOffset());
        assertEq(379, for_.getClassNameOffset());
        assertEq(384, for_.getInitOffset());
        assertEq(388, for_.getExpressionOffset());
        assertEq(392, for_.getStepOffset());
        assertEq(396,for_.getLabelOffset());
        AbsBk grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) grChild_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(412, ret_.getExpressionOffset());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(440, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile100Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String myf=\"ValueOne\",mys=\"ValueTwo\";\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(49, ((FieldBlock) child_).getAccessOffset());
        assertEq(66, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(58, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(66, ((FieldBlock) child_).getValueOffset());
        assertEq("myf=\"ValueOne\",mys=\"ValueTwo\"", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile101Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile102Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile103Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile104Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    call();\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("call()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile105Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile106Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   case 1;\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile107Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   case 1;\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("  }\n");
        file_.append("  return;\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(case_.getNextSibling());
        assertTrue(switch_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) switch_.getNextSibling();
        assertEq("", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile108Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append("  return;\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertTrue(switch_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) switch_.getNextSibling();
        assertEq("", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile109Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{}\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        assertTrue(case_.getFirstChild() instanceof UnclassedBracedBlock);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile110Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{}\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof UnclassedBracedBlock);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile111Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    call();\n");
        file_.append("   }\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof UnclassedBracedBlock);
        assertTrue(case_.getFirstChild().getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild().getFirstChild();
        assertEq("call()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile112Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof UnclassedBracedBlock);
        assertTrue(case_.getFirstChild().getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild().getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile113Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   case 1;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof UnclassedBracedBlock);
        assertTrue(case_.getFirstChild().getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild().getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile114Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   default;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof DefaultCondition);
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile115Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   default;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof DefaultCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile116Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    call();\n");
        file_.append("   default;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("call()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof DefaultCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile117Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   default;\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof DefaultCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof Line);
        line_ = (Line) line_.getNextSibling();
        assertEq("second()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile118Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile118_Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   default;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof DefaultCondition);
        DefaultCondition info_ = (DefaultCondition) case_;
        assertTrue(info_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", ((CaseCondition) case_).getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile118__Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   default;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof DefaultCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile119_Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("   default;\n");
        file_.append("    return condition?one:two;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertNull(line_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof DefaultCondition);
        case_ = case_.getNextSibling();
        assertTrue(case_.getFirstChild() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)case_.getFirstChild();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile119Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   \\\\comment\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertEq("1", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile120Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   \\\\comment\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile121Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" private static final java.lang.String multi=`\n");
        file_.append("  static {``next\"// /*\t)`;\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) first_;
        assertNull(field_.getNextSibling());
        String expression_ = field_.getValue();
        assertEq("multi=`\n  static {``next\"// /*\t)`", expression_);
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile122Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" private static final java.lang.String multi=`\n");
        file_.append("  static {``next\"// /*\t)`,line=`now\nreturn to line\n``but capture all`;\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) first_;
        assertNull(field_.getNextSibling());
        String expression_ = field_.getValue();
        assertEq("multi=`\n  static {``next\"// /*\t)`,line=`now\nreturn to line\n``but capture all`", expression_);
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile123Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" private static final java.lang.String multi=`\n");
        file_.append("  static {``next\"// /*\t)`,line=`now\nreturn to line\n``but capture all`;\n");
        file_.append(" private static final java.lang.String single=\"`\";\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) first_;
        String expression_ = field_.getValue();
        assertEq("multi=`\n  static {``next\"// /*\t)`,line=`now\nreturn to line\n``but capture all`", expression_);
        assertTrue(field_.getNextSibling() instanceof FieldBlock);
        field_ = (FieldBlock) field_.getNextSibling();
        expression_ = field_.getValue();
        assertEq("single=\"`\"", expression_);
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile124Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\tONE\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3, getDirectSuperTypes(r_).size());
        assertEq("hello.word<Ex>", getDirectSuperTypes(r_).first());
        assertEq("every.body", getDirectSuperTypes(r_).get(1));
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertEq("ONE", ((ElementBlock)field_).getUniqueFieldName());

        assertEq(102, ((ElementBlock)field_).getFieldNameOffset());
        assertEq("", ((ElementBlock)field_).getValue());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile125Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("public classe mon.paquet.Exemple{\n");
        file_.append(" public static vide pcp(){\n");
        file_.append("  Systeme.afficher(\"1+2=\"+(1+2));\n");
        file_.append(" }\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextFrDefault();
        parseFile(file_, context_, "mon_fichier", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("mon.paquet.Exemple", getCustomTypes(context_,0).getFullName());
    }
    @Test
    public void parseFile126Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {;\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$for($int i,$long j: list)label{\n");
        file_.append("\t\t\ti++;\n");
        file_.append("\t\t\tj--;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1, getDirectSuperTypes(r_).size());
        assertEq("java.lang.$Enum<pkgtwo.Toto>", getDirectSuperTypes(r_).first());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        AbsBk instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof ForEachTable);
        ForEachTable th_ = (ForEachTable) instr_;
        assertEq("$int",th_.getClassIndexName());
        assertEq("$int",th_.getClassNameFirst());
        assertEq("$long",th_.getClassNameSecond());
        assertEq("i",th_.getVariableNameFirst());
        assertEq("j",th_.getVariableNameSecond());
        assertEq("list",th_.getExpression());
        assertEq("label",th_.getLabel());
        assertEq(66, th_.getClassNameOffsetFirst());
        assertEq(71, th_.getVariableNameOffsetFirst());
        assertEq(73, th_.getClassNameOffsetSecond());
        assertEq(79, th_.getVariableNameOffsetSecond());
        assertEq(82, th_.getExpressionOffset());
        assertEq(87, th_.getLabelOffset());
        AbsBk instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("i++", ((Line)instrWhile_).getExpression());
        assertEq(97, ((Line)instrWhile_).getExpressionOffset());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof Line);
        assertEq("j--", ((Line)instrWhile_).getExpression());
        assertEq(105, ((Line)instrWhile_).getExpressionOffset());
        assertNull(instrWhile_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile127Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp<Other<String>> p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other<String>>", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile128Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp<Other<String>>... p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other<String>>", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile129Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp<Other<String>>.Inner p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other<String>>.Inner", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile130Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp .Inner p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp .Inner", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile131Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp. Inner p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp. Inner", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile132Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp<Other > p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other >", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile133Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method( Temp<Other> p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(!field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other>", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile134Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $String method(Temp<Other<String>> ... p){\n");
        file_.append("\t\t$return \"\";\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock field_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!field_.isStaticMethod());
        assertTrue(!field_.isFinalMethod());
        assertTrue(field_.isVarargs());
        assertTrue(!field_.isAbstractMethod());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq("$String", field_.getReturnType());
        assertEq(1, field_.getParametersTypes().size());
        assertEq("Temp<Other<String>> ", field_.getParametersTypes().first());
        assertEq(1, field_.getParametersNames().size());
        assertEq("p", field_.getParametersNames().first());
    }
    @Test
    public void parseFile135Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tTemp<Other<String>>[] v;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof DeclareVariable);
        DeclareVariable field_ = (DeclareVariable) child_;
        assertEq("Temp<Other<String>>[]", field_.getClassName());
        AbsBk n_ = field_.getNextSibling();
        assertTrue(n_ instanceof Line);
        Line line_ = (Line) n_;
        assertEq("v", line_.getExpression());
    }
    @Test
    public void parseFile136Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tTemp <Other<String>>[] v;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof DeclareVariable);
        DeclareVariable field_ = (DeclareVariable) child_;
        assertEq("Temp <Other<String>>[]", field_.getClassName());
        AbsBk n_ = field_.getNextSibling();
        assertTrue(n_ instanceof Line);
        Line line_ = (Line) n_;
        assertEq("v", line_.getExpression());
    }
    @Test
    public void parseFile137Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tTemp<Other<String>> [] v;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof DeclareVariable);
        DeclareVariable field_ = (DeclareVariable) child_;
        assertEq("Temp<Other<String>> []", field_.getClassName());
        AbsBk n_ = field_.getNextSibling();
        assertTrue(n_ instanceof Line);
        Line line_ = (Line) n_;
        assertEq("v", line_.getExpression());
    }
    @Test
    public void parseFile138Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tTemp<Other<String>>[]v;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof DeclareVariable);
        DeclareVariable field_ = (DeclareVariable) child_;
        assertEq("Temp<Other<String>>[]", field_.getClassName());
        AbsBk n_ = field_.getNextSibling();
        assertTrue(n_ instanceof Line);
        Line line_ = (Line) n_;
        assertEq("v", line_.getExpression());
    }
    @Test
    public void parseFile139Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tv.$new Cl();\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof Line);
        Line line_ = (Line) child_;
        assertEq("v.$new Cl()", line_.getExpression());
    }
    @Test
    public void parseFile140Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto {\n");
        file_.append("\t$private $void method(){\n");
        file_.append("\t\tv.a$new mycl;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof DeclareVariable);
        DeclareVariable field_ = (DeclareVariable) child_;
        assertEq("v.a$new", field_.getClassName());
        AbsBk n_ = field_.getNextSibling();
        assertTrue(n_ instanceof Line);
        Line line_ = (Line) n_;
        assertEq("mycl", line_.getExpression());
    }
    @Test
    public void parseFile141Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("   \\\\comment\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile142Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("   \\*comment * *\\\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile143Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   \\\\comment\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile144Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   \\*comment * *\\\n");
        file_.append("    first();\n");
        file_.append("    return condition?one:two;\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefaultComment();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        AbsBk first_ = cl_.getFirstChild();
        assertTrue(first_ instanceof StaticBlock);
        AbsBk switch_ = first_.getFirstChild();
        assertTrue(switch_ instanceof SwitchBlock);
        AbsBk case_ = switch_.getFirstChild();
        assertTrue(case_ instanceof CaseCondition);
        CaseCondition info_ = (CaseCondition) case_;
        assertEq("0", info_.getValue());
        assertTrue(case_.getFirstChild() instanceof Line);
        Line line_ = (Line) case_.getFirstChild();
        assertEq("first()", line_.getExpression());
        assertTrue(line_.getNextSibling() instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod)line_.getNextSibling();
        assertEq("condition?one:two", ret_.getExpression());
        assertNull(ret_.getNextSibling());
        assertTrue(case_.getNextSibling() instanceof CaseCondition);
        case_ = case_.getNextSibling();
        info_ = (CaseCondition) case_;
        assertTrue(case_.getFirstChild() instanceof EmptyInstruction);
        assertEq("1", info_.getValue());
        assertNull(case_.getNextSibling());
        assertNull(switch_.getNextSibling());
        assertNull(first_.getNextSibling());
        assertSame(AccessEnum.PACKAGE, cl_.getAccess());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile145Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("public class pkgtwo.Toto {\n");
        file_.append("\tprivate void method(){\n");
        file_.append("\t\tfor(int k,byte v:map){\n");
        file_.append("\t\t\treturn;\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild().getFirstChild();
        assertTrue(child_ instanceof ForEachTable);
        ForEachTable field_ = (ForEachTable) child_;
        assertEq("int", field_.getClassNameFirst());
        assertEq("k", field_.getVariableNameFirst());
        assertEq("byte", field_.getClassNameSecond());
        assertEq("v", field_.getVariableNameSecond());
        AbsBk n_ = field_.getFirstChild();
        assertTrue(n_ instanceof ReturnMethod);
        ReturnMethod line_ = (ReturnMethod) n_;
        assertEq("", line_.getExpression());
        assertNull(line_.getNextSibling());
    }
    @Test
    public void parseFile146Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ $long[] ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("$long[]", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile147Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ $long[ ] ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("$long[ ]", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile148Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<Val> ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<Val>", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile149Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<U<Val>> ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<U<Val>>", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile150Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp <U<Val>> ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp <U<Val>>", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile151Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<U<Val>> [] ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<U<Val>> []", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile152Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<U<Val>>.Inner ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<U<Val>>.Inner", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile153Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ #T ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("#T", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile154Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<U<Val>> [] [] ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<U<Val>> [] []", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile155Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ pkg .Inner ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("pkg .Inner", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile156Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ pkg. Inner ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("pkg. Inner", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile157Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$operator+ Tmp<U<Val >> [] [] ($int a, $short b) {\n");
        file_.append("\t$return plus(a;.;,b;.;);\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        CustList<OperatorBlock> ops_ = getOperators(context_);
        assertEq(1, ops_.size());
        OperatorBlock op_ = ops_.first();
        assertEq("+", op_.getName());
        assertEq("Tmp<U<Val >> [] []", op_.getReturnType());
        assertEq(11, op_.getReturnTypeOffset());
        assertEq(2, op_.getParametersTypes().size());
        assertEq("$int", op_.getParametersTypes().get(0));
        assertEq("$short", op_.getParametersTypes().get(1));
        assertEq(2, op_.getParametersNames().size());
        assertEq("a", op_.getParametersNames().get(0));
        assertEq("b", op_.getParametersNames().get(1));
        AbsBk b_ = op_.getFirstChild();
        assertTrue(b_ instanceof ReturnMethod);
        ReturnMethod r_ = (ReturnMethod) b_;
        assertEq("plus(a;.;,b;.;)", r_.getExpression());
    }
    @Test
    public void parseFile158Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{}\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile158__Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$class pkgtwo.ExClass {\n");
        file_.append(" $foreach ([([)]):] {\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile159__Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" iter (int i=0;;) {\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile159Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{}\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile160Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    call();\n");
        file_.append("   }\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile161Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("   case 1;\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile162Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;\n");
        file_.append("   case 1;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile163Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("   default;{\n");
        file_.append("    third();\n");
        file_.append("    fourth();\n");
        file_.append("   }\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile164Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("class pkgtwo.ExClass {\n");
        file_.append(" static {\n");
        file_.append("  switch (value) {\n");
        file_.append("   case 0;{\n");
        file_.append("    first();\n");
        file_.append("    second();\n");
        file_.append("   }\n");
        file_.append("   default;{\n");
        file_.append("    third();\n");
        file_.append("    fourth();\n");
        file_.append("   }\n");
        file_.append("  }\n");
        file_.append(" }\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile165Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$String loop(){\n");
        file_.append("\t\t$for($final $int i=0i;i<10i; i++){\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PACKAGE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(339, method_.getModifierOffset());
        assertEq(339, method_.getReturnTypeOffset());
        assertEq(347, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForMutableIterativeLoop);
        ForMutableIterativeLoop for_ = (ForMutableIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("i=0i",for_.getInit());
        assertEq("i<10i",for_.getExpression());
        assertEq("i++",for_.getStep());
        assertEq("",for_.getLabel());
        assertTrue(for_.isFinalVariable());
        assertEq(362, for_.getClassIndexNameOffset());
        assertEq(362, for_.getFinalOffset());
        assertEq(369, for_.getClassNameOffset());
        assertEq(374, for_.getInitOffset());
        assertEq(379, for_.getExpressionOffset());
        assertEq(386, for_.getStepOffset());
        assertEq(390,for_.getLabelOffset());
    }
    @Test
    public void parseFile166Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER});\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow;\n");
        file_.append("\t\t$return $unreachable;\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis;\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("\t$String loop(){\n");
        file_.append("\t\t$for($final $int i=0i; i<10i; i++){\n");
        file_.append("\t\t\t$return $unreachable;\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2, getDirectSuperTypes(r_).size());
        assertEq("hello.word<#T>", getDirectSuperTypes(r_).first());
        assertEq("every.body<#T>", getDirectSuperTypes(r_).last());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(128, ((FieldBlock) child_).getValueOffset());
        assertEq("exfield=\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(164, method_.getAccessOffset());
        assertEq(173, method_.getModifierOffset());
        assertEq(181, method_.getReturnTypeOffset());
        assertEq(189, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq("$badthrow",th_.getExpression());
        assertEq(209, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ReturnMethod ret_ = (ReturnMethod) instr_;
        assertEq("$unreachable",ret_.getExpression());
        assertEq(230, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(248, method_.getAccessOffset());
        assertEq(257, method_.getModifierOffset());
        assertEq(265, method_.getReturnTypeOffset());
        assertEq(273, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq("$badthrowbis",th_.getExpression());
        assertEq(294, th_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMethod);
        ret_ = (ReturnMethod) instr_;
        assertEq("$unreachablebis",ret_.getExpression());
        assertEq(318, ret_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(AbsBk.isOverBlock(child_));
        method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PACKAGE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(339, method_.getAccessOffset());
        assertEq(339, method_.getModifierOffset());
        assertEq(339, method_.getReturnTypeOffset());
        assertEq(347, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForMutableIterativeLoop);
        ForMutableIterativeLoop for_ = (ForMutableIterativeLoop) instr_;
        assertEq("$int",for_.getClassIndexName());
        assertEq("$int",for_.getClassName());
        assertEq("i=0i",for_.getInit());
        assertEq("i<10i",for_.getExpression());
        assertEq("i++",for_.getStep());
        assertEq("",for_.getLabel());
        assertTrue(for_.isFinalVariable());
        assertEq(362, for_.getClassIndexNameOffset());
        assertEq(362, for_.getFinalOffset());
        assertEq(369, for_.getClassNameOffset());
        assertEq(374, for_.getInitOffset());
        assertEq(380, for_.getExpressionOffset());
        assertEq(387, for_.getStepOffset());
        assertEq(391,for_.getLabelOffset());
    }
    @Test
    public void parseFile167Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$badthrowbis<y,tab[8]>p;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(34, method_.getAccessOffset());
        assertEq(43, method_.getModifierOffset());
        assertEq(51, method_.getReturnTypeOffset());
        assertEq(59, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line th_ = (Line) instr_;
        assertEq("$badthrowbis<y,tab[8]>p",th_.getExpression());
        assertEq(72, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
    }
    @Test
    public void parseFile168Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkgtwo.Toto<#T> {\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$badthrowbis<y?tab[8]>p;\n");
        file_.append("\t}\n");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.Toto", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(0, getDirectSuperTypes(r_).size());
        AbsBk child_ = cl_.getFirstChild();
        assertTrue(AbsBk.isOverBlock(child_));
        NamedCalledFunctionBlock method_ = (NamedCalledFunctionBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType());
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertEq(34, method_.getAccessOffset());
        assertEq(43, method_.getModifierOffset());
        assertEq(51, method_.getReturnTypeOffset());
        assertEq(59, method_.getNameOffset());
        assertEq(0, method_.getParametersTypesOffset().size());
        assertEq(0, method_.getParametersNamesOffset().size());
        AbsBk instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line th_ = (Line) instr_;
        assertEq("$badthrowbis<y?tab[8]>p",th_.getExpression());
        assertEq(72, th_.getExpressionOffset());
        assertNull(instr_.getNextSibling());
    }
    @Test
    public void parseFile169Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\r\n");
        file_.append("$public $class pkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq(44,cl_.getAccessOffset());
        assertEq(52,cl_.getBegin());
        assertNull(cl_.getFirstChild());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile170Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\r\n");
        file_.append("$public $class pkgtwo.ExClass {");
        file_.append("}\b");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(0, countCustomTypes(context_));
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile171Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("\\* multi line\n");
        file_.append("comment*\\\n");
        file_.append("$public $class pkgtwo.ExClass {");
        file_.append("}\r");
        AnalyzedPageEl context_ = simpleCtxCommentPage();
        parseFile(file_, context_, "my_file", false);
        assertEq(1, countCustomTypes(context_));
        assertEq("pkgtwo.ExClass", getCustomTypes(context_,0).getFullName());
        RootBlock r_ = getClassBody(context_, "pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq(43,cl_.getAccessOffset());
        assertEq(51,cl_.getBegin());
        assertNull(cl_.getFirstChild());
        assertEq(1, countFileTypes(context_));
    }
    @Test
    public void parseFile1FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("\t$public $class [] Outer{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile2FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<#T> {\n");
        file_.append("\t$public $class [] Inner<#T>{\n");
        file_.append("\t}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile3FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Ex {\n");
        file_.append(" $public $static $int catching(){\n");
        file_.append("  $int t;\n");
        file_.append("  t;.=0i;\n");
        file_.append("  $if(t;.<0){\n");
        file_.append("   $return 1i/0i;\n");
        file_.append("  }\n");
        file_.append("  $else $if(t;. == 1){\n");
        file_.append("   t;.=2i;\n");
        file_.append("  $else $if($true){\n");
        file_.append("   t;.=1i;\n");
        file_.append("  }\n");
        file_.append("  $return t;.;\n");
        file_.append(" }\n");
        file_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.addEntry("my_file",file_.toString());
        assertTrue(hasErr(files_));
    }
    @Test
    public void parseFile4FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.#Outer {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", true);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile5FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\t\n");
        file_.append("}\n");
        file_.append("$public $class pkg.Outer {\t\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile6FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<,> {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile7FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<T,T> {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile8FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer<int#> {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile9FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class java.lang.String {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile10FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("public class int {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile11FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Ex {\n");
        file_.append("}\n");
        file_.append("$public $class pkg.Ex {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile12FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("public class 04 {\n");
        file_.append("}\n");
        file_.append("public class void {\n");
        file_.append("}\n");
        file_.append("public class pkg.pkgtwo.Ex {\n");
        file_.append("}\n");
        file_.append("public class pkg.pkgtwo {\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile13FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("// multi line\n");
        file_.append("$annotation pkgtwo.ExClass {");
        file_.append(" $enum pkg.Inner {:");
        file_.append(" }");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile14FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$annotation\tpkgtwo.ExClass {");
        file_.append("}");
        file_.append("$annotation\tpkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile15FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$annotation []\tpkgtwo.ExClass {");
        file_.append("}");
        file_.append("$annotation []\tpkgtwo.ExClass {");
        file_.append("}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile16FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$annotation []");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile17FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$annotation [");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile18FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$annotation pkg.MyAnnot{$public $int v=r{}y}");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(isEmptyErrors(context_));
    }
    @Test
    public void parseFile19FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.Outer {\n");
        file_.append("outer {\n");
        file_.append("inner {\n");
        file_.append("}\n");
        file_.append("}\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleCtxPage();
        parseFile(file_, context_, "my_file", false);
        assertTrue(isEmptyErrors(context_));
    }
    @Test
    public void parseFile20FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("\"\"\n");
        file_.append("public class void {\n");
        file_.append("}\n");
        file_.append("\"\"\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }
    @Test
    public void parseFile21FailTest() {
        StringBuilder file_ = new StringBuilder();
        file_.append("public class void\n");
        file_.append("}\n");
        AnalyzedPageEl context_ = simpleContextEnDefault();
        parseFile(file_, context_, "my_file", false);
        assertTrue(!isEmptyErrors(context_));
    }


    private static AnalyzedPageEl simpleContextEnDefault() {
        //key words in some language
        Options opt_ = newOptions();
        addTypesInit(opt_);
        LgNames lgName_ = getLgNames();
        KeyWords kwl_ = getKeyWords("en",lgName_);
        setOpts(opt_,IndexConstants.INDEX_NOT_FOUND_ELT);
        AnalyzedPageEl page_ = AnalyzedPageEl.setInnerAnalyzing();
        getForwards(opt_,lgName_,kwl_,page_);
        for (EntryCust<String, String> e: page_.buildFiles().entryList()) {
            String name_ = e.getKey();
            String content_ = e.getValue();
            parseFile(page_,name_, true, content_);
        }
        return page_;
    }
    private static AnalyzedPageEl simpleContextEnDefaultComment() {
        //key words in some language
        Options opt_ = newOptions();
        opt_.getComments().add(new CommentDelimiters("\\\\",new StringList("\r\n","\r","\n")));
        opt_.getComments().add(new CommentDelimiters("\\*",new StringList("*\\")));


        LgNames lgName_ = getLgNames();
        KeyWords kwl_ = getKeyWords("en",lgName_);
        setOpts(opt_,IndexConstants.INDEX_NOT_FOUND_ELT);
        AnalyzedPageEl page_ = AnalyzedPageEl.setInnerAnalyzing();
        getForwards(opt_,lgName_,kwl_,page_);
        for (EntryCust<String, String> e: page_.buildFiles().entryList()) {
            String name_ = e.getKey();
            String content_ = e.getValue();
            parseFile(page_,name_,  true, content_);
        }
        return page_;
    }
    private static AnalyzedPageEl simpleContextFrDefault() {
        //key words in some language
        Options opt_ = newOptions();
        addTypesInit(opt_);
        LgNames lgName_ = getLgNames();
        KeyWords kwl_ = getKeyWords("fr",lgName_);
        setOpts(opt_,IndexConstants.INDEX_NOT_FOUND_ELT);
        AnalyzedPageEl page_ = AnalyzedPageEl.setInnerAnalyzing();
        getForwards(opt_,lgName_,kwl_,page_);
        for (EntryCust<String, String> e: page_.buildFiles().entryList()) {
            String name_ = e.getKey();
            String content_ = e.getValue();
            parseFile(page_, name_, true, content_);
        }
        return page_;
    }

    protected static void parseFile(StringBuilder _file, AnalyzedPageEl _context, String _myFile, boolean _predefined) {
        String content_ = _file.toString();
        parseFile(_context, _myFile, _predefined, content_, _context);
    }

    public static void parseFile(AnalyzedPageEl _context, String _fileName, boolean _predefined, String _file) {
        parseFile(_context,_fileName,_predefined,_file, _context);
    }

    protected static void parseFile(AnalyzedPageEl _context, String _fileName, boolean _predefined, String _file, AnalyzedPageEl _page) {
        FileBlock fileBlock_ = new FileBlock(0,_predefined, _fileName, new DefaultFileEscapedCalc());
        _page.putFileBlock(_fileName, fileBlock_);
        _page.getErrors().putFile(fileBlock_, _context);
        _page.setCurrentFile(fileBlock_);
        fileBlock_.processLinesTabsWithError(_file, _context);
        StringComment stringComment_ = fileBlock_.stringComment(_page.getComments());
        fileBlock_.metrics(stringComment_);
        String file_ = stringComment_.getFile();
        FileResolver.parseFile(fileBlock_, file_, _context);
        StringList basePkgFound_ = _page.getBasePackagesFound();
        basePkgFound_.addAllElts(fileBlock_.getAllBasePackages());
        StringList pkgFound_ = _page.getPackagesFound();
        pkgFound_.addAllElts(fileBlock_.getAllPackages());
        ClassesUtil.fetchByFile(basePkgFound_,pkgFound_,fileBlock_, _context);
        ClassesUtil.fetchOuterTypesCountOpers(_context,fileBlock_);
    }


    private static int countCustomTypes(AnalyzedPageEl _cont) {
        int count_ = 0;
        for (RootBlock r: _cont.getFoundTypes()) {
            if (!r.getFile().isPredefined()) {
                count_++;
            }
        }
        return count_;
    }
    private static int countFileTypes(AnalyzedPageEl _cont) {
        int count_ = 0;
        for (EntryCust<String, FileBlock> r: _cont.getFilesBodies().entryList()) {
            if (!r.getValue().isPredefined()) {
                count_++;
            }
        }
        return count_;
    }

    private static RootBlock getClassBody(AnalyzedPageEl _cont, String _className) {
        for (RootBlock r: _cont.getFoundTypes()) {
            if (StringUtil.quickEq(r.getFullName(),StringExpUtil.getIdFromAllTypes(_className))) {
                return r;
            }
        }
        return null;
    }


    private static RootBlock getCustomTypes(AnalyzedPageEl _cont, int _i) {
        int count_ = 0;
        for (RootBlock r: _cont.getFoundTypes()) {
            if (r.getFile().isPredefined()) {
                continue;
            }
            if (count_ == _i) {
                return r;
            }
            count_++;
        }
        return null;
    }
    private static CustList<OperatorBlock> getOperators(AnalyzedPageEl _context) {
        return _context.getAllOperators();
    }


    protected static AnalyzedPageEl simpleCtxPage() {
        Options opt_ = newOptions();
        LgNames lgName_ = getLgNames();
        KeyWords kw_ = new KeyWords();
        setOpts(opt_,IndexConstants.INDEX_NOT_FOUND_ELT);
        AnalyzedPageEl page_ = AnalyzedPageEl.setInnerAnalyzing();
        getForwards(opt_,lgName_,kw_,page_);
        parsePredefFiles(page_);
        return page_;
    }
    protected static AnalyzedPageEl simpleCtxCommentPage() {
        Options opt_ = newOptions();
        opt_.getComments().add(new CommentDelimiters("\\\\",new StringList("\r\n","\r","\n")));
        opt_.getComments().add(new CommentDelimiters("\\*",new StringList("*\\")));
        LgNames lgName_ = getLgNames();
        KeyWords kw_ = new KeyWords();
        setOpts(opt_,IndexConstants.INDEX_NOT_FOUND_ELT);
        AnalyzedPageEl page_ = AnalyzedPageEl.setInnerAnalyzing();
        getForwards(opt_,lgName_,kw_,page_);
        parsePredefFiles(page_);
        return page_;
    }

    private static void parsePredefFiles(AnalyzedPageEl _cont) {
        for (EntryCust<String, String> e: _cont.buildFiles().entryList()) {
            String name_ = e.getKey();
            String content_ = e.getValue();
            FileResolverTest.parseFile(_cont, name_, true, content_);
        }
    }
    private static StringList getDirectSuperTypes(RootBlock _r) {
        StringList l_ = new StringList();
        for (String p: _r.getDirectSuperTypes()) {
            l_.add(StringExpUtil.removeDottedSpaces(p));
        }
        return l_;
    }

    private StringList getAnnotations(NamedFunctionBlock _m) {
        StringList txts_ = new StringList();
        for (ResultParsedAnnot a: _m.getAnnotations().getAnnotations()) {
            txts_.add(a.getAnnotation());
        }
        return txts_;
    }

    private CustList<StringList> getAnnotationsParams(NamedFunctionBlock _m) {
        CustList<StringList> ls_ = new CustList<StringList>();
        for (ResultParsedAnnots r: _m.getAnnotationsParams()) {
            StringList txts_ = new StringList();
            for (ResultParsedAnnot a: r.getAnnotations()) {
                txts_.add(a.getAnnotation());
            }
            ls_.add(txts_);
        }
        return ls_;
    }

    private CustList<Ints> getAnnotationsIndexesParams(NamedFunctionBlock _m) {
        CustList<Ints> ls_ = new CustList<Ints>();
        for (ResultParsedAnnots r: _m.getAnnotationsParams()) {
            ls_.add(getAnnotationsIndexes(r));
        }
        return ls_;
    }

    private StringList getAnnotations(InfoBlock _m) {
        StringList txts_ = new StringList();
        for (ResultParsedAnnot a: _m.getAnnotations().getAnnotations()) {
            txts_.add(a.getAnnotation());
        }
        return txts_;
    }

    private StringList getAnnotations(RootBlock _m) {
        StringList txts_ = new StringList();
        for (ResultParsedAnnot a: _m.getAnnotations().getAnnotations()) {
            txts_.add(a.getAnnotation());
        }
        return txts_;
    }

    private Ints getAnnotationsIndexes(NamedFunctionBlock _m) {
        return getAnnotationsIndexes(_m.getAnnotations());
    }

    private Ints getAnnotationsIndexes(InfoBlock _m) {
        return getAnnotationsIndexes(_m.getAnnotations());
    }

    private Ints getAnnotationsIndexes(RootBlock _m) {
        return getAnnotationsIndexes(_m.getAnnotations());
    }


    private Ints getAnnotationsIndexes(ResultParsedAnnots _p) {
        Ints ls_ = new Ints();
        for (ResultParsedAnnot i: _p.getAnnotations()) {
            ls_.add(i.getIndex());
        }
        return ls_;
    }

}
