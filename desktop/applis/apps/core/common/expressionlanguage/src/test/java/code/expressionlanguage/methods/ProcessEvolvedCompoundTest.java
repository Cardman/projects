package code.expressionlanguage.methods;

import code.expressionlanguage.ContextEl;
import code.expressionlanguage.functionid.MethodId;
import code.util.CustList;
import code.util.StringMap;
import org.junit.Test;

public final class ProcessEvolvedCompoundTest extends ProcessMethodCommon {
    @Test
    public void calc1() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc2() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>):((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc3() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(+,Ex<$int>)=((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc4() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(+,Ex<$int>):((Ex<$int>)one,two).a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc5() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=(a:(Ex<$int>)one,b:two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc6() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=(b:two,a:(Ex<$int>)one);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc7() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc8() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc9() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc10() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc11() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc12() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc13() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc14() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc15() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc16() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc16_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc17() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc17_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)=((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc18() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc19() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc19_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)=((Ex<$int>)one,two).a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc20() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(|||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc20_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(|||,Ex<$int>)((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc21() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(|||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc21_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(|||,Ex<$int>)=((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc22() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(|||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc22_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(|||,Ex<$int>)=((Ex<$int>)one,two).a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc23() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(|||,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc23_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $true(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=5;\n");
        xml_.append(" }\n");
        xml_.append(" $operator|| ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(|||,Ex<$int>)=((Ex<$int>)one,two).a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc24() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont<S> {\n");
        xml_.append(" $public S[] a;\n");
        xml_.append(" $public ExCont(S... a){\n");
        xml_.append("  $this.a=a;\n");
        xml_.append(" }\n");
        xml_.append(" $public S $this($int i){\n");
        xml_.append("  $return a[i];\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int i){\n");
        xml_.append("  a[i]=$value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  ExCont<Ex<$int>> c = $new ExCont<>(one);\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)c[0],two);\n");
        xml_.append("  $if (c[0].a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc25() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  ExTwo<Ex<$int>> v = $null;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)v?.a,$null);\n");
        xml_.append("  $if (v?.a?.a != 0i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc26() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=($id($static,Ex<$int>,Ex<$int>),(Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc27() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=$(ExTwo,Ex<S>,ExTwo<S>)((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc28() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=explicit(Ex,Ex<T>)((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc29() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=$(ExTwo,Ex<S>,ExTwo<S>)explicit(Ex,Ex<T>)((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc29_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $static $boolean $false(Ex<T> a){\n");
        xml_.append("  $return ($int)a.a<=4;\n");
        xml_.append(" }\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)$(ExTwo,Ex<S>,ExTwo<S>)explicit(Ex,Ex<T>)((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc30() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=(one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc31() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((one),two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc32() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)(one),two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc33() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=(((Ex<$int>)one),two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc34() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=(((Ex<$int>)(one)),two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc35() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)(one),two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc36() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc37() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>).a != 0i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc1Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)$null,$null);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc2Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $operator(&&,Ex<$int>)=((Ex<$int>)one,two);\n");
        xml_.append("  $if (one.a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc2Fail_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  Ex<$int> one = $new Ex<>();\n");
        xml_.append("  one.a=5i;\n");
        xml_.append("  Ex<$int> two = $new Ex<>();\n");
        xml_.append("  two.a=3i;\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)((Ex<$int>)one,two).a != 8i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc3Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $operator(&&,Ex<$int>)=();\n");
        xml_.append("  $if (one.a != 5i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc3Fail_() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $if ($operator(&&&,Ex<$int>)().a != 0i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxOkRead(files_);
        MethodId id_ = getMethodId("catching");
        assertEq(0, getNumber(calculateNormal("pkg.Ex", id_, cont_)));
    }
    @Test
    public void calc4Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ ExTwo<$int> (ExTwo<$int> a){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ String (ExTwo<$int> a, ExTwo<$int> b){\n");
        xml_.append("  $return $null;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $operator(&&,Ex<$int>)=[];\n");
        xml_.append("  $operator(&&,Ex<$int>)=$(];\n");
        xml_.append("  $operator(&&,Ex<$int>)=explicit(];\n");
        xml_.append("  $operator(&&,Ex<$int>)=$[];\n");
        xml_.append("  $operator(&&,Ex<$int>)=explicit[];\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc5Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ ExTwo<$int> (ExTwo<$int> a){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  $return $null;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  ExTwo<$int> v;\n");
        xml_.append("  String w;\n");
        xml_.append("  Ex<$int> x;\n");
        xml_.append("  $operator(+,Ex<$int>)=$(String,String,String)(v);\n");
        xml_.append("  $operator(+,Ex<$int>)=$(ExTwo,Ex<S>,ExTwo<S>)((Ex<$int>)w,x);\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)w,x);\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc6Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public $final S a;\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  ExTwo<Ex<$int>> v = $null;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)v?.a,$null);\n");
        xml_.append("  $if (v?.a?.a != 0i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc7Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public S a;\n");
        xml_.append(" $static Ex<S> $(ExTwo<S> a){\n");
        xml_.append("  Ex<S> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator&& ExTwo<$int> (){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ ExTwo<$int> (ExTwo<$int> a){\n");
        xml_.append("  ExTwo<$int> o = $new ExTwo<>();\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $operator+ ExTwo<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  $return $null;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  ExTwo<$int> v;\n");
        xml_.append("  String w;\n");
        xml_.append("  Ex<$int> x;\n");
        xml_.append("  $operator(+,Ex<$int>)=(v,v,v);\n");
        xml_.append("  $operator(+,Ex<$int>)=$(Strin,String,String)(v);\n");
        xml_.append("  $operator(+,Ex<$int>)=$(Strin,String)(v);\n");
        xml_.append("  $operator(+,Ex<$int>)=explicit(ExTw,ExTwo<S>)((Ex<$int>)w,x);\n");
        xml_.append("  $operator(+,Ex<$int>)=explicit(ExTw,ExTwo<S>,Etx)((Ex<$int>)w,x);\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc8ail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex{\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $operator;\n");
        xml_.append("  $operator(];\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
    @Test
    public void calc9Fail() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo<S> {\n");
        xml_.append(" $public $final S a;\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T a;\n");
        xml_.append(" $operator+ Ex<$int> (Ex<$int> a, Ex<$int> b){\n");
        xml_.append("  Ex<$int> o = $new Ex<>();\n");
        xml_.append("  o.a=a.a+b.a;\n");
        xml_.append("  $return o;\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $final Ex<$int> v = $null;\n");
        xml_.append("  $operator(+,Ex<$int>)=((Ex<$int>)v,$null);\n");
        xml_.append("  $if (v?.a?.a != 0i){\n");
        xml_.append("   $return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        assertTrue(hasErrReadOnly(files_));
    }
}
