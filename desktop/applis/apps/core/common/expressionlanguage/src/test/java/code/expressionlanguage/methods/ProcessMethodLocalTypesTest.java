package code.expressionlanguage.methods;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.functionid.MethodId;
import code.util.CustList;
import code.util.StringMap;
import org.junit.Test;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertTrue;

public final class ProcessMethodLocalTypesTest extends ProcessMethodCommon {

    @Test
    public void calculate1() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  l.field = 2;\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate2() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p){\n");
        xml_.append("    field = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2);\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate3() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  extField = 2;\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field = extField+3;\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(5, getNumber(ret_));
    }
    @Test
    public void calculate4() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2,4);\n");
        xml_.append("  extField = l.field+l.superField;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void calculate5() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Super[] arr = {new Loc(2,4), new LocTwo(6,8)};\n");
        xml_.append("  for (var e: arr){\n");
        xml_.append("   if (e instanceof Loc){\n");
        xml_.append("    extField += \"Loc:\"+((Loc)e).field;\n");
        xml_.append("   } else {\n");
        xml_.append("    extField += \"LocTwo:\"+((LocTwo)e).field;\n");
        xml_.append("   }\n");
        xml_.append("   extField += \"\"+','+e.superField+';';\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate6() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  l.field = 2;\n");
        xml_.append("  extField += l.field+\",\";\n");
        xml_.append(" }\n");
        xml_.append(" void m2(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  l.field = 6;\n");
        xml_.append("  extField += l.field+\",\";\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  e.m2();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("2,6,", getString(ret_));
    }
    @Test
    public void calculate7() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" void m2(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  return Class.forName(\"pkg.Ext..Loc+1\").getName()+','+Class.forName(\"pkg.Ext..Loc+2\").getName();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("pkg.Ext..Loc+1,pkg.Ext..Loc+2", getString(ret_));
    }
    @Test
    public void calculate8() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Super[] arr = {new Loc(2,4), new LocTwo(6,8)};\n");
        xml_.append("  for (Super e: arr){\n");
        xml_.append("   if (e instanceof Loc){\n");
        xml_.append("    extField += \"Loc:\"+((Loc)e).field;\n");
        xml_.append("   } else {\n");
        xml_.append("    extField += \"LocTwo:\"+((LocTwo)e).field;\n");
        xml_.append("   }\n");
        xml_.append("   extField += \"\"+','+e.superField+';';\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate9() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Dual<T,U>{\n");
        xml_.append("   T first;\n");
        xml_.append("   U second;\n");
        xml_.append("  }\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Dual<Loc,LocTwo> arr = new Dual<>();\n");
        xml_.append("  arr.first = new Loc(2,4);\n");
        xml_.append("  arr.second = new LocTwo(6,8);\n");
        xml_.append("  extField += \"Loc:\"+arr.first.field;\n");
        xml_.append("  extField += \"\"+','+arr.first.superField+';';\n");
        xml_.append("  extField += \"LocTwo:\"+arr.second.field;\n");
        xml_.append("  extField += \"\"+','+arr.second.superField+';';\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate10() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Dual{\n");
        xml_.append("   Loc first;\n");
        xml_.append("   LocTwo second;\n");
        xml_.append("  }\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Dual arr = new Dual();\n");
        xml_.append("  arr.first = new Loc(2,4);\n");
        xml_.append("  arr.second = new LocTwo(6,8);\n");
        xml_.append("  extField += \"Loc:\"+arr.first.field;\n");
        xml_.append("  extField += \"\"+','+arr.first.superField+';';\n");
        xml_.append("  extField += \"LocTwo:\"+arr.second.field;\n");
        xml_.append("  extField += \"\"+','+arr.second.superField+';';\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate11() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" static int extField;\n");
        xml_.append(" static void inner(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  l.field = 2;\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  inner();\n");
        xml_.append("  return extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate12() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" static int extField;\n");
        xml_.append(" static void inner(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   static int field;\n");
        xml_.append("   static int field(){\n");
        xml_.append("    return field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc.field = 2;\n");
        xml_.append("  extField = Loc.field();\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  inner();\n");
        xml_.append("  return extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate13() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  interface Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    interfaces(Super)(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2,4);\n");
        xml_.append("  extField = l.field+l.superField;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void calculate14() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  interface Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    interfaces(pkg.Ext.Super+1)(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2,4);\n");
        xml_.append("  extField = l.field+l.superField;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void calculate15() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" static int extField;\n");
        xml_.append(" static void inner(){\n");
        xml_.append("  interface Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   static int staticField;\n");
        xml_.append("   static{\n");
        xml_.append("    staticField++;\n");
        xml_.append("   }\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class interfaces(Super) Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    interfaces(pkg.Ext.Super+1)(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2,4);\n");
        xml_.append("  extField = l.field+l.superField+Super.staticField;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext.inner();\n");
        xml_.append("  return extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(7, getNumber(ret_));
    }
    @Test
    public void calculate16() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" static int extField;\n");
        xml_.append(" static void inner(){\n");
        xml_.append("  interface Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   static int staticField;\n");
        xml_.append("   static{\n");
        xml_.append("    staticField++;\n");
        xml_.append("   }\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class interfaces(pkg.Ext.Super+1) Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    interfaces(pkg.Ext.Super+1)(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc(2,4);\n");
        xml_.append("  extField = l.field+l.superField+Super.staticField;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext.inner();\n");
        xml_.append("  return extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(7, getNumber(ret_));
    }
    @Test
    public void calculate17() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Dual{\n");
        xml_.append("   Loc first;\n");
        xml_.append("   LocTwo second;\n");
        xml_.append("   Loc first(){\n");
        xml_.append("    return first;\n");
        xml_.append("   }\n");
        xml_.append("   LocTwo second(){\n");
        xml_.append("    return second;\n");
        xml_.append("   }\n");
        xml_.append("   void first(Loc p){\n");
        xml_.append("    first=p;\n");
        xml_.append("   }\n");
        xml_.append("   void second(LocTwo p){\n");
        xml_.append("    second=p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Dual arr = new Dual();\n");
        xml_.append("  arr.first(new Loc(2,4));\n");
        xml_.append("  arr.second(new LocTwo(6,8));\n");
        xml_.append("  extField += \"Loc:\"+arr.first().field;\n");
        xml_.append("  extField += \"\"+','+arr.first().superField+';';\n");
        xml_.append("  extField += \"LocTwo:\"+arr.second().field;\n");
        xml_.append("  extField += \"\"+','+arr.second().superField+';';\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate18() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   int field;\n");
        xml_.append("   Int m(){\n");
        xml_.append("    class Loc2:Int{\n");
        xml_.append("     int field2;\n");
        xml_.append("     public int field2(){\n");
        xml_.append("      return field2;\n");
        xml_.append("     }\n");
        xml_.append("    }\n");
        xml_.append("    Loc2 l = new Loc2();\n");
        xml_.append("    l.field2 = 15;\n");
        xml_.append("    return l;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  static interface Int{\n");
        xml_.append("   int field2();\n");
        xml_.append("  }\n");
        xml_.append("  Loc l = new Loc();\n");
        xml_.append("  Int i = l.m();\n");
        xml_.append("  l.field = i.field2();\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(15, getNumber(ret_));
    }
    @Test
    public void calculate19() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Loc{\n");
        xml_.append("   class Inner{\n");
        xml_.append("    int field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc.Inner l = new Loc().new Inner();\n");
        xml_.append("  l.field = 2;\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate20() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  enum Loc{\n");
        xml_.append("   ONE{\n");
        xml_.append("    class Inner{\n");
        xml_.append("     int field;\n");
        xml_.append("    }\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc..ONE.Inner l = Loc.ONE.new Inner();\n");
        xml_.append("  l.field = 2;\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void calculate21() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  enum Loc{\n");
        xml_.append("   ONE(1){\n");
        xml_.append("    int fieldElt;\n");
        xml_.append("    ONE(int p){\n");
        xml_.append("     fieldElt = p;\n");
        xml_.append("    }\n");
        xml_.append("    class Inner{\n");
        xml_.append("     int field=fieldElt;\n");
        xml_.append("    }\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Loc..ONE.Inner l = Loc.ONE.new Inner();\n");
        xml_.append("  l.field += 2;\n");
        xml_.append("  extField = l.field;\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void calculate22() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("interface pkg.Int {\n");
        xml_.append(" int field();\n");
        xml_.append("}\n");
        xml_.append("class pkg.Ext {\n");
        xml_.append(" int extField;\n");
        xml_.append(" void m(){\n");
        xml_.append("  enum Loc{\n");
        xml_.append("   ONE(1){\n");
        xml_.append("    int fieldElt;\n");
        xml_.append("    Int myInt;\n");
        xml_.append("    ONE(int p){\n");
        xml_.append("     fieldElt = p;\n");
        xml_.append("     class InnerLoc:Int{\n");
        xml_.append("      int field=fieldElt;\n");
        xml_.append("      {\n");
        xml_.append("       field+=2;\n");
        xml_.append("      }\n");
        xml_.append("      public int field(){\n");
        xml_.append("       return field;\n");
        xml_.append("      }\n");
        xml_.append("     }\n");
        xml_.append("     myInt = new InnerLoc();\n");
        xml_.append("    }\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Int l = Loc.ONE.myInt;\n");
        xml_.append("  extField = l.field();\n");
        xml_.append(" }\n");
        xml_.append(" static int m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void calculate23() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext<S> {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Dual<T,U>{\n");
        xml_.append("   T first;\n");
        xml_.append("   U second;\n");
        xml_.append("  }\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Dual<Loc,LocTwo> arr = new Dual<>();\n");
        xml_.append("  arr.first = new Loc(2,4);\n");
        xml_.append("  arr.second = new LocTwo(6,8);\n");
        xml_.append("  extField += \"Loc:\"+arr.first.field;\n");
        xml_.append("  extField += \"\"+','+arr.first.superField+';';\n");
        xml_.append("  extField += \"LocTwo:\"+arr.second.field;\n");
        xml_.append("  extField += \"\"+','+arr.second.superField+';';\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext<int> e = new Ext<>();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
    @Test
    public void calculate24() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("class pkg.Ext {\n");
        xml_.append(" String extField=\"\";\n");
        xml_.append(" void m(){\n");
        xml_.append("  class Dual{\n");
        xml_.append("   Loc first;\n");
        xml_.append("   LocTwo second;\n");
        xml_.append("   Loc first(){\n");
        xml_.append("    return first;\n");
        xml_.append("   }\n");
        xml_.append("   LocTwo second(){\n");
        xml_.append("    return second;\n");
        xml_.append("   }\n");
        xml_.append("   void first(Loc p){\n");
        xml_.append("    first=p;\n");
        xml_.append("   }\n");
        xml_.append("   void second(LocTwo p){\n");
        xml_.append("    second=p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Super{\n");
        xml_.append("   int superField;\n");
        xml_.append("   Super(int p){\n");
        xml_.append("    superField = p;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class Loc:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   Loc(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  class LocTwo:Super{\n");
        xml_.append("   int field;\n");
        xml_.append("   LocTwo(int p, int q){\n");
        xml_.append("    super(p);\n");
        xml_.append("    field = q;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  Dual arr = new Dual();\n");
        xml_.append("  arr.first($id(Ext.Dual+1,Ext.Loc+1),new Loc(2,4));\n");
        xml_.append("  arr.second($id(Ext.Dual+1,Ext.LocTwo+1),new LocTwo(6,8));\n");
        xml_.append("  extField += \"Loc:\"+arr.first().field;\n");
        xml_.append("  extField += \"\"+','+arr.first().superField+';';\n");
        xml_.append("  extField += \"LocTwo:\"+arr.second().field;\n");
        xml_.append("  extField += \"\"+','+arr.second().superField+';';\n");
        xml_.append(" }\n");
        xml_.append(" static String m(){\n");
        xml_.append("  Ext e = new Ext();\n");
        xml_.append("  e.m();\n");
        xml_.append("  return e.extField;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgOk("en", files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("m");
        Argument ret_ = new Argument();
        ret_ = calculateNormal("pkg.Ext", id_, args_, cont_);
        assertEq("Loc:4,2;LocTwo:8,6;", getString(ret_));
    }
}
