package code.expressionlanguage.methods;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.functionid.MethodId;
import code.util.CustList;
import code.util.StringMap;
import org.junit.Test;

public final class ProcessMethodRefIndexerTest extends ProcessMethodCommon {
    @Test
    public void test1() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  return v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void test2() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  v = 3;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test3() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  v++;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test4() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  ++v;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test5() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  int o = v++;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void test6() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  int o = ++v;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test7() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  v+=1;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test8() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  that int v = that(inst[0]);\n");
        xml_.append("  int o = v += 1;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test9() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  v++;\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test10() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  ++v;\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test11() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  Value o = v++;\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void test12() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  Value o = ++v;\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test13() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  v+=new Value(1);\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test14() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  that Value v = that(inst[0]);\n");
        xml_.append("  Value o = v += new Value(1);\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test15() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  inst.v(0) = 3;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test16() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  inst.v(0)++;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test17() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  ++inst.v(0);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test18() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  int o = inst.v(0)++;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void test19() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  int o = ++inst.v(0);\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test20() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  inst.v(0)+=1;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test21() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  int o = inst.v(0) += 1;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test22() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<int> inst = new(0,2);\n");
        xml_.append("  inst.up(that(inst[0]),3);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public void up(that T o, T n){\n");
        xml_.append("  o = n;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test23() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExContDer<int> inst = new(0,2);\n");
        xml_.append("  ExCont<int> ance = inst;\n");
        xml_.append("  inst.up(that(ance[0]),6);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExContDer<S>:ExCont<S> {\n");
        xml_.append(" public ExContDer(int i, S j){\n");
        xml_.append("  super(i,j);\n");
        xml_.append(" }\n");
        xml_.append(" public S this(int i){\n");
        xml_.append("  return (S)((int)field[i]*2);\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=(S)((int)value/2);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public void up(that T o, T n){\n");
        xml_.append("  o = n;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void test24() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExContDer<int> inst = new(0,2);\n");
        xml_.append("  ExCont<int> ance = inst;\n");
        xml_.append("  inst.up(that(ance[0]),6);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExContDer<S>:ExCont<S> {\n");
        xml_.append(" public ExContDer(int i, S j){\n");
        xml_.append("  super(i,j);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public void up(that T o, T n){\n");
        xml_.append("  o = n;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void test25() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExContDer<int> inst = new(0,2);\n");
        xml_.append("  inst.up(that(inst[0]),6);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExContDer<S>:ExCont<S> {\n");
        xml_.append(" public ExContDer(int i, S j){\n");
        xml_.append("  super(i,j);\n");
        xml_.append(" }\n");
        xml_.append(" public S this(int i){\n");
        xml_.append("  return (S)((int)field[i]*2);\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=(S)((int)value/2);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public void up(that T o, T n){\n");
        xml_.append("  o = n;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void test26() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExContDer<int> inst = new(0,2);\n");
        xml_.append("  inst.up(that(inst[0]),6);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExContDer<S>:ExCont<S> {\n");
        xml_.append(" public ExContDer(int i, S j){\n");
        xml_.append("  super(i,j);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public void up(that T o, T n){\n");
        xml_.append("  o = n;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(6, getNumber(ret_));
    }
    @Test
    public void test27() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  inst.v(0)++;\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test28() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  ++inst.v(0);\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test29() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  Value o = inst.v(0)++;\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(2, getNumber(ret_));
    }
    @Test
    public void test30() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  Value o = ++inst.v(0);\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator++ Value(Value v){\n");
        xml_.append("  return new(v.v+1);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test31() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  inst.v(0)+=new Value(1);\n");
        xml_.append("  return inst[0].v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test32() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int exmeth(){\n");
        xml_.append("  ExCont<Value> inst = new(0,new(2));\n");
        xml_.append("  Value o = inst.v(0) += new Value(1);\n");
        xml_.append("  return o.v;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq(3, getNumber(ret_));
    }
    @Test
    public void test33() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  that String v = that(inst[0]);\n");
        xml_.append("  v+=1;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test34() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  that String v = that(inst[0]);\n");
        xml_.append("  String o = v += 1;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test35() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  that String v = that(inst[0]);\n");
        xml_.append("  v+=new Value(1);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" public String $toString(){\n");
        xml_.append("  return \"\"+v;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test36() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  that String v = that(inst[0]);\n");
        xml_.append("  String o = v += new Value(1);\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" public String $toString(){\n");
        xml_.append("  return \"\"+v;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test37() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  inst.v(0)+=1;\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test38() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  String o = inst.v(0) += 1;\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test39() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  inst.v(0)+=new Value(1);\n");
        xml_.append("  return inst[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" public String $toString(){\n");
        xml_.append("  return \"\"+v;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
    @Test
    public void test40() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static String exmeth(){\n");
        xml_.append("  ExCont<String> inst = new(0,\"2\");\n");
        xml_.append("  String o = inst.v(0) += new Value(1);\n");
        xml_.append("  return o;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExCont<T> {\n");
        xml_.append(" T[] field = new T[1];\n");
        xml_.append(" public ExCont(int i, T j){\n");
        xml_.append("  field[i]=j;\n");
        xml_.append(" }\n");
        xml_.append(" public that T v(int i){\n");
        xml_.append("  return that(this[i]);\n");
        xml_.append(" }\n");
        xml_.append(" public T this(int i){\n");
        xml_.append("  return field[i];\n");
        xml_.append(" }\n");
        xml_.append(" public void this(int i){\n");
        xml_.append("  field[i]=value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Value {\n");
        xml_.append(" int v;\n");
        xml_.append(" public Value(int p){\n");
        xml_.append("  v=p;\n");
        xml_.append(" }\n");
        xml_.append(" public String $toString(){\n");
        xml_.append("  return \"\"+v;\n");
        xml_.append(" }\n");
        xml_.append(" operator+ Value(Value v, Value w){\n");
        xml_.append("  return new(v.v+w.v);\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = ctxLgReadOnlyOk(files_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateNormal("pkg.Ex", id_, args_, cont_);
        assertEq("21", getString(ret_));
    }
}
