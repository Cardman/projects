package cards.belote;

import cards.belote.enumerations.DealingBelote;
import code.maths.montecarlo.DefaultGenerator;
import code.util.CustList;
import code.util.IdList;
import org.junit.Test;

import cards.belote.enumerations.CardBelote;
import cards.consts.MixCardsChoice;


public class DealBeloteTest extends EquallableBeloteUtil {

    @Test
    public void initDonne1Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 0, MixCardsChoice.NEVER);
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.HEART_10));
        assertTrue(donne_.hand().contient(CardBelote.SPADE_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_JACK));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_8));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_1));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_KING));
        assertTrue(donne_.hand(1).contient(CardBelote.SPADE_JACK));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_7));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_QUEEN));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_8));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_10));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_QUEEN));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_1));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_JACK));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_1));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.SPADE_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_7));
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }

    @Test
    public void initDonne2Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 0, MixCardsChoice.EACH_LAUNCHING);
        assertEq(12,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }

    @Test
    public void initDonne3Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 0, MixCardsChoice.EACH_DEAL);
        assertEq(12,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }
    @Test
    public void initDonne4Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 0, MixCardsChoice.ONCE_ONLY);
        assertEq(12,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }

    @Test
    public void initDonne5Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 1, MixCardsChoice.ONCE_ONLY);
        assertEq(12,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }

    @Test
    public void initDonne6Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = deal(main_, 1, MixCardsChoice.EACH_LAUNCHING);
        assertEq(12,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_2_VS_2);
        assertEq(4, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
        assertEq(3, supp_.get(3).total());
    }

    @Test
    public void initDonne7Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne8Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne9Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne10Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne11Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_5);
        assertEq(4,donne_.nombreDeMains());
        assertEq(9,donne_.hand(0).total());
        assertEq(9,donne_.hand(1).total());
        assertEq(9,donne_.hand(2).total());
        assertEq(5,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_5);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne12Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_5);
        assertEq(4,donne_.nombreDeMains());
        assertEq(9,donne_.hand(0).total());
        assertEq(9,donne_.hand(1).total());
        assertEq(9,donne_.hand(2).total());
        assertEq(5,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_5);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne13Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_5);
        assertEq(4,donne_.nombreDeMains());
        assertEq(9,donne_.hand(0).total());
        assertEq(9,donne_.hand(1).total());
        assertEq(9,donne_.hand(2).total());
        assertEq(5,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_5);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne14Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_5);
        assertEq(4,donne_.nombreDeMains());
        assertEq(9,donne_.hand(0).total());
        assertEq(9,donne_.hand(1).total());
        assertEq(9,donne_.hand(2).total());
        assertEq(5,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_5);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne15Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(10,donne_.hand(0).total());
        assertEq(10,donne_.hand(1).total());
        assertEq(10,donne_.hand(2).total());
        assertEq(2,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne16Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(10,donne_.hand(0).total());
        assertEq(10,donne_.hand(1).total());
        assertEq(10,donne_.hand(2).total());
        assertEq(2,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne17Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(10,donne_.hand(0).total());
        assertEq(10,donne_.hand(1).total());
        assertEq(10,donne_.hand(2).total());
        assertEq(2,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne18Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_2);
        assertEq(4,donne_.nombreDeMains());
        assertEq(10,donne_.hand(0).total());
        assertEq(10,donne_.hand(1).total());
        assertEq(10,donne_.hand(2).total());
        assertEq(2,donne_.derniereMain().total());
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_2);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne19Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_24);
        assertEq(4,donne_.nombreDeMains());
        assertEq(5,donne_.hand(0).total());
        assertEq(5,donne_.hand(1).total());
        assertEq(5,donne_.hand(2).total());
        assertEq(17,donne_.derniereMain().total());
        HandBelote der_ = donne_.derniereMain();
        HandBelote low_ = HandBelote.low(HandBelote.pileBase());
        HandBelote disc_ = new HandBelote();
        disc_.setCards(new IdList<CardBelote>(der_.getCards().mid(der_.total()-8)));
        assertTrue(HandBelote.equalsSet(low_,disc_));
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_24);
        assertEq(3, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
    }

    @Test
    public void initDonne20Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 0, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_24);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        HandBelote der_ = donne_.derniereMain();
        HandBelote low_ = HandBelote.low(HandBelote.pileBase());
        HandBelote disc_ = new HandBelote();
        disc_.setCards(new IdList<CardBelote>(der_.getCards().mid(der_.total()-8)));
        assertTrue(HandBelote.equalsSet(low_,disc_));
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_24);
        assertEq(0, supp_.size());
    }

    @Test
    public void initDonne21Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.CLASSIC_1_VS_2_24);
        assertEq(4,donne_.nombreDeMains());
        assertEq(5,donne_.hand(0).total());
        assertEq(5,donne_.hand(1).total());
        assertEq(5,donne_.hand(2).total());
        assertEq(17,donne_.derniereMain().total());
        HandBelote der_ = donne_.derniereMain();
        HandBelote low_ = HandBelote.low(HandBelote.pileBase());
        HandBelote disc_ = new HandBelote();
        disc_.setCards(new IdList<CardBelote>(der_.getCards().mid(der_.total()-8)));
        assertTrue(HandBelote.equalsSet(low_,disc_));
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.CLASSIC_1_VS_2_24);
        assertEq(3, supp_.size());
        assertEq(3, supp_.get(0).total());
        assertEq(3, supp_.get(1).total());
        assertEq(3, supp_.get(2).total());
    }

    @Test
    public void initDonne22Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        DealBelote donne_ = dealThreePlayers(main_, 1, MixCardsChoice.EACH_LAUNCHING,DealingBelote.COINCHE_1_VS_2_24);
        assertEq(4,donne_.nombreDeMains());
        assertEq(8,donne_.hand(0).total());
        assertEq(8,donne_.hand(1).total());
        assertEq(8,donne_.hand(2).total());
        assertEq(8,donne_.derniereMain().total());
        HandBelote der_ = donne_.derniereMain();
        HandBelote low_ = HandBelote.low(HandBelote.pileBase());
        HandBelote disc_ = new HandBelote();
        disc_.setCards(new IdList<CardBelote>(der_.getCards().mid(der_.total()-8)));
        assertTrue(HandBelote.equalsSet(low_,disc_));
        CustList<HandBelote> supp_ = mainsSupp(donne_, DealingBelote.COINCHE_1_VS_2_24);
        assertEq(0, supp_.size());
    }

    @Test
    public void completerDonne1Test(){
        HandBelote main_ = new HandBelote();
        main_.ajouter(CardBelote.DIAMOND_JACK);
        main_.ajouter(CardBelote.SPADE_10);
        main_.ajouter(CardBelote.SPADE_1);
        main_.ajouter(CardBelote.CLUB_8);
        main_.ajouter(CardBelote.DIAMOND_9);
        main_.ajouter(CardBelote.CLUB_KING);
        main_.ajouter(CardBelote.HEART_QUEEN);
        main_.ajouter(CardBelote.CLUB_9);
        main_.ajouter(CardBelote.HEART_8);
        main_.ajouter(CardBelote.CLUB_10);
        main_.ajouter(CardBelote.DIAMOND_10);
        main_.ajouter(CardBelote.HEART_JACK);
        main_.ajouter(CardBelote.CLUB_1);
        main_.ajouter(CardBelote.HEART_9);
        main_.ajouter(CardBelote.SPADE_KING);
        main_.ajouter(CardBelote.DIAMOND_7);
        main_.ajouter(CardBelote.DIAMOND_QUEEN);
        main_.ajouter(CardBelote.HEART_10);
        main_.ajouter(CardBelote.SPADE_9);
        main_.ajouter(CardBelote.HEART_1);
        main_.ajouter(CardBelote.HEART_KING);
        main_.ajouter(CardBelote.SPADE_JACK);
        main_.ajouter(CardBelote.SPADE_7);
        main_.ajouter(CardBelote.SPADE_QUEEN);
        main_.ajouter(CardBelote.SPADE_8);
        main_.ajouter(CardBelote.DIAMOND_1);
        main_.ajouter(CardBelote.DIAMOND_KING);
        main_.ajouter(CardBelote.CLUB_QUEEN);
        main_.ajouter(CardBelote.CLUB_JACK);
        main_.ajouter(CardBelote.DIAMOND_8);
        main_.ajouter(CardBelote.CLUB_7);
        main_.ajouter(CardBelote.HEART_7);
        RulesBelote regles_=new RulesBelote();
        DealBelote donne_ = deal(0, MixCardsChoice.NEVER, regles_, main_);
        donne_.completerDonne(0,regles_);
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.HEART_10));
        assertTrue(donne_.hand().contient(CardBelote.SPADE_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_JACK));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_8));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.hand().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_1));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_KING));
        assertTrue(donne_.hand(1).contient(CardBelote.SPADE_JACK));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_7));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_7));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_9));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_8));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_10));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_QUEEN));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_8));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_10));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.hand(2).contient(CardBelote.HEART_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.CLUB_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_QUEEN));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_1));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_8));
        assertTrue(donne_.hand(3).contient(CardBelote.HEART_9));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_7));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_JACK));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_1));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.SPADE_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_7));
        donne_ = deal(0, main_, regles_);
        donne_.completerDonne(1,regles_);
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.HEART_10));
        assertTrue(donne_.hand().contient(CardBelote.SPADE_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_JACK));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_8));

        assertTrue(donne_.hand().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.hand().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_9));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_1));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_KING));
        assertTrue(donne_.hand(1).contient(CardBelote.SPADE_JACK));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_7));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_7));
        assertTrue(donne_.hand(1).contient(CardBelote.DIAMOND_9));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_8));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_10));

        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_QUEEN));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_8));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_10));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.hand(2).contient(CardBelote.HEART_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.CLUB_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_QUEEN));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_1));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_8));
        assertTrue(donne_.hand(3).contient(CardBelote.HEART_9));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_7));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_JACK));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_1));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.SPADE_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_7));

        donne_ = deal(0, main_, regles_);
        donne_.completerDonne(2,regles_);
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.HEART_10));
        assertTrue(donne_.hand().contient(CardBelote.SPADE_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_JACK));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_8));

        assertTrue(donne_.hand().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.hand().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_9));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_1));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_KING));
        assertTrue(donne_.hand(1).contient(CardBelote.SPADE_JACK));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_7));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_7));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_8));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_10));
        assertTrue(donne_.hand(1).contient(CardBelote.DIAMOND_10));

        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_QUEEN));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_8));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_10));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.hand(2).contient(CardBelote.HEART_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.CLUB_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_QUEEN));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_1));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_8));
        assertTrue(donne_.hand(3).contient(CardBelote.HEART_9));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_7));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_JACK));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_1));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.SPADE_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_7));

        donne_ = deal(0, main_, regles_);
        donne_.completerDonne(3,regles_);
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.HEART_10));
        assertTrue(donne_.hand().contient(CardBelote.SPADE_9));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_JACK));
        assertTrue(donne_.hand().contient(CardBelote.DIAMOND_8));

        assertTrue(donne_.hand().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.hand().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.hand().contient(CardBelote.CLUB_9));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_1));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_KING));
        assertTrue(donne_.hand(1).contient(CardBelote.SPADE_JACK));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_7));
        assertTrue(donne_.hand(1).contient(CardBelote.HEART_7));

        assertTrue(donne_.hand(1).contient(CardBelote.HEART_8));
        assertTrue(donne_.hand(1).contient(CardBelote.CLUB_10));
        assertTrue(donne_.hand(1).contient(CardBelote.DIAMOND_10));

        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_7));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_QUEEN));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_8));
        assertTrue(donne_.hand(2).contient(CardBelote.DIAMOND_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.SPADE_10));
        assertTrue(donne_.hand(2).contient(CardBelote.HEART_9));
        assertTrue(donne_.hand(2).contient(CardBelote.HEART_JACK));
        assertTrue(donne_.hand(2).contient(CardBelote.CLUB_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_1));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_QUEEN));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_1));
        assertTrue(donne_.hand(3).contient(CardBelote.CLUB_8));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.hand(3).contient(CardBelote.SPADE_KING));
        assertTrue(donne_.hand(3).contient(CardBelote.DIAMOND_7));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_QUEEN));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_8));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_10));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_JACK));
        assertTrue(donne_.derniereMain().contient(CardBelote.CLUB_1));
        assertTrue(donne_.derniereMain().contient(CardBelote.HEART_9));
        assertTrue(donne_.derniereMain().contient(CardBelote.SPADE_KING));
        assertTrue(donne_.derniereMain().contient(CardBelote.DIAMOND_7));
    }

    private CustList<HandBelote> mainsSupp(DealBelote _donne, DealingBelote _dealing) {
        RulesBelote rules_ = new RulesBelote();
        rules_.setDealing(_dealing);
        return _donne.mainsSupp(0, rules_);
    }

    private DealBelote deal(HandBelote _main, int _nombreDeParties, MixCardsChoice _mix) {
        RulesBelote regles_=new RulesBelote();
        return deal(_nombreDeParties, _mix, regles_, _main);
    }

    private DealBelote dealThreePlayers(HandBelote _main, int _nombreDeParties, MixCardsChoice _mix, DealingBelote _mode) {
        RulesBelote regles_=new RulesBelote();
        regles_.setDealing(_mode);
        return deal(_nombreDeParties, _mix, regles_, _main);
    }

    private DealBelote deal(int _nombreDeParties, MixCardsChoice _mix, RulesBelote _regles, HandBelote _m) {
        _regles.getCommon().setMixedCards(_mix);
        return deal(_nombreDeParties, _m, _regles);
    }

    private DealBelote deal(int _nombreDeParties, HandBelote _m, RulesBelote _r) {
        DealBelote donne_ = new DealBelote(_nombreDeParties);
        donne_.setDealer(3);
        donne_.initDonne(_r, DefaultGenerator.oneElt(), new HandBelote(_m));
        return donne_;
    }

}
