package cards.belote;

import cards.belote.enumerations.BidBelote;
import cards.belote.enumerations.CardBelote;
import cards.belote.enumerations.DealingBelote;
import cards.consts.Status;
import cards.consts.Suit;
import code.util.CustList;
import code.util.EqList;
import org.junit.Test;

import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

public final class GameBeloteBeginTrickDomTest extends CommonGameBelote {
    @Test
    public void playBestCardsDom1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertTrue(infoTr_.isMaitreJeu());
        assertSame(CardBelote.HEART_JACK, gbt_.playBestCardsDom(infoTr_));
    }
    @Test
    public void playBestCardsDom2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_KING);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertTrue(infoTr_.isMaitreJeu());
        assertSame(CardBelote.SPADE_1, gbt_.playBestCardsDom(infoTr_));
    }
    @Test
    public void playWhenOnlyTrumps1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_7, gbt_.playWhenOnlyTrumps(infoTr_));
    }
    @Test
    public void playWhenOnlyTrumps2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_7, gbt_.playWhenOnlyTrumps(infoTr_));
    }
    @Test
    public void playWhenOnlyTrumps3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_JACK, gbt_.playWhenOnlyTrumps(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_8, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_JACK, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.CLUB_QUEEN);
        t_.ajouter(CardBelote.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        t_.ajouter(CardBelote.SPADE_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_JACK);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.CLUB_10, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.CLUB_7, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_JACK, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.CLUB_QUEEN);
        t_.ajouter(CardBelote.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        t_.ajouter(CardBelote.SPADE_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_JACK);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_10, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit7Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_9);
        curHand_.ajouter(CardBelote.HEART_10);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_10);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.CLUB_QUEEN);
        t_.ajouter(CardBelote.CLUB_KING);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        t_.ajouter(CardBelote.SPADE_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_JACK);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.CLUB_9, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playWhenAtMostOneNormalSuit8Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.CLUB_QUEEN);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_9);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.SPADE_JACK);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.HEART_1);
        t_.ajouter(CardBelote.DIAMOND_QUEEN);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_JACK);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.CLUB_KING, gbt_.playWhenAtMostOneNormalSuit(infoTr_));
    }
    @Test
    public void playAsTakerDom1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_JACK, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_QUEEN, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.HEART_8);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_10, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        removePossibleCard(infoTr_,0,CardBelote.SPADE_QUEEN);
        removePossibleCard(infoTr_,0,CardBelote.SPADE_JACK);
        removePossibleCard(infoTr_,2,CardBelote.SPADE_QUEEN);
        removePossibleCard(infoTr_,2,CardBelote.SPADE_JACK);
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_7, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom7Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        removePossibleCard(infoTr_,1,CardBelote.SPADE_QUEEN);
        removePossibleCard(infoTr_,1,CardBelote.SPADE_JACK);
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_7, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom8Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        infoTr_.setMaitreAtout(true);
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_JACK, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom9Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        removePossibleCard(infoTr_,0,CardBelote.HEART_1);
        removePossibleCard(infoTr_,0,CardBelote.HEART_10);
        removePossibleCard(infoTr_,0,CardBelote.HEART_7);
        removePossibleCard(infoTr_,0,CardBelote.HEART_8);
        removePossibleCard(infoTr_,2,CardBelote.HEART_1);
        removePossibleCard(infoTr_,2,CardBelote.HEART_10);
        removePossibleCard(infoTr_,2,CardBelote.HEART_7);
        removePossibleCard(infoTr_,2,CardBelote.HEART_8);
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_1, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom10Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_JACK, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom11Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_7, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom12Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_KING, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom13Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_7, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsTakerDom14Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_7);
        t_.ajouter(CardBelote.HEART_10);
        t_.ajouter(CardBelote.HEART_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.TAKER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_7, gbt_.playAsTakerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.HEART_7, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_8);
        curHand_.ajouter(CardBelote.SPADE_7);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.SPADE_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_7, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_8);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_QUEEN);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_8, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_KING);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_9, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom7Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.SPADE_QUEEN);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_10, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom8Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_8);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom9Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_10, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom10Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_1);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom11Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom12Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.DIAMOND_10);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.SPADE_KING);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.OTHER_SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.DIAMOND_1);
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.DIAMOND_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_KING, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom13Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsCalledPlayerDom14Test() {
        RulesBelote r_ = new RulesBelote();
        r_.setDealing(DealingBelote.COINCHE_2_VS_2);
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        b_.setPoints(80);
        bids_.add(b_);
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.CALLED_PLAYER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsCalledPlayerDom(infoTr_));
    }
    @Test
    public void playAsDefenderDom1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_1, gbt_.playAsDefenderDom(infoTr_));
    }
    @Test
    public void playAsDefenderDom2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_KING);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_9, gbt_.playAsDefenderDom(infoTr_));
    }
    @Test
    public void playAsDefenderDom3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_9);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_10);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_9, gbt_.playAsDefenderDom(infoTr_));
    }
    @Test
    public void playAsDefenderDom4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_10, gbt_.playAsDefenderDom(infoTr_));
    }
    @Test
    public void playAsDefenderDom5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_10);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(Status.DEFENDER, gbt_.getCurrentStatus());
        assertSame(CardBelote.SPADE_10, gbt_.playAsDefenderDom(infoTr_));
    }
    @Test
    public void entameCouleurDominante1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.CLUB_1);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_JACK, gbt_.entameCouleurDominante(infoTr_));
    }
    @Test
    public void entameCouleurDominante2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_7, gbt_.entameCouleurDominante(infoTr_));
    }
    @Test
    public void entameCouleurDominante3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_9);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.HEART_9);
        curHand_.ajouter(CardBelote.HEART_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_8);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.SPADE_1);
        t_.ajouter(CardBelote.SPADE_9);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.SPADE_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_8, gbt_.entameCouleurDominante(infoTr_));
    }
    @Test
    public void entameCouleurDominante4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_1);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_JACK);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        curHand_.ajouter(CardBelote.HEART_9);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_JACK, gbt_.entameCouleurDominante(infoTr_));
    }
    @Test
    public void entameCouleurDominante5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.HEART_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.HEART_7);
        curHand_.ajouter(CardBelote.HEART_KING);
        curHand_.ajouter(CardBelote.HEART_QUEEN);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.HEART_7, gbt_.entameCouleurDominante(infoTr_));
    }
    @Test
    public void entameCouleurDominante6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        HandBelote curHand_ = new HandBelote();
        curHand_.ajouter(CardBelote.CLUB_10);
        curHand_.ajouter(CardBelote.SPADE_1);
        curHand_.ajouter(CardBelote.SPADE_10);
        curHand_.ajouter(CardBelote.DIAMOND_1);
        curHand_.ajouter(CardBelote.CLUB_7);
        curHand_.ajouter(CardBelote.DIAMOND_7);
        curHand_.ajouter(CardBelote.CLUB_KING);
        curHand_.ajouter(CardBelote.DIAMOND_KING);
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setBid(BidBelote.SUIT);
        b_.setSuit(Suit.HEART);
        bids_.add(b_);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, last_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteBeginTrick gbt_ = newGameBeloteBeginTrick(g_,info_,team_,curHand_);
        BeloteInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardBelote.SPADE_1, gbt_.entameCouleurDominante(infoTr_));
    }
}
