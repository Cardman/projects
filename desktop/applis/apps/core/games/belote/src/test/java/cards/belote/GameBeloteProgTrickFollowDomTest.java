package cards.belote;

import cards.belote.enumerations.BidBelote;
import cards.belote.enumerations.CardBelote;
import cards.consts.PossibleTrickWinner;
import cards.consts.Role;
import cards.consts.Suit;
import code.util.CustList;
import org.junit.Test;

public final class GameBeloteProgTrickFollowDomTest extends CommonGameBelote {
    @Test
    public void followSuitFoeTest() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.CLUB_7);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.FOE_TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_7, gt_.followSuitFoe());
    }
    @Test
    public void followNormalSuitPartner1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.CLUB_7);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_KING, gt_.followNormalSuitPartner(infoTr_));
    }
    @Test
    public void followNormalSuitPartner2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_10);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_KING, gt_.followNormalSuitPartner(infoTr_));
    }
    @Test
    public void followNormalSuitPartner3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.CLUB_7);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_10);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_KING,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_8, gt_.followNormalSuitPartner(infoTr_));
    }
    @Test
    public void followNormalSuitPartner4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.DIAMOND_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_JACK,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_10, gt_.followNormalSuitPartner(infoTr_));
    }
    @Test
    public void followNormalSuitPartner5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_7);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.DIAMOND_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_9,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        removePossibleCard(infoTr_,3,CardBelote.CLUB_10);
        removePossibleCard(infoTr_,3,CardBelote.CLUB_KING);
        removePossibleCard(infoTr_,3,CardBelote.CLUB_QUEEN);
        removePossibleCard(infoTr_,3,CardBelote.CLUB_JACK);
        assertSame(PossibleTrickWinner.TEAM, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_8, gt_.followNormalSuitPartner(infoTr_));
    }
    @Test
    public void followPossiblePtsFirstRound1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_KING, gt_.followPossiblePtsFirstRound(infoTr_));
    }
    @Test
    public void followPossiblePtsFirstRound2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_10);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_8, gt_.followPossiblePtsFirstRound(infoTr_));
    }
    @Test
    public void followPossiblePtsFirstRound3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        removePossibleCard(infoTr_,2,CardBelote.CLUB_10);
        removePossibleCard(infoTr_,2,CardBelote.CLUB_QUEEN);
        removePossibleCard(infoTr_,2,CardBelote.CLUB_JACK);
        removePossibleCard(infoTr_,2,CardBelote.CLUB_9);
        removePossibleCard(infoTr_,2,CardBelote.CLUB_7);
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_8, gt_.followPossiblePtsFirstRound(infoTr_));
    }
    @Test
    public void followNormalSuit1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_KING, gt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_KING);
        t_.ajouter(CardBelote.CLUB_8);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_10);
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_JACK, gt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_9,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_9, gt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_1);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_1,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.WHITE, gt_.followNormalSuit(infoTr_));
    }
    @Test
    public void playWhenLastDiscard1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_1);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_1,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_1, gt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_10,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_8, gt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenPossibleTrump1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1));
        deal_.getDeal().add(create(CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_QUEEN,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_10, gt_.playWhenPossibleTrump(infoTr_));
    }
    @Test
    public void playWhenPossibleTrump2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7));
        deal_.getDeal().add(create(CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_KING, gt_.playWhenPossibleTrump(infoTr_));
    }
    @Test
    public void playWhenPossibleTrump3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.CLUB_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_8,CardBelote.SPADE_7));
        deal_.getDeal().add(create(CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_10, gt_.playWhenPossibleTrump(infoTr_));
    }
    @Test
    public void playWhenPossibleTrump4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_10);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1));
        deal_.getDeal().add(create(CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_QUEEN, gt_.playWhenPossibleTrump(infoTr_));
    }
    @Test
    public void playAtNextRound1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_10);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1));
        deal_.getDeal().add(create(CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_QUEEN, gt_.playAtNextRound(infoTr_));
    }
    @Test
    public void playAtNextRound2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.SPADE_7);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_10, gt_.playAtNextRound(infoTr_));
    }
    @Test
    public void playAtNextRound3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_9);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1));
        deal_.getDeal().add(create(CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_10, gt_.playAtNextRound(infoTr_));
    }
    @Test
    public void playAtNextRound4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_9);
        t_.ajouter(CardBelote.CLUB_7);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_9);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1));
        deal_.getDeal().add(create(CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.CLUB_10));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_KING,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(CardBelote.CLUB_QUEEN, gt_.playAtNextRound(infoTr_));
    }
    @Test
    public void followDominantAsTaker1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.CLUB_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_8,CardBelote.SPADE_7));
        deal_.getDeal().add(create(CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.TAKER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_10, gt_.followDominantAsTaker(infoTr_));
    }
    @Test
    public void followDominantAsTaker2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_1);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.TAKER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_1, gt_.followDominantAsTaker(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_1);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.CLUB_1));
        deal_.getDeal().add(create(CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_10, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_10);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.CLUB_10));
        deal_.getDeal().add(create(CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_1,CardBelote.CLUB_JACK,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.CLUB_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_9, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.SPADE_1);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_JACK,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_9,CardBelote.SPADE_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_9, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_10);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_KING,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING));
        deal_.getDeal().add(create(CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.CLUB_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_9, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_QUEEN);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_1);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_10);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_1,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING));
        deal_.getDeal().add(create(CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.CLUB_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_1, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsCalledPlayer6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.DIAMOND_9);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_1);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.CLUB_9);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.DIAMOND_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_9,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1));
        deal_.getDeal().add(create(CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_8,CardBelote.CLUB_10));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.CALLED_PLAYER, gt_.getCurrentStatus());
        assertSame(CardBelote.CLUB_JACK, gt_.followDominantAsCalledPlayer(infoTr_));
    }
    @Test
    public void followDominantAsDefender1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_8);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_9,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_8,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_9,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.DEFENDER, gt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_8, gt_.followDominantAsDefender(infoTr_));
    }
    @Test
    public void followDominantAsDefender2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_8);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.HEART_QUEEN);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_8,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.DEFENDER, gt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_8, gt_.followDominantAsDefender(infoTr_));
    }
    @Test
    public void followDominantAsDefender3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_8);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_9,CardBelote.DIAMOND_1,CardBelote.DIAMOND_8,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_9,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameBeloteTrickHypothesis.equipeQuiVaFairePliCouleurDominante(infoTr_));
        assertSame(Role.DEFENDER, gt_.getCurrentStatus());
        assertSame(CardBelote.DIAMOND_1, gt_.followDominantAsDefender(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante1Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.CLUB_7);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.CLUB_7, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante2Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.CLUB_7);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_QUEEN);
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_JACK);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_1,CardBelote.SPADE_10));
        deal_.getDeal().add(create(CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.HEART_KING,CardBelote.HEART_7,CardBelote.DIAMOND_1));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.CLUB_KING, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante3Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_KING);
        h_.ajouter(CardBelote.HEART_7);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_8);
        h_.ajouter(CardBelote.HEART_8);
        h_.ajouter(CardBelote.DIAMOND_1);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_JACK);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_1);
        pr_.ajouter(CardBelote.CLUB_7);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_QUEEN,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_JACK,CardBelote.CLUB_KING,CardBelote.CLUB_8));
        deal_.getDeal().add(create(CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_10,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_8,CardBelote.DIAMOND_7,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.HEART_KING,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.CLUB_KING, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante4Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.CLUB_8);
        t_.ajouter(CardBelote.CLUB_1);
        t_.ajouter(CardBelote.CLUB_7);
        t_.ajouter(CardBelote.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickBelote(t_.getRamasseur(b_));
        t_.ajouter(CardBelote.DIAMOND_7);
        t_.ajouter(CardBelote.CLUB_JACK);
        t_.ajouter(CardBelote.DIAMOND_8);
        t_.ajouter(CardBelote.DIAMOND_1);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.CLUB_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.CLUB_10,CardBelote.CLUB_KING));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_8,CardBelote.SPADE_7));
        deal_.getDeal().add(create(CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.CLUB_QUEEN));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.CLUB_10, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante5Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        bids_.add(new BidBeloteSuit());
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.OTHER_SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_10);
        h_.ajouter(CardBelote.CLUB_9);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.DIAMOND_7);
        h_.ajouter(CardBelote.HEART_JACK);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.CLUB_1);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote pr_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        pr_.ajouter(CardBelote.CLUB_8);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_7,CardBelote.CLUB_10,CardBelote.CLUB_KING,CardBelote.CLUB_9));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.HEART_7,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN));
        deal_.getDeal().add(create(CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_10,CardBelote.DIAMOND_KING,CardBelote.CLUB_1));
        deal_.getDeal().add(create(CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.DIAMOND_8,CardBelote.CLUB_QUEEN,CardBelote.CLUB_JACK,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_9,CardBelote.HEART_JACK,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.HEART_8,CardBelote.SPADE_JACK,CardBelote.SPADE_9));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.CLUB_10, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireCouleurDominante6Test() {
        RulesBelote r_ = new RulesBelote();
        byte d_ = 2;
        CustList<BidBeloteSuit> bids_ = new CustList<BidBeloteSuit>();
        BidBeloteSuit b_ = new BidBeloteSuit();
        b_.setSuit(Suit.HEART);
        b_.setEnchere(BidBelote.SUIT);
        bids_.add(b_);
        HandBelote h_ = new HandBelote();
        h_.ajouter(CardBelote.HEART_1);
        h_.ajouter(CardBelote.HEART_10);
        h_.ajouter(CardBelote.CLUB_KING);
        h_.ajouter(CardBelote.CLUB_JACK);
        h_.ajouter(CardBelote.DIAMOND_KING);
        h_.ajouter(CardBelote.DIAMOND_8);
        h_.ajouter(CardBelote.HEART_9);
        HandBelote last_ = new HandBelote();
        last_.ajouter(CardBelote.HEART_JACK);
        CustList<TrickBelote> trs_ = new CustList<TrickBelote>();
        TrickBelote t_ = new TrickBelote(r_.getRepartition().getNextPlayer(d_));
        t_.ajouter(CardBelote.HEART_JACK);
        t_.ajouter(CardBelote.HEART_8);
        t_.ajouter(CardBelote.DIAMOND_10);
        t_.ajouter(CardBelote.HEART_7);
        trs_.add(t_);
        TrickBelote pr_ = new TrickBelote(t_.getRamasseur(b_));
        pr_.ajouter(CardBelote.DIAMOND_9);
        DealBelote deal_ = new DealBelote(new CustList<HandBelote>(),d_);
        deal_.getDeal().add(create(CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.DIAMOND_KING,CardBelote.DIAMOND_8,CardBelote.CLUB_KING,CardBelote.CLUB_JACK));
        deal_.getDeal().add(create(CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.SPADE_QUEEN,CardBelote.SPADE_JACK,CardBelote.SPADE_9,CardBelote.SPADE_8));
        deal_.getDeal().add(create(CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7,CardBelote.DIAMOND_1,CardBelote.DIAMOND_QUEEN,CardBelote.DIAMOND_JACK,CardBelote.DIAMOND_7));
        deal_.getDeal().add(create(CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.CLUB_QUEEN,CardBelote.CLUB_9,CardBelote.CLUB_8,CardBelote.CLUB_7));
        deal_.getDeal().add(create(CardBelote.HEART_JACK,CardBelote.CLUB_1,CardBelote.CLUB_10,CardBelote.HEART_9,CardBelote.HEART_1,CardBelote.HEART_10,CardBelote.SPADE_1,CardBelote.SPADE_10,CardBelote.SPADE_KING,CardBelote.HEART_KING,CardBelote.HEART_QUEEN,CardBelote.SPADE_7));
        GameBelote g_ = newGameBeloteWithourDecl(r_, trs_, pr_, d_, bids_, deal_);
        GameBeloteTeamsRelation team_ = g_.getTeamsRelation();
        GameBeloteTrickInfo info_ = newGameBeloteTrickInfo(g_);
        GameBeloteProgTrick gt_ = newGameBeloteProgTrickDeal(g_, info_, team_, h_);
        BeloteInfoPliEnCours infoTr_ = gt_.initInformations();
        assertSame(CardBelote.DIAMOND_8, gt_.fournirCouleurOrdinaireCouleurDominante(infoTr_));
    }
}
