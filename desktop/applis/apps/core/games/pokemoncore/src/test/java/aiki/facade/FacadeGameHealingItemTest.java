package aiki.facade;

import aiki.db.DataBase;
import aiki.facade.enums.SearchingMode;
import aiki.facade.enums.SelectedBoolean;
import aiki.fight.enums.Statistic;
import aiki.game.Game;
import aiki.game.fight.InitializationDataBase;
import aiki.game.params.Difficulty;
import aiki.game.player.enums.Sex;
import aiki.map.enums.Direction;
import aiki.map.pokemon.PokemonPlayer;
import org.junit.Test;

public final class FacadeGameHealingItemTest extends InitializationDataBase {

    public static FacadeGame initTests() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        Difficulty diff_ = new Difficulty();
        game_.initUtilisateur(NICKNAME, diff_, data_);
        game_.setPlayerOrientation(Direction.UP);
        game_.getDifficulty().setRandomWildFight(false);
        game_.getPlayer().getItem(LAVA);
        game_.getPlayer().doRevivingFossil(LAVA, diff_, data_);
        PokemonPlayer pk_ = (PokemonPlayer) game_.getPlayer().getTeam().get(1);
        pk_.setItem(PIERRE_LUNE);
        FacadeGame facadeGame_ = new FacadeGame();
        facadeGame_.setData(data_);
        facadeGame_.setLanguage(LANGUAGE);
        facadeGame_.setGame(game_);
        facadeGame_.directInteraction();
        facadeGame_.interact();
        return facadeGame_;
    }
    @Test
    public void searchTest() {
        FacadeGame facadeGame_ = initTests();
        facadeGame_.getPlayer().getItem(POTION);
        facadeGame_.setContentOfNameHealingItem(null);
        facadeGame_.setContentOfDescriptionHealingItem(null);
        facadeGame_.setContentOfStatusHealingItem(null);
        facadeGame_.setSearchModeNameHealingItem(SearchingMode.WHOLE_STRING);
        facadeGame_.setSearchModeDescriptionHealingItem(SearchingMode.WHOLE_STRING);
        facadeGame_.setSearchModeStatusHealingItem(SearchingMode.WHOLE_STRING);
        facadeGame_.setHealOneMoveHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setKoHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setRelativeRateHpHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setRelativeRatePpHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setStatisticHealingItem(Statistic.NOTHING);
        facadeGame_.setMinPriceHealingItem(null);
        facadeGame_.setMaxPriceHealingItem(null);
        facadeGame_.setMinNumberHealingItem(null);
        facadeGame_.setMaxNumberHealingItem(null);
        facadeGame_.setMinHpHealingItem(null);
        facadeGame_.setMaxHpHealingItem(null);
        facadeGame_.setMinPpHealingItem(null);
        facadeGame_.setMaxPpHealingItem(null);
        facadeGame_.setMinRateHpHealingItem(null);
        facadeGame_.setMaxRateHpHealingItem(null);
        facadeGame_.setNbResultsPerPageHealingItem(1);
        facadeGame_.setDeltaHealingItem(1);
        facadeGame_.setCmpPriceIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpPricePriorityHealingItem(1);
        facadeGame_.setCmpNumberIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpNumberPriorityHealingItem(2);
        facadeGame_.setCmpDescriptionIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpDescriptionPriorityHealingItem(3);
        facadeGame_.setCmpNameIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpNamePriorityHealingItem(4);
        facadeGame_.setCmpRateHpIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpRateHpPriorityHealingItem(5);
        facadeGame_.setCmpPpIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpPpPriorityHealingItem(6);
        facadeGame_.setCmpNbHealedStatusIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpNbHealedStatusPriorityHealingItem(7);
        facadeGame_.setCmpRelativeRateHpIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpRelativeRateHpPriorityHealingItem(8);
        facadeGame_.setCmpRelativeRatePpIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpRelativeRatePpPriorityHealingItem(9);
        facadeGame_.setCmpStatisticsIncreasingHealingItem(SelectedBoolean.YES_AND_NO);
        facadeGame_.setCmpStatisticsPriorityHealingItem(10);
        facadeGame_.searchPokemonHealingItem();
        facadeGame_.endHealingItem();
        facadeGame_.previousDeltaHealingItem();
        facadeGame_.previousHealingItem();
        facadeGame_.nextDeltaHealingItem();
        facadeGame_.nextHealingItem();
        facadeGame_.changePageHealingItem(0);
        facadeGame_.beginHealingItem();
        facadeGame_.checkLineHealingItem(0);
        assertTrue(!facadeGame_.enabledNextHealingItem());
        assertTrue(!facadeGame_.enabledPreviousHealingItem());
        assertEq(1, facadeGame_.pagesHealingItem());
        assertEq(1, facadeGame_.getRenderedHealingItem().size());
        assertEq(0, facadeGame_.getNumberPageHealingItem());
        assertEq(0, facadeGame_.getLineHealingItem());
        facadeGame_.newSearchHealingItem();
        facadeGame_.checkLineHealingItem(0);
        assertTrue(!facadeGame_.enabledNextHealingItem());
        assertTrue(!facadeGame_.enabledPreviousHealingItem());
        assertEq(1, facadeGame_.pagesHealingItem());
        assertEq(1, facadeGame_.getRenderedHealingItem().size());
        assertEq(0, facadeGame_.getNumberPageHealingItem());
        assertEq(0, facadeGame_.getLineHealingItem());
        facadeGame_.setLineHealingItem(0);
        assertTrue(!facadeGame_.enabledNextHealingItem());
        assertTrue(!facadeGame_.enabledPreviousHealingItem());
        assertEq(1, facadeGame_.getNbResultsPerPageHealingItem());
        assertEq(1, facadeGame_.pagesHealingItem());
        assertEq(1, facadeGame_.getRenderedHealingItem().size());
        assertEq(0, facadeGame_.getNumberPageHealingItem());
        assertEq(0, facadeGame_.getLineHealingItem());
        facadeGame_.clearFiltersHealingItem();
        facadeGame_.clearSortingHealingItem();
    }
}
