package aiki.game;

import aiki.db.DataBase;
import code.util.CustList;
import code.util.core.StringUtil;
import org.junit.Test;

import aiki.fight.pokemon.TrainerPlaceNames;
import aiki.game.fight.InitializationDataBase;
import aiki.map.pokemon.Egg;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.util.Coords;
import aiki.util.LevelPoint;
import aiki.util.Point;
import code.maths.LgInt;


public class GameProgressionTest extends InitializationDataBase {

    private static final String SEPARATOR_TRAINERS = " ";

    @Test
    public void new_GameProgression_DataBase_Game_1Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_2Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        Pokemon pk_ = new WildPk();
        pk_.setName(PTITARD);
        pk_.setAbility(ATTENTION);
        game_.getPlayer().recevoirPokemon(pk_, game_.getDifficulty(), data_);
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(1, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(3, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(0), PTITARD));
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(1).size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(2).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(3, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(0).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2), TARTARD));
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(15, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(2, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(2, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_3Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        game_.beatTrainer(new NbFightCoords(newCoords(0, 0, 1, 1), 0));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_4Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        game_.beatTrainer(new NbFightCoords(newCoords(0, 0, 1, 1), 0));
        game_.beatTrainer(new NbFightCoords(newCoords(0, 0, 1, 1), 1));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(3, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_5Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        game_.beatTrainer(new NbFightCoords(newCoords(5, 0, 1, 5), 0));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_6Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        game_.beatGymLeader(newCoords(1, 0, 5, 1, 4, 1));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(1, gameProgression_.getBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(5, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_7Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        Pokemon pk_ = new WildPk();
        pk_.setName(PTITARD);
        pk_.setAbility(ATTENTION);
        game_.getPlayer().recevoirPokemon(pk_, game_.getDifficulty(), data_);
        game_.getPlayer().setChosenTeamPokemon((short) 1);
        game_.getPlayer().storeIntoBox(data_);
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(1, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(3, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(0), PTITARD));
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(1).size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().getVal(PTITARD).get(2).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(3, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(0).size());
        assertEq(1, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getPartialFamiliesBaseNotCaught().getVal(PTITARD).get(2), TARTARD));
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(15, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(2, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(2, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_8Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        game_.getPlayer().getBox().add(new Egg(PTITARD));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(1, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_9Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        PokemonPlayer pkPlayer_ = (PokemonPlayer) game_.getPlayer().getTeam().get(0);
        pkPlayer_.setLevel((short) 100);
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(1, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(0, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_10Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        PokemonPlayer pkPlayer_ = (PokemonPlayer) game_.getPlayer().getTeam().get(0);
        pkPlayer_.setHappiness((short) 170);
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(!gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(16, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getNotAtAllFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getUnBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getUnBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(4, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 0));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 2));
        assertEq(2, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 5));
        assertEq(1, gameProgression_.getRemainingOtherTrainerPlaces().getVal((short) 9));
        assertEq(2, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertEq(2, gameProgression_.getUnVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getUnVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(0, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(1, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    @Test
    public void new_GameProgression_DataBase_Game_11Test() {
        DataBase data_ = initDb();
        Game game_ = new Game(data_);
        game_.initUserInteract(NICKNAME, null, game_.getDifficulty(), data_);
        PokemonPlayer pkPlayer_ = (PokemonPlayer) game_.getPlayer().getTeam().get(0);
        pkPlayer_.setHappiness((short) 170);
        pkPlayer_.setLevel((short) 100);
        game_.catchAll(data_);
        game_.beatGymLeader(newCoords(1, 0, 5, 1, 4, 1));
        game_.beatGymLeader(newCoords(2, 0, 2, 0));
        game_.beatGymLeader(newCoords(2, 0, 4, 0));
        game_.beatGymLeader(newCoords(3, 0, 4, 1, 4, 1));
        game_.beatGymLeader(newCoords(5, 0, 2, 0));
        game_.beatGymLeader(newCoords(6, 0, 4, 8));
        game_.visitPlace(newCoords(1, 0, 1, 2));
        game_.visitPlace(newCoords(3, 0, 2, 2));
        game_.visitPlace(newCoords(7, 0, 3, 4));
        game_.visitPlace(newCoords(8, 0, 3, 4));
        game_.beatTrainer(new NbFightCoords(newCoords(0, 0, 1, 1), 0));
        game_.beatTrainer(new NbFightCoords(newCoords(0, 0, 1, 1), 1));
        game_.beatTrainer(new NbFightCoords(newCoords(9, 0, 1, 1), 0));
        game_.beatTrainer(new NbFightCoords(newCoords(9, 0, 1, 1), 1));
        game_.beatTrainer(new NbFightCoords(newCoords(2, 0, 11, 4), 0));
        game_.beatTrainer(new NbFightCoords(newCoords(5, 0, 1, 5), 0));
        game_.beatTrainer(new NbFightCoords(newCoords(5, 1, 5, 1), 0));
        GameProgression gameProgression_ = new GameProgression(data_,game_);
        assertTrue(gameProgression_.isFinishedGame());
        assertEq(NICKNAME, gameProgression_.getNickname());
        assertEq(0, gameProgression_.getPartialFamiliesBaseCaught().size());
        assertEq(0, gameProgression_.getPartialFamiliesBaseNotCaught().size());
        assertEq(0, gameProgression_.getNotAtAllFamiliesBase().size());
        assertEq(17, gameProgression_.getFullFamiliesBase().size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PIKACHU).get(0), PIKACHU));
        assertEq(3, gameProgression_.getFullFamiliesBase().getVal(PTITARD).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(0), PTITARD));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(1), TETARTE));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(2), TARPAUD));
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PTITARD).get(2), TARTARD));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(CARAPUCE).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(CARAPUCE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(CARAPUCE).get(0), CARAPUCE));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(CARAPUCE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(CARAPUCE).get(1), CARABAFFE));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(TARINOR).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(TARINOR).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(TARINOR).get(0), TARINOR));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(TARINOR).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(TARINOR).get(1), TARINORME));
        assertEq(3, gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(0), NUCLEOS));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(1), MEIOS));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(2).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NUCLEOS).get(2), SYMBIOS));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(CHENITI).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(CHENITI).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(CHENITI).get(0), CHENITI));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(CHENITI).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(CHENITI).get(1), CHENISELLE));
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(CHENITI).get(1), PAPILORD));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_F).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_F).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_F).get(0), LIMAGMA_F));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_M).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_M).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(LIMAGMA_M).get(0), LIMAGMA_M));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(LIMAGMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(LIMAGMA).get(0), LIMAGMA));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(NINGALE).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(NINGALE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NINGALE).get(0), NINGALE));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(NINGALE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NINGALE).get(1), MUNJA));
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(NINGALE).get(1), NINJASK));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(MELOFEE).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(MELOFEE).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(MELOFEE).get(0), MELOFEE));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(MELOFEE).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(MELOFEE).get(1), MELODELFE_2));
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(MELOFEE).get(1), MELODELFE));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(BABIMANTA).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(BABIMANTA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(BABIMANTA).get(0), BABIMANTA));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(BABIMANTA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(BABIMANTA).get(1), DEMANTA));
        assertEq(2, gameProgression_.getFullFamiliesBase().getVal(YANMA).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(YANMA).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(YANMA).get(0), YANMA));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(YANMA).get(1).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(YANMA).get(1), YANMEGA));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PICHU).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(PICHU).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(PICHU).get(0), PICHU));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(REMORAID).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(REMORAID).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(REMORAID).get(0), REMORAID));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(MEW).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(MEW).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(MEW).get(0), MEW));
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(ARTIKODIN).size());
        assertEq(1, gameProgression_.getFullFamiliesBase().getVal(ARTIKODIN).get(0).size());
        assertTrue(StringUtil.contains(gameProgression_.getFullFamiliesBase().getVal(ARTIKODIN).get(0), ARTIKODIN));
        assertEq(0, gameProgression_.getUnBeatenImportantTrainers().size());
        assertEq(6, gameProgression_.getBeatenImportantTrainers().size());
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_TWO_TR_ONE,SEPARATOR_TRAINERS,DUAL_TWO_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_TWO,CITY_TWO)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_THREE_TR_ONE,SEPARATOR_TRAINERS,DUAL_THREE_TR_TWO),CAVE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(LEAGUE_TR_TWO,LIGUE)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(StringUtil.concat(DUAL_ONE_TR_ONE,SEPARATOR_TRAINERS,DUAL_ONE_TR_TWO),R_2)));
        assertTrue(containsTrainerPlaceNames(gameProgression_.getBeatenImportantTrainers(),new TrainerPlaceNames(GYM_TR_ONE,CITY)));
        assertEq(0, gameProgression_.getRemainingOtherTrainerPlaces().size());
        assertEq(4, gameProgression_.getVisitedPlaces().size());
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_TWO));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_7));
        assertTrue(StringUtil.contains(gameProgression_.getVisitedPlaces(), CITY_8));
        assertEq(0, gameProgression_.getUnVisitedPlaces().size());
        assertEq(0, gameProgression_.getNbRemainingEggs());
        assertEq(0, gameProgression_.getNbRemainingNotMaxHappiness());
        assertEq(0, gameProgression_.getNbRemainingNotMaxLevel());
        assertEq(0, gameProgression_.getRemainStepsRepel());
        assertEq(new LgInt("3000"), gameProgression_.getMoney());
    }

    private static boolean containsTrainerPlaceNames(CustList<TrainerPlaceNames> _list, TrainerPlaceNames _t) {
        for (TrainerPlaceNames t: _list) {
            if (eq(_t, t)) {
                return true;
            }
        }
        return false;
    }

    private static boolean eq(TrainerPlaceNames _current, TrainerPlaceNames _g) {
        if (!StringUtil.quickEq(_current.getTrainer(), _g.getTrainer())) {
            return false;
        }
        return StringUtil.quickEq(_current.getPlace(), _g.getPlace());
    }
    private static Coords newCoords(int _place, int _level, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Coords newCoords(int _place, int _level, int _xi, int _yi, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setInsideBuilding(newPoint(_xi, _yi));
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Point newPoint(int _x,int _y) {
        return new Point((short)_x, (short)_y);
    }
}
