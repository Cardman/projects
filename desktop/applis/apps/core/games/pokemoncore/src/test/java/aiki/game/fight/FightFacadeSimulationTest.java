package aiki.game.fight;

import aiki.db.DataBase;
import aiki.game.fight.enums.*;
import aiki.util.TargetCoordsList;
import code.util.core.BoolVal;
import code.util.core.IndexConstants;
import org.junit.Test;

import aiki.game.fight.actions.ActionMove;
import aiki.game.fight.actions.ActionSwitch;
import aiki.game.params.Difficulty;
import aiki.game.params.enums.DifficultyModelLaw;
import aiki.game.player.Player;
import aiki.map.characters.GymLeader;
import aiki.map.levels.enums.EnvironmentType;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import code.maths.Rate;
import code.util.CustList;
import code.util.*;
import code.util.StringList;
import code.util.StringMap;


public class FightFacadeSimulationTest extends InitializationDataBase {

    @Test
    public void simulate1Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 1);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(PISTOLET_A_O,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate1(data_, diff_, player_, new StringList(DETECTION, CHARGE), 3, 3);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOT_KO_FOE, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate2Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 1);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(PISTOLET_A_O,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate1(data_, diff_, player_, new StringList(DETECTION, CHARGE), 13, 13);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate3Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 1);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate1(data_, diff_, player_, new StringList(DETECTION, CHARGE), 13, 13);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate4Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 0);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate1(data_, diff_, player_, new StringList(DETECTION, CHARGE), 13, 13);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.RULES_LEARN, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate5Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate2(data_, diff_, player_, new StringList(DETECTION, CHARGE), 1, 1, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate6Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 100);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate2(data_, diff_, player_, new StringList(DETECTION, CHARGE), 1, 1, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate7Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate2(data_, diff_, player_, new StringList(DETECTION, CHARGE), 13, 13, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate8Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 0);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 20);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate9Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 0);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 20);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(0);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(1);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
//        assertTrue(!fight_.getAcceptableChoices());
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate10Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 0);
        diff_.setAllowCatchingKo(false);
//        diff_.setAllowedSwitchPlacesEndRound(false);
        diff_.setAllowedSwitchPlacesEndRound(true);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 20);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate11Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 100);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.getMoves().getVal(BROUHAHA).setCurrent( 0);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate2(data_, diff_, player_, new StringList(DETECTION, CHARGE), 1, 1, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.RULES_MOVES, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate12Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(DEMI_TOUR,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate13Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(DEMI_TOUR,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate14Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 4);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(DEMI_TOUR,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.NOT_KO_FOE, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate15Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 4);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(DEMI_TOUR,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        actionsRound_.clear();
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getSimulation());
    }

    @Test
    public void simulate16Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 4);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(DEMI_TOUR,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put( 3, choice_);
        evolutions_.add(evos_);
        fight_.getTemp().getKos().put(Fight.CST_FOE, BoolVal.TRUE);
        fight_.getTemp().getKos().put(Fight.CST_PLAYER, BoolVal.FALSE);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getSimulation());
    }

    @Test
    public void simulate17Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 4);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(CHARGE,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate4(data_, diff_, player_, new StringList(CHARGE), 100, 1);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(CHARGE);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
//        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
//        ActionSwitch act_;
//        act_ = new ActionSwitch();
//        act_.setSubstitute( 0);
//        substitutingFront_.add(act_);
//        act_ = new ActionSwitch();
//        act_.setSubstitute( 1);
//        substitutingFront_.add(act_);
//        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
//        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
//        act_ = new ActionSwitch();
//        act_.setSubstitute(Fighter.BACK);
//        substitutingBack_.add(act_);
//        act_ = new ActionSwitch();
//        act_.setSubstitute(Fighter.BACK);
//        substitutingBack_.add(act_);
//        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
//        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(TETARTE);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(ABSORB_EAU);
//        evos_.put( 0, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(TETARTE);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(ABSORB_EAU);
//        evos_.put( 1, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 2, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 3, choice_);
        evolutions_.add(evos_);
//        evos_ = new Map<Byte,ChoiceOfEvolutionAndMoves>();
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 0, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 1, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 2, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put( 3, choice_);
//        evolutions_.add(evos_);
//        fight_.getKos().put(Fight.FOE, true);
//        fight_.getKos().put(Fight.PLAYER, false);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER, fight_.getTemp().getIssue());
    }


    @Test
    public void simulate18Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 0);
        diff_.setAllowCatchingKo(false);
        diff_.setAllowedSwitchPlacesEndRound(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate3(data_, diff_, player_, new StringList(DETECTION, CHARGE), 20);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ZERO)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList(tc(KEY_FOE, POKEMON_TARGET_ONE)));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute( 1);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute( 0);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getTemp().getAcceptableChoices());
        assertEq(IssueSimulation.RULES_SWITCH, fight_.getTemp().getIssue());
    }

    @Test
    public void simulate19Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer( 20);
        diff_.setIvFoe( 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = Player.build(NICKNAME,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel( 40);
        StringMap<Long> map_;
        map_ = new StringMap<Long>();
        map_.put(BROUHAHA,  10L);
        map_.put(INTERVERSION,  10L);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        Fight fight_ = simulate4(data_, diff_, player_, new StringList(DETECTION, CHARGE));
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(INTERVERSION);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.getChosenTargets().add(tc(KEY_PLAYER, POKEMON_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(TargetCoordsList.newList());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<IntMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<IntMap<ChoiceOfEvolutionAndMoves>>();
        IntMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new IntMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put( 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put( 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put( 2, choice_);
        evolutions_.add(evos_);
        simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getTemp().getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING, fight_.getTemp().getIssue());
    }

    @Test
    public void simulateFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE,  25, data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD,  25, data_);
        fightSimulation_.setNextEvolutions(1, TARTARD,  25, data_);
        fightSimulation_.setNextEvolutions(2, MUNJA,  20, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.isOk());
    }

    @Test
    public void simulateFight2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        assertSame(IssueSimulation.NOTHING, fightSimulation_.getIssue());
        assertTrue(!fightSimulation_.getComment().isEmpty());
    }

    @Test
    public void simulateFight3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 4, 1), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight5Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight6Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight7Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(1, TARTARD,  25, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        //fightSimulation_.setAbilityBetweenFights(1, 0, 0, ABSORB_EAU);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight8Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(0, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(1, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight9Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight10Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 50);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE,  55, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA), data_);
        fightSimulation_.setAbilityWhileFight(0, 0, 1, ABSORB_EAU);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O), data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        //ABSORB_EAU
//        fightSimulation_.validateMovesOneFight(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.simulateFight(data_);
//        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void simulateFight11Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 50);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE,  55, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O), data_);
        fightSimulation_.setAbilityWhileFight(0, 0, 1, ABSORB_EAU);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE), data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        //the evolution is not valid but as the evolution happens at the end of fight, choices are acceptable.
        assertTrue(fightSimulation_.getGame().getFight().getTemp().getAcceptableChoices());
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.isOk());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        //ABSORB_EAU
//        fightSimulation_.validateMovesOneFight(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.simulateFight(data_);
//        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void simulateFight12Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);

        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 35);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 38);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        setTeams(fightSimulation_, new CustList<PkTrainer>(), foeTeam_, 1, 1, EnvironmentType.ROCK);
//        setTeams(fightSimulation_, new CustList<PkTrainer>(), foeTeam_, 1, 1, EnvironmentType.ROCK, data_.getMap().getBegin());

        //fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight13Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 5);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        CustList<PkTrainer> allyTeam_;
        allyTeam_ = new CustList<PkTrainer>();
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 25);
        allyTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT, CHARGE)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 28);
        allyTeam_.add(new PkTrainer(pk_, new StringList(TONNERRE)));
        setTeams(fightSimulation_, allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK);
//        setTeams(fightSimulation_, allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK, data_.getMap().getBegin());
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void hasNextFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.hasNextFight());
    }

    @Test
    public void hasNextFight2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 1, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.hasNextFight());
    }

    @Test
    public void hasNextFight3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.hasNextFight());
    }

    @Test
    public void hasNextFight4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 5);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        CustList<PkTrainer> allyTeam_;
        allyTeam_ = new CustList<PkTrainer>();
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 25);
        allyTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT, CHARGE)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel( 28);
        allyTeam_.add(new PkTrainer(pk_, new StringList(TONNERRE)));
        setTeams(fightSimulation_, allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK);
//        setTeams(fightSimulation_, allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK, data_.getMap().getBegin());
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.hasNextFight());
    }

    @Test
    public void nextFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        fightSimulation_.nextFight();
        assertEq(newCoords(6, 1, 4, 4), fightSimulation_.getFoeCoords());
        assertEq(1, fightSimulation_.getMaxActions().size());
        assertEq(1, fightSimulation_.getMaxActions().first());
        assertEq(1, fightSimulation_.getMult().size());
        assertEq(1, fightSimulation_.getMult().first());
        assertEq(1, fightSimulation_.getItems().size());
        assertEq(0, fightSimulation_.getItems().first().size());
        assertEq(1, fightSimulation_.getUsedStones().size());
        assertEq(0, fightSimulation_.getUsedStones().first().size());
        CustList<CustList<PkTrainer>> foeNumbers_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(TARTARD, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().first().getMoves().first());
        assertEq(TARTARD, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().last().getMoves().first());
        assertEq(0, fightSimulation_.getMoves().size());
        assertEq(0, fightSimulation_.getAbilities().size());
        assertEq(0, fightSimulation_.getEvolutions().size());
        //can swap pokemon, add or remove items
        //can learn before swap
        fightSimulation_.getGame().getPlayer().setChosenTeamPokemon( 0);
        fightSimulation_.getGame().getPlayer().switchTeamOrder( 1);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
//        fightSimulation_.getFrontFighters().first().first().put(1, 0);
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
//        fightSimulation_.getFrontFighters().first().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, 0);
        fightSimulation_.getFrontFighters().first().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void nextFight2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        CustList<FreeTeamChoice> chs_ = new CustList<FreeTeamChoice>();
        FreeTeamChoice chOne_ = new FreeTeamChoice();
        CustList<PkTrainer> foeTeamOne_ = new CustList<PkTrainer>();
        Pokemon pkOneFirst_ = new WildPk();
        pkOneFirst_.setName(PIKACHU);
        pkOneFirst_.setLevel( 35);
        pkOneFirst_.setAbility(ATTENTION);
        pkOneFirst_.setItem(NULL_REF);
        foeTeamOne_.add(new PkTrainer(pkOneFirst_, new StringList(JACKPOT)));
        Pokemon pkOneSecond_ = new WildPk();
        pkOneSecond_.setName(PIKACHU);
        pkOneSecond_.setLevel( 38);
        pkOneSecond_.setAbility(ATTENTION);
        pkOneSecond_.setItem(NULL_REF);
        foeTeamOne_.add(new PkTrainer(pkOneSecond_, new StringList(JACKPOT)));
        chOne_.getFoeTeam().addAllElts(foeTeamOne_);
        chOne_.setMultiplicity(1);
        chOne_.setNbMaxActions(1);
        chOne_.setEnv(EnvironmentType.BUILDING);
        chs_.add(chOne_);
        FreeTeamChoice chTwo_ = new FreeTeamChoice();
        CustList<PkTrainer> foeTeamTwo_ = new CustList<PkTrainer>();
        Pokemon pkTwoFirst_ = new WildPk();
        pkTwoFirst_.setName(TARTARD);
        pkTwoFirst_.setLevel( 35);
        pkTwoFirst_.setAbility(ATTENTION);
        pkTwoFirst_.setItem(NULL_REF);
        foeTeamTwo_.add(new PkTrainer(pkTwoFirst_, new StringList(PISTOLET_A_O)));
        Pokemon pkTwoSecond_ = new WildPk();
        pkTwoSecond_.setName(TARTARD);
        pkTwoSecond_.setLevel( 38);
        pkTwoSecond_.setAbility(ATTENTION);
        pkTwoSecond_.setItem(NULL_REF);
        foeTeamTwo_.add(new PkTrainer(pkTwoSecond_, new StringList(PISTOLET_A_O)));
        chTwo_.getFoeTeam().addAllElts(foeTeamTwo_);
        chTwo_.setMultiplicity(1);
        chTwo_.setNbMaxActions(1);
        chTwo_.setEnv(EnvironmentType.BUILDING);
        chs_.add(chTwo_);
        fightSimulation_.setTeams(chs_);
//        fightSimulation_.setTeams(chs_,newCoords(6, 0, 4, 8));
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(1, 0);
//        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(2, 0);
//        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        fightSimulation_.nextFight();
        assertEq(1, fightSimulation_.getMaxActions().size());
        assertEq(1, fightSimulation_.getMaxActions().first());
        assertEq(2, fightSimulation_.getMultAll().size());
        assertEq(1, fightSimulation_.getMult().size());
        assertEq(1, fightSimulation_.getMult().first());
        assertEq(1, fightSimulation_.getItems().size());
        assertEq(0, fightSimulation_.getItems().first().size());
        assertEq(1, fightSimulation_.getUsedStones().size());
        assertEq(0, fightSimulation_.getUsedStones().first().size());
        assertEq(2, fightSimulation_.getFoeTeamsAll().size());
        assertEq(2, fightSimulation_.getAllyTeamAll().size());
        assertEq(2, fightSimulation_.getEnvironmentAll().size());
        CustList<CustList<PkTrainer>> foeNumbers_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(TARTARD, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().first().getMoves().first());
        assertEq(TARTARD, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().last().getMoves().first());
        assertEq(0, fightSimulation_.getMoves().size());
        assertEq(0, fightSimulation_.getAbilities().size());
        assertEq(0, fightSimulation_.getEvolutions().size());
        //can swap pokemon, add or remove items
        //can learn before swap
        fightSimulation_.getGame().getPlayer().setChosenTeamPokemon( 0);
        fightSimulation_.getGame().getPlayer().switchTeamOrder( 1);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
//        fightSimulation_.getFrontFighters().first().first().put(1, 0);
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
//        fightSimulation_.getFrontFighters().first().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, 0);
        fightSimulation_.getFrontFighters().first().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
    }
    @Test
    public void simulateFights1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE,  25, data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD,  25, data_);
        fightSimulation_.setNextEvolutions(1, TARTARD,  25, data_);
        fightSimulation_.setNextEvolutions(2, MUNJA,  20, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(1, 0);
        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(2, 0);
        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.isOk());
        assertTrue(!fightSimulation_.isAcceptableChoices());
    }

    @Test
    public void simulateFights2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(1, 0);
        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(2, 0);
        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        assertTrue(fightSimulation_.isAcceptableChoices());
        assertEq(3,fightSimulation_.getTeamAfterFight().size());
    }

    @Test
    public void simulateFights3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 4, 1), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights5Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights6Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights7Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(1, TARTARD,  25, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(1, 0);
        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(2, 0);
        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.setAbilityBetweenFights(1, 0, 0, ABSORB_EAU);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 0, 1, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights8Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(0, 0);
        fightSimulation_.getFrontFighters().first().last().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(1, 0);
        fightSimulation_.getFrontFighters().last().first().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put(2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(2, 0);
        fightSimulation_.getFrontFighters().last().last().put(0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put(1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(0, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(1, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights9Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put(0, 0);
        fightSimulation_.getFrontFighters().first().first().put(1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put(2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO), data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, tc(KEY_FOE, POKEMON_TARGET_ZERO));
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFightStep1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        assertEq(FightState.ATTAQUES,fightSimulation_.getGame().getFight().getState());
    }

    @Test
    public void simulateFightStep2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.ATTAQUES,fightSimulation_.getGame().getFight().getState());
    }

    @Test
    public void simulateFightStep3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        fightSimulation_.getGame().getFight().getFoeTeam().getMembers().getValue(0).setRemainingHp(Rate.one());
        fightSimulation_.getGame().getFight().getFoeTeam().getMembers().getValue(1).setRemainingHp(Rate.zero());
        ActionMove move_ = new ActionMove();
        move_.setFirstChosenMove(CHARGE);
        move_.setFinalChosenMove(NULL_REF);
        move_.setChosenTargets(TargetCoordsList.newList(TargetCoords.toFoeTarget(0)));
        move_.setSubstitute(Fighter.BACK);
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setAction(move_);
        fightSimulation_.simulateFightStep(data_);
        assertFalse(fightSimulation_.getGame().getFight().getFightType().isExisting());
        fightSimulation_.simulateFightStep(data_);
        assertFalse(fightSimulation_.getGame().getFight().getFightType().isExisting());
    }

    @Test
    public void simulateFightStep4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 10);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(DEMI_TOUR),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 10);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        ActionMove move_ = new ActionMove();
        move_.setFirstChosenMove(DEMI_TOUR);
        move_.setFinalChosenMove(NULL_REF);
        move_.setSubstitute(Fighter.BACK);
        move_.setChosenTargets(TargetCoordsList.newList(TargetCoords.toFoeTarget(0)));
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setAction(move_);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.SWITCH_APRES_ATTAQUE,fightSimulation_.getGame().getFight().getState());
        move_.setSubstitute(1);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.ATTAQUES,fightSimulation_.getGame().getFight().getState());
    }

    @Test
    public void simulateFightStep5Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        fightSimulation_.getGame().getFight().getFoeTeam().getMembers().getValue(0).setRemainingHp(Rate.one());
        ActionMove move_ = new ActionMove();
        move_.setFirstChosenMove(CHARGE);
        move_.setFinalChosenMove(NULL_REF);
        move_.setChosenTargets(TargetCoordsList.newList(TargetCoords.toFoeTarget(0)));
        move_.setSubstitute(Fighter.BACK);
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setAction(move_);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.SWITCH_PROPOSE,fightSimulation_.getGame().getFight().getState());
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.ATTAQUES,fightSimulation_.getGame().getFight().getState());
    }

    @Test
    public void simulateFightStep6Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        fightSimulation_.getGame().getFight().getFoeTeam().getMembers().getValue(0).setRemainingHp(Rate.one());
        fightSimulation_.getGame().getFight().getFoeTeam().getMembers().getValue(1).setRemainingHp(Rate.zero());
        ActionMove move_ = new ActionMove();
        move_.setFirstChosenMove(CHARGE);
        move_.setFinalChosenMove(NULL_REF);
        move_.setChosenTargets(TargetCoordsList.newList(TargetCoords.toFoeTarget(0)));
        move_.setSubstitute(Fighter.BACK);
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setAction(move_);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.APPRENDRE_EVOLUER,fightSimulation_.getGame().getFight().getState());
        fightSimulation_.simulateFightStep(data_);
        assertFalse(fightSimulation_.getGame().getFight().getFightType().isExisting());
    }

    @Test
    public void simulateFightStep7Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(5, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 1);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        ActionMove move_ = new ActionMove();
        move_.setFirstChosenMove(CHARGE);
        move_.setFinalChosenMove(NULL_REF);
        move_.setChosenTargets(TargetCoordsList.newList(TargetCoords.toFoeTarget(0)));
        move_.setSubstitute(Fighter.BACK);
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setAction(move_);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.SWITCH_WHILE_KO_USER,fightSimulation_.getGame().getFight().getState());
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.SWITCH_WHILE_KO_USER,fightSimulation_.getGame().getFight().getState());
    }

    @Test
    public void simulateFightStep8Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel( 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE),  70, Rate.zero(), data_);
        fightSimulation_.setSeed("0");
        fightSimulation_.simulateFightIntro(data_);
        fightSimulation_.getGame().getFight().getUserTeam().getMembers().getValue(0).setGroundPlace(Fighter.BACK);
        fightSimulation_.simulateFightStep(data_);
        assertEq(FightState.ATTAQUES,fightSimulation_.getGame().getFight().getState());
    }

    private Fight simulate4(DataBase _data, Difficulty _diff, Player _player, StringList _foeMoves) {
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        foeTeam_.add(pkTrainer(1, _foeMoves));
        foeTeam_.add(pkTrainer(1, _foeMoves));
        foeTeam_.add(pkTrainer(1, _foeMoves));
        return simulateGym(_player, _diff, _data, foeTeam_, 3);
    }

    private Fight simulate4(DataBase _data, Difficulty _diff, Player _player, StringList _foeMoves, int _l, int _m) {
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        foeTeam_.add(pkTrainer(_l, _foeMoves));
        return simulateGym(_player, _diff, _data, foeTeam_, _m);
    }

    private Fight simulate3(DataBase _data, Difficulty _diff, Player _player, StringList _foeMoves, int _f) {
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        foeTeam_.add(pkTrainer(_f, _foeMoves));
        foeTeam_.add(pkTrainer(_f, _foeMoves));
        foeTeam_.add(pkTrainer(_f, _foeMoves));
        foeTeam_.add(pkTrainer(_f, _foeMoves));
        return simulateGym(_player, _diff, _data, foeTeam_, 2);
    }

    private Fight simulate2(DataBase _data, Difficulty _diff, Player _player, StringList _foeMoves, int _f1, int _f2, int _m) {
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        foeTeam_.add(pkTrainer(_f1, _foeMoves));
        foeTeam_.add(pkTrainer(_f2, _foeMoves));
        return simulateGym(_player, _diff, _data, foeTeam_, _m);
    }

    private Fight simulate1(DataBase _data, Difficulty _diff, Player _player, StringList _foeMoves, int _f, int _s) {
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        foeTeam_.add(pkTrainer(_f, _foeMoves));
        foeTeam_.add(pkTrainer(_s, _foeMoves));
        return simulateGym(_player, _diff, _data, foeTeam_);
    }

    private static Fight simulateGym(Player _player, Difficulty _diff, DataBase _data, CustList<PkTrainer> _foeTeam) {
        GymLeader leader_ = new GymLeader();
        leader_.setTeam(_foeTeam);
        leader_.setReward( 200);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_, _player, _diff, leader_, _data);
        FightFacade.initTypeEnv(fight_, _data.getMap().getBegin(), _diff, _data);
        return fight_;
    }

    private static Fight simulateGym(Player _player, Difficulty _diff, DataBase _data, CustList<PkTrainer> _foeTeam, int _mult) {
        GymLeader leader_ = new GymLeader();
        leader_.setTeam(_foeTeam);
        leader_.setMultiplicityFight( _mult);
        leader_.setReward( 200);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_, _player, _diff, leader_, _data);
        FightFacade.initTypeEnv(fight_, _data.getMap().getBegin(), _diff, _data);
        return fight_;
    }

    private static PkTrainer pkTrainer(int _level, StringList _moves) {
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel(_level);
        foePokemon_.setMoves(_moves);
        return foePokemon_;
    }

    private void simulate(Fight _fight, CustList<CustList<ActionMove>> _actionsRound, CustList<CustList<ActionSwitch>> _actionsSubstitutingFront, CustList<CustList<ActionSwitch>> _actionsSubstitutingBack, CustList<IntMap<ChoiceOfEvolutionAndMoves>> _evolutions, Player _player, Difficulty _diff, DataBase _data) {
        FightSimulationActions fightSimulationActions_ = new FightSimulationActions();
        fightSimulationActions_.getActionsBeforeRound().add(_actionsRound);
        fightSimulationActions_.getActionsSubstitutingFront().add(_actionsSubstitutingFront);
        fightSimulationActions_.getActionsSubstitutingBack().add(_actionsSubstitutingBack);
        fightSimulationActions_.getMovesAbilities().add(_evolutions);
        FightFacade.simulate(_fight, fightSimulationActions_,0, _player, _diff, _data);
    }
}
