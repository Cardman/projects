package aiki.game.fight;

import aiki.db.DataBase;
import code.util.core.BoolVal;
import code.util.core.IndexConstants;
import org.junit.Test;

import aiki.game.fight.actions.ActionMove;
import aiki.game.fight.actions.ActionSwitch;
import aiki.game.fight.enums.IssueSimulation;
import aiki.game.params.Difficulty;
import aiki.game.params.enums.DifficultyModelLaw;
import aiki.game.player.Player;
import aiki.map.characters.Ally;
import aiki.map.characters.DualFight;
import aiki.map.characters.GymLeader;
import aiki.map.characters.TempTrainer;
import aiki.map.levels.enums.EnvironmentType;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import aiki.util.Coords;
import aiki.util.LevelPoint;
import aiki.util.Point;
import code.maths.Rate;
import code.util.CustList;
import code.util.EqList;
import code.util.*;
import code.util.StringList;
import code.util.StringMap;


public class FightFacadeSimulationTest extends InitializationDataBase {
 
    private static Fight simulate(
            CustList<LevelMoves> _partnerMoves,
            CustList<LevelMoves> _foeMoves,
            Player _player,
            Difficulty _diff, DataBase _data,
            int... _mult) {
        Fight fight_ = FightFacade.newFight();
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        for (int i = IndexConstants.FIRST_INDEX; i < _foeMoves.size(); i++) {
            PkTrainer foePokemon_ = new PkTrainer();
            foePokemon_.setName(TARTARD);
            foePokemon_.setItem(PLAQUE_DRACO);
            foePokemon_.setAbility(MULTITYPE);
            foePokemon_.setGender(Gender.NO_GENDER);
            foePokemon_.setLevel(_foeMoves.get(i).getFirst());
            foePokemon_.setMoves(_foeMoves.get(i).getSecond());
            foeTeam_.add(foePokemon_);
        }
        if (!_partnerMoves.isEmpty()) {
            DualFight dual_ = new DualFight();
            Ally ally_ = new Ally();
            CustList<PkTrainer> allyTeam_ = new CustList<PkTrainer>();
            for (int i = IndexConstants.FIRST_INDEX; i < _partnerMoves.size(); i++) {
                PkTrainer allyPokemon_ = new PkTrainer();
                allyPokemon_.setName(TARTARD);
                allyPokemon_.setItem(PLAQUE_DRACO);
                allyPokemon_.setAbility(MULTITYPE);
                allyPokemon_.setGender(Gender.NO_GENDER);
                allyPokemon_.setLevel(_partnerMoves.get(i).getFirst());
                allyPokemon_.setMoves(_partnerMoves.get(i).getSecond());
                allyTeam_.add(allyPokemon_);
            }
            ally_.setTeam(allyTeam_);
            dual_.setAlly(ally_);
            TempTrainer trainer_ = new TempTrainer();
            trainer_.setTeam(foeTeam_);
            trainer_.setReward((short) 200);
            dual_.setFoeTrainer(trainer_);
            FightFacade.initFight(fight_,_player, _diff, dual_, _data);
        } else {
            GymLeader leader_ = new GymLeader();
            leader_.setTeam(foeTeam_);
            if (_mult.length > 0) {
                leader_.setMultiplicityFight((byte) _mult[0]);
            }
            leader_.setReward((short) 200);
            FightFacade.initFight(fight_,_player, _diff, leader_, _data);
        }
        FightFacade.initTypeEnv(fight_, _data.getMap().getBegin(), _diff, _data);
        return fight_;
    }

    @Test
    public void simulate1Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 1);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(PISTOLET_A_O, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)3,foeMoves_));
        foesMoves_.add(new LevelMoves((short)3,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOT_KO_FOE,fight_.getIssue());
    }

    @Test
    public void simulate2Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 1);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(PISTOLET_A_O, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(PISTOLET_A_O);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER,fight_.getIssue());
    }

    @Test
    public void simulate3Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 1);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER,fight_.getIssue());
    }

    @Test
    public void simulate4Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(PISTOLET_A_O));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.RULES_LEARN,fight_.getIssue());
    }

    @Test
    public void simulate5Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate6Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 100);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate7Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        foesMoves_.add(new LevelMoves((short)13,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate8Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate9Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute((byte)0);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte)1);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
//        assertTrue(!fight_.getAcceptableChoices());
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate10Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
//        diff_.setAllowedSwitchPlacesEndRound(false);
        diff_.setAllowedSwitchPlacesEndRound(true);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate11Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 100);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.getMoves().getVal(BROUHAHA).setCurrent((short) 0);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.RULES_MOVES,fight_.getIssue());
    }

    @Test
    public void simulate12Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(DEMI_TOUR, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate13Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(DEMI_TOUR, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulate14Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 4);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(DEMI_TOUR, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.NOT_KO_FOE,fight_.getIssue());
    }

    @Test
    public void simulate15Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 4);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(DEMI_TOUR, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        actionsRound_.clear();
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getSimulation());
    }

    @Test
    public void simulate16Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 4);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(DEMI_TOUR, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        foesMoves_.add(new LevelMoves((short)2,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        round_ = new CustList<ActionMove>();
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(DEMI_TOUR);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute(Fighter.BACK);
        substitutingBack_.add(act_);
        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(DEMI_TOUR));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
        fight_.getKos().put(Fight.CST_FOE, BoolVal.TRUE);
        fight_.getKos().put(Fight.CST_PLAYER, BoolVal.FALSE);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getSimulation());
    }

    @Test
    public void simulate17Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 4);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(CHARGE, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(CHARGE);
        foesMoves_.add(new LevelMoves((short)100,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 1);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(CHARGE);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
//        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
//        ActionSwitch act_;
//        act_ = new ActionSwitch();
//        act_.setSubstitute((byte) 0);
//        substitutingFront_.add(act_);
//        act_ = new ActionSwitch();
//        act_.setSubstitute((byte) 1);
//        substitutingFront_.add(act_);
//        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
//        CustList<ActionSwitch> substitutingBack_ = new CustList<ActionSwitch>();
//        act_ = new ActionSwitch();
//        act_.setSubstitute(Fighter.BACK);
//        substitutingBack_.add(act_);
//        act_ = new ActionSwitch();
//        act_.setSubstitute(Fighter.BACK);
//        substitutingBack_.add(act_);
//        actionsSubstitutingBack_.add(substitutingBack_);
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
//        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(TETARTE);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(ABSORB_EAU);
//        evos_.put((byte) 0, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(TETARTE);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(ABSORB_EAU);
//        evos_.put((byte) 1, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 2, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 3, choice_);
        evolutions_.add(evos_);
//        evos_ = new Map<Byte,ChoiceOfEvolutionAndMoves>();
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 0, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR,BOUE_BOMBE));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 1, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 2, choice_);
//        choice_ = new ChoiceOfEvolutionAndMoves();
//        choice_.setName(NULL_REF);
//        choice_.setKeptMoves(new StringList(DEMI_TOUR));
//        choice_.setAbility(NULL_REF);
//        evos_.put((byte) 3, choice_);
//        evolutions_.add(evos_);
//        fight_.getKos().put(Fight.FOE, true);
//        fight_.getKos().put(Fight.PLAYER, false);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.KO_PLAYER,fight_.getIssue());
    }


    @Test
    public void simulate18Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        diff_.setAllowedSwitchPlacesEndRound(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(PTITARD);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        foesMoves_.add(new LevelMoves((short)20,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 2);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ZERO));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>(POKEMON_FOE_TARGET_ONE));
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<ActionSwitch> substitutingFront_ = new CustList<ActionSwitch>();
        ActionSwitch act_;
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 1);
        substitutingFront_.add(act_);
        act_ = new ActionSwitch();
        act_.setSubstitute((byte) 0);
        substitutingFront_.add(act_);
        actionsSubstitutingFront_.add(substitutingFront_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        actionsSubstitutingBack_.add(new CustList<ActionSwitch>());
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ChoiceOfEvolutionAndMoves choice_;
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(TETARTE);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(ABSORB_EAU);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,BOUE_BOMBE));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(!fight_.getAcceptableChoices());
        assertEq(IssueSimulation.RULES_SWITCH,fight_.getIssue());
    }

    @Test
    public void simulate19Test() {
        DataBase data_ = initDb();
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        diff_.setDamageRatePlayer(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setDamageRateLawFoe(DifficultyModelLaw.CONSTANT_MAX);
        diff_.setIvPlayer((short) 20);
        diff_.setIvFoe((short) 15);
        diff_.setAllowCatchingKo(false);
        Player player_ = new Player(NICKNAME,null,diff_,false,data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(TETARTE);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 40);
        StringMap<Short> map_;
        map_ = new StringMap<Short>();
        map_.put(BROUHAHA, (short) 10);
        map_.put(INTERVERSION, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,data_,map_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(data_);
        player_.getTeam().add(lasPk_);
        CustList<LevelMoves> partnersMoves_ = new CustList<LevelMoves>();
        CustList<LevelMoves> foesMoves_ = new CustList<LevelMoves>();
        StringList foeMoves_ = new StringList(DETECTION,CHARGE);
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        foesMoves_.add(new LevelMoves((short)1,foeMoves_));
        Fight fight_ = simulate(partnersMoves_, foesMoves_, player_, diff_, data_, 3);
        CustList<CustList<ActionMove>> actionsRound_ = new CustList<CustList<ActionMove>>();
        CustList<ActionMove> round_ = new CustList<ActionMove>();
        ActionMove action_;
        action_ = new ActionMove();
        action_.setFirstChosenMove(INTERVERSION);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.getChosenTargets().add(POKEMON_PLAYER_TARGET_ONE);
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        action_ = new ActionMove();
        action_.setFirstChosenMove(BROUHAHA);
        action_.setChosenTargets(new EqList<TargetCoords>());
        action_.setSubstitute(Fighter.BACK);
        round_.add(action_);
        actionsRound_.add(round_);
        CustList<CustList<ActionSwitch>> actionsSubstitutingFront_ = new CustList<CustList<ActionSwitch>>();
        CustList<CustList<ActionSwitch>> actionsSubstitutingBack_ = new CustList<CustList<ActionSwitch>>();
        CustList<ByteMap<ChoiceOfEvolutionAndMoves>> evolutions_ = new CustList<ByteMap<ChoiceOfEvolutionAndMoves>>();
        ByteMap<ChoiceOfEvolutionAndMoves> evos_;
        evos_ = new ByteMap<ChoiceOfEvolutionAndMoves>();
        ChoiceOfEvolutionAndMoves choice_;
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 0, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 1, choice_);
        choice_ = new ChoiceOfEvolutionAndMoves();
        choice_.setName(NULL_REF);
        choice_.setKeptMoves(new StringList(BROUHAHA,INTERVERSION));
        choice_.setAbility(NULL_REF);
        evos_.put((byte) 2, choice_);
        evolutions_.add(evos_);
        FightFacade.simulate(fight_, actionsRound_, actionsSubstitutingFront_, actionsSubstitutingBack_, evolutions_, player_, diff_, data_);
        assertTrue(fight_.getAcceptableChoices());
        assertTrue(FightFacade.win(fight_));
        assertEq(IssueSimulation.NOTHING,fight_.getIssue());
    }

    @Test
    public void simulateFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.isOk());
    }

    @Test
    public void simulateFight2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        assertSame(IssueSimulation.NOTHING, fightSimulation_.getIssue());
        assertTrue(!fightSimulation_.getComment().isEmpty());
    }

    @Test
    public void simulateFight3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 4, 1), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight5Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight6Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight7Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        //fightSimulation_.setAbilityBetweenFights(1, 0, 0, ABSORB_EAU);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, CHARGE, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight8Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(0, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(1, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight9Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight10Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 50);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 55, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA), data_);
        fightSimulation_.setAbilityWhileFight(0, 0, 1, ABSORB_EAU);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O), data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        //ABSORB_EAU
//        fightSimulation_.validateMovesOneFight(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.simulateFight(data_);
//        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void simulateFight11Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 50);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 55, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE, PISTOLET_A_O), data_);
        fightSimulation_.setAbilityWhileFight(0, 0, 1, ABSORB_EAU);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, BULLES_D_O, PLAQUAGE), data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        //the evolution is not valid but as the evolution happens at the end of fight, choices are acceptable.
        assertTrue(fightSimulation_.getGame().getFight().getAcceptableChoices());
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.isOk());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        //ABSORB_EAU
//        fightSimulation_.validateMovesOneFight(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        //fightSimulation_.validateMoves(1, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        //fightSimulation_.validateMoves(0, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        //fightSimulation_.validateMoves(2, data_);
//        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.simulateFight(data_);
//        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void simulateFight12Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);

        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 35);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 38);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        fightSimulation_.setTeams(new CustList<PkTrainer>(), foeTeam_, 1, 1, EnvironmentType.ROCK, data_.getMap().getBegin());

        //fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFight13Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 5);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        CustList<PkTrainer> allyTeam_;
        allyTeam_ = new CustList<PkTrainer>();
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 25);
        allyTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT, CHARGE)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 28);
        allyTeam_.add(new PkTrainer(pk_, new StringList(TONNERRE)));
        fightSimulation_.setTeams(allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK, data_.getMap().getBegin());
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void hasNextFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.hasNextFight(data_));
    }

    @Test
    public void hasNextFight2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 1, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.hasNextFight(data_));
    }

    @Test
    public void hasNextFight3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertTrue(!fightSimulation_.hasNextFight(data_));
    }

    @Test
    public void hasNextFight4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 5);
        foeTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT)));
        CustList<PkTrainer> allyTeam_;
        allyTeam_ = new CustList<PkTrainer>();
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 25);
        allyTeam_.add(new PkTrainer(pk_, new StringList(JACKPOT, CHARGE)));
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        pk_.setLevel((short) 28);
        allyTeam_.add(new PkTrainer(pk_, new StringList(TONNERRE)));
        fightSimulation_.setTeams(allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK, data_.getMap().getBegin());
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.hasNextFight(data_));
    }

    @Test
    public void nextFight1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
//        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
//        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
//        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
//        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
//        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
        fightSimulation_.nextFight(data_);
        assertEq(newCoords(6, 1, 4, 4), fightSimulation_.getFoeCoords());
        assertEq(1, fightSimulation_.getMaxActions().size());
        assertEq(1, fightSimulation_.getMaxActions().first());
        assertEq(1, fightSimulation_.getMult().size());
        assertEq(1, fightSimulation_.getMult().first());
        assertEq(1, fightSimulation_.getItems().size());
        assertEq(0, fightSimulation_.getItems().first().size());
        assertEq(1, fightSimulation_.getUsedStones().size());
        assertEq(0, fightSimulation_.getUsedStones().first().size());
        CustList<CustList<PkTrainer>> foeNumbers_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(TARTARD, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().first().getMoves().first());
        assertEq(TARTARD, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().last().getMoves().first());
        assertEq(0, fightSimulation_.getMoves().size());
        assertEq(0, fightSimulation_.getAbilities().size());
        assertEq(0, fightSimulation_.getEvolutions().size());
        //can swap pokemon, add or remove items
        //can learn before swap
        fightSimulation_.getGame().getPlayer().setChosenTeamPokemon((short) 0);
        fightSimulation_.getGame().getPlayer().switchTeamOrder((short) 1);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
//        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
//        fightSimulation_.getFrontFighters().first().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(data_);
        fightSimulation_.validateMovesOneFight(1, data_);
        fightSimulation_.validateMovesOneFight(0, data_);
        fightSimulation_.validateMovesOneFight(2, data_);
        fightSimulation_.validateAllMoves(data_);
//        fightSimulation_.chooseMove(0, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFight(data_);
        assertTrue(!fightSimulation_.getProbleme());
    }

    @Test
    public void simulateFights1Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertTrue(fightSimulation_.isOk());
        assertTrue(!fightSimulation_.isAcceptableChoices());
    }

    @Test
    public void simulateFights2Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
        assertTrue(fightSimulation_.isAcceptableChoices());
        assertEq(3,fightSimulation_.getTeamAfterFight().size());
    }

    @Test
    public void simulateFights3Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 1, 7), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights4Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 4, 1), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights5Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights6Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights7Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.setAbilityBetweenFights(1, 0, 0, ABSORB_EAU);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 0, 1, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(!fightSimulation_.getProbleme());
        assertEq(2, fightSimulation_.getKoFoes().size());
        assertEq(0, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights8Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(1, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(0, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 0, 1, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.chooseMove(1, 1, 2, CHARGE, POKEMON_FOE_TARGET_ZERO, data_);
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(0, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(1, fightSimulation_.getKoPlayers().size());
    }

    @Test
    public void simulateFights9Test() {
        DataBase data_ = initDb();
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), IndexConstants.INDEX_NOT_FOUND_ELT, data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 1);
        pokemon_.setName(MUNJA);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data_);
        fightSimulation_.validateTeam(data_);
        fightSimulation_.setFirstEvolutions(data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(1, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(0, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        //fightSimulation_.validateMoves(2, data_);
        fightSimulation_.validateAllMoves(data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, data_);
        //fightSimulation_.chooseMove(0, 1, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO);
        fightSimulation_.simulateFights(data_);
        assertTrue(fightSimulation_.getProbleme());
        assertEq(1, fightSimulation_.getKoFoes().size());
        assertEq(1, fightSimulation_.getNotKoFrontFoes().size());
        assertEq(0, fightSimulation_.getKoPlayers().size());
    }

    private static Coords newCoords(int _place, int _level, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Coords newCoords(int _place, int _level, int _xi, int _yi, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setInsideBuilding(newPoint(_xi, _yi));
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Point newPoint(int _x, int _y) {
        return new Point((short)_x, (short)_y);
    }
}
