package aiki.game.fight;

import aiki.db.DataBase;
import code.util.core.StringUtil;
import org.junit.Test;

import aiki.fight.pokemon.NameLevel;
import aiki.game.params.Difficulty;
import aiki.game.params.enums.DifficultyWinPointsFight;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import code.maths.Rate;
import code.util.CustList;
import code.util.*;
import code.util.StringList;


public class PseudoFightTest extends InitializationDataBase {

    @Test
    public void new_PseudoFight_List_PseudoPlayer_int_List_1Test() {
        DataBase data_ = initDb();
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        CustList<PokemonPlayer> team_;
        team_ = new CustList<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        CustList<CustList<NameLevel>> evolutions_;
        evolutions_ = new CustList<CustList<NameLevel>>();
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        ByteMap<Byte> map_;
        map_ = new ByteMap<Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, (byte)1);
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        CustList<ByteMap<Byte>> actions_;
        actions_ = new CustList<ByteMap<Byte>>();
        actions_.add(map_);
        map_ = new ByteMap<Byte>();
        map_.put((byte)2, (byte)0);
        map_.put((byte)3, (byte)1);
        map_.put((byte)0, Fighter.BACK);
        map_.put((byte)1, Fighter.BACK);
        actions_.add(map_);
        CustList<PkTrainer> foes_;
        foes_ = new CustList<PkTrainer>();
        PkTrainer foe_;
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        assertEq(4, pseudoFight_.getPlayerFighters().size());
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(PTITARD,pseudoFighter_.getName());
        assertEq(3,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("3/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(0, pseudoFighter_.getMoves().size());
        assertEq(0, pseudoFighter_.getAbilities().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(26, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(27, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(2, pseudoFighter_.getFoes().size());
        assertTrue(pseudoFighter_.getFoes().containsObj((byte) 0));
        assertTrue(pseudoFighter_.getFoes().containsObj((byte) 1));
        assertTrue(pseudoFighter_.isFront());
        assertEq(0, pseudoFighter_.getEvolutions().size());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(PTITARD,pseudoFighter_.getName());
        assertEq(3,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("3/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(0, pseudoFighter_.getMoves().size());
        assertEq(0, pseudoFighter_.getAbilities().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(26, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(27, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(2, pseudoFighter_.getFoes().size());
        assertTrue(pseudoFighter_.getFoes().containsObj((byte) 0));
        assertTrue(pseudoFighter_.getFoes().containsObj((byte) 1));
        assertTrue(pseudoFighter_.isFront());
        assertEq(0, pseudoFighter_.getEvolutions().size());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(PTITARD,pseudoFighter_.getName());
        assertEq(3,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("3/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(0, pseudoFighter_.getMoves().size());
        assertEq(0, pseudoFighter_.getAbilities().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(26, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(27, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        assertEq(0, pseudoFighter_.getEvolutions().size());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(PTITARD,pseudoFighter_.getName());
        assertEq(3,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("3/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(0, pseudoFighter_.getMoves().size());
        assertEq(0, pseudoFighter_.getAbilities().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(26, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(27, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        assertEq(0, pseudoFighter_.getEvolutions().size());
        assertEq(4, pseudoFight_.getFoes().size());
        PseudoFoeFighter pseudoFoe_;
        pseudoFoe_ = pseudoFight_.getFoes().get(0);
        assertEq(TARTARD,pseudoFoe_.getName());
        assertEq(10,pseudoFoe_.getLevel());
        assertTrue(!pseudoFoe_.isFought());
        pseudoFoe_ = pseudoFight_.getFoes().get(1);
        assertEq(TARTARD,pseudoFoe_.getName());
        assertEq(10,pseudoFoe_.getLevel());
        assertTrue(!pseudoFoe_.isFought());
        pseudoFoe_ = pseudoFight_.getFoes().get(2);
        assertEq(TARTARD,pseudoFoe_.getName());
        assertEq(10,pseudoFoe_.getLevel());
        assertTrue(!pseudoFoe_.isFought());
        pseudoFoe_ = pseudoFight_.getFoes().get(3);
        assertEq(TARTARD,pseudoFoe_.getName());
        assertEq(10,pseudoFoe_.getLevel());
        assertTrue(!pseudoFoe_.isFought());
        assertEq(2, pseudoFight_.getMult());
        assertEq(2, pseudoFight_.getActions().size());
        assertEq(4, pseudoFight_.getActions().first().size());
        assertEq(0, pseudoFight_.getActions().first().getVal((byte) 0));
        assertEq(1, pseudoFight_.getActions().first().getVal((byte) 1));
        assertEq(Fighter.BACK, pseudoFight_.getActions().first().getVal((byte) 2));
        assertEq(Fighter.BACK, pseudoFight_.getActions().first().getVal((byte) 3));
        assertEq(4, pseudoFight_.getActions().last().size());
        assertEq(0, pseudoFight_.getActions().last().getVal((byte) 2));
        assertEq(1, pseudoFight_.getActions().last().getVal((byte) 3));
        assertEq(Fighter.BACK, pseudoFight_.getActions().last().getVal((byte) 0));
        assertEq(Fighter.BACK, pseudoFight_.getActions().last().getVal((byte) 1));
    }

    private static PseudoFight simulation1(DataBase _data) {
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        CustList<PokemonPlayer> team_;
        team_ = new CustList<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        CustList<CustList<NameLevel>> evolutions_;
        evolutions_ = new CustList<CustList<NameLevel>>();
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        ByteMap<Byte> map_;
        map_ = new ByteMap<Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, (byte)1);
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        CustList<ByteMap<Byte>> actions_;
        actions_ = new CustList<ByteMap<Byte>>();
        actions_.add(map_);
        map_ = new ByteMap<Byte>();
        map_.put((byte)2, (byte)0);
        map_.put((byte)3, (byte)1);
        map_.put((byte)0, Fighter.BACK);
        map_.put((byte)1, Fighter.BACK);
        actions_.add(map_);
        CustList<PkTrainer> foes_;
        foes_ = new CustList<PkTrainer>();
        PkTrainer foe_;
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        return pseudoFight_;
    }

    @Test
    public void rateWonPoint1Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        Rate rate_ = pseudoFight_.rateWonPoint((byte) 0,(byte) 0, diff_, data_);
        assertEq(Rate.one(), rate_);
    }

    @Test
    public void fightersWearingExpObject1Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        playerFighters_.add((byte) 2);
        playerFighters_.add((byte) 3);
        Bytes fightersExpObj_ = pseudoFight_.fightersWearingExpObject(playerFighters_, data_);
        assertEq(1, fightersExpObj_.size());
        assertEq(3, fightersExpObj_.first());
    }

    @Test
    public void addExp1Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        fightersExpObj_.add((byte) 3);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 0, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("2775/2"),pseudoFight_.getPlayerFighters().get(0).getWonExp());
    }

    @Test
    public void addExp2Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        fightersExpObj_.add((byte) 3);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 3, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("2775"),pseudoFight_.getPlayerFighters().get(3).getWonExp());
    }

    @Test
    public void addExp3Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        fightersExpObj_.add((byte) 3);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 1, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("8325/4"),pseudoFight_.getPlayerFighters().get(1).getWonExp());
    }

    @Test
    public void addExp4Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        fightersExpObj_.add((byte) 3);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 2, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("0"),pseudoFight_.getPlayerFighters().get(2).getWonExp());
    }

    @Test
    public void addExp5Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 0, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("2775"),pseudoFight_.getPlayerFighters().get(0).getWonExp());
    }

    @Test
    public void addExp6Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        Bytes fightersExpObj_;
        fightersExpObj_ = new Bytes();
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExp((byte) 0, playerFighters_, fightersExpObj_,(byte) 0, new Rate("5550"), diff_, data_);
        assertEq(new Rate("0"),pseudoFight_.getPlayerFighters().get(0).getWonExp());
    }

    @Test
    public void addExpFighters1Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExpFighters(playerFighters_, (byte) 0, diff_, data_);
        assertEq(new Rate("2775/2"),pseudoFight_.getPlayerFighters().get(0).getWonExp());
        assertEq(new Rate("8325/4"),pseudoFight_.getPlayerFighters().get(1).getWonExp());
        assertEq(new Rate("0"),pseudoFight_.getPlayerFighters().get(2).getWonExp());
        assertEq(new Rate("2775"),pseudoFight_.getPlayerFighters().get(3).getWonExp());
    }

    @Test
    public void addExpFighters2Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        pseudoFight_.getPlayerFighters().get(3).setLevel((short) 100);
        Bytes playerFighters_;
        playerFighters_ = new Bytes();
        playerFighters_.add((byte) 0);
        playerFighters_.add((byte) 1);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.addExpFighters(playerFighters_, (byte) 0, diff_, data_);
        assertEq(new Rate("8325/2"),pseudoFight_.getPlayerFighters().get(0).getWonExp());
        assertEq(new Rate("19425/4"),pseudoFight_.getPlayerFighters().get(1).getWonExp());
        assertEq(new Rate("2775"),pseudoFight_.getPlayerFighters().get(2).getWonExp());
        assertEq(new Rate("0"),pseudoFight_.getPlayerFighters().get(3).getWonExp());
    }

    @Test
    public void presimulateFight1Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation1(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.presimulateFight(diff_, data_);
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(52,pseudoFighter_.getLevel());
        assertEq(NULL_REF,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(2, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        StringList moves_;
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(2, pseudoFighter_.getAbilities().size());
        StringList abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(64,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("77"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(2, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(2, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(64, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(64, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(52,pseudoFighter_.getLevel());
        assertEq(PLAQUE_DRACO,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(2, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().first().size());
        assertEq(2, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().last();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().first().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(MULTI_EXP,pseudoFighter_.getItem());
        assertEq(new Rate("169/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("8325"), pseudoFighter_.getWonExp());
        assertEq(2, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(2, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(74, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
    }

    private static PseudoFight simulation2(DataBase _data) {
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        CustList<PokemonPlayer> team_;
        team_ = new CustList<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        CustList<CustList<NameLevel>> evolutions_;
        evolutions_ = new CustList<CustList<NameLevel>>();
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        ByteMap<Byte> map_;
        map_ = new ByteMap<Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, (byte)1);
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        CustList<ByteMap<Byte>> actions_;
        actions_ = new CustList<ByteMap<Byte>>();
        actions_.add(map_);
        map_ = new ByteMap<Byte>();
        map_.put((byte)2, (byte)0);
        map_.put((byte)3, (byte)1);
        map_.put((byte)0, Fighter.BACK);
        map_.put((byte)1, Fighter.BACK);
        actions_.add(map_);
        map_ = new ByteMap<Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, Fighter.BACK);
        map_.put((byte)2, (byte)1);
        map_.put((byte)3, Fighter.BACK);
        actions_.add(map_);
        CustList<PkTrainer> foes_;
        foes_ = new CustList<PkTrainer>();
        PkTrainer foe_;
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        return pseudoFight_;
    }

    @Test
    public void presimulateFight2Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation2(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.presimulateFight(diff_, data_);
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(NULL_REF,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("24975/2"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        StringList moves_;
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(1, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(3, pseudoFighter_.getAbilities().size());
        StringList abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("77"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("11100"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(64, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(PLAQUE_DRACO,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("24975/2"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().get(1).size());
        moves_ = pseudoFighter_.getMoves().get(1);
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().first().size());
        assertEq(1, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().get(1);
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(0, pseudoFighter_.getAbilities().first().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(MULTI_EXP,pseudoFighter_.getItem());
        assertEq(new Rate("169/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(74, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
    }

    /*
    private PseudoFight simulation3() {
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        List<PokemonPlayer> team_;
        team_ = new List<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        List<List<NameLevel>> evolutions_;
        evolutions_ = new List<List<NameLevel>>();
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        Map<Byte,Byte> map_;
        map_ = new Map<Byte,Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, (byte)1);
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        List<Map<Byte,Byte>> actions_;
        actions_ = new List<Map<Byte,Byte>>();
        actions_.add(map_);
        map_ = new Map<Byte,Byte>();
        map_.put((byte)2, (byte)0);
        map_.put((byte)3, new Pair<>((byte)1,(byte)2));
        map_.put((byte)0, Fighter.BACK);
        map_.put((byte)1, Fighter.BACK);
        actions_.add(map_);
        map_ = new Map<Byte,Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, Fighter.BACK);
        map_.put((byte)2, (byte)1);
        map_.put((byte)3, Fighter.BACK);
        actions_.add(map_);
        List<PokemonTrainer> foes_;
        foes_ = new List<PkTrainer>();
        PokemonTrainer foe_;
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        return pseudoFight_;
    }

    @Test
    public void presimulateFight3Test() {
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation3();
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.presimulateFight(diff_, data_);
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(NULL_REF,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("24975/2"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        StringList moves_;
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(1, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(3, pseudoFighter_.getAbilities().size());
        StringList abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("77"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("11100"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(64, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(PLAQUE_DRACO,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("24975/2"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().get(1).size());
        moves_ = pseudoFighter_.getMoves().get(1);
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().first().size());
        assertEq(1, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().get(1);
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(0, pseudoFighter_.getAbilities().first().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(100,pseudoFighter_.getLevel());
        assertEq(MULTI_EXP,pseudoFighter_.getItem());
        assertEq(new Rate("169/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(3, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(0, pseudoFighter_.getMoves().get(1).size());
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(3, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(0, pseudoFighter_.getAbilities().get(1).size());
        assertEq(0, pseudoFighter_.getAbilities().last().size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(74, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(100, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
    }

    private PseudoFight simulation4() {
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        List<PokemonPlayer> team_;
        team_ = new List<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, data_);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        List<List<NameLevel>> evolutions_;
        evolutions_ = new List<List<NameLevel>>();
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        evolutions_.add(new List<NameLevel>());
        evolutions_.last().add(new Pair<>(TETARTE,(short)26));
        evolutions_.last().add(new Pair<>(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        Map<Byte,Pair<Byte,Byte>> map_;
        map_ = new Map<Byte,Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, new Pair<>((byte)1,(byte)2));
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        List<Map<Byte,Pair<Byte,Byte>>> actions_;
        actions_ = new List<Map<Byte,Byte>>();
        actions_.add(map_);
        List<PokemonTrainer> foes_;
        foes_ = new List<PkTrainer>();
        PokemonTrainer foe_;
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PokemonTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        return pseudoFight_;
    }

    @Test
    public void presimulateFight4Test() {
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation4();
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.presimulateFight(diff_, data_);
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(43,pseudoFighter_.getLevel());
        assertEq(NULL_REF,pseudoFighter_.getItem());
        assertEq(new Rate("23/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        StringList moves_;
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        StringList abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(43, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(43, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(52,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(52, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(43,pseudoFighter_.getLevel());
        assertEq(PLAQUE_DRACO,pseudoFighter_.getItem());
        assertEq(new Rate("23/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().last().size());
        moves_ = pseudoFighter_.getMoves().last();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().last();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(43, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(43, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(74,pseudoFighter_.getLevel());
        assertEq(MULTI_EXP,pseudoFighter_.getItem());
        assertEq(new Rate("169/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(moves_.containsObj(TOURNIQUET));
        assertTrue(moves_.containsObj(ECUME));
        assertTrue(moves_.containsObj(HYPNOSE));
        assertTrue(moves_.containsObj(PISTOLET_A_O));
        assertTrue(moves_.containsObj(TORGNOLES));
        assertTrue(moves_.containsObj(DANSE_PLUIE));
        assertTrue(moves_.containsObj(PLAQUAGE));
        assertTrue(moves_.containsObj(BULLES_D_O));
        assertTrue(moves_.containsObj(TIR_DE_BOUE));
        assertTrue(moves_.containsObj(COGNOBIDON));
        assertTrue(moves_.containsObj(REVEIL_FORCE));
        assertTrue(moves_.containsObj(HYDROCANON));
        assertTrue(moves_.containsObj(BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(abilities_.containsObj(MOITEUR));
        assertTrue(abilities_.containsObj(ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getFirst());
        assertEq(74, pseudoFighter_.getEvoLevels().first().getSecond());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getFirst());
        assertEq(74, pseudoFighter_.getEvoLevels().last().getSecond());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
    }
    */

    private static PseudoFight simulation5(DataBase _data) {
        Pokemon pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        PokemonPlayer pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        CustList<PokemonPlayer> team_;
        team_ = new CustList<PokemonPlayer>();
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        pk_ = new PokemonPlayer(pokemon_, _data);
        pk_.setWonExpSinceLastLevel(new Rate("3/2"));
        team_.add(pk_);
        CustList<CustList<NameLevel>> evolutions_;
        evolutions_ = new CustList<CustList<NameLevel>>();
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        evolutions_.add(new CustList<NameLevel>());
        evolutions_.last().add(new NameLevel(TETARTE,(short)26));
        evolutions_.last().add(new NameLevel(TARTARD,(short)27));
        PseudoPlayer pseudoPlayer_;
        pseudoPlayer_ = new PseudoPlayer(team_, evolutions_);
        ByteMap<Byte> map_;
        map_ = new ByteMap<Byte>();
        map_.put((byte)0, (byte)0);
        map_.put((byte)1, (byte)1);
        map_.put((byte)2, Fighter.BACK);
        map_.put((byte)3, Fighter.BACK);
        CustList<ByteMap<Byte>> actions_;
        actions_ = new CustList<ByteMap<Byte>>();
        actions_.add(map_);
        CustList<PkTrainer> foes_;
        foes_ = new CustList<PkTrainer>();
        PkTrainer foe_;
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        foe_ = new PkTrainer();
        foe_.setName(TARTARD);
        foe_.setAbility(ABSORB_EAU);
        foe_.setLevel((short) 10);
        foe_.setItem(NULL_REF);
        foe_.setMoves(new StringList(CHARGE));
        foes_.add(foe_);
        PseudoFight pseudoFight_;
        pseudoFight_ = new PseudoFight(foes_, pseudoPlayer_, 2, actions_);
        return pseudoFight_;
    }

    @Test
    public void presimulateFight5Test() {
        DataBase data_ = initDb();
        PseudoFight pseudoFight_;
        pseudoFight_ = simulation5(data_);
        pseudoFight_.getPlayerFighters().get(0).setItem(NULL_REF);
        pseudoFight_.getPlayerFighters().get(1).setItem(OEUF_CHANCE);
        pseudoFight_.getPlayerFighters().get(2).setItem(PLAQUE_DRACO);
        pseudoFight_.getPlayerFighters().get(3).setItem(MULTI_EXP);
        Difficulty diff_ = new Difficulty();
        diff_.setDiffWinningExpPtsFight(DifficultyWinPointsFight.DIFFICILE);
        diff_.setWinTrainerExp(new Rate("3/2"));
        diff_.setRateWinningExpPtsFight(Rate.one());
        pseudoFight_.presimulateFight(diff_, data_);
        PseudoPlayerFighter pseudoFighter_;
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(0);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(52,pseudoFighter_.getLevel());
        assertEq(NULL_REF,pseudoFighter_.getItem());
        assertEq(new Rate("163/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        StringList moves_;
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        StringList abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(52, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(1);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(64,pseudoFighter_.getLevel());
        assertEq(OEUF_CHANCE,pseudoFighter_.getItem());
        assertEq(new Rate("77"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(64, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(64, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(2);
        assertEq(PTITARD,pseudoFighter_.getName());
        assertEq(3,pseudoFighter_.getLevel());
        assertEq(PLAQUE_DRACO,pseudoFighter_.getItem());
        assertEq(new Rate("3/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(0, pseudoFighter_.getMoves().last().size());
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().last();
        assertEq(0, abilities_.size());
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(26, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(27, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
        pseudoFighter_ = pseudoFight_.getPlayerFighters().get(3);
        assertEq(TETARTE,pseudoFighter_.getName());
        assertEq(74,pseudoFighter_.getLevel());
        assertEq(MULTI_EXP,pseudoFighter_.getItem());
        assertEq(new Rate("169/2"), pseudoFighter_.getWonExpSinceLastLevel());
        assertEq(new Rate("0"), pseudoFighter_.getWonExp());
        assertEq(1, pseudoFighter_.getMoves().size());
        assertEq(13, pseudoFighter_.getMoves().first().size());
        moves_ = pseudoFighter_.getMoves().first();
        assertTrue(StringUtil.contains(moves_, TOURNIQUET));
        assertTrue(StringUtil.contains(moves_, ECUME));
        assertTrue(StringUtil.contains(moves_, HYPNOSE));
        assertTrue(StringUtil.contains(moves_, PISTOLET_A_O));
        assertTrue(StringUtil.contains(moves_, TORGNOLES));
        assertTrue(StringUtil.contains(moves_, DANSE_PLUIE));
        assertTrue(StringUtil.contains(moves_, PLAQUAGE));
        assertTrue(StringUtil.contains(moves_, BULLES_D_O));
        assertTrue(StringUtil.contains(moves_, TIR_DE_BOUE));
        assertTrue(StringUtil.contains(moves_, COGNOBIDON));
        assertTrue(StringUtil.contains(moves_, REVEIL_FORCE));
        assertTrue(StringUtil.contains(moves_, HYDROCANON));
        assertTrue(StringUtil.contains(moves_, BOUE_BOMBE));
        assertEq(1, pseudoFighter_.getAbilities().size());
        abilities_ = pseudoFighter_.getAbilities().first();
        assertEq(2, abilities_.size());
        assertTrue(StringUtil.contains(abilities_, MOITEUR));
        assertTrue(StringUtil.contains(abilities_, ABSORB_EAU));
        assertEq(2, pseudoFighter_.getEvoLevels().size());
        assertEq(TETARTE, pseudoFighter_.getEvoLevels().first().getName());
        assertEq(74, pseudoFighter_.getEvoLevels().first().getLevel());
        assertEq(TARTARD, pseudoFighter_.getEvoLevels().last().getName());
        assertEq(74, pseudoFighter_.getEvoLevels().last().getLevel());
        assertEq(0, pseudoFighter_.getFoes().size());
        assertTrue(!pseudoFighter_.isFront());
    }
}
