package cards.president;

import cards.president.comparators.GameStrengthCardPresidentComparator;
import cards.president.comparators.HandPresidentRepartition;
import cards.president.enumerations.CardPresident;
import cards.president.enumerations.EqualtyPlaying;
import code.util.*;
import code.util.CustList;
import org.junit.Test;

public final class GamePresidentCommonTest extends EquallablePresidentUtil {
    @Test
    public void getCardsSortedByLengthSortedByStrengthReduceTest() {
        RulesPresident r_ = new RulesPresident();
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.CLUB_1);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.CLUB_3);
        CustList<HandPresident> hands_ = GamePresidentCommon.getCardsSortedByLengthSortedByStrengthReduce(false, r_, h_);
        assertEq(4,hands_.size());
        assertEq(2, hands_.get(0).total());
        assertSame(CardPresident.CLUB_3, hands_.get(0).carte(0));
        assertSame(CardPresident.HEART_KING, hands_.get(0).carte(1));
        assertEq(4, hands_.get(1).total());
        assertSame(CardPresident.HEART_10, hands_.get(1).carte(0));
        assertSame(CardPresident.CLUB_10, hands_.get(1).carte(1));
        assertSame(CardPresident.HEART_1, hands_.get(1).carte(2));
        assertSame(CardPresident.CLUB_1, hands_.get(1).carte(3));
        assertEq(0, hands_.get(2).total());
        assertEq(0, hands_.get(3).total());
    }
    @Test
    public void getPlayedCardsByStrength1Test() {
        int  nb_ = 4;
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, trs_, pr_);
        assertEq(13, pl_.size());
        assertSame(CardPresident.HEART_2, pl_.getKey(0));
        assertEq(1, pl_.getValue(0));
        assertSame(CardPresident.HEART_1, pl_.getKey(1));
        assertEq(0, pl_.getValue(1));
        assertSame(CardPresident.HEART_KING, pl_.getKey(2));
        assertEq(0, pl_.getValue(2));
        assertSame(CardPresident.HEART_QUEEN, pl_.getKey(3));
        assertEq(0, pl_.getValue(3));
        assertSame(CardPresident.HEART_JACK, pl_.getKey(4));
        assertEq(0, pl_.getValue(4));
        assertSame(CardPresident.HEART_10, pl_.getKey(5));
        assertEq(0, pl_.getValue(5));
        assertSame(CardPresident.HEART_9, pl_.getKey(6));
        assertEq(0, pl_.getValue(6));
        assertSame(CardPresident.HEART_8, pl_.getKey(7));
        assertEq(0, pl_.getValue(7));
        assertSame(CardPresident.HEART_7, pl_.getKey(8));
        assertEq(0, pl_.getValue(8));
        assertSame(CardPresident.CLUB_6, pl_.getKey(9));
        assertEq(3, pl_.getValue(9));
        assertSame(CardPresident.HEART_5, pl_.getKey(10));
        assertEq(0, pl_.getValue(10));
        assertSame(CardPresident.CLUB_4, pl_.getKey(11));
        assertEq(1, pl_.getValue(11));
        assertSame(CardPresident.CLUB_3, pl_.getKey(12));
        assertEq(2, pl_.getValue(12));
    }
    @Test
    public void getPlayedCardsByStrength2Test() {
        int  nb_ = 4;
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, trs_, pr_);
        assertEq(13, pl_.size());
        assertSame(CardPresident.HEART_2, pl_.getKey(0));
        assertEq(1, pl_.getValue(0));
        assertSame(CardPresident.HEART_1, pl_.getKey(1));
        assertEq(0, pl_.getValue(1));
        assertSame(CardPresident.HEART_KING, pl_.getKey(2));
        assertEq(0, pl_.getValue(2));
        assertSame(CardPresident.HEART_QUEEN, pl_.getKey(3));
        assertEq(0, pl_.getValue(3));
        assertSame(CardPresident.HEART_JACK, pl_.getKey(4));
        assertEq(0, pl_.getValue(4));
        assertSame(CardPresident.HEART_10, pl_.getKey(5));
        assertEq(0, pl_.getValue(5));
        assertSame(CardPresident.HEART_9, pl_.getKey(6));
        assertEq(0, pl_.getValue(6));
        assertSame(CardPresident.HEART_8, pl_.getKey(7));
        assertEq(0, pl_.getValue(7));
        assertSame(CardPresident.HEART_7, pl_.getKey(8));
        assertEq(0, pl_.getValue(8));
        assertSame(CardPresident.CLUB_6, pl_.getKey(9));
        assertEq(4, pl_.getValue(9));
        assertSame(CardPresident.HEART_5, pl_.getKey(10));
        assertEq(0, pl_.getValue(10));
        assertSame(CardPresident.CLUB_4, pl_.getKey(11));
        assertEq(1, pl_.getValue(11));
        assertSame(CardPresident.CLUB_3, pl_.getKey(12));
        assertEq(3, pl_.getValue(12));
    }
    @Test
    public void getNotFullPlayedCardsByStrengthTest() {
        int  nb_ = 4;
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        assertEq(12, pl_.size());
        assertSame(CardPresident.HEART_2, pl_.getKey(0));
        assertEq(1, pl_.getValue(0));
        assertSame(CardPresident.HEART_1, pl_.getKey(1));
        assertEq(0, pl_.getValue(1));
        assertSame(CardPresident.HEART_KING, pl_.getKey(2));
        assertEq(0, pl_.getValue(2));
        assertSame(CardPresident.HEART_QUEEN, pl_.getKey(3));
        assertEq(0, pl_.getValue(3));
        assertSame(CardPresident.HEART_JACK, pl_.getKey(4));
        assertEq(0, pl_.getValue(4));
        assertSame(CardPresident.HEART_10, pl_.getKey(5));
        assertEq(0, pl_.getValue(5));
        assertSame(CardPresident.HEART_9, pl_.getKey(6));
        assertEq(0, pl_.getValue(6));
        assertSame(CardPresident.HEART_8, pl_.getKey(7));
        assertEq(0, pl_.getValue(7));
        assertSame(CardPresident.HEART_7, pl_.getKey(8));
        assertEq(0, pl_.getValue(8));
        assertSame(CardPresident.HEART_5, pl_.getKey(9));
        assertEq(0, pl_.getValue(9));
        assertSame(CardPresident.CLUB_4, pl_.getKey(10));
        assertEq(1, pl_.getValue(10));
        assertSame(CardPresident.CLUB_3, pl_.getKey(11));
        assertEq(3, pl_.getValue(11));
    }
    @Test
    public void dominantGroup1Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_2.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,1,pl_,rep_));
    }
    @Test
    public void dominantGroup2Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_1.strength(false),false);
        assertTrue(!GamePresidentCommon.dominantGroup(false,r_,group_,1,pl_,rep_));
    }
    @Test
    public void dominantGroup3Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(!GamePresidentCommon.dominantGroup(false,r_,group_,1,pl_,rep_));
    }
    @Test
    public void dominantGroup4Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        HandPresident p_ = new HandPresident();
        p_.ajouterCartes(HandPresident.pileBase());
        p_.supprimerCartes(cur_);
        HandPresident rem_ = new HandPresident();
        rem_.ajouter(CardPresident.CLUB_4);
        p_.supprimerCartes(rem_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, p_);
        HandPresidentRepartition tree_;
        tree_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        GamePresidentCommon.filter(4,pl_,tree_);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,2,tree_,rep_));
    }
    @Test
    public void dominantGroup5Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        r_.setEqualty(EqualtyPlaying.FORBIDDEN);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        HandPresident p_ = new HandPresident();
        p_.ajouterCartes(HandPresident.pileBase());
        p_.supprimerCartes(cur_);
        HandPresident rem_ = new HandPresident();
        rem_.ajouter(CardPresident.CLUB_4);
        p_.supprimerCartes(rem_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, p_);
        HandPresidentRepartition tree_;
        tree_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        GamePresidentCommon.filter(4,pl_,tree_);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,2,tree_,rep_));
    }
    @Test
    public void dominantGroup6Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        r_.setEqualty(EqualtyPlaying.FORBIDDEN);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        HandPresident p_ = new HandPresident();
        p_.ajouterCartes(HandPresident.pileBase());
        p_.supprimerCartes(cur_);
        HandPresident rem_ = new HandPresident();
        rem_.ajouter(CardPresident.CLUB_4);
        p_.supprimerCartes(rem_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, p_);
        HandPresidentRepartition tree_;
        tree_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        GamePresidentCommon.filter(4,pl_,tree_);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,2,tree_,rep_));
    }
    @Test
    public void dominantGroup7Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        r_.setEqualty(EqualtyPlaying.FORBIDDEN);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        HandPresident p_ = new HandPresident();
        p_.ajouterCartes(HandPresident.pileBase());
        p_.supprimerCartes(cur_);
        HandPresident rem_ = new HandPresident();
        rem_.ajouter(CardPresident.CLUB_4);
        rem_.ajouter(CardPresident.HEART_3);
        rem_.ajouter(CardPresident.SPADE_3);
        p_.supprimerCartes(rem_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, p_);
        HandPresidentRepartition tree_;
        tree_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        GamePresidentCommon.filter(4,pl_,tree_);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,2,tree_,rep_));
    }
    @Test
    public void dominantGroup8Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        HandPresident p_ = new HandPresident();
        p_.ajouterCartes(HandPresident.pileBase());
        p_.supprimerCartes(cur_);
        HandPresident rem_ = new HandPresident();
        rem_.ajouter(CardPresident.CLUB_4);
        rem_.ajouter(CardPresident.HEART_3);
        rem_.ajouter(CardPresident.SPADE_3);
        p_.supprimerCartes(rem_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getPlayedCardsByStrength(false, p_);
        HandPresidentRepartition tree_;
        tree_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        GamePresidentCommon.filter(4,pl_,tree_);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_3.strength(false),false);
        assertTrue(!GamePresidentCommon.dominantGroup(false,r_,group_,2,tree_,rep_));
    }
    @Test
    public void dominantGroup9Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_3);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_7);
        pr_.ajouter(h_);
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        IntTreeMap<HandPresident> rep_ = cur_.getCardsByStrength(false);
        HandPresident group_ = cur_.getCardsByStrength(CardPresident.DIAMOND_1.strength(false),false);
        assertTrue(GamePresidentCommon.dominantGroup(false,r_,group_,3,pl_,rep_));
    }
    @Test
    public void dominantHand1Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false, r_, cur_, pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand2Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(4,out_.total());
    }
    @Test
    public void dominantHand3Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand4Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand5Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(4,out_.total());
    }
    @Test
    public void dominantHand6Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_4);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_4);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand7Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(4,out_.total());
        assertTrue(out_.containsCards(cur_.getCardsByStrength(CardPresident.DIAMOND_5.strength(false),false)));
    }
    @Test
    public void dominantHand8Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.SPADE_9);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand9Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_1);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand10Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(1,out_.total());
    }
    @Test
    public void dominantHand11Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.HEART_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand12Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.HEART_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand13Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.HEART_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(2,out_.total());
    }
    @Test
    public void dominantHand14Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.HEART_4);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void dominantHand15Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.HEART_4);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(1,out_.total());
    }
    @Test
    public void dominantHand16Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.HEART_4);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(1,out_.total());
        assertTrue(out_.containsCards(cur_.getCardsByStrength(CardPresident.DIAMOND_5.strength(false),false)));
    }
    @Test
    public void dominantHand17Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(4,out_.total());
        assertTrue(out_.containsCards(cur_.getCardsByStrength(CardPresident.DIAMOND_5.strength(false),false)));
    }
    @Test
    public void dominantHand18Test() {
        int  nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident t_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        t_.ajouter(h_);
        trs_.add(t_);
        t_ = new TrickPresident(t_.getRamasseur(nb_));
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_4);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        t_.ajouter(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        t_.ajouter(h_);
        trs_.add(t_);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresidentRepartition pl_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,4);
        HandPresident out_ = GamePresidentCommon.dominantHand(false,r_,cur_,pl_);
        assertEq(0,out_.total());
    }
    @Test
    public void playHand1Test() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(0);
        HandPresident out_ = GamePresidentCommon.playHand(CardPresident.DIAMOND_KING, 2, cur_, false, pr_);
        assertEq(2,out_.total());
        assertSame(CardPresident.HEART_KING,out_.carte(0));
        assertSame(CardPresident.CLUB_KING,out_.carte(1));
    }
    @Test
    public void playHand2Test() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(0);
        HandPresident out_ = GamePresidentCommon.playHand(CardPresident.DIAMOND_KING, 1,cur_,false,pr_);
        assertEq(1,out_.total());
        assertSame(CardPresident.HEART_KING,out_.carte(0));
    }
    @Test
    public void playHand3Test() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        pr_.ajouter(h_);
        HandPresident out_ =  GamePresidentCommon.playHand(CardPresident.DIAMOND_KING, 1,cur_,false,pr_);
        assertEq(1,out_.total());
        assertSame(CardPresident.HEART_KING,out_.carte(0));
    }
    @Test
    public void playHand4Test() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.DIAMOND_3);
        pr_.ajouter(h_);
        HandPresident out_ = GamePresidentCommon.playHand(CardPresident.DIAMOND_KING, 1,cur_,false,pr_);
        assertEq(2,out_.total());
        assertSame(CardPresident.HEART_KING,out_.carte(0));
        assertSame(CardPresident.CLUB_KING,out_.carte(1));
    }
}
