package cards.president;

import cards.president.comparators.GameStrengthCardPresidentComparator;
import cards.president.comparators.HandPresidentRepartition;
import cards.president.enumerations.CardPresident;
import cards.president.enumerations.Playing;
import code.util.CustList;
import org.junit.Test;

public final class GamePresidentProgTest extends CommonGamePresident {

    @Test
    public void getDefaultCards1Test() {
        byte nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident t_ = new TrickPresident((byte)0);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresident out_ = GamePresidentProg.getDefaultCards(playable_,pr_,false);
        assertEq(3, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.DIAMOND_1.strength(false), false).total());
    }
    @Test
    public void getDefaultCards2Test() {
        byte nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident t_ = new TrickPresident((byte)0);
        TrickPresident pr_ = new TrickPresident(t_.getRamasseur(nb_));
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresident out_ = GamePresidentProg.getDefaultCards(playable_,pr_,false);
        assertEq(3, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.SPADE_7.strength(false), false).total());
    }
    @Test
    public void getNotEmptyWorstTest() {
        byte nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident((byte)0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        CustList<HandPresident> out_ = GamePresidentProg.getNotEmptyWorst(playable_,pr_,false,GameStrengthCardPresidentComparator.CARD_AVG_STRENGTH);
        assertEq(1, out_.size());
        assertEq(3, out_.first().total());
        assertEq(out_.first().total(), out_.first().getCardsByStrength(CardPresident.CLUB_5.strength(false), false).total());
    }
    @Test
    public void getHandPresidentsTest() {
        byte nb_ = 4;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident((byte)0);
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        CustList<HandPresident> out_ = GamePresidentProg.getHandPresidents(playable_,pr_,false);
        assertEq(1, out_.size());
        assertEq(3, out_.first().total());
        assertEq(out_.first().total(), out_.first().getCardsByStrength(CardPresident.CLUB_5.strength(false), false).total());
    }
    @Test
    public void tryPlayWhenAllPossible1Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_, pr_, false, r_, possibleRep_);
        assertEq(2, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.CLUB_2.strength(false), false).total());
    }
    @Test
    public void tryPlayWhenAllPossible2Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.SPADE_JACK);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_, pr_, false, r_, possibleRep_);
        assertEq(2, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.CLUB_JACK.strength(false), false).total());
    }
    @Test
    public void tryPlayWhenAllPossible3Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_1);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        possibleRep_.put(CardPresident.DIAMOND_2, (byte) 3);
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_, pr_, false, r_, possibleRep_);
        assertEq(2, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.CLUB_1.strength(false), false).total());
    }
    @Test
    public void tryPlayWhenAllPossible4Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_, pr_, false, r_, possibleRep_);
        assertEq(0, out_.total());
    }
    @Test
    public void tryPlayWhenAllPossible5Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        possibleRep_.put(CardPresident.CLUB_2, (byte) 0);
        possibleRep_.put(CardPresident.CLUB_1, (byte) 0);
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_, pr_, false, r_, possibleRep_);
        assertEq(0, out_.total());
    }
    @Test
    public void tryPlayWhenAllPossible6Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.SPADE_4);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_3);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.tryPlayWhenAllPossible(playable_,pr_,false,r_,possibleRep_);
        assertEq(0, out_.total());
    }
    @Test
    public void lastGroup1() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.SPADE_4);
        cur_.ajouter(CardPresident.HEART_4);
        HandPresident res_ = GamePresidentProg.lastGroup(cur_.getCardsByStrength(false), 1);
        assertEq(1, res_.total());
        assertEq(res_.total(), res_.getCardsByStrength(CardPresident.SPADE_5.strength(false), false).total());
    }
    @Test
    public void lastGroup2() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.SPADE_4);
        cur_.ajouter(CardPresident.HEART_4);
        HandPresident res_ = GamePresidentProg.lastGroup(cur_.getCardsByStrength(false), 3);
        assertEq(0, res_.total());
    }
    @Test
    public void lastGroup3() {
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.SPADE_4);
        cur_.ajouter(CardPresident.HEART_4);
        HandPresident res_ = GamePresidentProg.lastGroup(cur_.getCardsByStrength(false), 3);
        assertEq(3, res_.total());
        assertEq(res_.total(), res_.getCardsByStrength(CardPresident.DIAMOND_7.strength(false), false).total());
    }
    @Test
    public void progressTrick1Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        pr_.ajouter();
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(0,out_.total());
    }
    @Test
    public void progressTrick2Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        pr_.ajouter();
        pr_.ajouter();
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(2,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.DIAMOND_10.strength(g_.isReversed()), g_.isReversed()).total());
    }
    @Test
    public void progressTrick3Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_10);
        cur_.ajouter(CardPresident.HEART_10);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.CLUB_5);
        pr_.ajouter(h_);
        pr_.ajouter();
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(2,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.DIAMOND_9.strength(g_.isReversed()), g_.isReversed()).total());
    }
    @Test
    public void progressTrick4Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_10);
        cur_.ajouter(CardPresident.HEART_10);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.CLUB_5);
        pr_.ajouter(h_);
        pr_.ajouter();
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(2,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.HEART_7.strength(g_.isReversed()), g_.isReversed()).total());
    }
    @Test
    public void progressTrick5Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        r_.setHasToPlay(true);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        pr_.ajouter();
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(2,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.HEART_JACK.strength(g_.isReversed()), g_.isReversed()).total());
    }
    @Test
    public void progressTrick6Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.DIAMOND_7);
        h_.ajouter(CardPresident.CLUB_7);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        int nbMaxLen_ = r_.getNbStacks() * GamePresidentCommon.NB_SUITS;
        HandPresidentRepartition possibleRep_ = GamePresidentCommon.getNotFullPlayedCardsByStrength(false, trs_, pr_,nbMaxLen_);
        HandPresident out_ = GamePresidentProg.progressTrick(possibleRep_,playable_,cur_,pr_,false,r_);
        assertEq(4,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.SPADE_2.strength(false), false).total());
    }
    @Test
    public void progressTrick7Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.DIAMOND_7);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        possibleRep_.put(CardPresident.DIAMOND_2, (byte) 3);
        HandPresident out_ = GamePresidentProg.progressTrick(possibleRep_,playable_,cur_,pr_,false,r_);
        assertEq(3,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.SPADE_1.strength(false), false).total());
    }
    @Test
    public void progressTrick8Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.SPADE_4);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.progressTrick(possibleRep_,playable_,cur_,pr_,false,r_);
        assertEq(2,out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.SPADE_10.strength(false), false).total());
    }
    @Test
    public void progressTrick9Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.SPADE_1);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.progressTrick(possibleRep_,playable_,cur_,pr_,false,r_);
        assertEq(2, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.CLUB_2.strength(false), false).total());
    }
    @Test
    public void progressTrick10Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.SPADE_JACK);
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        HandPresident playable_ = GamePresidentCommon.getPlayable(cur_, Playing.CAN_PLAY, pr_, false, r_);
        HandPresidentRepartition possibleRep_ = new HandPresidentRepartition(new GameStrengthCardPresidentComparator(false, true));
        HandPresident out_ = GamePresidentProg.progressTrick(possibleRep_,playable_,cur_,pr_,false,r_);
        assertEq(2, out_.total());
        assertEq(out_.total(), out_.getCardsByStrength(CardPresident.SPADE_JACK.strength(false), false).total());
    }
    @Test
    public void progressTrick11Test() {
        byte nb_ = 4;
        byte dealer_ = 0;
        RulesPresident r_ = new RulesPresident(nb_);
        CustList<HandPresident> deal_ = new CustList<HandPresident>();
        HandPresident cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_2);
        cur_.ajouter(CardPresident.CLUB_2);
        cur_.ajouter(CardPresident.SPADE_2);
        cur_.ajouter(CardPresident.HEART_2);
        cur_.ajouter(CardPresident.HEART_KING);
        cur_.ajouter(CardPresident.CLUB_KING);
        cur_.ajouter(CardPresident.CLUB_10);
        cur_.ajouter(CardPresident.DIAMOND_10);
        cur_.ajouter(CardPresident.DIAMOND_5);
        cur_.ajouter(CardPresident.CLUB_5);
        cur_.ajouter(CardPresident.HEART_5);
        cur_.ajouter(CardPresident.SPADE_5);
        cur_.ajouter(CardPresident.DIAMOND_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_1);
        cur_.ajouter(CardPresident.CLUB_1);
        cur_.ajouter(CardPresident.SPADE_1);
        cur_.ajouter(CardPresident.HEART_1);
        cur_.ajouter(CardPresident.DIAMOND_QUEEN);
        cur_.ajouter(CardPresident.CLUB_QUEEN);
        cur_.ajouter(CardPresident.HEART_QUEEN);
        cur_.ajouter(CardPresident.SPADE_QUEEN);
        cur_.ajouter(CardPresident.DIAMOND_JACK);
        cur_.ajouter(CardPresident.SPADE_KING);
        cur_.ajouter(CardPresident.DIAMOND_KING);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_8);
        cur_.ajouter(CardPresident.CLUB_8);
        cur_.ajouter(CardPresident.SPADE_8);
        cur_.ajouter(CardPresident.HEART_8);
        cur_.ajouter(CardPresident.SPADE_JACK);
        cur_.ajouter(CardPresident.HEART_4);
        cur_.ajouter(CardPresident.SPADE_9);
        cur_.ajouter(CardPresident.HEART_9);
        cur_.ajouter(CardPresident.DIAMOND_6);
        cur_.ajouter(CardPresident.CLUB_6);
        cur_.ajouter(CardPresident.HEART_6);
        cur_.ajouter(CardPresident.SPADE_6);
        cur_.ajouter(CardPresident.SPADE_4);
        deal_.add(cur_);
        cur_ = new HandPresident();
        cur_.ajouter(CardPresident.DIAMOND_7);
        cur_.ajouter(CardPresident.CLUB_7);
        cur_.ajouter(CardPresident.SPADE_7);
        cur_.ajouter(CardPresident.HEART_7);
        cur_.ajouter(CardPresident.CLUB_JACK);
        cur_.ajouter(CardPresident.HEART_JACK);
        cur_.ajouter(CardPresident.CLUB_9);
        cur_.ajouter(CardPresident.DIAMOND_9);
        cur_.ajouter(CardPresident.DIAMOND_3);
        cur_.ajouter(CardPresident.CLUB_3);
        cur_.ajouter(CardPresident.HEART_3);
        cur_.ajouter(CardPresident.SPADE_3);
        cur_.ajouter(CardPresident.CLUB_4);
        deal_.add(cur_);
        CustList<TrickPresident> trs_ = new CustList<TrickPresident>();
        TrickPresident pr_ = new TrickPresident(r_.getSortedPlayersAfter(dealer_).first());
        HandPresident h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.HEART_10);
        pr_.ajouter(h_);
        GamePresident g_ = newGamePresident(r_, deal_, trs_, pr_, dealer_);
        GamePresidentProg gt_ = newGamePresidentProg(g_);
        HandPresident out_ = gt_.progressTrick();
        assertEq(0,out_.total());
    }
}
