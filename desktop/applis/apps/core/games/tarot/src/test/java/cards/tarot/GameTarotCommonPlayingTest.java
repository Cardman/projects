package cards.tarot;

import cards.consts.Suit;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.DealingTarot;
import cards.tarot.enumerations.Miseres;
import code.maths.Rate;
import code.util.*;
import org.junit.Test;

public final class GameTarotCommonPlayingTest extends CommonGameTarot {
    @Test
    public void appeleConnuDefenseur1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        faireConfiance(g_,(byte)4);
        assertTrue(playing_.appeleConnuDefenseur((byte) 3,new EnumMap<Suit, CustList<HandTarot>>()));
    }
    @Test
    public void appeleConnuDefenseur2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3,new EnumMap<Suit, CustList<HandTarot>>()));
    }
    @Test
    public void appeleConnuDefenseur3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        faireConfiance(g_,(byte)4);
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hands_ = new CustList<HandTarot>();
        hands_.add(new HandTarot());
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        faireConfiance(g_,(byte)4);
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hands_ = new CustList<HandTarot>();
        HandTarot takerHand_ = new HandTarot();
        takerHand_.ajouter(CardTarot.CLUB_QUEEN);
        hands_.add(takerHand_);
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hands_ = new CustList<HandTarot>();
        hands_.add(new HandTarot());
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        faireConfiance(g_,(byte)2);
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        assertTrue(playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void strictCouleursMaitres1Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres2Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_8);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres3Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres4Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(1, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
    }
    @Test
    public void strictCouleursMaitres5Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void couleursMaitres1Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres2Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_8);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres3Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres4Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres5Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void strictMaitreAtout1Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout2Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hand_.ajouter(CardTarot.TRUMP_4);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout3Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout4Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_21);
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout5Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout6Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout7Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout8Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void maitreAtout1Test() {
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }
    @Test
    public void maitreAtout2Test() {
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }
    @Test
    public void maitreAtout3Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout4Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_19);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout5Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout6Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout7Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        CustList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }

    @Test
    public void cartesRelativementMaitreEncours1Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours2Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours3Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours4Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours5Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours6Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours7Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(3, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
        assertEq(2, handsTarot_.get(2).total());
        assertTrue(handsTarot_.get(2).contient(CardTarot.TRUMP_2));
        assertTrue(handsTarot_.get(2).contient(CardTarot.TRUMP_1));
    }

    @Test
    public void cartesRelativementMaitreEncours8Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, CustList<HandTarot>> repSure_ = new EnumMap<Suit, CustList<HandTarot>>();
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(repPlayed_);
        Bytes players_ = new Bytes();
        players_.add((byte) 0);
        players_.add((byte) 1);
        CustList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        CustList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.TRUMP, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }
    @Test
    public void moyenneAtout1Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_21);
        hand_.ajouter(CardTarot.TRUMP_20);
        hand_.ajouter(CardTarot.TRUMP_12);
        hand_.ajouter(CardTarot.TRUMP_11);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        HandTarot repPlayed_ = played_.couleur(Suit.TRUMP);
        Rate rate_ = GameTarotCommonPlaying.moyenneAtout(curHand_, repPlayed_, rep_, (byte) 5);
        assertEq(new Rate("2"),rate_);
    }
    @Test
    public void moyenneAtout2Test() {
        EnumMap<Suit, CustList<HandTarot>> rep_ = new EnumMap<Suit, CustList<HandTarot>>();
        CustList<HandTarot> hypos_ = new CustList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new CustList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_21);
        hand_.ajouter(CardTarot.TRUMP_20);
        hand_.ajouter(CardTarot.TRUMP_12);
        hand_.ajouter(CardTarot.TRUMP_11);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        HandTarot repPlayed_ = played_.couleur(Suit.TRUMP);
        Rate rate_ = GameTarotCommonPlaying.moyenneAtout(curHand_, repPlayed_, rep_, (byte) 5);
        assertEq(new Rate("0"),rate_);
    }
    @Test
    public void coupesFranchesStrictesTest() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        trs_.add(t_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.coupesFranchesStrictes(trs_, curHand_.couleurs(), (byte) 0);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void cartesNonMaitressesTest() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.HEART_KNIGHT);
        EnumMap<Suit, CustList<HandTarot>> seqs_ = curHand_.eclaterToutEnCours(played_.couleurs());
        EnumMap<Suit, HandTarot> suits_ = curHand_.couleurs();
        EnumMap<Suit, HandTarot> lead_ = GameTarotCommon.cartesMaitresses(suits_, played_.couleurs());
        HandTarot h_ = GameTarotCommonPlaying.cartesNonMaitresses(suits_, lead_, seqs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_5));
        assertTrue(h_.contient(CardTarot.DIAMOND_QUEEN));
        assertTrue(h_.contient(CardTarot.DIAMOND_1));
    }
    @Test
    public void couleursNonEntamees1Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        trs_.add(t_);
        EnumList<Suit> s_ = GameTarotCommonPlaying.couleursNonEntamees(trs_, Suit.couleursOrdinaires());
        assertEq(0, s_.size());
    }
    @Test
    public void couleursNonEntamees2Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        EnumList<Suit> s_ = GameTarotCommonPlaying.couleursNonEntamees(trs_, Suit.couleursOrdinaires());
        assertEq(1, s_.size());
        assertTrue(s_.containsObj(Suit.CLUB));
    }
    @Test
    public void toursTest() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        CustList<TrickTarot> tours_ = GameTarotCommonPlaying.tours(Suit.HEART, trs_);
        assertEq(3, tours_.size());
        assertSame(CardTarot.HEART_1,tours_.get(0).premiereCarte());
        assertSame(CardTarot.HEART_QUEEN,tours_.get(1).premiereCarte());
        assertSame(CardTarot.HEART_9,tours_.get(2).premiereCarte());
        tours_ = GameTarotCommonPlaying.tours(Suit.DIAMOND, trs_);
        assertEq(3, tours_.size());
        assertSame(CardTarot.DIAMOND_KING,tours_.get(0).premiereCarte());
        assertSame(CardTarot.DIAMOND_QUEEN,tours_.get(1).premiereCarte());
        assertSame(CardTarot.DIAMOND_JACK,tours_.get(2).premiereCarte());
        tours_ = GameTarotCommonPlaying.tours(Suit.SPADE, trs_);
        assertEq(1, tours_.size());
        assertSame(CardTarot.SPADE_2,tours_.get(0).premiereCarte());
        assertEq(0, GameTarotCommonPlaying.tours(Suit.CLUB,trs_).size());
    }
    @Test
    public void couleursLesPlusEntameesParJoueurs1Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursLesPlusEntameesParJoueurs(trs_, GameTarotTeamsRelation.tousJoueurs((byte) 5), Suit.couleursOrdinaires());
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.DIAMOND));
    }
    @Test
    public void couleursLesPlusEntameesParJoueurs2Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        Bytes all_ = GameTarotTeamsRelation.tousJoueurs((byte) 5);
        all_.removeAllLong(0);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursLesPlusEntameesParJoueurs(trs_, all_, Suit.couleursOrdinaires());
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void couleursLesMoinsEntameesParJoueurs1Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursLesMoinsEntameesParJoueurs(trs_, GameTarotTeamsRelation.tousJoueurs((byte) 5), Suit.couleursOrdinaires());
        assertEq(1, suits_.size());
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursLesMoinsEntameesParJoueurs2Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        Bytes all_ = GameTarotTeamsRelation.tousJoueurs((byte) 5);
        all_.removeAllLong(0);
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursLesMoinsEntameesParJoueurs(trs_, all_, Suit.couleursOrdinaires());
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.DIAMOND));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void ramasseurs1Test() {
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot((byte) 2,true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        Bytes winners_ = GameTarotCommonPlaying.ramasseurs(trs_);
        assertEq(3, winners_.size());
        assertTrue(winners_.contains(0));
        assertTrue(winners_.contains(4));
        assertTrue(winners_.contains(3));
    }
    @Test
    public void joueursNAyantPasJoueTest() {
        HandTarot l_ = new HandTarot();
        l_.ajouter(CardTarot.SPADE_QUEEN);
        l_.ajouter(CardTarot.SPADE_10);
        l_.ajouter(CardTarot.SPADE_1);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 0,false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot p_ = new TrickTarot((byte) 4,true);
        p_.ajouter(CardTarot.TRUMP_5);
        p_.ajouter(CardTarot.TRUMP_6);
        p_.ajouter(CardTarot.TRUMP_7);
        CustList<EnumList<Miseres>> m_ = new CustList<EnumList<Miseres>>();
        CustList<HandTarot> h_ = new CustList<HandTarot>();
        feedLength(m_,h_);
        Ints ls_ = new Ints();
        ls_.add(14);
        ls_.add(14);
        ls_.add(15);
        ls_.add(15);
        ls_.add(14);
        GameTarotTrickInfo gt_ = new GameTarotTrickInfo(p_,trs_,m_,h_,BidTarot.TAKE,new HandTarot(),ls_);
        RulesTarot r_ = new RulesTarot();
        r_.setDealing(DealingTarot.DEAL_1_VS_3);
        CustList<CustList<Boolean>> confidence_ = new CustList<CustList<Boolean>>();
        for (int i = 0; i < 4; i++) {
            CustList<Boolean> b_ = new CustList<Boolean>();
            for (int j = 0; j < 4; j++) {
                b_.add(i==j);
            }
            confidence_.add(b_);
        }
        Bytes calledPlayers_ = new Bytes();
        GameTarotTeamsRelation rel_ = new GameTarotTeamsRelation((byte) 0, calledPlayers_, confidence_, r_);
        gt_.addSeenDeck(l_, rel_);
        GameTarotCommonPlaying g_ = new GameTarotCommonPlaying(gt_, rel_);
        Bytes players_ = g_.joueursNAyantPasJoue((byte) 2);
        assertEq(1, players_.size());
        assertTrue(players_.contains(3));
    }
    private static void feedLength(CustList<EnumList<Miseres>> _m, CustList<HandTarot> _h) {
        for (int i = 0; i < 5; i++) {
            _m.add(new EnumList<Miseres>());
            _h.add(new HandTarot());
        }
    }
    @Test
    public void couleursAvecCarteMaitresseTest() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.CLUB_6);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.HEART_KNIGHT);
        EnumList<Suit> s_ = GameTarotCommonPlaying.couleursAvecCarteMaitresse(curHand_, played_, Suit.couleursOrdinaires());
        assertEq(2, s_.size());
        assertTrue(s_.containsObj(Suit.HEART));
        assertTrue(s_.containsObj(Suit.DIAMOND));
    }
}
