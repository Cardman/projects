package cards.tarot;

import cards.consts.PossibleTrickWinner;
import cards.consts.Role;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.Handfuls;
import code.util.CustList;
import code.util.IdList;
import org.junit.Test;

public final class GameTarotProgTrickClassicFollowTest extends CommonGameTarot {
    @Test
    public void followNormalSuitFoe1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.FOE_TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_5, gbt_.followNormalSuitFoe(infoTr_));
    }

    @Test
    public void followNormalSuitFoe3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_KING,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.FOE_TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_4, gbt_.followNormalSuitFoe(infoTr_));
    }
    @Test
    public void playIfPartnersWin1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9,CardTarot.DIAMOND_8));
        deal_.getDeal().add(create(CardTarot.DIAMOND_7,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.DIAMOND_6, gbt_.playIfPartnersWin(infoTr_));
    }
    @Test
    public void playIfPartnersWin2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_5);
        pr_.ajouter(CardTarot.DIAMOND_7);
        pr_.ajouter(CardTarot.DIAMOND_8);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.playIfPartnersWin(infoTr_));
    }

    @Test
    public void followNormalSuitPartners2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.followNormalSuitPartners(infoTr_));
    }
    @Test
    public void followNormalSuitPartners3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.followNormalSuitPartners(infoTr_));
    }
    @Test
    public void followNormalSuitPartners4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_10);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_JACK);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.HEART_9,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.SPADE_6,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN));
        deal_.getDeal().add(create(CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_10,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        g_.getDeclaresHandfuls().get(1).add(Handfuls.ONE);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_1);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_2);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_3);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_4);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_5);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_6);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_7);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_8);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_QUEEN, gbt_.followNormalSuitPartners(infoTr_));
    }
    @Test
    public void followNormalSuitPartners5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_9);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_JACK);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.HEART_KNIGHT,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.SPADE_6,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN));
        deal_.getDeal().add(create(CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_9,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        g_.getDeclaresHandfuls().get(1).add(Handfuls.ONE);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_1);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_2);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_3);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_4);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_5);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_6);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_7);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_8);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_8, gbt_.followNormalSuitPartners(infoTr_));
    }
    @Test
    public void followNormalSuitPartners6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_2);
        last_.ajouter(CardTarot.SPADE_3);
        last_.ajouter(CardTarot.SPADE_4);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_JACK);
        pr_.ajouter(CardTarot.HEART_KNIGHT);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.HEART_10,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_2,CardTarot.SPADE_3,CardTarot.SPADE_4));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        g_.getDeclaresHandfuls().get(1).add(Handfuls.ONE);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_1);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_2);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_3);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_4);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_5);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_6);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_7);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_8);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_9, gbt_.followNormalSuitPartners(infoTr_));
    }

    @Test
    public void followNormalSuitPartners9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_5);
        pr_.ajouter(CardTarot.DIAMOND_7);
        pr_.ajouter(CardTarot.DIAMOND_8);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.DIAMOND_6, gbt_.followNormalSuitPartners(infoTr_));
    }
    @Test
    public void followNormalSuit1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.WHITE, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_10, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_4, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_10, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_5,CardTarot.HEART_3,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_4, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_2));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_9,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_9, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_KING);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_QUEEN, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_5, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_KING);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 2, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_5, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_3);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.TRUMP_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_3,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_9, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_9, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void followNormalSuit14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_8, gbt_.followNormalSuit(infoTr_));
    }
    @Test
    public void playWhenLastDiscard1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_QUEEN, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_8, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KNIGHT, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KNIGHT, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_4);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_JACK, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_JACK, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_4);
        pr_.ajouter(CardTarot.HEART_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_JACK, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_4);
        pr_.ajouter(CardTarot.CLUB_1);
        pr_.ajouter(CardTarot.CLUB_2);
        pr_.ajouter(CardTarot.CLUB_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8));
        deal_.getDeal().add(create(CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.CLUB_QUEEN, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_8);
        pr_.ajouter(CardTarot.CLUB_5);
        pr_.ajouter(CardTarot.CLUB_6);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.CLUB_QUEEN, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void playWhenLastDiscard16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_8);
        pr_.ajouter(CardTarot.CLUB_5);
        pr_.ajouter(CardTarot.CLUB_6);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.CLUB_QUEEN, gbt_.playWhenLastDiscard(infoTr_));
    }
    @Test
    public void followAsTaker1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_4);
        pr_.ajouter(CardTarot.CLUB_1);
        pr_.ajouter(CardTarot.CLUB_2);
        pr_.ajouter(CardTarot.CLUB_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8));
        deal_.getDeal().add(create(CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.CLUB_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_4);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_4,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KING,CardTarot.SPADE_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTaker7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_8);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.CLUB_6);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.CLUB_KNIGHT, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_JACK);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_8);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.CLUB_6);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_JACK,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_9,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.CLUB_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.HEART_5,CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK));
        deal_.getDeal().add(create(CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_JACK);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_8);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.CLUB_6);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_JACK,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_9,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 2, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.CLUB_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_JACK);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.HEART_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7));
        deal_.getDeal().add(create(CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_JACK,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_JACK);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_JACK,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsTake20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_1,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN));
        deal_.getDeal().add(create(CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 1, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.TAKER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsTaker(infoTr_));
    }
    @Test
    public void followAsCalledPlayer1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_JACK, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.DIAMOND_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_5);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_5));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_QUEEN);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_QUEEN));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_QUEEN);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_QUEEN));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KNIGHT, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_QUEEN);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_QUEEN));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_QUEEN);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_QUEEN));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_QUEEN);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_QUEEN));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_8,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3));
        deal_.getDeal().add(create(CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsCalledPlayer13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_8,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3));
        deal_.getDeal().add(create(CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.CALLED_PLAYER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsCalledPlayer(infoTr_));
    }
    @Test
    public void followAsDefender1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_QUEEN, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_9, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_10);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KING,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_10,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 4, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 2, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_JACK);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_1);
        pr_.ajouter(CardTarot.CLUB_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_2));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7));
        deal_.getDeal().add(create(CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 3, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.CLUB_2, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_10);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_KNIGHT,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KING,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_10,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 4, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 3, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_KING, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_10);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_10,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 3, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_9, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followAsDefender11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_9);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_5);
        pr_.ajouter(CardTarot.HEART_6);
        pr_.ajouter(CardTarot.HEART_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_9,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_2,CardTarot.DIAMOND_4));
        deal_.getDeal().add(create(CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_9,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(Role.DEFENDER,gbt_.getCurrentStatus());
        assertSame(CardTarot.HEART_10, gbt_.followAsDefender(infoTr_));
    }
    @Test
    public void followDefaultSuit1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_5);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_4);
        pr_.ajouter(CardTarot.CLUB_1);
        pr_.ajouter(CardTarot.CLUB_2);
        pr_.ajouter(CardTarot.CLUB_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_QUEEN,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8));
        deal_.getDeal().add(create(CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.CLUB_QUEEN, gbt_.followDefaultSuit(infoTr_));
    }
    @Test
    public void followDefaultSuit2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_8);
        pr_.ajouter(CardTarot.HEART_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicOnePlayer(g_, 4, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_10, gbt_.followDefaultSuit(infoTr_));
    }
    @Test
    public void followDefaultSuit3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_JACK, gbt_.followDefaultSuit(infoTr_));
    }
    @Test
    public void followDefaultSuit4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KNIGHT);
        last_.ajouter(CardTarot.HEART_JACK);
        last_.ajouter(CardTarot.HEART_8);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_KING,CardTarot.HEART_QUEEN));
        deal_.getDeal().add(create(CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassicTwoPlayers(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.HEART_KING, gbt_.followDefaultSuit(infoTr_));
    }

    @Test
    public void fournirCouleurOrdinaireClassique1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_2,CardTarot.TRUMP_1,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_2,CardTarot.SPADE_KING,CardTarot.SPADE_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_9,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.HEART_KING));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.HEART_5, gbt_.fournirCouleurOrdinaireClassique(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireClassique2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_5);
        pr_.ajouter(CardTarot.DIAMOND_7);
        pr_.ajouter(CardTarot.DIAMOND_8);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.DIAMOND_10,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_JACK));
        deal_.getDeal().add(create(CardTarot.DIAMOND_9));
        deal_.getDeal().add(create(CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_7));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, deal_);
        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.DIAMOND_6, gbt_.fournirCouleurOrdinaireClassique(infoTr_));
    }
    @Test
    public void fournirCouleurOrdinaireClassique3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_JACK);
        curHand_.ajouter(CardTarot.HEART_10);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(),d_);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_4,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_3,CardTarot.CLUB_KING,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_10,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, deal_);

        GameTarotProgTrickClassic gbt_ = gameTarotProgTrickClassic(g_, calledCards_, curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.HEART_JACK, gbt_.fournirCouleurOrdinaireClassique(infoTr_));
    }

    private GameTarotProgTrickClassic gameTarotProgTrickClassic(GameTarot _g, HandTarot _calledCards, HandTarot _curHand) {
        GameTarotTeamsRelation team_ = _g.getTeamsRelation(_g.buildConfidence());
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(_g,team_);
        return newGameTarotProgTrickClassicDeal(_g,info_,team_, _calledCards, _curHand);
    }

    private GameTarotProgTrickClassic gameTarotProgTrickClassicOnePlayer(GameTarot _g, int _p, HandTarot _calledCards, HandTarot _curHand) {
        GameTarotTeamsRelation team_ = _g.getTeamsRelation(_g.buildConfidence());
        faireConfiance(_g, (byte) _p, team_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(_g,team_);
        return newGameTarotProgTrickClassicDeal(_g,info_,team_, _calledCards, _curHand);
    }


    private GameTarotProgTrickClassic gameTarotProgTrickClassicTwoPlayers(GameTarot _g, HandTarot _calledCards, HandTarot _curHand) {
        GameTarotTeamsRelation team_ = _g.getTeamsRelation(_g.buildConfidence());
        faireConfiance(_g, (byte)3, team_);
        faireConfiance(_g, (byte)2, team_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(_g,team_);
        return newGameTarotProgTrickClassicDeal(_g,info_,team_, _calledCards, _curHand);
    }
}
