package cards.tarot;

import cards.consts.Hypothesis;
import cards.consts.Suit;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import code.util.CustList;
import code.util.IdList;
import code.util.IdMap;
import org.junit.Test;

public final class GameTarotTrickHypothesisTest extends CommonGameTarot {
    @Test
    public void hypothesesRepartitionsJoueurs1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 4, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
    }
    @Test
    public void hypothesesRepartitionsJoueurs2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_6,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 3, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_6,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_6,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 4, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
    }
    @Test
    public void hypothesesRepartitionsJoueurs6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_18);
        pr_.ajouter(CardTarot.CLUB_3);
        pr_.ajouter(CardTarot.TRUMP_13);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_5,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_2,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_JACK);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_,next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_19);
        pr_.ajouter(CardTarot.TRUMP_12);
        pr_.ajouter(CardTarot.TRUMP_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_5,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_3,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_JACK);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_18);
        pr_.ajouter(CardTarot.TRUMP_16);
        pr_.ajouter(CardTarot.TRUMP_13);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_5,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3));
        deal_.getDeal().add(create(CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_JACK);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_16,CardTarot.TRUMP_13,CardTarot.TRUMP_5,CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_5,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_7,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_7,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_7,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_,next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_10));
        deal_.getDeal().add(create(CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_,next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_JACK));
        deal_.getDeal().add(create(CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_JACK,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_17,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10));
        deal_.getDeal().add(create(CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs22Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs23Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs24Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.TRUMP_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_,next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs25Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5));
        deal_.getDeal().add(create(CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs26Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_4);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4));
        deal_.getDeal().add(create(CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_7,CardTarot.SPADE_2,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1));
        deal_.getDeal().add(create(CardTarot.SPADE_10,CardTarot.SPADE_4,CardTarot.SPADE_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_7);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.TRUMP_9);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs27Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_10);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.CLUB_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_4,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs28Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_10);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.CLUB_2);
        pr_.ajouter(CardTarot.TRUMP_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_4,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT));
        deal_.getDeal().add(create(CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_8,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_6));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertTrue(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
    }
    @Test
    public void hypothesesRepartitionsJoueurs29Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_10);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.TRUMP_4);
        pr_.ajouter(CardTarot.TRUMP_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_7));
        deal_.getDeal().add(create(CardTarot.TRUMP_6,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_8));
        deal_.getDeal().add(create(CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_8,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_6));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 0, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 1));
        assertTrue(confidenceValue(g_, 2));
        assertTrue(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 0));
    }
    @Test
    public void hypothesesRepartitionsJoueurs30Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_10);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.TRUMP_4);
        pr_.ajouter(CardTarot.TRUMP_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_8,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.CLUB_KING,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_1,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 3));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
    }
    @Test
    public void hypothesesRepartitionsJoueurs31Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.TRUMP_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.SPADE_KING,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_QUEEN,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_QUEEN,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.SPADE_3);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
    }
    @Test
    public void hypothesesRepartitionsJoueurs32Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_3,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_7,CardTarot.HEART_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.SPADE_3);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs33Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.TRUMP_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.TRUMP_8,CardTarot.TRUMP_3,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.DIAMOND_KING,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.SPADE_3);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 3));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
    }
    @Test
    public void hypothesesRepartitionsJoueurs34Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.TRUMP_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_7,CardTarot.HEART_6,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.DIAMOND_2,CardTarot.CLUB_KNIGHT));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_8,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_KNIGHT));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 0, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.SPADE_3);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertTrue(confidenceValue(g_, 3));
        assertTrue(confidenceValue(g_, 4));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 2));
    }
    @Test
    public void hypothesesRepartitionsJoueurs35Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_2,CardTarot.HEART_9,CardTarot.HEART_8,CardTarot.HEART_6,CardTarot.SPADE_2,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_21,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9,CardTarot.TRUMP_8));
        deal_.getDeal().add(create(CardTarot.TRUMP_7,CardTarot.TRUMP_6,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_7,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_9,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_3,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 2, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.SPADE_2);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs36Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs37Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_4,CardTarot.TRUMP_3,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_6));
        deal_.getDeal().add(create(CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3));
        deal_.getDeal().add(create(CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 2));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }
    @Test
    public void hypothesesRepartitionsJoueurs38Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.TRUMP_1);
        last_.ajouter(CardTarot.TRUMP_21);
        last_.ajouter(CardTarot.TRUMP_20);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        IdList<BidTarot> bids_ = new IdList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_20);
        pr_.ajouter(CardTarot.SPADE_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 2);
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_19,CardTarot.TRUMP_18,CardTarot.TRUMP_17,CardTarot.TRUMP_16,CardTarot.TRUMP_15,CardTarot.TRUMP_14,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_10,CardTarot.TRUMP_9));
        deal_.getDeal().add(create(CardTarot.HEART_QUEEN,CardTarot.HEART_KNIGHT,CardTarot.HEART_JACK,CardTarot.HEART_10,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.CLUB_KING));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.DIAMOND_9,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7));
        deal_.getDeal().add(create(CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_2,CardTarot.SPADE_1,CardTarot.DIAMOND_KING,CardTarot.DIAMOND_8,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_5,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.DIAMOND_1,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_6,CardTarot.CLUB_5,CardTarot.CLUB_4,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1));
        deal_.getDeal().add(create(CardTarot.TRUMP_1,CardTarot.TRUMP_21,CardTarot.TRUMP_20));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.CLUB_7);
        curHand_.ajouter(CardTarot.CLUB_8);
        curHand_.ajouter(CardTarot.CLUB_9);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        byte next_ = pr_.getNextPlayer(g_.getNombreDeJoueurs());
        IdMap<Suit, CustList<HandTarot>> poss_ = info_.cartesPossibles(curHand_);
        IdMap<Hypothesis, IdMap<Suit, CustList<HandTarot>>> hypos_ = info_.cartesCertaines(poss_);
        poss_ = hypos_.getVal(Hypothesis.POSSIBLE);
        IdMap<Suit, CustList<HandTarot>> sure_ = hypos_.getVal(Hypothesis.SURE);
        CustList<TrickTarot> tricks_ = g_.getTricks();
        tricks_.add(pr_);
        GameTarotTrickHypothesis.hypothesesRepartitionsJoueurs(team_,g_.getCalledCards(), tricks_, next_,poss_,sure_);
        assertTrue(confidenceSelfValue(g_));
        assertFalse(confidenceValue(g_, 0));
        assertFalse(confidenceValue(g_, 1));
        assertFalse(confidenceValue(g_, 3));
        assertFalse(confidenceValue(g_, 4));
    }

    private static boolean confidenceSelfValue(GameTarot _g) {
        byte nbPl_ = _g.getNombreDeJoueurs();
        byte next_ = _g.getProgressingTrick().getNextPlayer(nbPl_);
        return _g.confiance(next_,next_);
    }

    private static boolean confidenceValue(GameTarot _g, int _j) {
        byte nbPl_ = _g.getNombreDeJoueurs();
        byte next_ = _g.getProgressingTrick().getNextPlayer(nbPl_);
        return _g.confiance(next_,(byte)_j);
    }

}
