package cards.tarot;

import cards.consts.GameType;
import cards.consts.MixCardsChoice;
import cards.consts.Suit;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.DealingTarot;
import code.util.CustList;
import code.util.EnumList;
import code.util.EnumMap;
import org.junit.Test;

public final class TarotAddonTest extends CommonGameTarot {
    @Test
    public void test() {
        DealTarot d_ = new DealTarot();
        d_.setDeal(new CustList<HandTarot>());
        assertEq(0,d_.getDeal().size());
        assertTrue(DealingTarot.DEAL_1_VS_2.getNbAppeles()>=0);
    }
    static DealTarot initializeHands(int _dealer) {
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) _dealer);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_1,CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_14,CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        return deal_;
    }
    static RulesTarot initializeRulesWithBids() {
        RulesTarot regles_=new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        regles_.setRepartition(DealingTarot.DEAL_2_VS_4_CALL_KING);
        regles_.getCommon().setMixedCards(MixCardsChoice.NEVER);
        regles_.setAllowPlayCalledSuit(false);
        EnumMap<BidTarot,Boolean> contrats_ = new EnumMap<BidTarot,Boolean>();
        for (BidTarot b: regles_.getContrats().getKeys()) {
            contrats_.put(b,true);
        }
        regles_.setContrats(contrats_);
        return regles_;
    }
    @Test
    public void playableCards_beginningTrickFree1Test() {
        RulesTarot regles_=initializeRulesWithBids();
        GameTarot game_ = new GameTarot(GameType.RANDOM, initializeHands((byte) 1), regles_);
        //game.resetNbPlisTotal();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        game_.setBids(bids_);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(regles_,1,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        game_.setTricks(trs_);
        HandTarot cartesAppeler_ = new HandTarot();
        cartesAppeler_.ajouter(CardTarot.SPADE_KING);
        game_.setCarteAppelee(cartesAppeler_);
        game_.setEntameur((byte) 2);
        assertEq(2,game_.getEntameur());
        HandTarot hand_ = game_.getDistribution().hand(game_.getEntameur());
        EnumMap<Suit,HandTarot> suits_ = hand_.couleurs();
        HandTarot playableCards_ = game_.playableCards(suits_);
        assertEq(hand_.total(),playableCards_.total());
        assertTrue(playableCards_.contientCartes(hand_));
        assertEq(Suit.UNDEFINED,game_.getPliEnCours().couleurDemandee());
        assertEq(0,game_.getAnnoncesPoigneesPossibles((byte) 0).size());
    }
    @Test
    public void playableCards_beginningTrickFree2Test() {
        RulesTarot regles_=initializeRulesWithBids();
        GameTarot game_ = new GameTarot(GameType.RANDOM, initializeHands((byte) 3), regles_);
        //game.resetNbPlisTotal();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        game_.setBids(bids_);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(regles_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        game_.setTricks(trs_);
        HandTarot cartesAppeler_ = new HandTarot();
        cartesAppeler_.ajouter(CardTarot.SPADE_KING);
        game_.setCarteAppelee(cartesAppeler_);
        game_.setEntameur((byte) 4);
        assertEq(4,game_.getEntameur());
        HandTarot hand_ = game_.getDistribution().hand(game_.getEntameur());
        EnumMap<Suit,HandTarot> suits_ = hand_.couleurs();
        HandTarot playableCards_ = game_.playableCards(suits_);
        assertEq(hand_.total(),playableCards_.total());
        assertTrue(playableCards_.contientCartes(hand_));
        assertEq(Suit.UNDEFINED,game_.getPliEnCours().couleurDemandee());
        assertEq(0,game_.getAnnoncesPoigneesPossibles((byte) 0).size());
    }
    @Test
    public void atoutsPossibles17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(7, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(16, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(16, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(4).total());
        assertEq(16, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void atoutsPossibles18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_KING);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_1,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(7, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(16, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(16, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void atoutsPossibles19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_KING);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_1,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(7, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(16, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(16, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void atoutsPossibles20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(7, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(16, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(16, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(16, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void atoutsPossibles21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(7, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(15, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(15, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(4).total());
        assertEq(15, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void excusePossibleRegles26Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.excusePossibleRegles(curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(1, h_.get(1).total());
        assertEq(1, h_.get(2).total());
        assertEq(1, h_.get(3).total());
        assertEq(0, h_.get(4).total());
        assertEq(1, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void excusePossibleRegles27Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.excusePossibleRegles(curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(1, h_.get(1).total());
        assertEq(1, h_.get(2).total());
        assertEq(1, h_.get(3).total());
        assertEq(1, h_.get(4).total());
        assertEq(1, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void excusePossibleRegles28Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.excusePossibleRegles(curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(0, h_.get(1).total());
        assertEq(0, h_.get(2).total());
        assertEq(0, h_.get(3).total());
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void cartesPossiblesRegles20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.SPADE,curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KING));
        assertEq(13, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KING));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_KING));
        assertEq(12, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_QUEEN));
        assertEq(0, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void cartesPossiblesRegles21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.SPADE,curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KING));
        assertEq(13, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KING));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.SPADE_KING));
        assertEq(13, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_KING));
        assertEq(0, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void cartesPossiblesRegles22Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.SPADE,curHand_);
        assertEq(7, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(12, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.SPADE_KING));
        assertEq(12, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.SPADE_KING));
        assertEq(0, h_.get(3).total());
        assertEq(11, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.SPADE_2));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_3));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_4));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_5));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_6));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_7));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_8));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_9));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_10));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_JACK));
        assertTrue(h_.get(4).contient(CardTarot.SPADE_KNIGHT));
        assertEq(0, h_.get(5).total());
        assertEq(0, h_.get(6).total());
    }
    @Test
    public void cartesPossiblesRegles23Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.HEART,curHand_);
        assertEq(7, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_7));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_1));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_6));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_1));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_6));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertTrue(h_.get(3).contient(CardTarot.HEART_2));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertEq(0, h_.get(4).total());
        assertEq(8, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_1));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_6));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertEq(3, h_.get(6).total());
        assertTrue(h_.get(6).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(6).contient(CardTarot.HEART_10));
        assertTrue(h_.get(6).contient(CardTarot.HEART_KNIGHT));
    }
    @Test
    public void cartesPossiblesRegles24Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        pr_.ajouter(CardTarot.SPADE_1);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.EXCUSE,CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING,CardTarot.SPADE_QUEEN));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.TRUMP_4,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_21,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.HEART,curHand_);
        assertEq(7, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_7));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_1));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_6));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_1));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_6));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertTrue(h_.get(3).contient(CardTarot.HEART_2));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_1));
        assertTrue(h_.get(4).contient(CardTarot.HEART_2));
        assertTrue(h_.get(4).contient(CardTarot.HEART_3));
        assertTrue(h_.get(4).contient(CardTarot.HEART_4));
        assertTrue(h_.get(4).contient(CardTarot.HEART_5));
        assertTrue(h_.get(4).contient(CardTarot.HEART_6));
        assertTrue(h_.get(4).contient(CardTarot.HEART_9));
        assertTrue(h_.get(4).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_1));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_6));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertEq(3, h_.get(6).total());
        assertTrue(h_.get(6).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(6).contient(CardTarot.HEART_10));
        assertTrue(h_.get(6).contient(CardTarot.HEART_KNIGHT));
    }
    @Test
    public void cartesPossiblesRegles25Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        last_.ajouter(CardTarot.DIAMOND_9);
        last_.ajouter(CardTarot.DIAMOND_8);
        last_.ajouter(CardTarot.DIAMOND_1);
        RulesTarot r_ = new RulesTarot(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setDealing(DealingTarot.DEAL_2_VS_4_CALL_KING);
        r_.setAllowPlayCalledSuit(false);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,3,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.DIAMOND_9);
        t_.ajouter(CardTarot.DIAMOND_8);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getId().getNextPlayer(3),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.TRUMP_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.SPADE_KING);
        DealTarot deal_ = new DealTarot(new CustList<HandTarot>(), (byte) 3);
        deal_.getDeal().add(create(CardTarot.TRUMP_16,CardTarot.TRUMP_10,CardTarot.TRUMP_2,CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.HEART_7,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_JACK,CardTarot.DIAMOND_10,CardTarot.CLUB_KNIGHT,CardTarot.CLUB_10));
        deal_.getDeal().add(create(CardTarot.TRUMP_20,CardTarot.TRUMP_19,CardTarot.TRUMP_17,CardTarot.TRUMP_15,CardTarot.TRUMP_13,CardTarot.TRUMP_12,CardTarot.TRUMP_11,CardTarot.TRUMP_9,CardTarot.TRUMP_8,CardTarot.TRUMP_7,CardTarot.TRUMP_6));
        deal_.getDeal().add(create(CardTarot.TRUMP_3,CardTarot.TRUMP_1,CardTarot.HEART_JACK,CardTarot.HEART_9,CardTarot.HEART_6,CardTarot.HEART_5,CardTarot.HEART_4,CardTarot.HEART_3,CardTarot.HEART_2,CardTarot.HEART_1,CardTarot.SPADE_KING));
        deal_.getDeal().add(create(CardTarot.DIAMOND_KING,CardTarot.DIAMOND_QUEEN,CardTarot.DIAMOND_7,CardTarot.DIAMOND_6,CardTarot.DIAMOND_5,CardTarot.CLUB_3,CardTarot.CLUB_2,CardTarot.CLUB_1,CardTarot.TRUMP_5,CardTarot.CLUB_KING,CardTarot.CLUB_4));
        deal_.getDeal().add(create(CardTarot.SPADE_KNIGHT,CardTarot.SPADE_JACK,CardTarot.SPADE_10,CardTarot.SPADE_9,CardTarot.SPADE_8,CardTarot.SPADE_7,CardTarot.SPADE_6,CardTarot.SPADE_5,CardTarot.SPADE_4,CardTarot.SPADE_3,CardTarot.SPADE_2));
        deal_.getDeal().add(create(CardTarot.TRUMP_18,CardTarot.DIAMOND_4,CardTarot.DIAMOND_3,CardTarot.DIAMOND_2,CardTarot.CLUB_QUEEN,CardTarot.CLUB_JACK,CardTarot.CLUB_9,CardTarot.CLUB_8,CardTarot.CLUB_7,CardTarot.CLUB_6,CardTarot.CLUB_5));
        deal_.getDeal().add(create(CardTarot.HEART_KING,CardTarot.HEART_8,CardTarot.DIAMOND_KNIGHT,CardTarot.DIAMOND_9,CardTarot.DIAMOND_8,CardTarot.DIAMOND_1));
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 3, bids_, calledCards_, 1, deal_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTrickInfo info_ = newGameTarotTrickInfoDeal(g_,curHand_);
        CustList<HandTarot> h_ = info_.cartesPossiblesRegles(Suit.HEART,curHand_);
        assertEq(7, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_7));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_1));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_6));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_1));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_6));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertTrue(h_.get(3).contient(CardTarot.HEART_2));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertEq(0, h_.get(4).total());
        assertEq(8, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_1));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_6));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertEq(3, h_.get(6).total());
        assertTrue(h_.get(6).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(6).contient(CardTarot.HEART_10));
        assertTrue(h_.get(6).contient(CardTarot.HEART_KNIGHT));
    }
}
