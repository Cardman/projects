package code.scripts.messages.gui;

import code.util.StringMap;
public final class MessCdmBaseGr{
//private static final String CODE_0_1_1="resources_lg/aliases/en/keywords.properties";
//private static final String CODE_0_1_2="resources_lg/aliases/en/messages.properties";
//private static final String CODE_0_1_3="resources_lg/aliases/en/types.properties";
//private static final String CODE_0_1_4="resources_lg/aliases/fr/keywords.properties";
//private static final String CODE_0_1_5="resources_lg/aliases/fr/messages.properties";
//private static final String CODE_0_1_6="resources_lg/aliases/fr/types.properties";
private static final String CODE_0_1_9="resources_lg/tests/run.txt";
private static final String CODE_0_11_0="\n";
private static final String CODE_0_11_1="{public} {abstract} {final} {class} {Execute}'{'\n";
private static final String CODE_0_11_2="    {public} {static} {Table}<{Method},{Result}> {tests}({InfoTest} {info})'{'\n";
private static final String CODE_0_11_3="        {Table}<{Class},{List}<{ExecutedTest}>> {out} = {new} {Table}<>();\n";
private static final String CODE_0_11_4="        {var} {t} = {cast}({int})0;\n";
private static final String CODE_0_11_5="        {for} ({var} {c}: {static}({Class}).{getAllClasses}())'{'\n";
private static final String CODE_0_11_6="            {List}<{Method}> {bs} = {new} {List}<>();\n";
private static final String CODE_0_11_7="            {List}<{Method}> {as} = {new} {List}<>();\n";
private static final String CODE_0_11_8="            {List}<{ExecutedTest}> {tts} = {new} {List}<>();\n";
private static final String CODE_0_11_9="            {for} ({var} {m}: ({c}).{getDeclaredMethods}())'{'\n";
private static final String CODE_0_11_10="                {var} {e} = {new} {ExecutedTest}();\n";
private static final String CODE_0_11_11="                {var} {a} = ({m}).{getAnnotations}({class}({Test}));\n";
private static final String CODE_0_11_11_0="                {var} {r} = ({m}).{getAnnotations}({class}({Args}));\n";
private static final String CODE_0_11_12="                {if} ({static}({ObjectsUtil}).{eq}(({a}).{length}, 1) && (({cast}({Test}){a}[0]).{exception}() == {cast}({Object}) {null} || !{class}({Difference}).{isAssignableFrom}(({cast}({Test}){a}[0]).{exception}())))'{'\n";
private static final String CODE_0_11_13="                    ({e}).{test} = {m};\n";
private static final String CODE_0_11_14="                    ({e}).{annotations} = {a};\n";
private static final String CODE_0_11_14_0="                    ({e}).{argsAnnot} = {r};\n";
private static final String CODE_0_11_15="                    ({e}).{before} = {bs};\n";
private static final String CODE_0_11_16="                    ({e}).{after} = {as};\n";
private static final String CODE_0_11_17="                    {var} {aParam} = ({m}).{getAnnotations}({class}({Parameters}));\n";
private static final String CODE_0_11_18="                    {if} ({static}({ObjectsUtil}).{eq}(({aParam}).{length}, 1))'{'\n";
private static final String CODE_0_11_19="                        {var} {paramAnn} = {cast}({Parameters}){aParam}[0];\n";
private static final String CODE_0_11_20="                        {var} {loc} = ({paramAnn}).{methodParam}();\n";
private static final String CODE_0_11_21="                        {var} {locType} = ({paramAnn}).{location}();\n";
private static final String CODE_0_11_22="                        {if} ({static}({ObjectsUtil}).{eq}({locType},{null}))'{'\n";
private static final String CODE_0_11_23="                            {locType} = {c};\n";
private static final String CODE_0_11_24="                        '}'\n";
private static final String CODE_0_11_25="                        {for} ({var} {p}: ({locType}).{getDeclaredMethods}())'{'\n";
private static final String CODE_0_11_26="                            {if} (!{static}({ObjectsUtil}).{eq}(({p}).{getMethodName}(), {loc}))'{'\n";
private static final String CODE_0_11_27="                                {continue};\n";
private static final String CODE_0_11_28="                            '}'\n";
private static final String CODE_0_11_29="                            {if} (!({p}).{isStatic}())'{'\n";
private static final String CODE_0_11_30="                                {continue};\n";
private static final String CODE_0_11_31="                            '}'\n";
private static final String CODE_0_11_32="                            {if} (!{static}({ObjectsUtil}).{eq}(({p}).{getParameterTypes}().{length},0))'{'\n";
private static final String CODE_0_11_33="                                {continue};\n";
private static final String CODE_0_11_34="                            '}'\n";
private static final String CODE_0_11_35="                            ({e}).{method} = {p};\n";
private static final String CODE_0_11_36="                            {break};\n";
private static final String CODE_0_11_37="                        '}'\n";
private static final String CODE_0_11_38="                    '}'\n";
private static final String CODE_0_11_39="                    {t} = {static}({Math}).{plus}({t},1);\n";
private static final String CODE_0_11_40="                    ({tts}).{add}({e});\n";
private static final String CODE_0_11_41="                '}'\n";
private static final String CODE_0_11_42="                {if} ({static}({Math}).{gt}(({m}).{getAnnotations}({class}({Before})).{length},0))'{'\n";
private static final String CODE_0_11_43="                    ({bs}).{add}({m});\n";
private static final String CODE_0_11_44="                '}'\n";
private static final String CODE_0_11_45="                {if} ({static}({Math}).{gt}(({m}).{getAnnotations}({class}({After})).{length},0))'{'\n";
private static final String CODE_0_11_46="                    ({as}).{add}({m});\n";
private static final String CODE_0_11_47="                '}'\n";
private static final String CODE_0_11_48="            '}'\n";
private static final String CODE_0_11_49="            {if} ({static}({Math}).{gt}(({tts}).{sizeLi}(),0))'{'\n";
private static final String CODE_0_11_50="                ({out}).{addTa}({c},{tts});\n";
private static final String CODE_0_11_51="            '}'\n";
private static final String CODE_0_11_52="        '}'\n";
private static final String CODE_0_11_53="        ({info}).{count} = {t};\n";
private static final String CODE_0_11_53_0="        {ExecutorService} {tt0} = {new}({info}.{nbThreads});\n";
private static final String CODE_0_11_53_1="         {List}<{Future}> {tts0} = {new} {List}<>();\n";
private static final String CODE_0_11_54="        {Table}<{Method},{Result}> {results} = {new} {Table}<>();\n";
private static final String CODE_0_11_55="        {for} ({var} {c}, {var} {l}: {out})'{'\n";
private static final String CODE_0_11_56="            {for} ({var} {e}: {l})'{'\n";
private static final String CODE_0_11_57="                {var} {tt} = ({e}).{test};\n";
private static final String CODE_0_11_58_0="                    {try} '{'\n";
private static final String CODE_0_11_58_1="                        {static}({Thread}).{args}(({cast}({Args}){e}.{argsAnnot}[0]).{argsValue}());\n";
private static final String CODE_0_11_58_2="                    '}' {catch} ({Object} {o})'{'\n";
private static final String CODE_0_11_58_3="                        {static}({Thread}).{args}({new} {String}[0]);\n";
private static final String CODE_0_11_58_4="                    '}' {catch} '{'\n";
private static final String CODE_0_11_58_5="                        {static}({Thread}).{args}({new} {String}[0]);\n";
private static final String CODE_0_11_58_6="                    '}'\n";
private static final String CODE_0_11_59="                {if} (!{static}({ObjectsUtil}).{eq}(({e}).{method},{null}))'{'\n";
private static final String CODE_0_11_60="                    {Object} {arr} = {null};\n";
private static final String CODE_0_11_61="                    {Object} {exc} = {null};\n";
private static final String CODE_0_11_62="                    {try} '{'\n";
private static final String CODE_0_11_63="                        {arr} = ({e}).{method}.{invoke}({null});\n";
private static final String CODE_0_11_64="                    '}' {catch} ({InvokeTarget} {o})'{'\n";
private static final String CODE_0_11_65="                        {exc} = ({o}).{getCause}();\n";
private static final String CODE_0_11_66="                    '}'\n";
private static final String CODE_0_11_67="                    {if} ({arr} {instanceof} {Object}[][])'{'\n";
private static final String CODE_0_11_68="                        {for} ({var} {p}: {cast}({Object}[][]){arr})'{'\n";
private static final String CODE_0_11_69="                            {var} {params} = {new} {StringBuilder}();\n";
private static final String CODE_0_11_70="                            {var} {nbParams} = ({p}).{length};\n";
private static final String CODE_0_11_71="                            {for} ({var} {i} = 0; {static}({Math}).{lt}({i}, {static}({Math}).{minus}({nbParams},1)); {i}={static}({Math}).{plus}({i},1))'{'\n";
private static final String CODE_0_11_72="                                ({params}).{append}({convert}({p}[{i}])).{append}(\",\");\n";
private static final String CODE_0_11_73="                            '}'\n";
private static final String CODE_0_11_74="                            {if} ({static}({Math}).{gt}({nbParams},0))'{'\n";
private static final String CODE_0_11_75="                                ({params}).{append}({convert}({p}[{static}({Math}).{minus}({nbParams},1)]));\n";
private static final String CODE_0_11_76="                            '}'\n";
private static final String CODE_0_11_77="                            ({info}).{currentParams} = ({params}).{toString}();\n";
private static final String CODE_0_11_78="                            {Result} {res} = {new}();\n";
private static final String CODE_0_11_78_0="                            {res}.{container} = {c};\n";
private static final String CODE_0_11_78_1="                            {res}.{executed} = {e};\n";
private static final String CODE_0_11_78_2="                            {res}.{resultArgs} = {p};\n";
private static final String CODE_0_11_79="                            ({res}).{pf} = ({params}).{toString}();\n";
private static final String CODE_0_11_80="                            ({results}).{addTa}({tt},{res});\n";
private static final String CODE_0_11_81="                        '}'\n";
private static final String CODE_0_11_82="                    '}' {else} '{'\n";
private static final String CODE_0_11_82_0="                            {var} {res} = {setupError}({e},{exc},-1);\n";
private static final String CODE_0_11_82_1="                            {res}.{container} = {c};\n";
private static final String CODE_0_11_82_2="                            {res}.{executed} = {e};\n";
private static final String CODE_0_11_82_3="                            {res}.{resultArgs} = {null};\n";
private static final String CODE_0_11_83="                        ({results}).{addTa}({tt},{res});\n";
private static final String CODE_0_11_84="                    '}'\n";
private static final String CODE_0_11_85="                '}' {else} '{'\n";
private static final String CODE_0_11_85_0="                            {Result} {res} = {new}();\n";
private static final String CODE_0_11_85_1="                            {res}.{container} = {c};\n";
private static final String CODE_0_11_85_2="                            {res}.{executed} = {e};\n";
private static final String CODE_0_11_86="                    ({results}).{addTa}({tt},{res});\n";
private static final String CODE_0_11_87="                '}'\n";
private static final String CODE_0_11_90="        '}'\n        '}'{info}.{calls}={results}.{sizeTa}();\n";
private static final String CODE_0_11_55_0="        {for} ({var} {c}, {var} {l}: {results})'{'\n";
private static final String CODE_0_11_56_0="                {Runnable} {tt1} = () -> '{'\n";
private static final String CODE_0_11_58="                ({info}).{currentMethod} = {l}.{executed}.{test};\n";
private static final String CODE_0_11_88_0="                {info}.{currentParams} = {l}.{pf};\n";
private static final String CODE_0_11_88="                {info}.{done}.{incrGet}();\n";
private static final String CODE_0_11_86_0="                 {if} ({static}({ObjectsUtil}).{eq}({l}.{resultArgs},{null})) '{'\n";
private static final String CODE_0_11_86_1="                  {return};\n";
private static final String CODE_0_11_86_2="                 '}'\n";
private static final String CODE_0_11_86_3="                 {var} {res} = {execute}({l}.{executed},{l}.{container},{l}.{resultArgs});\n";
private static final String CODE_0_11_86_4="                 {l}.{time} = {res}.{time};\n";
private static final String CODE_0_11_86_5="                 {l}.{success} = {res}.{success};\n";
private static final String CODE_0_11_86_6="                 {l}.{failMessage} = {res}.{failMessage};\n";
private static final String CODE_0_11_87_0="                '}';\n";
//private static final String CODE_0_11_87_1="                {tt0}.{exSerEx}({tt1});\n";
private static final String CODE_0_11_87_1="                {tts0}.{add}({tt0}.{exSerEx}({tt1}));\n";
private static final String CODE_0_11_89="            '}'\n";
private static final String CODE_0_11_90_1="        {for} ({var} {c}: {tts0})'{'\n";
private static final String CODE_0_11_90_2="         {c}.{wait}();\n";
private static final String CODE_0_11_90_3="        '}'\n";
private static final String CODE_0_11_90_0="        {tt0}.{shutdown}();\n";
private static final String CODE_0_11_91="        {static}({Thread}).{joinOthers}();\n";
private static final String CODE_0_11_92="        {return} {results};\n";
private static final String CODE_0_11_93="    '}'\n";
private static final String CODE_0_11_94="    {private} {static} {Result} {execute}({ExecutedTest} {r1},{Class} {r2},{Object}[] {r3})'{'\n";
private static final String CODE_0_11_95="        {var} {processEx} = {false};\n";
private static final String CODE_0_11_96="        {var} {stTime} = {static}({Thread}).{instant}();\n";
private static final String CODE_0_11_97="        {long} {diff} = -1;\n";
private static final String CODE_0_11_98="        {try} '{'\n";
private static final String CODE_0_11_99="            {var} {ctor} = ({r2}).{getDeclaredConstructors}({false})[0];\n";
private static final String CODE_0_11_100="            {processEx} = {true};\n";
private static final String CODE_0_11_101="            {var} {classTest} = ({ctor}).{newInstance}();\n";
private static final String CODE_0_11_102="            {for} ({var} {b}: ({r1}).{before})'{'\n";
private static final String CODE_0_11_103="                ({b}).{invoke}({classTest});\n";
private static final String CODE_0_11_104="            '}'\n";
private static final String CODE_0_11_105="            {stTime} = {static}({Thread}).{instant}();\n";
private static final String CODE_0_11_106="            ({r1}).{test}.{invoke}({classTest}, {r3});\n";
private static final String CODE_0_11_107="            {diff} = {static}({Thread}).{instant}()-{stTime};\n";
private static final String CODE_0_11_108="            {for} ({var} {b}: ({r1}).{after})'{'\n";
private static final String CODE_0_11_109="                ({b}).{invoke}({classTest});\n";
private static final String CODE_0_11_110="            '}'\n";
private static final String CODE_0_11_111="            {return} {setupNoException}({r1},{diff});\n";
private static final String CODE_0_11_112="        '}' {catch} ({InvokeTarget} {o})'{'\n";
private static final String CODE_0_11_113="            {diff} = {diff} == -1 ? {static}({Thread}).{instant}()-{stTime} : {diff};\n";
private static final String CODE_0_11_114="            {return} {setupError}({r1},{o},{processEx},{diff});\n";
private static final String CODE_0_11_115="        '}' {catch} ({Object} {o})'{'\n";
private static final String CODE_0_11_116="            {diff} = {diff} == -1 ? {static}({Thread}).{instant}()-{stTime} : {diff};\n";
private static final String CODE_0_11_117="            {return} {setupError}({r1},{o},{diff});\n";
private static final String CODE_0_11_118="        '}' {catch} '{'\n";
private static final String CODE_0_11_119="            {diff} = {diff} == -1 ? {static}({Thread}).{instant}()-{stTime} : {diff};\n";
private static final String CODE_0_11_120="            {return} {setupError}({r1},{null},{diff});\n";
private static final String CODE_0_11_121="        '}'\n";
private static final String CODE_0_11_122="    '}'\n";
private static final String CODE_0_11_123="    {private} {static} {String} {convert}({Object} {co})'{'\n";
private static final String CODE_0_11_124="        {try} '{'\n";
private static final String CODE_0_11_125="            {return} {static}({StringUtil}).{valueOf}({co});\n";
private static final String CODE_0_11_126="        '}' {catch} ({Object} {e})'{'\n";
private static final String CODE_0_11_127="            {return} {static}({Class}).{getClass}({co}).{getClassName}();\n";
private static final String CODE_0_11_128="        '}' {catch} '{'\n";
private static final String CODE_0_11_129="            {return} {static}({Class}).{getClass}({co}).{getClassName}();\n";
private static final String CODE_0_11_130="        '}'\n";
private static final String CODE_0_11_131="    '}'\n";
private static final String CODE_0_11_132="    {private} {static} {Result} {setupNoException}({ExecutedTest} {et1},{long} {tps1})'{'\n";
private static final String CODE_0_11_133="        {var} {res} = {new} {Result}();\n";
private static final String CODE_0_11_134="        {res}.{time} = {tps1}/1000000;\n";
private static final String CODE_0_11_135="        {var} {tt} = {cast}({Test})({et1}).{annotations}[0];\n";
private static final String CODE_0_11_136="        {if} (({tt}).{nullException}())'{'\n";
private static final String CODE_0_11_137="            ({res}).{success} = {false};\n";
private static final String CODE_0_11_138="            ({res}).{failMessage} = {new} {StringBuilder}(\"!=\").{append}({static}({StringUtil}).{valueOf}({null})).{toString}();\n";
private static final String CODE_0_11_139="        '}' {else} {if} (!{static}({ObjectsUtil}).{eq}(({tt}).{exception}(),{null}))'{'\n";
private static final String CODE_0_11_140="            ({res}).{success} = {false};\n";
private static final String CODE_0_11_141="            ({res}).{failMessage} = {new} {StringBuilder}(\"!=\").{append}(({tt}).{exception}().{getClassName}()).{toString}();\n";
private static final String CODE_0_11_142="        '}'\n";
private static final String CODE_0_11_143="        {return} {res};\n";
private static final String CODE_0_11_144="    '}'\n";
private static final String CODE_0_11_145="    {private} {static} {Result} {setupError}({ExecutedTest} {et2}, {InvokeTarget} {et3}, {boolean} {et4}, {long} {tps2})'{'\n";
private static final String CODE_0_11_146="        {var} {res} = {new} {Result}();\n";
private static final String CODE_0_11_147="        {res}.{time} = {tps2}/1000000;\n";
private static final String CODE_0_11_148="        {var} {ex} = ({et3}).{getCause}();\n";
private static final String CODE_0_11_149="        {if} ({et4}) '{'\n";
private static final String CODE_0_11_150="            {var} {tt} = {cast}({Test})({et2}).{annotations}[0];\n";
private static final String CODE_0_11_151="            {if} (({tt}).{nullException}())'{'\n";
private static final String CODE_0_11_152="                {if} (!{static}({ObjectsUtil}).{eq}({ex},{null}))'{'\n";
private static final String CODE_0_11_153="                    ({res}).{success} = {false};\n";
private static final String CODE_0_11_154="                    ({res}).{failMessage} = {static}({StringUtil}).{valueOf}({ex});\n";
private static final String CODE_0_11_155="                '}'\n";
private static final String CODE_0_11_156="            '}' {else} {if} (!{static}({ObjectsUtil}).{eq}(({tt}).{exception}(),{null})) '{'\n";
private static final String CODE_0_11_157="                {if} (!({tt}).{exception}().{isAssignableFrom}({static}({Class}).{getClass}({ex})))'{'\n";
private static final String CODE_0_11_158="                    ({res}).{success} = {false};\n";
private static final String CODE_0_11_159="                    ({res}).{failMessage} = {static}({StringUtil}).{valueOf}({ex});\n";
private static final String CODE_0_11_160="                '}'\n";
private static final String CODE_0_11_161="            '}' {else} '{'\n";
private static final String CODE_0_11_162="                ({res}).{success} = {false};\n";
private static final String CODE_0_11_163="                ({res}).{failMessage} = {static}({StringUtil}).{valueOf}({ex});\n";
private static final String CODE_0_11_164="            '}'\n";
private static final String CODE_0_11_165="        '}' {else} '{'\n";
private static final String CODE_0_11_166="            ({res}).{success} = {false};\n";
private static final String CODE_0_11_167="            ({res}).{failMessage} = {static}({StringUtil}).{valueOf}({ex});\n";
private static final String CODE_0_11_168="        '}'\n";
private static final String CODE_0_11_169="        {return} {res};\n";
private static final String CODE_0_11_170="    '}'\n";
private static final String CODE_0_11_171="    {private} {static} {Result} {setupError}({ExecutedTest} {et}, {Object} {er}, {long} {tps3})'{'\n";
private static final String CODE_0_11_172="        {var} {res} = {new} {Result}();\n";
private static final String CODE_0_11_173="        {res}.{time} = {tps3}/1000000;\n";
private static final String CODE_0_11_174="        ({res}).{success} = {false};\n";
private static final String CODE_0_11_175="        ({res}).{failMessage} = {static}({StringUtil}).{valueOf}({er});\n";
private static final String CODE_0_11_176="        {return} {res};\n";
private static final String CODE_0_11_177="    '}'\n";
private static final String CODE_0_11_178="'}'\n";
private static final String CODE_0_11_179="{public} {class} {InfoTest}'{'\n";
private static final String CODE_0_11_180="    {public} {int} {count};\n";
private static final String CODE_0_11_181="    {public} {atInt} {done}={new}();\n";
private static final String CODE_0_11_181_0="    {public} {int} {nbThreads};\n";
private static final String CODE_0_11_181_1="    {public} {long} {calls};\n";
private static final String CODE_0_11_182="    {public} {Method} {currentMethod};\n";
private static final String CODE_0_11_183="    {public} {String} {currentParams};\n";
private static final String CODE_0_11_184="'}'\n";
private static final String CODE_0_11_185="{public} {class} {Result}'{'\n";
private static final String CODE_0_11_186="    {public} {long} {time} = -1;\n";
private static final String CODE_0_11_187="    {public} {boolean} {success} = {true};\n";
private static final String CODE_0_11_188="    {public} {String} {pf} = \"\";\n";
private static final String CODE_0_11_189="    {public} {String} {failMessage} = \"\";\n";
private static final String CODE_0_11_189_0="    {public} {Class} {container};\n";
private static final String CODE_0_11_189_1="    {public} {ExecutedTest} {executed};\n";
private static final String CODE_0_11_189_2="    {public} {Object}[] {resultArgs} = '{''}';\n";
private static final String CODE_0_11_190="'}'\n";
private static final String CODE_0_11_191="{public} {class} {ExecutedTest}'{'\n";
private static final String CODE_0_11_192="    {public} {List}<{Method}> {before};\n";
private static final String CODE_0_11_193="    {public} {Method} {test};\n";
private static final String CODE_0_11_194="    {public} {Annotation}[] {annotations};\n";
private static final String CODE_0_11_194_0="    {public} {Annotation}[] {argsAnnot};\n";
private static final String CODE_0_11_195="    {public} {List}<{Method}> {after};\n";
private static final String CODE_0_11_196="    {public} {Method} {method};\n";
private static final String CODE_0_11_197="'}'\n";
private static final String CODE_0_11_198="{public} {annotation} {Before}'{''}'\n";
private static final String CODE_0_11_199="{public} {annotation} {After}'{''}'\n";
private static final String CODE_0_11_200="{public} {annotation} {Parameters}'{'\n";
private static final String CODE_0_11_201="    {String} {methodParam}();\n";
private static final String CODE_0_11_202="    {Class} {location}(){null};\n";
private static final String CODE_0_11_203="'}'\n";
private static final String CODE_0_11_204="{public} {annotation} {Test}'{'\n";
private static final String CODE_0_11_205="    {Class} {exception}(){null};\n";
private static final String CODE_0_11_206="    {boolean} {nullException}(){false};\n";
private static final String CODE_0_11_207="'}'\n";
private static final String CODE_0_11_207_0="{public} {annotation} {Args}'{'\n";
private static final String CODE_0_11_207_2="    {String}[] {argsValue}()'{''}';\n";
private static final String CODE_0_11_207_3="'}'\n";
private static final String CODE_0_11_208="{public} {abstract} {final} {class} {Assert}'{'\n";
private static final String CODE_0_11_209="    {public} {static} {void} {assert}({long}[] {at11}, {long}[] {at12})'{'\n";
private static final String CODE_0_11_210="        {assert}({at11}.{length},{at12}.{length});\n";
private static final String CODE_0_11_211="        {var} {la} = {at11}.{length};\n";
private static final String CODE_0_11_212="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_213="            {if} (!{static}({ObjectsUtil}).{eq}({at11}[{ea}], {at12}[{ea}]))'{'\n";
private static final String CODE_0_11_214="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_215="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_216="                ({d}).{expected}={at11}[{ea}];\n";
private static final String CODE_0_11_217="                ({d}).{found}={at12}[{ea}];\n";
private static final String CODE_0_11_218="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_219="                {throw} {d};\n";
private static final String CODE_0_11_220="            '}'\n";
private static final String CODE_0_11_221="        '}'\n";
private static final String CODE_0_11_222="    '}'\n";
private static final String CODE_0_11_223="    {public} {static} {void} {assert}({double}[] {at21}, {double}[] {at22})'{'\n";
private static final String CODE_0_11_224="        {assert}({at21}.{length},{at22}.{length});\n";
private static final String CODE_0_11_225="        {var} {la} = {at21}.{length};\n";
private static final String CODE_0_11_226="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_227="            {if} (!{static}({ObjectsUtil}).{eq}({at21}[{ea}], {at22}[{ea}]))'{'\n";
private static final String CODE_0_11_228="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_229="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_230="                ({d}).{expected}={at21}[{ea}];\n";
private static final String CODE_0_11_231="                ({d}).{found}={at22}[{ea}];\n";
private static final String CODE_0_11_232="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_233="                {throw} {d};\n";
private static final String CODE_0_11_234="            '}'\n";
private static final String CODE_0_11_235="        '}'\n";
private static final String CODE_0_11_236="    '}'\n";
private static final String CODE_0_11_237="    {public} {static} {void} {assert}({double}[] {at211}, {double}[] {at212}, {double} {at213})'{'\n";
private static final String CODE_0_11_238="        {assert}({at211}.{length},{at212}.{length});\n";
private static final String CODE_0_11_239="        {var} {la} = {at211}.{length};\n";
private static final String CODE_0_11_240="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_241="            {if} ({static}({Double}).{compare}({at211}[{ea}], {at212}[{ea}]) != 0 && !({static}({Math}).{abs}({at211}[{ea}]- {at212}[{ea}])<={at213}))'{'\n";
private static final String CODE_0_11_242="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_243="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_244="                ({d}).{expected}={at211}[{ea}];\n";
private static final String CODE_0_11_245="                ({d}).{found}={at212}[{ea}];\n";
private static final String CODE_0_11_246="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_247="                {throw} {d};\n";
private static final String CODE_0_11_248="            '}'\n";
private static final String CODE_0_11_249="        '}'\n";
private static final String CODE_0_11_250="    '}'\n";
private static final String CODE_0_11_251="    {public} {static} {void} {assert}({String}[] {at31}, {String}[] {at32})'{'\n";
private static final String CODE_0_11_252="        {assert}({at31}.{length},{at32}.{length});\n";
private static final String CODE_0_11_253="        {var} {la} = {at31}.{length};\n";
private static final String CODE_0_11_254="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_255="            {if} (!{static}({ObjectsUtil}).{eq}({at31}[{ea}], {at32}[{ea}]))'{'\n";
private static final String CODE_0_11_256="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_257="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_258="                ({d}).{expected}={at31}[{ea}];\n";
private static final String CODE_0_11_259="                ({d}).{found}={at32}[{ea}];\n";
private static final String CODE_0_11_260="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_261="                {throw} {d};\n";
private static final String CODE_0_11_262="            '}'\n";
private static final String CODE_0_11_263="        '}'\n";
private static final String CODE_0_11_264="    '}'\n";
private static final String CODE_0_11_265="    {public} {static} {void} {assert}({StringBuilder}[] {at41}, {StringBuilder}[] {at42})'{'\n";
private static final String CODE_0_11_266="        {assert}({at41}.{length},{at42}.{length});\n";
private static final String CODE_0_11_267="        {var} {la} = {at41}.{length};\n";
private static final String CODE_0_11_268="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_269="            {if} (!{static}({ObjectsUtil}).{eq}({at41}[{ea}], {at42}[{ea}]))'{'\n";
private static final String CODE_0_11_270="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_271="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_272="                ({d}).{expected}={at41}[{ea}];\n";
private static final String CODE_0_11_273="                ({d}).{found}={at42}[{ea}];\n";
private static final String CODE_0_11_274="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_275="                {throw} {d};\n";
private static final String CODE_0_11_276="            '}'\n";
private static final String CODE_0_11_277="        '}'\n";
private static final String CODE_0_11_278="    '}'\n";
private static final String CODE_0_11_279="    {public} {static} {void} {assert}({boolean}[] {at51}, {boolean}[] {at52})'{'\n";
private static final String CODE_0_11_280="        {assert}({at51}.{length},{at52}.{length});\n";
private static final String CODE_0_11_281="        {var} {la} = {at51}.{length};\n";
private static final String CODE_0_11_282="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_283="            {if} (!{static}({ObjectsUtil}).{eq}({at51}[{ea}], {at52}[{ea}]))'{'\n";
private static final String CODE_0_11_284="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_285="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_286="                ({d}).{expected}={at51}[{ea}];\n";
private static final String CODE_0_11_287="                ({d}).{found}={at52}[{ea}];\n";
private static final String CODE_0_11_288="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_289="                {throw} {d};\n";
private static final String CODE_0_11_290="            '}'\n";
private static final String CODE_0_11_291="        '}'\n";
private static final String CODE_0_11_292="    '}'\n";
private static final String CODE_0_11_293="    {public} {static} {void} {assert}({long} {a11}, {long} {a12})'{'\n";
private static final String CODE_0_11_294="        {if} (!{static}({ObjectsUtil}).{eq}({a11}, {a12}))'{'\n";
private static final String CODE_0_11_295="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_296="            ({d}).{expected}={a11};\n";
private static final String CODE_0_11_297="            ({d}).{found}={a12};\n";
private static final String CODE_0_11_298="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_299="            {throw} {d};\n";
private static final String CODE_0_11_300="        '}'\n";
private static final String CODE_0_11_301="    '}'\n";
private static final String CODE_0_11_302="    {public} {static} {void} {assert}({double} {a21}, {double} {a22})'{'\n";
private static final String CODE_0_11_303="        {if} (!{static}({ObjectsUtil}).{eq}({a21}, {a22}))'{'\n";
private static final String CODE_0_11_304="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_305="            ({d}).{expected}={a21};\n";
private static final String CODE_0_11_306="            ({d}).{found}={a22};\n";
private static final String CODE_0_11_307="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_308="            {throw} {d};\n";
private static final String CODE_0_11_309="        '}'\n";
private static final String CODE_0_11_310="    '}'\n";
private static final String CODE_0_11_311="    {public} {static} {void} {assert}({double} {a211}, {double} {a212}, {double} {a213})'{'\n";
private static final String CODE_0_11_312="        {if} ({static}({Double}).{compare}({a211}, {a212}) != 0 && !({static}({Math}).{abs}({a211}- {a212})<={a213}))'{'\n";
private static final String CODE_0_11_313="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_314="            ({d}).{expected}={a211};\n";
private static final String CODE_0_11_315="            ({d}).{found}={a212};\n";
private static final String CODE_0_11_316="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_317="            {throw} {d};\n";
private static final String CODE_0_11_318="        '}'\n";
private static final String CODE_0_11_319="    '}'\n";
private static final String CODE_0_11_320="    {public} {static} {void} {assert}({String} {a31}, {String} {a32})'{'\n";
private static final String CODE_0_11_321="        {if} (!{static}({ObjectsUtil}).{eq}({a31}, {a32}))'{'\n";
private static final String CODE_0_11_322="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_323="            ({d}).{expected}={a31};\n";
private static final String CODE_0_11_324="            ({d}).{found}={a32};\n";
private static final String CODE_0_11_325="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_326="            {throw} {d};\n";
private static final String CODE_0_11_327="        '}'\n";
private static final String CODE_0_11_328="    '}'\n";
private static final String CODE_0_11_329="    {public} {static} {void} {assert}({StringBuilder} {a41}, {StringBuilder} {a42})'{'\n";
private static final String CODE_0_11_330="        {if} (!{static}({ObjectsUtil}).{eq}({a41}, {a42}))'{'\n";
private static final String CODE_0_11_331="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_332="            ({d}).{expected}={a41};\n";
private static final String CODE_0_11_333="            ({d}).{found}={a42};\n";
private static final String CODE_0_11_334="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_335="            {throw} {d};\n";
private static final String CODE_0_11_336="        '}'\n";
private static final String CODE_0_11_337="    '}'\n";
private static final String CODE_0_11_338="    {public} {static} {void} {assert}({boolean} {a51}, {boolean} {a52})'{'\n";
private static final String CODE_0_11_339="        {if} (!{static}({ObjectsUtil}).{eq}({a51}, {a52}))'{'\n";
private static final String CODE_0_11_340="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_341="            ({d}).{expected}={a51};\n";
private static final String CODE_0_11_342="            ({d}).{found}={a52};\n";
private static final String CODE_0_11_343="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_344="            {throw} {d};\n";
private static final String CODE_0_11_345="        '}'\n";
private static final String CODE_0_11_346="    '}'\n";
private static final String CODE_0_11_347="    {public} {static} {void} {assertNot}({long}[] {ant11}, {long}[] {ant12})'{'\n";
private static final String CODE_0_11_348="        {if} (!{static}({ObjectsUtil}).{eq}({ant11}.{length},{ant12}.{length}))'{'\n";
private static final String CODE_0_11_349="            {return};\n";
private static final String CODE_0_11_350="        '}'\n";
private static final String CODE_0_11_351="        {assert}({ant11}.{length},{ant12}.{length});\n";
private static final String CODE_0_11_352="        {var} {la} = {ant11}.{length};\n";
private static final String CODE_0_11_353="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_354="            {if} (!{static}({ObjectsUtil}).{eq}({ant11}[{ea}], {ant12}[{ea}]))'{'\n";
private static final String CODE_0_11_355="                {return};\n";
private static final String CODE_0_11_356="            '}'\n";
private static final String CODE_0_11_357="        '}'\n";
private static final String CODE_0_11_358="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_359="        ({d}).{expected}={ant11};\n";
private static final String CODE_0_11_360="        ({d}).{found}={ant12};\n";
private static final String CODE_0_11_361="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_362="        {throw} {d};\n";
private static final String CODE_0_11_363="    '}'\n";
private static final String CODE_0_11_364="    {public} {static} {void} {assertNot}({double}[] {ant21}, {double}[] {ant22})'{'\n";
private static final String CODE_0_11_365="        {if} (!{static}({ObjectsUtil}).{eq}({ant21}.{length},{ant22}.{length}))'{'\n";
private static final String CODE_0_11_366="            {return};\n";
private static final String CODE_0_11_367="        '}'\n";
private static final String CODE_0_11_368="        {var} {la} = {ant21}.{length};\n";
private static final String CODE_0_11_369="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_370="            {if} (!{static}({ObjectsUtil}).{eq}({ant21}[{ea}], {ant22}[{ea}]))'{'\n";
private static final String CODE_0_11_371="                {return};\n";
private static final String CODE_0_11_372="            '}'\n";
private static final String CODE_0_11_373="        '}'\n";
private static final String CODE_0_11_374="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_375="        ({d}).{expected}={ant21};\n";
private static final String CODE_0_11_376="        ({d}).{found}={ant22};\n";
private static final String CODE_0_11_377="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_378="        {throw} {d};\n";
private static final String CODE_0_11_379="    '}'\n";
private static final String CODE_0_11_380="    {public} {static} {void} {assertNot}({double}[] {ant211}, {double}[] {ant212}, {double} {ant213})'{'\n";
private static final String CODE_0_11_381="        {if} (!{static}({ObjectsUtil}).{eq}({ant211}.{length},{ant212}.{length}))'{'\n";
private static final String CODE_0_11_382="            {return};\n";
private static final String CODE_0_11_383="        '}'\n";
private static final String CODE_0_11_384="        {var} {la} = {ant211}.{length};\n";
private static final String CODE_0_11_385="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_386="            {if} ({static}({Double}).{compare}({ant211}[{ea}], {ant212}[{ea}]) != 0 && !({static}({Math}).{abs}({ant211}[{ea}]- {ant212}[{ea}])<={ant213}))'{'\n";
private static final String CODE_0_11_387="                {return};\n";
private static final String CODE_0_11_388="            '}'\n";
private static final String CODE_0_11_389="        '}'\n";
private static final String CODE_0_11_390="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_391="        ({d}).{expected}={ant211};\n";
private static final String CODE_0_11_392="        ({d}).{found}={ant212};\n";
private static final String CODE_0_11_393="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_394="        {throw} {d};\n";
private static final String CODE_0_11_395="    '}'\n";
private static final String CODE_0_11_396="    {public} {static} {void} {assertNot}({String}[] {ant31}, {String}[] {ant32})'{'\n";
private static final String CODE_0_11_397="        {if} (!{static}({ObjectsUtil}).{eq}({ant31}.{length},{ant32}.{length}))'{'\n";
private static final String CODE_0_11_398="            {return};\n";
private static final String CODE_0_11_399="        '}'\n";
private static final String CODE_0_11_400="        {var} {la} = {ant31}.{length};\n";
private static final String CODE_0_11_401="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_402="            {if} (!{static}({ObjectsUtil}).{eq}({ant31}[{ea}], {ant32}[{ea}]))'{'\n";
private static final String CODE_0_11_403="                {return};\n";
private static final String CODE_0_11_404="            '}'\n";
private static final String CODE_0_11_405="        '}'\n";
private static final String CODE_0_11_406="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_407="        ({d}).{expected}={ant31};\n";
private static final String CODE_0_11_408="        ({d}).{found}={ant32};\n";
private static final String CODE_0_11_409="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_410="        {throw} {d};\n";
private static final String CODE_0_11_411="    '}'\n";
private static final String CODE_0_11_412="    {public} {static} {void} {assertNot}({StringBuilder}[] {ant41}, {StringBuilder}[] {ant42})'{'\n";
private static final String CODE_0_11_413="        {if} (!{static}({ObjectsUtil}).{eq}({ant41}.{length},{ant42}.{length}))'{'\n";
private static final String CODE_0_11_414="            {return};\n";
private static final String CODE_0_11_415="        '}'\n";
private static final String CODE_0_11_416="        {var} {la} = {ant41}.{length};\n";
private static final String CODE_0_11_417="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_418="            {if} (!{static}({ObjectsUtil}).{eq}({ant41}[{ea}], {ant42}[{ea}]))'{'\n";
private static final String CODE_0_11_419="                {return};\n";
private static final String CODE_0_11_420="            '}'\n";
private static final String CODE_0_11_421="        '}'\n";
private static final String CODE_0_11_422="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_423="        ({d}).{expected}={ant41};\n";
private static final String CODE_0_11_424="        ({d}).{found}={ant42};\n";
private static final String CODE_0_11_425="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_426="        {throw} {d};\n";
private static final String CODE_0_11_427="    '}'\n";
private static final String CODE_0_11_428="    {public} {static} {void} {assertNot}({boolean}[] {ant51}, {boolean}[] {ant52})'{'\n";
private static final String CODE_0_11_429="        {if} (!{static}({ObjectsUtil}).{eq}({ant51}.{length},{ant52}.{length}))'{'\n";
private static final String CODE_0_11_430="            {return};\n";
private static final String CODE_0_11_431="        '}'\n";
private static final String CODE_0_11_432="        {var} {la} = {ant51}.{length};\n";
private static final String CODE_0_11_433="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_434="            {if} (!{static}({ObjectsUtil}).{eq}({ant51}[{ea}], {ant52}[{ea}]))'{'\n";
private static final String CODE_0_11_435="                {return};\n";
private static final String CODE_0_11_436="            '}'\n";
private static final String CODE_0_11_437="        '}'\n";
private static final String CODE_0_11_438="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_439="        ({d}).{expected}={ant51};\n";
private static final String CODE_0_11_440="        ({d}).{found}={ant52};\n";
private static final String CODE_0_11_441="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_442="        {throw} {d};\n";
private static final String CODE_0_11_443="    '}'\n";
private static final String CODE_0_11_444="    {public} {static} {void} {assertNot}({long} {an11}, {long} {an12})'{'\n";
private static final String CODE_0_11_445="        {if} ({static}({ObjectsUtil}).{eq}({an11}, {an12}))'{'\n";
private static final String CODE_0_11_446="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_447="            ({d}).{expected}={an11};\n";
private static final String CODE_0_11_448="            ({d}).{found}={an12};\n";
private static final String CODE_0_11_449="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_450="            {throw} {d};\n";
private static final String CODE_0_11_451="        '}'\n";
private static final String CODE_0_11_452="    '}'\n";
private static final String CODE_0_11_453="    {public} {static} {void} {assertNot}({double} {an21}, {double} {an22})'{'\n";
private static final String CODE_0_11_454="        {if} ({static}({ObjectsUtil}).{eq}({an21}, {an22}))'{'\n";
private static final String CODE_0_11_455="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_456="            ({d}).{expected}={an21};\n";
private static final String CODE_0_11_457="            ({d}).{found}={an22};\n";
private static final String CODE_0_11_458="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_459="            {throw} {d};\n";
private static final String CODE_0_11_460="        '}'\n";
private static final String CODE_0_11_461="    '}'\n";
private static final String CODE_0_11_462="    {public} {static} {void} {assertNot}({double} {an211}, {double} {an212}, {double} {an213})'{'\n";
private static final String CODE_0_11_463="        {if} ({static}({Double}).{compare}({an211}, {an212}) == 0 || {static}({Math}).{abs}({an211}- {an212})<={an213})'{'\n";
private static final String CODE_0_11_464="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_465="            ({d}).{expected}={a211};\n";
private static final String CODE_0_11_466="            ({d}).{found}={a212};\n";
private static final String CODE_0_11_467="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_468="            {throw} {d};\n";
private static final String CODE_0_11_469="        '}'\n";
private static final String CODE_0_11_470="    '}'\n";
private static final String CODE_0_11_471="    {public} {static} {void} {assertNot}({String} {an31}, {String} {an32})'{'\n";
private static final String CODE_0_11_472="        {if} ({static}({ObjectsUtil}).{eq}({an31}, {an32}))'{'\n";
private static final String CODE_0_11_473="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_474="            ({d}).{expected}={an31};\n";
private static final String CODE_0_11_475="            ({d}).{found}={an32};\n";
private static final String CODE_0_11_476="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_477="            {throw} {d};\n";
private static final String CODE_0_11_478="        '}'\n";
private static final String CODE_0_11_479="    '}'\n";
private static final String CODE_0_11_480="    {public} {static} {void} {assertNot}({StringBuilder} {an41}, {StringBuilder} {an42})'{'\n";
private static final String CODE_0_11_481="        {if} ({static}({ObjectsUtil}).{eq}({an41}, {an42}))'{'\n";
private static final String CODE_0_11_482="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_483="            ({d}).{expected}={an41};\n";
private static final String CODE_0_11_484="            ({d}).{found}={an42};\n";
private static final String CODE_0_11_485="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_486="            {throw} {d};\n";
private static final String CODE_0_11_487="        '}'\n";
private static final String CODE_0_11_488="    '}'\n";
private static final String CODE_0_11_489="    {public} {static} {void} {assertNot}({boolean} {an51}, {boolean} {an52})'{'\n";
private static final String CODE_0_11_490="        {if} ({static}({ObjectsUtil}).{eq}({an51}, {an52}))'{'\n";
private static final String CODE_0_11_491="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_492="            ({d}).{expected}={an51};\n";
private static final String CODE_0_11_493="            ({d}).{found}={an52};\n";
private static final String CODE_0_11_494="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_495="            {throw} {d};\n";
private static final String CODE_0_11_496="        '}'\n";
private static final String CODE_0_11_497="    '}'\n";
private static final String CODE_0_11_498="    {public} {static} {void} {assertTrue}({boolean} {a6})'{'\n";
private static final String CODE_0_11_499="        {if} (!{a6})'{'\n";
private static final String CODE_0_11_500="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_501="            ({d}).{expected}={true};\n";
private static final String CODE_0_11_502="            ({d}).{found}={false};\n";
private static final String CODE_0_11_503="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_504="            {throw} {d};\n";
private static final String CODE_0_11_505="        '}'\n";
private static final String CODE_0_11_506="    '}'\n";
private static final String CODE_0_11_507="    {public} {static} {void} {assertFalse}({boolean} {a61})'{'\n";
private static final String CODE_0_11_508="        {if} ({a61})'{'\n";
private static final String CODE_0_11_509="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_510="            ({d}).{expected}={false};\n";
private static final String CODE_0_11_511="            ({d}).{found}={true};\n";
private static final String CODE_0_11_512="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_513="            {throw} {d};\n";
private static final String CODE_0_11_514="        '}'\n";
private static final String CODE_0_11_515="    '}'\n";
private static final String CODE_0_11_516="    {public} {static} {void} {assertNull}({Object} {a7})'{'\n";
private static final String CODE_0_11_517="        {if} (!{static}({ObjectsUtil}).{eq}({a7}, {null}))'{'\n";
private static final String CODE_0_11_518="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_519="            ({d}).{expected}={null};\n";
private static final String CODE_0_11_520="            ({d}).{found}={a7};\n";
private static final String CODE_0_11_521="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_522="            {throw} {d};\n";
private static final String CODE_0_11_523="        '}'\n";
private static final String CODE_0_11_524="    '}'\n";
private static final String CODE_0_11_525="    {public} {static} {void} {assertNotNull}({Object} {a8})'{'\n";
private static final String CODE_0_11_526="        {if} ({static}({ObjectsUtil}).{eq}({a8}, {null}))'{'\n";
private static final String CODE_0_11_527="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_528="            ({d}).{foundNull}={true};\n";
private static final String CODE_0_11_529="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_530="            {throw} {d};\n";
private static final String CODE_0_11_531="        '}'\n";
private static final String CODE_0_11_532="    '}'\n";
private static final String CODE_0_11_533="    {public} {static} {void} {assertSame}({Object} {a91}, {Object} {a92})'{'\n";
private static final String CODE_0_11_534="        {if} (!{static}({ObjectsUtil}).{eq}({a91}, {a92}))'{'\n";
private static final String CODE_0_11_535="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_536="            ({d}).{expected}={a91};\n";
private static final String CODE_0_11_537="            ({d}).{found}={a92};\n";
private static final String CODE_0_11_538="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_539="            {throw} {d};\n";
private static final String CODE_0_11_540="        '}'\n";
private static final String CODE_0_11_541="    '}'\n";
private static final String CODE_0_11_542="    {public} {static} {void} {assertNotSame}({Object} {an91}, {Object} {an92})'{'\n";
private static final String CODE_0_11_543="        {if} ({static}({ObjectsUtil}).{eq}({an91}, {an92}))'{'\n";
private static final String CODE_0_11_544="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_545="            ({d}).{expected}={an91};\n";
private static final String CODE_0_11_546="            ({d}).{found}={an92};\n";
private static final String CODE_0_11_547="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_548="            {throw} {d};\n";
private static final String CODE_0_11_549="        '}'\n";
private static final String CODE_0_11_550="    '}'\n";
private static final String CODE_0_11_551="    {public} {static} {void} {assert}({Object}[] {at101}, {Object}[] {at102}, {Fct}<?,?,{boolean}> {at103})'{'\n";
private static final String CODE_0_11_552="        {assert}({at101}.{length},{at102}.{length});\n";
private static final String CODE_0_11_553="        {var} {la} = {at101}.{length};\n";
private static final String CODE_0_11_554="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_555="            {if} (!({at103}).{call}({at101}[{ea}], {at102}[{ea}]))'{'\n";
private static final String CODE_0_11_556="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_557="                ({d}).{index}={ea};\n";
private static final String CODE_0_11_558="                ({d}).{expected}={at101}[{ea}];\n";
private static final String CODE_0_11_559="                ({d}).{found}={at102}[{ea}];\n";
private static final String CODE_0_11_560="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_561="                {throw} {d};\n";
private static final String CODE_0_11_562="            '}'\n";
private static final String CODE_0_11_563="        '}'\n";
private static final String CODE_0_11_564="    '}'\n";
private static final String CODE_0_11_565="    {public} {static} {void} {assert}({Object}[] {at111}, {Fct}<?,{boolean}> {at112})'{'\n";
private static final String CODE_0_11_566="        {for}({var} {ea}:{at111})'{'\n";
private static final String CODE_0_11_567="            {if} (!({at112}).{call}({ea}))'{'\n";
private static final String CODE_0_11_568="                {var} {d} = {new} {EltDifference}();\n";
private static final String CODE_0_11_569="                ({d}).{index}=([{ea}]);\n";
private static final String CODE_0_11_570="                ({d}).{found}={ea};\n";
private static final String CODE_0_11_571="                ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_572="                {throw} {d};\n";
private static final String CODE_0_11_573="            '}'\n";
private static final String CODE_0_11_574="        '}'\n";
private static final String CODE_0_11_575="    '}'\n";
private static final String CODE_0_11_576="    {public} {static} {void} {assert}({Object} {a101}, {Object} {a102}, {Fct}<?,?,{boolean}> {a103})'{'\n";
private static final String CODE_0_11_577="        {if} (!({a103}).{call}({a101}, {a102}))'{'\n";
private static final String CODE_0_11_578="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_579="            ({d}).{expected}={a101};\n";
private static final String CODE_0_11_580="            ({d}).{found}={a102};\n";
private static final String CODE_0_11_581="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_582="            {throw} {d};\n";
private static final String CODE_0_11_583="        '}'\n";
private static final String CODE_0_11_584="    '}'\n";
private static final String CODE_0_11_585="    {public} {static} {void} {assert}({Object} {a111}, {Fct}<?,{boolean}> {a112})'{'\n";
private static final String CODE_0_11_586="        {if} (!({a112}).{call}({a111}))'{'\n";
private static final String CODE_0_11_587="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_588="            ({d}).{foundNotTrue}={true};\n";
private static final String CODE_0_11_589="            ({d}).{found}={a111};\n";
private static final String CODE_0_11_590="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_591="            {throw} {d};\n";
private static final String CODE_0_11_592="        '}'\n";
private static final String CODE_0_11_593="    '}'\n";
private static final String CODE_0_11_594="    {public} {static} {void} {assertNot}({Object}[] {ant101}, {Object}[] {ant102}, {Fct}<?,?,{boolean}> {ant103})'{'\n";
private static final String CODE_0_11_595="        {if} (!{static}({ObjectsUtil}).{eq}({ant101}.{length},{ant102}.{length}))'{'\n";
private static final String CODE_0_11_596="            {return};\n";
private static final String CODE_0_11_597="        '}'\n";
private static final String CODE_0_11_598="        {var} {la} = {ant101}.{length};\n";
private static final String CODE_0_11_599="        {iter}({int} {ea}=0;{la};1)'{'\n";
private static final String CODE_0_11_600="            {if} (!({ant103}).{call}({ant101}[{ea}], {ant102}[{ea}]))'{'\n";
private static final String CODE_0_11_601="                {return};\n";
private static final String CODE_0_11_602="            '}'\n";
private static final String CODE_0_11_603="        '}'\n";
private static final String CODE_0_11_604="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_605="        ({d}).{found}={ant111};\n";
private static final String CODE_0_11_606="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_607="        {throw} {d};\n";
private static final String CODE_0_11_608="    '}'\n";
private static final String CODE_0_11_609="    {public} {static} {void} {assertNot}({Object}[] {ant111}, {Fct}<?,{boolean}> {ant112})'{'\n";
private static final String CODE_0_11_610="        {for}({var} {ea}:{ant111})'{'\n";
private static final String CODE_0_11_611="            {if} (!({ant112}).{call}({ea}))'{'\n";
private static final String CODE_0_11_612="                {return};\n";
private static final String CODE_0_11_613="            '}'\n";
private static final String CODE_0_11_614="        '}'\n";
private static final String CODE_0_11_615="        {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_616="        ({d}).{found}={ant111};\n";
private static final String CODE_0_11_617="        ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_618="        {throw} {d};\n";
private static final String CODE_0_11_619="    '}'\n";
private static final String CODE_0_11_620="    {public} {static} {void} {assertNot}({Object} {an101}, {Object} {an102}, {Fct}<?,?,{boolean}> {an103})'{'\n";
private static final String CODE_0_11_621="        {if} (({an103}).{call}({an101}, {an102}))'{'\n";
private static final String CODE_0_11_622="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_623="            ({d}).{expected}={an101};\n";
private static final String CODE_0_11_624="            ({d}).{found}={an102};\n";
private static final String CODE_0_11_625="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_626="            {throw} {d};\n";
private static final String CODE_0_11_627="        '}'\n";
private static final String CODE_0_11_628="    '}'\n";
private static final String CODE_0_11_629="    {public} {static} {void} {assertNot}({Object} {an111}, {Fct}<?,{boolean}> {an112})'{'\n";
private static final String CODE_0_11_630="        {if} (({an112}).{call}({an111}))'{'\n";
private static final String CODE_0_11_631="            {var} {d} = {new} {Difference}();\n";
private static final String CODE_0_11_632="            ({d}).{foundNotTrue}={true};\n";
private static final String CODE_0_11_633="            ({d}).{found}={an111};\n";
private static final String CODE_0_11_634="            ({d}).{stackDiff} = {static}({Stack}).{current}();\n";
private static final String CODE_0_11_635="            {throw} {d};\n";
private static final String CODE_0_11_636="        '}'\n";
private static final String CODE_0_11_637="    '}'\n";
private static final String CODE_0_11_638="'}'\n";
private MessCdmBaseGr(){}
public static StringMap<String> ms(){
StringMap<String> m = new StringMap<String>();
//m.addEntry(CODE_0_1_1,resourcesLgAliasesEnKeywords());
//m.addEntry(CODE_0_1_2,resourcesLgAliasesEnMessages());
//m.addEntry(CODE_0_1_3,resourcesLgAliasesEnTypes());
//m.addEntry(CODE_0_1_4,resourcesLgAliasesFrKeywords());
//m.addEntry(CODE_0_1_5,resourcesLgAliasesFrMessages());
//m.addEntry(CODE_0_1_6,resourcesLgAliasesFrTypes());
m.addEntry(CODE_0_1_9,resourcesLgTestsRun());
return m;
}
static String resourcesLgTestsRun(){
String f=CODE_0_11_0;
f+=CODE_0_11_1;
f+=CODE_0_11_2;
f+=CODE_0_11_3;
f+=CODE_0_11_4;
f+=CODE_0_11_5;
f+=CODE_0_11_6;
f+=CODE_0_11_7;
f+=CODE_0_11_8;
f+=CODE_0_11_9;
f+=CODE_0_11_10;
f+=CODE_0_11_11;
f+=CODE_0_11_11_0;
f+=CODE_0_11_12;
f+=CODE_0_11_13;
f+=CODE_0_11_14;
f+=CODE_0_11_14_0;
f+=CODE_0_11_15;
f+=CODE_0_11_16;
f+=CODE_0_11_17;
f+=CODE_0_11_18;
f+=CODE_0_11_19;
f+=CODE_0_11_20;
f+=CODE_0_11_21;
f+=CODE_0_11_22;
f+=CODE_0_11_23;
f+=CODE_0_11_24;
f+=CODE_0_11_25;
f+=CODE_0_11_26;
f+=CODE_0_11_27;
f+=CODE_0_11_28;
f+=CODE_0_11_29;
f+=CODE_0_11_30;
f+=CODE_0_11_31;
f+=CODE_0_11_32;
f+=CODE_0_11_33;
f+=CODE_0_11_34;
f+=CODE_0_11_35;
f+=CODE_0_11_36;
f+=CODE_0_11_37;
f+=CODE_0_11_38;
f+=CODE_0_11_39;
f+=CODE_0_11_40;
f+=CODE_0_11_41;
f+=CODE_0_11_42;
f+=CODE_0_11_43;
f+=CODE_0_11_44;
f+=CODE_0_11_45;
f+=CODE_0_11_46;
f+=CODE_0_11_47;
f+=CODE_0_11_48;
f+=CODE_0_11_49;
f+=CODE_0_11_50;
f+=CODE_0_11_51;
f+=CODE_0_11_52;
f+=CODE_0_11_53;
f+=CODE_0_11_53_0;
f+=CODE_0_11_53_1;
f+=CODE_0_11_54;
f+=CODE_0_11_55;
f+=CODE_0_11_56;
f+=CODE_0_11_57;
f+=CODE_0_11_58_0;
f+=CODE_0_11_58_1;
f+=CODE_0_11_58_2;
f+=CODE_0_11_58_3;
f+=CODE_0_11_58_4;
f+=CODE_0_11_58_5;
f+=CODE_0_11_58_6;
f+=CODE_0_11_59;
f+=CODE_0_11_60;
f+=CODE_0_11_61;
f+=CODE_0_11_62;
f+=CODE_0_11_63;
f+=CODE_0_11_64;
f+=CODE_0_11_65;
f+=CODE_0_11_66;
f+=CODE_0_11_67;
f+=CODE_0_11_68;
f+=CODE_0_11_69;
f+=CODE_0_11_70;
f+=CODE_0_11_71;
f+=CODE_0_11_72;
f+=CODE_0_11_73;
f+=CODE_0_11_74;
f+=CODE_0_11_75;
f+=CODE_0_11_76;
f+=CODE_0_11_77;
f+=CODE_0_11_78;
f+=CODE_0_11_78_0;
f+=CODE_0_11_78_1;
f+=CODE_0_11_78_2;
f+=CODE_0_11_79;
f+=CODE_0_11_80;
f+=CODE_0_11_81;
f+=CODE_0_11_82;
f+=CODE_0_11_82_0;
f+=CODE_0_11_82_1;
f+=CODE_0_11_82_2;
f+=CODE_0_11_82_3;
f+=CODE_0_11_83;
f+=CODE_0_11_84;
f+=CODE_0_11_85;
f+=CODE_0_11_85_0;
f+=CODE_0_11_85_1;
f+=CODE_0_11_85_2;
f+=CODE_0_11_86;
f+=CODE_0_11_87;
f+=CODE_0_11_90;
f+=CODE_0_11_55_0;
f+=CODE_0_11_56_0;
f+=CODE_0_11_58;
f+=CODE_0_11_88_0;
f+=CODE_0_11_86_0;
f+=CODE_0_11_88;
f+=CODE_0_11_86_1;
f+=CODE_0_11_86_2;
f+=CODE_0_11_86_3;
f+=CODE_0_11_86_4;
f+=CODE_0_11_86_5;
f+=CODE_0_11_86_6;
f+=CODE_0_11_88;
f+=CODE_0_11_87_0;
f+=CODE_0_11_87_1;
f+=CODE_0_11_89;
f+=CODE_0_11_90_1;
f+=CODE_0_11_90_2;
f+=CODE_0_11_90_3;
f+=CODE_0_11_90_0;
f+=CODE_0_11_91;
f+=CODE_0_11_92;
f+=CODE_0_11_93;
f+=CODE_0_11_94;
f+=CODE_0_11_95;
f+=CODE_0_11_96;
f+=CODE_0_11_97;
f+=CODE_0_11_98;
f+=CODE_0_11_99;
f+=CODE_0_11_100;
f+=CODE_0_11_101;
f+=CODE_0_11_102;
f+=CODE_0_11_103;
f+=CODE_0_11_104;
f+=CODE_0_11_105;
f+=CODE_0_11_106;
f+=CODE_0_11_107;
f+=CODE_0_11_108;
f+=CODE_0_11_109;
f+=CODE_0_11_110;
f+=CODE_0_11_111;
f+=CODE_0_11_112;
f+=CODE_0_11_113;
f+=CODE_0_11_114;
f+=CODE_0_11_115;
f+=CODE_0_11_116;
f+=CODE_0_11_117;
f+=CODE_0_11_118;
f+=CODE_0_11_119;
f+=CODE_0_11_120;
f+=CODE_0_11_121;
f+=CODE_0_11_122;
f+=CODE_0_11_123;
f+=CODE_0_11_124;
f+=CODE_0_11_125;
f+=CODE_0_11_126;
f+=CODE_0_11_127;
f+=CODE_0_11_128;
f+=CODE_0_11_129;
f+=CODE_0_11_130;
f+=CODE_0_11_131;
f+=CODE_0_11_132;
f+=CODE_0_11_133;
f+=CODE_0_11_134;
f+=CODE_0_11_135;
f+=CODE_0_11_136;
f+=CODE_0_11_137;
f+=CODE_0_11_138;
f+=CODE_0_11_139;
f+=CODE_0_11_140;
f+=CODE_0_11_141;
f+=CODE_0_11_142;
f+=CODE_0_11_143;
f+=CODE_0_11_144;
f+=CODE_0_11_145;
f+=CODE_0_11_146;
f+=CODE_0_11_147;
f+=CODE_0_11_148;
f+=CODE_0_11_149;
f+=CODE_0_11_150;
f+=CODE_0_11_151;
f+=CODE_0_11_152;
f+=CODE_0_11_153;
f+=CODE_0_11_154;
f+=CODE_0_11_155;
f+=CODE_0_11_156;
f+=CODE_0_11_157;
f+=CODE_0_11_158;
f+=CODE_0_11_159;
f+=CODE_0_11_160;
f+=CODE_0_11_161;
f+=CODE_0_11_162;
f+=CODE_0_11_163;
f+=CODE_0_11_164;
f+=CODE_0_11_165;
f+=CODE_0_11_166;
f+=CODE_0_11_167;
f+=CODE_0_11_168;
f+=CODE_0_11_169;
f+=CODE_0_11_170;
f+=CODE_0_11_171;
f+=CODE_0_11_172;
f+=CODE_0_11_173;
f+=CODE_0_11_174;
f+=CODE_0_11_175;
f+=CODE_0_11_176;
f+=CODE_0_11_177;
f+=CODE_0_11_178;
f+=CODE_0_11_179;
f+=CODE_0_11_180;
f+=CODE_0_11_181;
f+=CODE_0_11_181_0;
f+=CODE_0_11_181_1;
f+=CODE_0_11_182;
f+=CODE_0_11_183;
f+=CODE_0_11_184;
f+=CODE_0_11_185;
f+=CODE_0_11_186;
f+=CODE_0_11_187;
f+=CODE_0_11_188;
f+=CODE_0_11_189;
f+=CODE_0_11_189_0;
f+=CODE_0_11_189_1;
f+=CODE_0_11_189_2;
f+=CODE_0_11_190;
f+=CODE_0_11_191;
f+=CODE_0_11_192;
f+=CODE_0_11_193;
f+=CODE_0_11_194;
f+=CODE_0_11_194_0;
f+=CODE_0_11_195;
f+=CODE_0_11_196;
f+=CODE_0_11_197;
f+=CODE_0_11_198;
f+=CODE_0_11_199;
f+=CODE_0_11_200;
f+=CODE_0_11_201;
f+=CODE_0_11_202;
f+=CODE_0_11_203;
f+=CODE_0_11_204;
f+=CODE_0_11_205;
f+=CODE_0_11_206;
f+=CODE_0_11_207;
f+=CODE_0_11_207_0;
f+=CODE_0_11_207_2;
f+=CODE_0_11_207_3;
f+=CODE_0_11_208;
f+=CODE_0_11_209;
f+=CODE_0_11_210;
f+=CODE_0_11_211;
f+=CODE_0_11_212;
f+=CODE_0_11_213;
f+=CODE_0_11_214;
f+=CODE_0_11_215;
f+=CODE_0_11_216;
f+=CODE_0_11_217;
f+=CODE_0_11_218;
f+=CODE_0_11_219;
f+=CODE_0_11_220;
f+=CODE_0_11_221;
f+=CODE_0_11_222;
f+=CODE_0_11_223;
f+=CODE_0_11_224;
f+=CODE_0_11_225;
f+=CODE_0_11_226;
f+=CODE_0_11_227;
f+=CODE_0_11_228;
f+=CODE_0_11_229;
f+=CODE_0_11_230;
f+=CODE_0_11_231;
f+=CODE_0_11_232;
f+=CODE_0_11_233;
f+=CODE_0_11_234;
f+=CODE_0_11_235;
f+=CODE_0_11_236;
f+=CODE_0_11_237;
f+=CODE_0_11_238;
f+=CODE_0_11_239;
f+=CODE_0_11_240;
f+=CODE_0_11_241;
f+=CODE_0_11_242;
f+=CODE_0_11_243;
f+=CODE_0_11_244;
f+=CODE_0_11_245;
f+=CODE_0_11_246;
f+=CODE_0_11_247;
f+=CODE_0_11_248;
f+=CODE_0_11_249;
f+=CODE_0_11_250;
f+=CODE_0_11_251;
f+=CODE_0_11_252;
f+=CODE_0_11_253;
f+=CODE_0_11_254;
f+=CODE_0_11_255;
f+=CODE_0_11_256;
f+=CODE_0_11_257;
f+=CODE_0_11_258;
f+=CODE_0_11_259;
f+=CODE_0_11_260;
f+=CODE_0_11_261;
f+=CODE_0_11_262;
f+=CODE_0_11_263;
f+=CODE_0_11_264;
f+=CODE_0_11_265;
f+=CODE_0_11_266;
f+=CODE_0_11_267;
f+=CODE_0_11_268;
f+=CODE_0_11_269;
f+=CODE_0_11_270;
f+=CODE_0_11_271;
f+=CODE_0_11_272;
f+=CODE_0_11_273;
f+=CODE_0_11_274;
f+=CODE_0_11_275;
f+=CODE_0_11_276;
f+=CODE_0_11_277;
f+=CODE_0_11_278;
f+=CODE_0_11_279;
f+=CODE_0_11_280;
f+=CODE_0_11_281;
f+=CODE_0_11_282;
f+=CODE_0_11_283;
f+=CODE_0_11_284;
f+=CODE_0_11_285;
f+=CODE_0_11_286;
f+=CODE_0_11_287;
f+=CODE_0_11_288;
f+=CODE_0_11_289;
f+=CODE_0_11_290;
f+=CODE_0_11_291;
f+=CODE_0_11_292;
f+=CODE_0_11_293;
f+=CODE_0_11_294;
f+=CODE_0_11_295;
f+=CODE_0_11_296;
f+=CODE_0_11_297;
f+=CODE_0_11_298;
f+=CODE_0_11_299;
f+=CODE_0_11_300;
f+=CODE_0_11_301;
f+=CODE_0_11_302;
f+=CODE_0_11_303;
f+=CODE_0_11_304;
f+=CODE_0_11_305;
f+=CODE_0_11_306;
f+=CODE_0_11_307;
f+=CODE_0_11_308;
f+=CODE_0_11_309;
f+=CODE_0_11_310;
f+=CODE_0_11_311;
f+=CODE_0_11_312;
f+=CODE_0_11_313;
f+=CODE_0_11_314;
f+=CODE_0_11_315;
f+=CODE_0_11_316;
f+=CODE_0_11_317;
f+=CODE_0_11_318;
f+=CODE_0_11_319;
f+=CODE_0_11_320;
f+=CODE_0_11_321;
f+=CODE_0_11_322;
f+=CODE_0_11_323;
f+=CODE_0_11_324;
f+=CODE_0_11_325;
f+=CODE_0_11_326;
f+=CODE_0_11_327;
f+=CODE_0_11_328;
f+=CODE_0_11_329;
f+=CODE_0_11_330;
f+=CODE_0_11_331;
f+=CODE_0_11_332;
f+=CODE_0_11_333;
f+=CODE_0_11_334;
f+=CODE_0_11_335;
f+=CODE_0_11_336;
f+=CODE_0_11_337;
f+=CODE_0_11_338;
f+=CODE_0_11_339;
f+=CODE_0_11_340;
f+=CODE_0_11_341;
f+=CODE_0_11_342;
f+=CODE_0_11_343;
f+=CODE_0_11_344;
f+=CODE_0_11_345;
f+=CODE_0_11_346;
f+=CODE_0_11_347;
f+=CODE_0_11_348;
f+=CODE_0_11_349;
f+=CODE_0_11_350;
f+=CODE_0_11_351;
f+=CODE_0_11_352;
f+=CODE_0_11_353;
f+=CODE_0_11_354;
f+=CODE_0_11_355;
f+=CODE_0_11_356;
f+=CODE_0_11_357;
f+=CODE_0_11_358;
f+=CODE_0_11_359;
f+=CODE_0_11_360;
f+=CODE_0_11_361;
f+=CODE_0_11_362;
f+=CODE_0_11_363;
f+=CODE_0_11_364;
f+=CODE_0_11_365;
f+=CODE_0_11_366;
f+=CODE_0_11_367;
f+=CODE_0_11_368;
f+=CODE_0_11_369;
f+=CODE_0_11_370;
f+=CODE_0_11_371;
f+=CODE_0_11_372;
f+=CODE_0_11_373;
f+=CODE_0_11_374;
f+=CODE_0_11_375;
f+=CODE_0_11_376;
f+=CODE_0_11_377;
f+=CODE_0_11_378;
f+=CODE_0_11_379;
f+=CODE_0_11_380;
f+=CODE_0_11_381;
f+=CODE_0_11_382;
f+=CODE_0_11_383;
f+=CODE_0_11_384;
f+=CODE_0_11_385;
f+=CODE_0_11_386;
f+=CODE_0_11_387;
f+=CODE_0_11_388;
f+=CODE_0_11_389;
f+=CODE_0_11_390;
f+=CODE_0_11_391;
f+=CODE_0_11_392;
f+=CODE_0_11_393;
f+=CODE_0_11_394;
f+=CODE_0_11_395;
f+=CODE_0_11_396;
f+=CODE_0_11_397;
f+=CODE_0_11_398;
f+=CODE_0_11_399;
f+=CODE_0_11_400;
f+=CODE_0_11_401;
f+=CODE_0_11_402;
f+=CODE_0_11_403;
f+=CODE_0_11_404;
f+=CODE_0_11_405;
f+=CODE_0_11_406;
f+=CODE_0_11_407;
f+=CODE_0_11_408;
f+=CODE_0_11_409;
f+=CODE_0_11_410;
f+=CODE_0_11_411;
f+=CODE_0_11_412;
f+=CODE_0_11_413;
f+=CODE_0_11_414;
f+=CODE_0_11_415;
f+=CODE_0_11_416;
f+=CODE_0_11_417;
f+=CODE_0_11_418;
f+=CODE_0_11_419;
f+=CODE_0_11_420;
f+=CODE_0_11_421;
f+=CODE_0_11_422;
f+=CODE_0_11_423;
f+=CODE_0_11_424;
f+=CODE_0_11_425;
f+=CODE_0_11_426;
f+=CODE_0_11_427;
f+=CODE_0_11_428;
f+=CODE_0_11_429;
f+=CODE_0_11_430;
f+=CODE_0_11_431;
f+=CODE_0_11_432;
f+=CODE_0_11_433;
f+=CODE_0_11_434;
f+=CODE_0_11_435;
f+=CODE_0_11_436;
f+=CODE_0_11_437;
f+=CODE_0_11_438;
f+=CODE_0_11_439;
f+=CODE_0_11_440;
f+=CODE_0_11_441;
f+=CODE_0_11_442;
f+=CODE_0_11_443;
f+=CODE_0_11_444;
f+=CODE_0_11_445;
f+=CODE_0_11_446;
f+=CODE_0_11_447;
f+=CODE_0_11_448;
f+=CODE_0_11_449;
f+=CODE_0_11_450;
f+=CODE_0_11_451;
f+=CODE_0_11_452;
f+=CODE_0_11_453;
f+=CODE_0_11_454;
f+=CODE_0_11_455;
f+=CODE_0_11_456;
f+=CODE_0_11_457;
f+=CODE_0_11_458;
f+=CODE_0_11_459;
f+=CODE_0_11_460;
f+=CODE_0_11_461;
f+=CODE_0_11_462;
f+=CODE_0_11_463;
f+=CODE_0_11_464;
f+=CODE_0_11_465;
f+=CODE_0_11_466;
f+=CODE_0_11_467;
f+=CODE_0_11_468;
f+=CODE_0_11_469;
f+=CODE_0_11_470;
f+=CODE_0_11_471;
f+=CODE_0_11_472;
f+=CODE_0_11_473;
f+=CODE_0_11_474;
f+=CODE_0_11_475;
f+=CODE_0_11_476;
f+=CODE_0_11_477;
f+=CODE_0_11_478;
f+=CODE_0_11_479;
f+=CODE_0_11_480;
f+=CODE_0_11_481;
f+=CODE_0_11_482;
f+=CODE_0_11_483;
f+=CODE_0_11_484;
f+=CODE_0_11_485;
f+=CODE_0_11_486;
f+=CODE_0_11_487;
f+=CODE_0_11_488;
f+=CODE_0_11_489;
f+=CODE_0_11_490;
f+=CODE_0_11_491;
f+=CODE_0_11_492;
f+=CODE_0_11_493;
f+=CODE_0_11_494;
f+=CODE_0_11_495;
f+=CODE_0_11_496;
f+=CODE_0_11_497;
f+=CODE_0_11_498;
f+=CODE_0_11_499;
f+=CODE_0_11_500;
f+=CODE_0_11_501;
f+=CODE_0_11_502;
f+=CODE_0_11_503;
f+=CODE_0_11_504;
f+=CODE_0_11_505;
f+=CODE_0_11_506;
f+=CODE_0_11_507;
f+=CODE_0_11_508;
f+=CODE_0_11_509;
f+=CODE_0_11_510;
f+=CODE_0_11_511;
f+=CODE_0_11_512;
f+=CODE_0_11_513;
f+=CODE_0_11_514;
f+=CODE_0_11_515;
f+=CODE_0_11_516;
f+=CODE_0_11_517;
f+=CODE_0_11_518;
f+=CODE_0_11_519;
f+=CODE_0_11_520;
f+=CODE_0_11_521;
f+=CODE_0_11_522;
f+=CODE_0_11_523;
f+=CODE_0_11_524;
f+=CODE_0_11_525;
f+=CODE_0_11_526;
f+=CODE_0_11_527;
f+=CODE_0_11_528;
f+=CODE_0_11_529;
f+=CODE_0_11_530;
f+=CODE_0_11_531;
f+=CODE_0_11_532;
f+=CODE_0_11_533;
f+=CODE_0_11_534;
f+=CODE_0_11_535;
f+=CODE_0_11_536;
f+=CODE_0_11_537;
f+=CODE_0_11_538;
f+=CODE_0_11_539;
f+=CODE_0_11_540;
f+=CODE_0_11_541;
f+=CODE_0_11_542;
f+=CODE_0_11_543;
f+=CODE_0_11_544;
f+=CODE_0_11_545;
f+=CODE_0_11_546;
f+=CODE_0_11_547;
f+=CODE_0_11_548;
f+=CODE_0_11_549;
f+=CODE_0_11_550;
f+=CODE_0_11_551;
f+=CODE_0_11_552;
f+=CODE_0_11_553;
f+=CODE_0_11_554;
f+=CODE_0_11_555;
f+=CODE_0_11_556;
f+=CODE_0_11_557;
f+=CODE_0_11_558;
f+=CODE_0_11_559;
f+=CODE_0_11_560;
f+=CODE_0_11_561;
f+=CODE_0_11_562;
f+=CODE_0_11_563;
f+=CODE_0_11_564;
f+=CODE_0_11_565;
f+=CODE_0_11_566;
f+=CODE_0_11_567;
f+=CODE_0_11_568;
f+=CODE_0_11_569;
f+=CODE_0_11_570;
f+=CODE_0_11_571;
f+=CODE_0_11_572;
f+=CODE_0_11_573;
f+=CODE_0_11_574;
f+=CODE_0_11_575;
f+=CODE_0_11_576;
f+=CODE_0_11_577;
f+=CODE_0_11_578;
f+=CODE_0_11_579;
f+=CODE_0_11_580;
f+=CODE_0_11_581;
f+=CODE_0_11_582;
f+=CODE_0_11_583;
f+=CODE_0_11_584;
f+=CODE_0_11_585;
f+=CODE_0_11_586;
f+=CODE_0_11_587;
f+=CODE_0_11_588;
f+=CODE_0_11_589;
f+=CODE_0_11_590;
f+=CODE_0_11_591;
f+=CODE_0_11_592;
f+=CODE_0_11_593;
f+=CODE_0_11_594;
f+=CODE_0_11_595;
f+=CODE_0_11_596;
f+=CODE_0_11_597;
f+=CODE_0_11_598;
f+=CODE_0_11_599;
f+=CODE_0_11_600;
f+=CODE_0_11_601;
f+=CODE_0_11_602;
f+=CODE_0_11_603;
f+=CODE_0_11_604;
f+=CODE_0_11_605;
f+=CODE_0_11_606;
f+=CODE_0_11_607;
f+=CODE_0_11_608;
f+=CODE_0_11_609;
f+=CODE_0_11_610;
f+=CODE_0_11_611;
f+=CODE_0_11_612;
f+=CODE_0_11_613;
f+=CODE_0_11_614;
f+=CODE_0_11_615;
f+=CODE_0_11_616;
f+=CODE_0_11_617;
f+=CODE_0_11_618;
f+=CODE_0_11_619;
f+=CODE_0_11_620;
f+=CODE_0_11_621;
f+=CODE_0_11_622;
f+=CODE_0_11_623;
f+=CODE_0_11_624;
f+=CODE_0_11_625;
f+=CODE_0_11_626;
f+=CODE_0_11_627;
f+=CODE_0_11_628;
f+=CODE_0_11_629;
f+=CODE_0_11_630;
f+=CODE_0_11_631;
f+=CODE_0_11_632;
f+=CODE_0_11_633;
f+=CODE_0_11_634;
f+=CODE_0_11_635;
f+=CODE_0_11_636;
f+=CODE_0_11_637;
f+=CODE_0_11_638;
return f;
}
}
