package code.scripts.messages.gui;
import code.util.*;
public final class MessGuiCardsGr{
private MessGuiCardsGr(){}
public static StringMap<String> ms(){
StringMap<String> m = new StringMap<String>();
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogdisplayingbelote.properties",enCardsGuiDialogsDialogdisplayingbelote());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogdisplayingbelote.properties",frCardsGuiDialogsDialogdisplayingbelote());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogdisplayingpresident.properties",enCardsGuiDialogsDialogdisplayingpresident());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogdisplayingpresident.properties",frCardsGuiDialogsDialogdisplayingpresident());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogdisplayingtarot.properties",enCardsGuiDialogsDialogdisplayingtarot());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogdisplayingtarot.properties",frCardsGuiDialogsDialogdisplayingtarot());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogfichiers.properties",enCardsGuiDialogsDialogfichiers());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogfichiers.properties",frCardsGuiDialogsDialogfichiers());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialoghelppresident.properties",enCardsGuiDialogsDialoghelppresident());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialoghelppresident.properties",frCardsGuiDialogsDialoghelppresident());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialognicknames.properties",enCardsGuiDialogsDialognicknames());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialognicknames.properties",frCardsGuiDialogsDialognicknames());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogrulesbelote.properties",enCardsGuiDialogsDialogrulesbelote());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogrulesbelote.properties",frCardsGuiDialogsDialogrulesbelote());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogrulespresident.properties",enCardsGuiDialogsDialogrulespresident());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogrulespresident.properties",frCardsGuiDialogsDialogrulespresident());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogrulestarot.properties",enCardsGuiDialogsDialogrulestarot());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogrulestarot.properties",frCardsGuiDialogsDialogrulestarot());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogserver.properties",enCardsGuiDialogsDialogserver());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogserver.properties",frCardsGuiDialogsDialogserver());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogsoft.properties",enCardsGuiDialogsDialogsoft());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogsoft.properties",frCardsGuiDialogsDialogsoft());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/dialogteamsplayers.properties",enCardsGuiDialogsDialogteamsplayers());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/dialogteamsplayers.properties",frCardsGuiDialogsDialogteamsplayers());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/editorbelote.properties",enCardsGuiDialogsEditorbelote());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/editorbelote.properties",frCardsGuiDialogsEditorbelote());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/editorpresident.properties",enCardsGuiDialogsEditorpresident());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/editorpresident.properties",frCardsGuiDialogsEditorpresident());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/editortarot.properties",enCardsGuiDialogsEditortarot());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/editortarot.properties",frCardsGuiDialogsEditortarot());
m.addEntry("resources_cards/gui/messages/en/cards/gui/dialogs/framegeneralhelp.properties",enCardsGuiDialogsFramegeneralhelp());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/dialogs/framegeneralhelp.properties",frCardsGuiDialogsFramegeneralhelp());
m.addEntry("resources_cards/gui/messages/en/cards/gui/labels/graphickey.properties",enCardsGuiLabelsGraphickey());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/labels/graphickey.properties",frCardsGuiLabelsGraphickey());
m.addEntry("resources_cards/gui/messages/en/cards/gui/mainwindow.properties",enCardsGuiMainwindow());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/mainwindow.properties",frCardsGuiMainwindow());
m.addEntry("resources_cards/gui/messages/en/cards/gui/panels/paneltrickshandsbelote.properties",enCardsGuiPanelsPaneltrickshandsbelote());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/panels/paneltrickshandsbelote.properties",frCardsGuiPanelsPaneltrickshandsbelote());
m.addEntry("resources_cards/gui/messages/en/cards/gui/panels/paneltrickshandspresident.properties",enCardsGuiPanelsPaneltrickshandspresident());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/panels/paneltrickshandspresident.properties",frCardsGuiPanelsPaneltrickshandspresident());
m.addEntry("resources_cards/gui/messages/en/cards/gui/panels/paneltrickshandstarot.properties",enCardsGuiPanelsPaneltrickshandstarot());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/panels/paneltrickshandstarot.properties",frCardsGuiPanelsPaneltrickshandstarot());
m.addEntry("resources_cards/gui/messages/en/cards/gui/panels/suitsscrollablelist.properties",enCardsGuiPanelsSuitsscrollablelist());
m.addEntry("resources_cards/gui/messages/fr/cards/gui/panels/suitsscrollablelist.properties",frCardsGuiPanelsSuitsscrollablelist());
return m;
}
static String enCardsGuiDialogsDialogdisplayingbelote(){
String f="wise=Wise\n";
f+="clockWise=Play clockwise\n";
f+="dealing=Dealing\n";
f+="addSuit=Add selected suit in list =>\n";
f+="removeSuit=<= Remove selected suits in list\n";
f+="sortDecreasing=Sort suits by decreasing order\n";
f+="sortingTrump=Sort suits by order trump\n";
f+="sortingBeforePlayingCards=Sort suits before playing cards\n";
f+="sorting=Sorting\n";
f+="validate=Validate\n";
f+="errorSuits=One suit, at least, is missing for the saving of the parameter\n";
f+="errorSuitsTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsDialogdisplayingbelote(){
String f="wise=Sens\n";
f+="clockWise=Jouer dans le sens horaire\n";
f+="dealing=Distribution\n";
f+="addSuit=Ajouter la couleur s&eacute;lectionn&eacute;e dans la liste pour le tri =>\n";
f+="removeSuit=<= Supprimer les couleurs s&eacute;lectionn&eacute;es de la liste\n";
f+="sortDecreasing=Trier les couleurs par ordre d&eacute;croissant\n";
f+="sortingTrump=Trier les couleurs par ordre d'atout\n";
f+="sortingBeforePlayingCards=Tri des couleurs avant de jouer les cartes\n";
f+="sorting=Tri\n";
f+="validate=Valider\n";
f+="errorSuits=Une couleur, au moins, manque pour la sauvegarde des param&egrave;tres\n";
f+="errorSuitsTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsDialogdisplayingpresident(){
String f="wise=Wise\n";
f+="clockWise=Play clockwise\n";
f+="dealing=Dealing\n";
f+="addSuit=Add selected suit in list =>\n";
f+="removeSuit=<= Remove selected suits in list\n";
f+="sortDecreasing=Sort suits by decreasing order\n";
f+="nbDealsDemo=Number of simulated deals\n";
f+="sortingBeforePlayingCards=Sort suits before playing cards\n";
f+="sorting=Sorting\n";
f+="validate=Validate\n";
f+="errorSuits=One suit, at least, is missing for the saving of the parameter\n";
f+="errorSuitsTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsDialogdisplayingpresident(){
String f="wise=Sens\n";
f+="clockWise=Jouer dans le sens horaire\n";
f+="dealing=Distribution\n";
f+="addSuit=Ajouter la couleur s&eacute;lectionn&eacute;e dans la liste pour le tri =>\n";
f+="removeSuit=<= Supprimer les couleurs s&eacute;lectionn&eacute;es de la liste\n";
f+="sortDecreasing=Trier les couleurs par ordre d&eacute;croissant\n";
f+="nbDealsDemo=Nombre de donnes simul&eacute;ees.\n";
f+="sortingBeforePlayingCards=Tri des couleurs avant de jouer les cartes\n";
f+="sorting=Tri\n";
f+="validate=Valider\n";
f+="errorSuits=Une couleur, au moins, manque pour la sauvegarde des param&egrave;tres\n";
f+="errorSuitsTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsDialogdisplayingtarot(){
String f="wise=Wise\n";
f+="clockWise=Play clockwise\n";
f+="dealing=Dealing\n";
f+="addSuit=Add selected suit in list in order to sort =>\n";
f+="removeSuit=<= Remove selected suits in list\n";
f+="sortDecreasing=Sort suits by decreasing order\n";
f+="sortingTrump=Sort suits by order trump\n";
f+="sortingBeforePlayingCards=Sort suits before playing cards\n";
f+="sorting=Sorting\n";
f+="validate=Validate\n";
f+="errorSuits=One suit, at least, is missing for the saving of the parameters\n";
f+="errorSuitsTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsDialogdisplayingtarot(){
String f="wise=Sens\n";
f+="clockWise=Jouer dans le sens horaire\n";
f+="dealing=Distribution\n";
f+="addSuit=Ajouter la couleur s&eacute;lectionn&eacute;e dans la liste pour le tri =>\n";
f+="removeSuit=<= Supprimer les couleurs s&eacute;lectionn&eacute;es de la liste\n";
f+="sortDecreasing=Trier les couleurs par ordre d&eacute;croissant\n";
f+="sortingTrump=Trier les couleurs par ordre d'atout\n";
f+="sortingBeforePlayingCards=Tri des couleurs avant de jouer les cartes\n";
f+="sorting=Tri\n";
f+="validate=Valider\n";
f+="errorSuits=Une couleur, au moins, manque pour la sauvegarde des param&egrave;tres\n";
f+="errorSuitsTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsDialogfichiers(){
String f="overwriting=The file exists, overwrite?\n";
f+="overwritingTitle=Existing file\n";
f+="name=Name\n";
f+="size=Size\n";
f+="modified=Modified\n";
return f;
}
static String frCardsGuiDialogsDialogfichiers(){
String f="overwriting=Le fichier existe, &eacute;craser?\n";
f+="overwritingTitle=Fichier existant\n";
f+="name=Nom\n";
f+="size=Taille\n";
f+="modified=Modifi&eacute; le\n";
return f;
}
static String enCardsGuiDialogsDialoghelppresident(){
String f="level=Level of cards\n";
f+="nbPlayed=Number of played cards by level\n";
f+="nbRem=Number of remaining cards by level\n";
f+="reversed=Strength reversed: {0}\n";
f+="yes=Yes\n";
f+="no=No\n";
return f;
}
static String frCardsGuiDialogsDialoghelppresident(){
String f="level=Hauteur des cartes\n";
f+="nbPlayed=Nombre de cartes jou&eacute;es par hauteur\n";
f+="nbRem=Nombre de cartes restantes par hauteur\n";
f+="reversed=R&eacute;volution en cours: {0}\n";
f+="yes=Oui\n";
f+="no=Non\n";
return f;
}
static String enCardsGuiDialogsDialognicknames(){
String f="nickname=Your nickname\n";
f+="nicknamePlayer=Player {0}''s nickname\n";
f+="validate=Validate\n";
f+="errorSave=Error while saving\n";
f+="forbiddenEmpty=One of the fiels is empty.\n";
f+="forbiddenTab=Tabulations are forbidden.\n";
return f;
}
static String frCardsGuiDialogsDialognicknames(){
String f="nickname=Votre pseudo\n";
f+="nicknamePlayer=Pseudo du joueur {0}\n";
f+="validate=Valider\n";
f+="errorSave=Erreur de sauvegarde\n";
f+="forbiddenEmpty=Un des champs est vide.\n";
f+="forbiddenTab=Les tabulations sont interdites.\n";
return f;
}
static String enCardsGuiDialogsDialogrulesbelote(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="dealingMode=Deal all cards before bidding\n";
f+="handful=Handful\n";
f+="numberTrumps=Number of trumps\n";
f+="validateHandful=Validate handful\n";
f+="allowedDeclaring=Allowed declaring\n";
f+="declaring=Declaring\n";
f+="bids=Allowed bids\n";
f+="endDeal=End deal\n";
f+="scoring=Scoring\n";
f+="allPointsForDefenderTeam=The defender team score all points\n";
f+="endDealRule=End deal if equality between teams\n";
f+="trumping=rules minding the trumps\n";
f+="trumpingDescription=rules minding the compulsory playing of trumps over/under the partner\n";
f+="underTrumpingFoe=compulsory playing a trump under a foe\n";
f+="modeGame=Game mode\n";
f+="discarding=Discard after calling\n";
f+="rulesTrumps=Rules of trumping\n";
f+="numberPlayers=Number of players\n";
f+="repartitionPlayers=Repartition of players\n";
f+="repartition=Repartition\n";
f+="validate=Validate\n";
return f;
}
static String frCardsGuiDialogsDialogrulesbelote(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="dealingMode=Distribuer toutes les cartes avant les ench&egrave;res\n";
f+="handful=Poign&eacute;e\n";
f+="numberTrumps=Nombre d'atouts\n";
f+="validateHandful=Valider poign&eacute;e\n";
f+="allowedDeclaring=Annonces autoris&eacute;es\n";
f+="declaring=Annonces\n";
f+="bids=Ench&egrave;res autoris&eacute;es\n";
f+="endDeal=Fin de partie\n";
f+="scoring=Calcul des scores\n";
f+="allPointsForDefenderTeam=La d&eacute;fense marque tous les points\n";
f+="endDealRule=Fin de partie si &eacute;galit&eacute; entre les &eacute;quipes\n";
f+="trumping=R&egrave;gles concernant les atouts\n";
f+="trumpingDescription=R&egrave;gles concernant le jeu obligatoire des atouts au dessus/en dessous du partenaire\n";
f+="underTrumpingFoe=Obligation de sous-couper adversaire\n";
f+="modeGame=Mode de jeu\n";
f+="discarding=Ecart apr&egrave;s appel\n";
f+="rulesTrumps=R&egrave;gles de coupes\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="repartitionPlayers=Repartition des joueurs\n";
f+="repartition=Repartition\n";
f+="validate=Valider\n";
return f;
}
static String enCardsGuiDialogsDialogrulespresident(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="equality=Rules about equaling\n";
f+="stopAllPlayedCards=Ended trick if all cards of same strength are consecutively played at the same trick\n";
f+="canPass=Players can always pass\n";
f+="possibleReversing=Reverse order of cards if a hand of {0} cards is played\n";
f+="rules=Rules\n";
f+="looseFinishBestCards=A player can loose if this player finish by the best cards of the game\n";
f+="switchCards=Possible switches of cards for the next deals\n";
f+="looserStartsFirst=The loser starts the first trick of the next deal\n";
f+="endDeal=End deal\n";
f+="numberPlayers=Number of players\n";
f+="numberStacks=Number of stacks\n";
f+="repartition=Repartition\n";
f+="validate=Validate\n";
return f;
}
static String frCardsGuiDialogsDialogrulespresident(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="equality=R&egrave;gles sur le jeu d'&eacute;galit&eacute;\n";
f+="stopAllPlayedCards=Fin de pli si toutes cartes de m&ecirc;me hauteur sont jou&eacute;es cons&eacute;cutivement dans le m&ecirc;me pli\n";
f+="canPass=Les joueurs peuvent toujours passer\n";
f+="possibleReversing=Inverser l''ordre des cartes si une main de {0} cartes est jou&eacute;e\n";
f+="rules=R&egrave;gles\n";
f+="looseFinishBestCards=Un joueur peut perdre si ce joueur finit par les meilleurs cartes du jeu\n";
f+="switchCards=&Eacute;changes possible de cartes pour les donnes suivantes\n";
f+="looserStartsFirst=Le perdant commence le premier pli de la partie suivante\n";
f+="endDeal=Fin de partie\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="numberStacks=Nombre de paquets\n";
f+="repartition=R&eacute;partition\n";
f+="validate=Valider\n";
return f;
}
static String enCardsGuiDialogsDialogrulestarot(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="handful=Handful\n";
f+="numberTrumps=Number of trumps\n";
f+="validateHandful=Validate handful\n";
f+="allowedMiseres=Allowed miseres\n";
f+="declaring=Declaring\n";
f+="bids=Allowed bids\n";
f+="endDeal=End deal\n";
f+="endDealRule=End deal if equality between teams\n";
f+="modeGame=Game mode\n";
f+="discarding=Discard after calling\n";
f+="rules=Rules\n";
f+="numberPlayers=Number of players\n";
f+="repartitionPlayers=Repartition of players\n";
f+="repartition=Repartition\n";
f+="validate=Validate\n";
return f;
}
static String frCardsGuiDialogsDialogrulestarot(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="handful=Poign&eacute;e\n";
f+="numberTrumps=Nombre d'atouts\n";
f+="validateHandful=Valider poign&eacute;e\n";
f+="allowedMiseres=Mis&egrave;res autoris&eacute;es\n";
f+="declaring=Annonces\n";
f+="bids=Ench&egrave;res autoris&eacute;es\n";
f+="endDeal=Fin de partie\n";
f+="endDealRule=Fin de partie si &eacute;galit&eacute; entre les &eacute;quipes\n";
f+="modeGame=Mode de jeu\n";
f+="discarding=Ecart apr&egrave;s appel\n";
f+="rules=R&egrave;gles\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="repartitionPlayers=R&eacute;partition des joueurs\n";
f+="repartition=R&eacute;partition\n";
f+="validate=Valider\n";
return f;
}
static String enCardsGuiDialogsDialogserver(){
String f="title=Create or join a game\n";
f+="numberPlayers=number of players\n";
f+="ipServer=address of the server\n";
f+="ipServerToolTip=host name or internet protocol address (identification number)\n";
f+="createServer=Create a server\n";
f+="joinServer=Join a server\n";
f+="cancel=Cancel\n";
return f;
}
static String frCardsGuiDialogsDialogserver(){
String f="title=Cr&eacute;er ou rejoindre une partie\n";
f+="numberPlayers=nombre de joueurs\n";
f+="ipServer=adresse du serveur\n";
f+="ipServerToolTip=nom d'h&ocirc;te ou adresse de protocole internet (num&eacute;ro d'identification)\n";
f+="createServer=Cr&eacute;er un serveur\n";
f+="joinServer=Rejoindre un serveur\n";
f+="cancel=Annuler\n";
return f;
}
static String enCardsGuiDialogsDialogsoft(){
String f="launching=Software launching\n";
f+="waitingBidding=Time elapsed between each declaring a bid\n";
f+="waitingPlayedCard=Time elapsed between each played card\n";
f+="waitingTrick=Time elapsed between each trick\n";
f+="waitingSentence={0} {1}\n";
f+="waitingValues=(min={0} ms,max={1}):{2} ms\n";
f+="clickForPlayingTrick=Click for playing the next trick\n";
f+="clickForPlayingCard=Click for playing the card\n";
f+="selectHomePath=Save files in the home folder\n";
f+="validate=Validate\n";
return f;
}
static String frCardsGuiDialogsDialogsoft(){
String f="launching=Lancement du logiciel\n";
f+="waitingBidding=Temps &eacute;coul&eacute; entre chaque annonce d'ench&egrave;re\n";
f+="waitingPlayedCard=Temps &eacute;coul&eacute; entre chaque carte jou&eacute;e\n";
f+="waitingTrick=Temps &eacute;coul&eacute; entre chaque pli\n";
f+="waitingSentence={0} {1}\n";
f+="waitingValues=(min={0} ms,max={1}):{2} ms\n";
f+="clickForPlayingTrick=Cliquer pour jouer le pli suivant\n";
f+="clickForPlayingCard=Cliquer pour jouer la carte\n";
f+="selectHomePath=Sauvegarder les fichiers dans l'espace personnel\n";
f+="validate=Valider\n";
return f;
}
static String enCardsGuiDialogsDialogteamsplayers(){
String f="title=Teams\n";
f+="team=team number {0}\n";
return f;
}
static String frCardsGuiDialogsDialogteamsplayers(){
String f="title=Equipes\n";
f+="team=&eacute;quipe num&eacute;ro {0}\n";
return f;
}
static String enCardsGuiDialogsEditorbelote(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="dealingMode=Deal all cards before bidding\n";
f+="numberDeals=Number of deals without mixing\n";
f+="handful=Handful\n";
f+="numberTrumps=Number of trumps\n";
f+="validateHandful=Validate handful\n";
f+="allowedDeclaring=Allowed declaring\n";
f+="declaring=Declaring\n";
f+="bids=Allowed bids\n";
f+="endDeal=End deal\n";
f+="scoring=Scoring\n";
f+="allPointsForDefenderTeam=The defender team score all points\n";
f+="endDealRule=End deal if equality between teams\n";
f+="trumping=rules minding the trumps\n";
f+="trumpingDescription=rules minding the compulsory playing of trumps over/under the partner\n";
f+="underTrumpingFoe=compulsory playing a trump under a foe\n";
f+="modeGame=Game mode\n";
f+="discarding=Discard after calling\n";
f+="rulesTrumps=Rules of trumping\n";
f+="numberPlayers=Number of players\n";
f+="repartitionPlayers=Repartition of players\n";
f+="repartition=Repartition\n";
f+="selectedCards=Number of selected cards: {0}\n";
f+="moveCards=Move the cards to the hand\n";
f+="dealingCards=Deal cards\n";
f+="dealer=Dealer\n";
f+="random=Random\n";
f+="next=Next =>\n";
f+="back=<= Back\n";
f+="playerHand={0}''s hand\n";
f+="userHand=Your hand\n";
f+="remaining=Remote cards\n";
f+="dealingStack=Stack of dealing\n";
f+="saveWithoutClosing=Save without closing\n";
f+="saveThenPlay=Save then play\n";
f+="playWithoutSaving=Play without saving\n";
f+="saveThenClose=Save then close\n";
f+="errorMoveTitle=Placement error\n";
f+="errorMove={0} cards are selected, the number of remaining places is {1} for the following hand: {2}.\n";
f+="errorRepartitionTitle=Repartition error\n";
f+="errorRepartition=There are {0} left cards to place.\n";
f+="errorSaveFile=Already saved deal\n";
f+="errorSaveFileTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsEditorbelote(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="dealingMode=Distribuer toutes les cartes avant les ench&egrave;res\n";
f+="numberDeals=Nombre de parties sans battre\n";
f+="handful=Poign&eacute;e\n";
f+="numberTrumps=Nombre d'atouts\n";
f+="validateHandful=Valider poign&eacute;e\n";
f+="allowedDeclaring=Annonces autoris&eacute;es\n";
f+="declaring=Annonces\n";
f+="bids=Ench&egrave;res autoris&eacute;es\n";
f+="endDeal=Fin de partie\n";
f+="scoring=Calcul des scores\n";
f+="allPointsForDefenderTeam=La d&eacute;fense marque tous les points\n";
f+="endDealRule=Fin de partie si &eacute;galit&eacute; entre les &eacute;quipes\n";
f+="trumping=R&egrave;gles concernant les atouts\n";
f+="trumpingDescription=R&egrave;gles concernant le jeu obligatoire des atouts au dessus/en dessous du partenaire\n";
f+="underTrumpingFoe=Obligation de sous-couper adversaire\n";
f+="modeGame=Mode de jeu\n";
f+="discarding=Ecart apr&egrave;s appel\n";
f+="rulesTrumps=R&egrave;gles de coupes\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="repartitionPlayers=Repartition des joueurs\n";
f+="repartition=Repartition\n";
f+="selectedCards=Nombre de cartes s&eacute;lectionn&eacute;es: {0}\n";
f+="moveCards=D&eacute;placer les cartes vers la main\n";
f+="dealingCards=Distribuer les cartes\n";
f+="dealer=Donneur\n";
f+="random=Al&eacute;atoire\n";
f+="next=Suivant =>\n";
f+="back=<= Pr&eacute;c&eacute;dent\n";
f+="playerHand=Main de {0}\n";
f+="userHand=Votre main\n";
f+="remaining=Talon\n";
f+="dealingStack=Pile de distribution\n";
f+="saveWithoutClosing=Sauvegarder sans fermer\n";
f+="saveThenPlay=Sauvegarder puis jouer\n";
f+="playWithoutSaving=Jouer sans sauvegarder\n";
f+="saveThenClose=Sauvegarder puis fermer\n";
f+="errorMoveTitle=Erreur de placement\n";
f+="errorMove={0} cartes sont s&eacute;lectionn&eacute;es, le nombre de places restantes est {1} pour la main suivante: {2}.\n";
f+="errorRepartitionTitle=Erreur de r&eacute;partition\n";
f+="errorRepartition=Il y a {0} cartes restantes &agrave; placer.\n";
f+="errorSaveFile=Partie d&eacute;j&agrave; sauvegard&eacute;e\n";
f+="errorSaveFileTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsEditorpresident(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="equality=Rules about equaling\n";
f+="stopAllPlayedCards=Ended trick if all cards of same strength are consecutively played at the same trick\n";
f+="canPass=Players can always pass\n";
f+="possibleReversing=Reverse order of cards if a hand of {0} cards is played\n";
f+="rules=Rules\n";
f+="looseFinishBestCards=A player can loose if this player finish by the best cards of the game\n";
f+="switchCards=Possible switches of cards for the next deals\n";
f+="looserStartsFirst=The loser starts the first trick of the next deal\n";
f+="endDeal=End deal\n";
f+="numberPlayers=Number of players\n";
f+="numberStacks=Number of stacks\n";
f+="repartition=Repartition\n";
f+="selectedCards=Number of selected cards: {0}\n";
f+="moveCards=Move the cards to the hand\n";
f+="dealingCards=Deal cards\n";
f+="dealer=Dealer\n";
f+="random=Random\n";
f+="next=Next =>\n";
f+="back=<= Back\n";
f+="playerHand={0}''s hand\n";
f+="userHand=Your hand\n";
f+="remaining=Remote cards\n";
f+="dealingStack=Stack of dealing\n";
f+="saveWithoutClosing=Save without closing\n";
f+="saveThenPlay=Save then play\n";
f+="playWithoutSaving=Play without saving\n";
f+="saveThenClose=Save then close\n";
f+="errorMoveTitle=Placement error\n";
f+="errorMove={0} cards are selected, the number of remaining places is {1} for the following hand: {2}.\n";
f+="errorRepartitionTitle=Repartition error\n";
f+="errorRepartition=There are {0} left cards to place.\n";
f+="errorSaveFile=Already saved deal\n";
f+="errorSaveFileTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsEditorpresident(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="equality=R&egrave;gles sur le jeu d'&eacute;galit&eacute;\n";
f+="stopAllPlayedCards=Fin de pli si toutes cartes de m&ecirc;me hauteur sont jou&eacute;es cons&eacute;cutivement dans le m&ecirc;me pli\n";
f+="canPass=Les joueurs peuvent toujours passer\n";
f+="possibleReversing=Inverser l''ordre des cartes si une main de {0} cartes est jou&eacute;e\n";
f+="rules=R&egrave;gles\n";
f+="looseFinishBestCards=Un joueur peut perdre si ce joueur finit par les meilleurs cartes du jeu\n";
f+="switchCards=&Eacute;changes possible de cartes pour les donnes suivantes\n";
f+="looserStartsFirst=Le perdant commence le premier pli de la partie suivante\n";
f+="endDeal=Fin de partie\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="numberStacks=Nombre de paquets\n";
f+="repartition=R&eacute;partition\n";
f+="selectedCards=Nombre de cartes s&eacute;lectionn&eacute;es: {0}\n";
f+="moveCards=D&eacute;placer les cartes vers la main\n";
f+="dealingCards=Distribuer les cartes\n";
f+="dealer=Donneur\n";
f+="random=Al&eacute;atoire\n";
f+="next=Suivant =>\n";
f+="back=<= Pr&eacute;c&eacute;dent\n";
f+="playerHand=Main de {0}\n";
f+="userHand=Votre main\n";
f+="remaining=Talon\n";
f+="dealingStack=Pile de distribution\n";
f+="saveWithoutClosing=Sauvegarder sans fermer\n";
f+="saveThenPlay=Sauvegarder puis jouer\n";
f+="playWithoutSaving=Jouer sans sauvegarder\n";
f+="saveThenClose=Sauvegarder puis fermer\n";
f+="errorMoveTitle=Erreur de placement\n";
f+="errorMove={0} cartes sont s&eacute;lectionn&eacute;es, le nombre de places restantes est {1} pour la main suivante: {2}.\n";
f+="errorRepartitionTitle=Erreur de r&eacute;partition\n";
f+="errorRepartition=Il y a {0} cartes restantes &agrave; placer.\n";
f+="errorSaveFile=Partie d&eacute;j&agrave; sauvegard&eacute;e\n";
f+="errorSaveFileTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsEditortarot(){
String f="mixCards=Mix cards\n";
f+="dealing=Dealing\n";
f+="numberDeals=Number of deals without mixing\n";
f+="handful=Handful\n";
f+="numberTrumps=Number of trumps\n";
f+="validateHandful=Validate handful\n";
f+="allowedMiseres=Allowed miseres\n";
f+="declaring=Declaring\n";
f+="bids=Allowed bids\n";
f+="endDeal=End deal\n";
f+="endDealRule=End deal if equality between teams\n";
f+="modeGame=Game mode\n";
f+="discarding=Discard after calling\n";
f+="rules=Rules\n";
f+="numberPlayers=Number of players\n";
f+="repartitionPlayers=Repartition of players\n";
f+="repartition=Repartition\n";
f+="selectedCards=Number of selected cards: {0}\n";
f+="moveCards=Move the cards to the hand\n";
f+="dealingCards=Deal cards\n";
f+="dealer=Dealer\n";
f+="errorMoveTitle=Placement error\n";
f+="errorMove={0} cards are selected, the number of remaining places is {1} for the following hand: {2}.\n";
f+="errorRepartitionTitle=Repartition error\n";
f+="errorRepartition=There are {0} left cards to place.\n";
f+="random=Random\n";
f+="next=Next =>\n";
f+="back=<= Back\n";
f+="playerHand={0}''s hand\n";
f+="userHand=Your hand\n";
f+="remaining=Dog\n";
f+="dealingStack=Stack of dealing\n";
f+="saveWithoutClosing=Save without closing\n";
f+="saveThenPlay=Save then play\n";
f+="playWithoutSaving=Play without saving\n";
f+="saveThenClose=Save then close\n";
f+="errorSaveFile=Already saved deal\n";
f+="errorSaveFileTitle=Saving error\n";
return f;
}
static String frCardsGuiDialogsEditortarot(){
String f="mixCards=Battre les cartes\n";
f+="dealing=Distribution\n";
f+="numberDeals=Nombre de parties sans battre\n";
f+="handful=Poign&eacute;e\n";
f+="numberTrumps=Nombre d'atouts\n";
f+="validateHandful=Valider poign&eacute;e\n";
f+="allowedMiseres=Mis&egrave;res autoris&eacute;es\n";
f+="declaring=Annonces\n";
f+="bids=Ench&egrave;res autoris&eacute;es\n";
f+="endDeal=Fin de partie\n";
f+="endDealRule=Fin de partie si &eacute;galit&eacute; entre les &eacute;quipes\n";
f+="modeGame=Mode de jeu\n";
f+="discarding=Ecart apr&egrave;s appel\n";
f+="rules=R&egrave;gles\n";
f+="numberPlayers=Nombre de joueurs\n";
f+="repartitionPlayers=Repartition des joueurs\n";
f+="repartition=Repartition\n";
f+="selectedCards=Nombre de cartes s&eacute;lectionn&eacute;es: {0}\n";
f+="moveCards=D&eacute;placer les cartes vers la main\n";
f+="dealingCards=Distribuer les cartes\n";
f+="dealer=Donneur\n";
f+="random=Al&eacute;atoire\n";
f+="next=Suivant =>\n";
f+="back=<= Pr&eacute;c&eacute;dent\n";
f+="playerHand=Main de {0}\n";
f+="userHand=Votre main\n";
f+="remaining=Chien\n";
f+="dealingStack=Pile de distribution\n";
f+="saveWithoutClosing=Sauvegarder sans fermer\n";
f+="saveThenPlay=Sauvegarder puis jouer\n";
f+="playWithoutSaving=Jouer sans sauvegarder\n";
f+="saveThenClose=Sauvegarder puis fermer\n";
f+="errorMoveTitle=Erreur de placement\n";
f+="errorMove={0} cartes sont s&eacute;lectionn&eacute;es, le nombre de places restantes est {1} pour la main suivante: {2}.\n";
f+="errorRepartitionTitle=Erreur de r&eacute;partition\n";
f+="errorRepartition=Il y a {0} cartes restantes &agrave; placer.\n";
f+="errorSaveFile=Partie d&eacute;j&agrave; sauvegard&eacute;e\n";
f+="errorSaveFileTitle=Erreur de sauvegarde\n";
return f;
}
static String enCardsGuiDialogsFramegeneralhelp(){
String f="trumpSuit=Order of cards if the suit is trump. (leads the other suits)\n";
f+="normalSuit=Order of cards if the suit is no trump.\n";
f+="trumps={0} plus the Excuse\n";
f+="orderTrumps=Order of trump cards\n";
f+="orderNoTrumps=Order of suit cards\n";
f+="searchLabel=Search the typed text.\n";
return f;
}
static String frCardsGuiDialogsFramegeneralhelp(){
String f="trumpSuit=Ordre des cartes si la couleur est atout. (domine les autres couleurs)\n";
f+="normalSuit=Ordre des cartes si la couleur est ordinaire.\n";
f+="trumps={0} plus l''Excuse\n";
f+="orderTrumps=Ordre des cartes pour les atouts\n";
f+="orderNoTrumps=Ordre des cartes pour une couleur ordinaire\n";
f+="searchLabel=Chercher le texte saisi.\n";
return f;
}
static String enCardsGuiLabelsGraphickey(){
String f="delta=+3*sigma and -3*sigma (Maximal difference from average)\n";
return f;
}
static String frCardsGuiLabelsGraphickey(){
String f="delta=+3*sigma et -3*sigma (Ecarts maximaux de la moyenne)\n";
return f;
}
static String enCardsGuiMainwindow(){
String f="welcome=Welcome {0}\n";
f+="goHelpMenu=For using help, go to the menu help or type key F3\n";
f+="file=File\n";
f+="load=Load a played deal\n";
f+="save=Save a played deal\n";
f+="change=Change game\n";
f+="mainMenu=Main menu\n";
f+="exit=Exit\n";
f+="deal=Deal\n";
f+="consulting=Consulting for deal\n";
f+="consultTitle=Advise\n";
f+="consultBeloteBid=I advise you the bid {0}.\n";
f+="consultBeloteBidPoints=I advise you the bid {0} with {1} points.\n";
f+="consultBeloteBidSuit=I advise you to demand the suit {0}.\n";
f+="consultBeloteBidSuitPoints=I advise you to demand the suit {0} with {1} points.\n";
f+="consultBelotePlayer=I advise you to play {0}.\n";
f+="consultPresidentPlayer=I advise you to play {0}.\n";
f+="consultPresidentPass=I advise you to pass.\n";
f+="consultPresidentGive=I advise you to give {0}.\n";
f+="consultTarotBid=I advise you the bid {0}.\n";
f+="consultTarotCall=I advise you to call {0}.\n";
f+="consultTarotDiscard=I advise you to discard {0}.\n";
f+="consultTarotPlayer=I advise you to play {0}.\n";
f+="pause=Pause\n";
f+="helpGame=Help for deal\n";
f+="tricksHands=Tricks and hands\n";
f+="teams=Teams\n";
f+="edit=Edit\n";
f+="demo=Demo\n";
f+="training=Tarot training\n";
f+="multiStop=Stop playing by network\n";
f+="parameters=Parameters\n";
f+="players=Players\n";
f+="launching=Launching option\n";
f+="timing=Timing for playing\n";
f+="interact=Interacting with cards\n";
f+="language=Language\n";
f+="displaying=Displaying\n";
f+="help=Help\n";
f+="generalHelp=General help\n";
f+="about=About\n";
f+="software=Software\n";
f+="author=Author\n";
f+="keepPlayingDeal=Keep playing the deals\n";
f+="keepPlayingEditedDeal=Keep playing the edited deals\n";
f+="replayDeal=Replay the deal\n";
f+="stop=Stop\n";
f+="nextTrick=Next trick\n";
f+="endDeal=End of deal\n";
f+="seeDog=See the dog\n";
f+="takeCards=Take the cards of the dog\n";
f+="validateDog=Validate the dog\n";
f+="goCardGame=Go to the playing card\n";
f+="singleMode=Single player mode\n";
f+="multiMode=Multi players mode\n";
f+="place=Place:\n";
f+="ready=Ready to play\n";
f+="selectRules=Select rules\n";
f+="playTarot=Play tarot\n";
f+="playPresident=Play president\n";
f+="playBelote=Play belote\n";
f+="playerHavingToPlay=Player having to play\n";
f+="resultsPage=Global results\n";
f+="detailResultsPage=Detail results\n";
f+="handsTricks=Hands and tricks\n";
f+="handsTricksBelote=Hands and tricks at belote\n";
f+="handsTricksPresident=Hands and tricks at president\n";
f+="handsTricksTarot=Hands and tricks at tarot\n";
f+="scoresEvolution=Temporal graph\n";
f+="scoresEvolutionDetail=Temporal evolution of scores in relationship with average and distance type multiplied by plus or minus three\n";
f+="removeTrumpsHandful=Remove {0} trumps\n";
f+="askSlam=Do you really want to declare a slam?\n";
f+="askSlamTitle=Declaring a slam\n";
f+="declaringSlam={0}: Slam\n";
f+="smallAlone=Alone trump ace\n";
f+="smallAloneText={0} has the trump ace as alone trump.\n";
f+="loading=Loading at {0} %\n";
f+="cantDiscard=You cannot discard the following card: {0}\n";
f+="hasToDiscard=Discard {0} cards.\n";
f+="reason=for the following reason: {0}\n";
f+="haveToPlay=You must play one of the following cards:\n";
f+="cantPlay=You cannot play:\n";
f+="cantPlayCard=You cannot play the following card:{0}.\n";
f+="cantPlayCardTitle=Error of playing card\n";
f+="endTrick=It is the end of a trick.\n";
f+="alreadyPlayed=You have already played a card.\n";
f+="waitTurn=Wait your turn.\n";
f+="cantDeclareDetail=You cannot declare the following handful: {0}.\n";
f+="cantDeclareTitle=Error of handful\n";
f+="cantBidTitle=Error bidding\n";
f+="cantBid=You must choose a bid lower than {0}.\n";
f+="fileNotLoaded={0} cannot be loaded\n";
f+="fileNotLoadedTile=Loading error\n";
f+="saving=Do you want to save the current game?\n";
f+="savingTitle=Game in progressing\n";
f+="tooGame=Too much playing\n";
f+="stopDemo=Stop the demo\n";
f+="beginDemo=The players come around the table.\n";
f+="declareBid={0} thinks for declaring a bid.\n";
f+="demoAction={0}:{1}\n";
f+="demoActionTwo={0}:{1},{2}\n";
f+="noBid=Everybody has declared \"Pass\".\n";
f+="takerCall=The taker thinks for choosing the called card which is the best one for the taker.\n";
f+="takerCallWarning=The taker must be carefull in order not to be alone against other players.\n";
f+="calledPlayer=The player having the card {0} is the partner of the taker (the owner of the card {0} is the called player).\n";
f+="calledPlayerWarning=But the called player must not say the called player is the partner of the taker.\n";
f+="partnersTaker={0} is a partner of the taker.\n";
f+="shownDog=The dog is going to be shown.\n";
f+="playersShowDog=The players look at the dog.\n";
f+="aloneTaker=Ah! hard for the taker, the taker is alone against the other players.\n";
f+="takeDog=The taker takes the dog.\n";
f+="discardCards=The taker discards {0} cards.\n";
f+="declaringSlamDemoDiscard=After discarding, the taker declares a Slam.\n";
f+="declaringSlamDemo=The taker declares a Slam.\n";
f+="beginPlayCards=Playing cards is going to begin.\n";
f+="teamTaker=The taker ({0}) is a partner of {1}.\n";
f+="takeTopCard=The taker takes the card at the top of the deck.\n";
f+="dealRemainCards=The dealer ({0}) is going to deal the remaining cards:\n";
f+="dealSetCards={0}. {1} cards for {2}.\n";
f+="playCardFirst={0} thinks for choosing the first card of the trick.\n";
f+="playCardThen={0} thinks for choosing the card to be played in function of the trick.\n";
f+="trickWinner=The winner of the trick is {0}.\n";
f+="bonusWin={0} wins the bonus {1}.\n";
f+="tooMany=Maximal number of connections achieved.\n";
f+="bug=Bug\n";
f+="unknownHost=Unknown host: {0}\n";
f+="notConnected=Not connected\n";
f+="notFoundFile=Unfound files\n";
f+="notHelp=No available help\n";
f+="lastSavedGame=Last saved at {0}.\n";
f+="canPlay=It is your turn.\n";
f+="passTrick=Pass the trick\n";
f+="noPlayNow=Do not play now\n";
f+="receivedCards=Received cards\n";
f+="givenCards=Cards to be given\n";
return f;
}
static String frCardsGuiMainwindow(){
String f="welcome=Bonjour {0}\n";
f+="goHelpMenu=Pour utiliser l'aide allez dans le menu aide ou appuyer sur F3\n";
f+="file=Fichier\n";
f+="load=Charger une partie\n";
f+="save=Sauvegarder une partie\n";
f+="change=Changer de jeu\n";
f+="mainMenu=Menu principal\n";
f+="exit=Quitter\n";
f+="deal=Partie\n";
f+="consulting=Conseil pour la partie\n";
f+="consultTitle=Conseil\n";
f+="consultBeloteBid=Je vous conseille le contrat {0}.\n";
f+="consultBeloteBidPoints=Je vous conseille le contrat {0} &agrave; {1} points.\n";
f+="consultBeloteBidSuit=Je vous conseille de prendre &agrave; la couleur {0}.\n";
f+="consultBeloteBidSuitPoints=Je vous conseille de prendre &agrave; la couleur {0} &agrave; {1} points.\n";
f+="consultBelotePlayer=Je vous conseille de jouer {0}.\n";
f+="consultPresidentPlayer=Je vous conseille de jouer {0}.\n";
f+="consultPresidentPass=Je vous conseille de passer.\n";
f+="consultPresidentGive=Je vous conseille de donner {0}.\n";
f+="consultTarotBid=Je vous conseille le contrat {0}.\n";
f+="consultTarotCall=Je vous conseille d''appeler {0}.\n";
f+="consultTarotDiscard=Je vous conseille l''&eacute;cart {0}.\n";
f+="consultTarotPlayer=Je vous conseille de jouer {0}.\n";
f+="pause=Pause\n";
f+="helpGame=Aide pour la partie\n";
f+="tricksHands=Plis et mains\n";
f+="teams=Equipes\n";
f+="edit=Editer\n";
f+="demo=Demo\n";
f+="training=Entra&icirc;nement\n";
f+="multiStop=Arr&ecirc;ter de jouer en r&eacute;seau\n";
f+="parameters=Param&egrave;tres\n";
f+="players=Joueurs\n";
f+="launching=Option de lancement\n";
f+="timing=Temporisation du jeu\n";
f+="interact=Interaction avec les cartes\n";
f+="language=Langue\n";
f+="displaying=Affichage\n";
f+="help=Aide\n";
f+="generalHelp=Aide g&eacute;n&eacute;rale\n";
f+="about=A propos\n";
f+="software=Logiciel\n";
f+="author=Auteur\n";
f+="keepPlayingDeal=Continuer sur le jeu actuel\n";
f+="keepPlayingEditedDeal=Continuer de jouer les parties &eacute;dit&eacute;es\n";
f+="replayDeal=Rejouer la donne\n";
f+="stop=Arr&ecirc;ter\n";
f+="nextTrick=Pli suivant\n";
f+="endDeal=Fin de partie\n";
f+="seeDog=Voir le chien\n";
f+="takeCards=Prendre les cartes du chien\n";
f+="validateDog=Valider le chien\n";
f+="goCardGame=Passer au jeu de la carte\n";
f+="singleMode=Mode solo\n";
f+="multiMode=Mode multi joueurs\n";
f+="place=Place:\n";
f+="ready=Pr&ecirc;t &agrave; jouer\n";
f+="selectRules=S&eacute;lectionner les r&egrave;gles\n";
f+="playTarot=Jouer au tarot\n";
f+="playPresident=Jouer au pr&eacute;sident\n";
f+="playBelote=Jouer &agrave; la belote\n";
f+="playerHavingToPlay=Joueur qui doit jouer\n";
f+="resultsPage=R&eacute;sultats globaux\n";
f+="detailResultsPage=D&eacute;tail des r&eacute;sultats\n";
f+="handsTricks=Mains et plis\n";
f+="handsTricksBelote=Mains et plis &agrave; la belote\n";
f+="handsTricksPresident=Mains et plis au pr&eacute;sident\n";
f+="handsTricksTarot=Mains et plis au tarot\n";
f+="scoresEvolution=Courbes temporelles\n";
f+="scoresEvolutionDetail=Evolution temporelle des scores centres par rapport a la moyenne et des ecarts types multiplies par plus ou moins trois\n";
f+="removeTrumpsHandful=Retirez {0} atouts\n";
f+="askSlam=Voulez-vous vraiment demander un chelem?\n";
f+="askSlamTitle=Demande de chelem\n";
f+="declaringSlam={0}: Chelem\n";
f+="smallAlone=Petit sec\n";
f+="smallAloneText={0} a le Petit sec.\n";
f+="loading=Chargement &agrave; {0} %\n";
f+="cantDiscard=Vous ne pouvez pas &eacute;carter la carte suivante: {0}\n";
f+="hasToDiscard=Ecarter {0} cartes.\n";
f+="reason=pour la raison suivante: {0}\n";
f+="haveToPlay=Vous devez jouer une des cartes suivantes:\n";
f+="cantPlay=Vous ne pouvez pas jouer:\n";
f+="cantPlayCard=Vous ne pouvez pas jouer la carte suivante:{0}.\n";
f+="cantPlayCardTitle=Erreur de jouerie\n";
f+="endTrick=C'est la fin d'un pli.\n";
f+="alreadyPlayed=Vous avez d&eacute;j&agrave; jou&eacute; une carte.\n";
f+="waitTurn=Attendez votre tour.\n";
f+="cantDeclareDetail=Vous ne pouvez pas annoncer la poign&eacute;e suivante: {0}.\n";
f+="cantDeclareTitle=Erreur de poign&eacute;e\n";
f+="cantBidTitle=Erreur d'ench&egrave;re\n";
f+="cantBid=Vous devez choisir une ench&egrave;re plus petite que {0}.\n";
f+="fileNotLoaded={0} n''a pas pu &ecirc;tre charg&eacute;.\n";
f+="fileNotLoadedTile=Erreur de chargement\n";
f+="saving=Voulez vous sauvegarder la partie en cours ?\n";
f+="savingTitle=Partie en cours\n";
f+="tooGame=Abus de jeu\n";
f+="stopDemo=Arr&eacute;ter la d&eacute;mo\n";
f+="beginDemo=Les joueurs se mettent autour de la table.\n";
f+="declareBid={0} r&eacute;fl&eacute;chit pour annoncer un contrat.\n";
f+="demoAction={0}:{1}\n";
f+="demoActionTwo={0}:{1},{2}\n";
f+="noBid=Tout le monde a pass&eacute;.\n";
f+="takerCall=Le preneur r&eacute;fl&eacute;chit pour choisir la carte appel&eacute;e qui l'arrange le plus.\n";
f+="takerCallWarning=Il doit faire attention de ne pas s'appeler.\n";
f+="calledPlayer=Le joueur ayant la carte {0} est le partenaire du preneur (il est l''appel&eacute;).\n";
f+="calledPlayerWarning=Mais l'appel&eacute; ne doit pas dire qu'il fait &eacute;quipe avec le preneur.\n";
f+="partnersTaker=Le preneur fait &eacute;quipe avec {0}.\n";
f+="shownDog=Le chien va &ecirc;tre retourn&eacute;.\n";
f+="playersShowDog=Les joueurs regardent le chien.\n";
f+="aloneTaker=Ah! dur pour le preneur, il est tout seul contre les autres joueurs.\n";
f+="takeDog=Le preneur prend le chien.\n";
f+="discardCards=Le preneur &eacute;carte {0} cartes.\n";
f+="declaringSlamDemoDiscard=Apres &eacute;cart, le preneur annonce un Chelem.\n";
f+="declaringSlamDemo=Le preneur annonce un Chelem.\n";
f+="beginPlayCards=Le jeu des cartes va commencer.\n";
f+="teamTaker=Le preneur ({0}) fait &eacute;quipe avec {1}.\n";
f+="takeTopCard=Le preneur prend la carte du dessus de la pile.\n";
f+="dealRemainCards=Le donneur ({0}) va distribuer les derni&egrave;res cartes:\n";
f+="dealSetCards={0}. {1} cartes pour {2}.\n";
f+="playCardFirst={0} r&eacute;fl&eacute;chit pour le choix de la carte d''entame.\n";
f+="playCardThen={0} r&eacute;fl&eacute;chit pour le choix de la carte &agrave; jouer en fonction du pli.\n";
f+="trickWinner=Le ramasseur est {0}.\n";
f+="bonusWin={0} gagne la prime {1}.\n";
f+="tooMany=Nombre maximal de connexions atteint.\n";
f+="bug=Probl&eacute;me\n";
f+="unknownHost=H&ocirc;te inconnu: {0}\n";
f+="notConnected=Non connect&eacute;\n";
f+="notFoundFile=Fichiers introuvables\n";
f+="notHelp=Pas d'aide disponible\n";
f+="lastSavedGame=Derni&egrave;re sauvegarde &agrave; {0}.\n";
f+="canPlay=C'est votre tour.\n";
f+="passTrick=Passer le pli\n";
f+="noPlayNow=Ne pas jouer maintenant\n";
f+="receivedCards=Cartes re&ccedil;ues\n";
f+="givenCards=Cartes &agrave; donner\n";
return f;
}
static String enCardsGuiPanelsPaneltrickshandsbelote(){
String f="card=Card\n";
f+="trick=Trick\n";
return f;
}
static String frCardsGuiPanelsPaneltrickshandsbelote(){
String f="card=Carte\n";
f+="trick=Pli\n";
return f;
}
static String enCardsGuiPanelsPaneltrickshandspresident(){
String f="card=Card\n";
f+="trick=Trick\n";
return f;
}
static String frCardsGuiPanelsPaneltrickshandspresident(){
String f="card=Carte\n";
f+="trick=Pli\n";
return f;
}
static String enCardsGuiPanelsPaneltrickshandstarot(){
String f="card=Card\n";
f+="trick=Trick\n";
return f;
}
static String frCardsGuiPanelsPaneltrickshandstarot(){
String f="card=Carte\n";
f+="trick=Pli\n";
return f;
}
static String enCardsGuiPanelsSuitsscrollablelist(){
String f="suits=Suits\n";
return f;
}
static String frCardsGuiPanelsSuitsscrollablelist(){
String f="suits=Couleurs\n";
return f;
}
}
