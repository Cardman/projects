package code.scripts.pages.aiki;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class PageDataAbilityData{
private PageDataAbilityData(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("xmlns:c","javahtml"));
attrs0_.add(at("c:bean","ability"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"head");
Element elt2_=el(_doc,"title");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,title"));
at(elt3_,attrs1_);
Element elt4_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","displayName"));
at(elt4_,attrs2_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt5_=el(_doc,"link");
CustList<Attr> attrs3_=al(3);
attrs3_.add(at("href","web/css/abilities.css"));
attrs3_.add(at("rel","stylesheet"));
attrs3_.add(at("type","text/css"));
at(elt5_,attrs3_);
ad(elt1_,elt5_);
ad(elt0_,elt1_);
Element elt6_=el(_doc,"body");
build0(elt6_,_doc);
build1(elt6_,_doc);
build2(elt6_,_doc);
build3(elt6_,_doc);
build4(elt6_,_doc);
build5(elt6_,_doc);
build6(elt6_,_doc);
build7(elt6_,_doc);
build8(elt6_,_doc);
build9(elt6_,_doc);
build10(elt6_,_doc);
build11(elt6_,_doc);
build12(elt6_,_doc);
build13(elt6_,_doc);
build14(elt6_,_doc);
build15(elt6_,_doc);
build16(elt6_,_doc);
build17(elt6_,_doc);
build18(elt6_,_doc);
build19(elt6_,_doc);
build20(elt6_,_doc);
build21(elt6_,_doc);
build22(elt6_,_doc);
build23(elt6_,_doc);
build24(elt6_,_doc);
build25(elt6_,_doc);
build26(elt6_,_doc);
build27(elt6_,_doc);
build28(elt6_,_doc);
build29(elt6_,_doc);
build30(elt6_,_doc);
build31(elt6_,_doc);
build32(elt6_,_doc);
build33(elt6_,_doc);
build34(elt6_,_doc);
build35(elt6_,_doc);
build36(elt6_,_doc);
build37(elt6_,_doc);
build38(elt6_,_doc);
build39(elt6_,_doc);
build40(elt6_,_doc);
build41(elt6_,_doc);
build42(elt6_,_doc);
build43(elt6_,_doc);
build44(elt6_,_doc);
build45(elt6_,_doc);
build46(elt6_,_doc);
build47(elt6_,_doc);
build48(elt6_,_doc);
build49(elt6_,_doc);
build50(elt6_,_doc);
build51(elt6_,_doc);
build52(elt6_,_doc);
build53(elt6_,_doc);
build54(elt6_,_doc);
build55(elt6_,_doc);
build56(elt6_,_doc);
build57(elt6_,_doc);
build58(elt6_,_doc);
build59(elt6_,_doc);
build60(elt6_,_doc);
build61(elt6_,_doc);
build62(elt6_,_doc);
build63(elt6_,_doc);
build64(elt6_,_doc);
build65(elt6_,_doc);
build66(elt6_,_doc);
build67(elt6_,_doc);
build68(elt6_,_doc);
build69(elt6_,_doc);
build70(elt6_,_doc);
build71(elt6_,_doc);
build72(elt6_,_doc);
build73(elt6_,_doc);
build74(elt6_,_doc);
build75(elt6_,_doc);
build76(elt6_,_doc);
build77(elt6_,_doc);
build78(elt6_,_doc);
build79(elt6_,_doc);
build80(elt6_,_doc);
build81(elt6_,_doc);
build82(elt6_,_doc);
build83(elt6_,_doc);
build84(elt6_,_doc);
ad(elt0_,elt6_);
_doc.appendChild(elt0_);
}
static void build0(Element _body,Document _doc){
Element elt0_=el(_doc,"a");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("c:command","$clickIndex"));
attrs0_.add(at("href",""));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,abilities"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
Text txt0_=tx(_doc,"{displayName}");
ad(_body,txt0_);
}
static void build1(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build2(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","endRound"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"p");
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_effendround,rank"));
at(elt2_,attrs1_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","endRoundRank"));
at(elt3_,attrs2_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt4_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","web/html/endround/endround.html"));
attrs3_.add(at("href",""));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,endRound"));
at(elt5_,attrs4_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
ad(elt0_,elt1_);
Element elt6_=el(_doc,"c:if");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("condition","!reasonsEndRound.isEmpty()"));
at(elt6_,attrs5_);
Element elt7_=el(_doc,"p");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","msg_effendround,reasons"));
at(elt8_,attrs6_);
ad(elt7_,elt8_);
Element elt9_=el(_doc,"ul");
Element elt10_=el(_doc,"c:for");
CustList<Attr> attrs7_=al(3);
attrs7_.add(at("list","reasonsEndRound"));
attrs7_.add(at("var","r"));
attrs7_.add(at("className","java.lang.String"));
at(elt10_,attrs7_);
Element elt11_=el(_doc,"li");
Text txt0_=tx(_doc,"{r}");
ad(elt11_,txt0_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
ad(elt7_,elt9_);
Element elt12_=el(_doc,"br");
ad(elt7_,elt12_);
Element elt13_=el(_doc,"ul");
Element elt14_=el(_doc,"c:for");
CustList<Attr> attrs8_=al(5);
attrs8_.add(at("key","c"));
attrs8_.add(at("map","mapVarsFailEndRound"));
attrs8_.add(at("value","r"));
attrs8_.add(at("keyClassName","java.lang.String"));
attrs8_.add(at("varClassName","java.lang.String"));
at(elt14_,attrs8_);
Element elt15_=el(_doc,"li");
Text txt1_=tx(_doc,"{c} : {r}");
ad(elt15_,txt1_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt7_,elt13_);
ad(elt6_,elt7_);
Element elt16_=el(_doc,"br");
ad(elt6_,elt16_);
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build3(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","sending"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:import");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("page","{effectSendBean}"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:package");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("name","aiki.beans.effects"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"c:class");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("name","EffectWhileSendingBean"));
at(elt3_,attrs3_);
Element elt4_=el(_doc,"c:field");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("prepare","$intern.effect=getEffectSending() "));
at(elt4_,attrs4_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build4(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","achievedDisappearedPk"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,achieved_disappeared_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,achieved_disappeared"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build5(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","breakProtection"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","!breakProtectionMoves.isEmpty()"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,break_protection_time"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,break_protection"));
at(elt3_,attrs3_);
ad(elt1_,elt3_);
Element elt4_=el(_doc,"ul");
Element elt5_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("list","breakProtectionMoves"));
attrs4_.add(at("var","m"));
at(elt5_,attrs4_);
Element elt6_=el(_doc,"li");
Element elt7_=el(_doc,"a");
CustList<Attr> attrs5_=al(2);
attrs5_.add(at("c:command","$clickBreakProtectionMoves({([m])})"));
attrs5_.add(at("href",""));
at(elt7_,attrs5_);
Text txt0_=tx(_doc,"{getTrBreakProtectionMoves(([m]))}");
ad(elt7_,txt0_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
Element elt8_=el(_doc,"br");
ad(elt1_,elt8_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build6(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","cancelSecEffectOther"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,cancel_sec_effect_other"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build7(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","cancelSecEffectOwner"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,cancel_sec_effect_owner"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build8(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","chgtTypeByDamage"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,chgt_type_by_damage_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,chgt_type_by_damage"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build9(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!chgtTypeByWeather.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,chgt_type_by_weather_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,chgt_type_by_weather"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,chgt_type_by_weather_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,chgt_type_by_weather_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","chgtTypeByWeather"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Object"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("condition","isChgtTypeByWeather(([s]))"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickChgtTypeByWeatherKey({([s])})"));
attrs7_.add(at("href",""));
at(elt15_,attrs7_);
Text txt0_=tx(_doc,"{getTrChgtTypeByWeatherKey(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","!isChgtTypeByWeather(([s]))"));
at(elt16_,attrs8_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_ability,chgt_type_by_weather_no"));
at(elt18_,attrs9_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrChgtTypeByWeatherValue(([s]))}");
ad(elt19_,txt1_);
ad(elt12_,elt19_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt20_=el(_doc,"br");
ad(elt0_,elt20_);
ad(_body,elt0_);
}
static void build10(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","copyMovesTypes"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,copy_move_types_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,copy_move_types"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build11(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","giveItemToAllyHavingUsed"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,cancel_using_items_team_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,cancel_using_items_team"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build12(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","forbidUseBerryAgainstFoes"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,forbid_berry_foes_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,forbid_berry_foes"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build13(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","healedStatusBySwitch"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,healed_status_by_switch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,healed_status_by_switch"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build14(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","ignFoeStatisBoost"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,ign_foe_satis_boost_time_1"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,ign_foe_satis_boost_time_2"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,ign_foe_satis_boost"));
at(elt3_,attrs3_);
ad(elt0_,elt3_);
ad(_body,elt0_);
}
static void build15(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuCh"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_ch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_ch"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build16(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuDamageAllyMoves"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_damage_ally_moves_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_damage_ally_moves"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build17(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuDamageRecoil"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_damage_recoil_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_damage_recoil"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build18(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuDamageTrappingMoves"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_damage_trapping_moves_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_damage_trapping_moves"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build19(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuRechargeRound"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","!immuRechargeRoundMoves.isEmpty()"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_recharge_round_time"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_recharge_round"));
at(elt3_,attrs3_);
ad(elt1_,elt3_);
Element elt4_=el(_doc,"ul");
Element elt5_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("list","immuRechargeRoundMoves"));
attrs4_.add(at("var","m"));
at(elt5_,attrs4_);
Element elt6_=el(_doc,"li");
Element elt7_=el(_doc,"a");
CustList<Attr> attrs5_=al(2);
attrs5_.add(at("c:command","$clickImmuRechargeRoundMoves({([m])})"));
attrs5_.add(at("href",""));
at(elt7_,attrs5_);
Text txt0_=tx(_doc,"{getTrImmuRechargeRoundMoves(([m]))}");
ad(elt7_,txt0_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
Element elt8_=el(_doc,"br");
ad(elt1_,elt8_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build20(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","immuSufferedDamageLowEff"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_suffered_damage_low_eff_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_suffered_damage_low_eff"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build21(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","inflictingDamageInsteadOfSuffering"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,inflicting_damage_instead_suffering_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,inflicting_damage_instead_suffering"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build22(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","mumy"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mumy_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mumy"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build23(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","nbHits"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,nb_hits_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,nb_hits"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build24(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","plate"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,plate"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build25(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","reverseEffectsPowerMovesTypesGlobal"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","!reverseEffectsPowerMovesTypesGlobalAbilities.isEmpty()"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,reverse_effects_power_global"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","reverseEffectsPowerMovesTypesGlobalAbilities"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickReversePowerTypesAbilities({([m])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrReversePowerTypesAbilities(([m]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt1_,elt3_);
Element elt7_=el(_doc,"br");
ad(elt1_,elt7_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build26(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","slowing"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,slowing_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,slowing"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build27(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","takeItemByDamagingMove"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,achieved_disappeared_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,achieved_disappeared"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build28(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!healHpWhileUsingBerry.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,heal_hp_while_using_berry_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,heal_hp_while_using_berry"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","healHpWhileUsingBerry"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build29(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!maxHpForUsingBerry.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,max_hp_for_using_berry_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,max_hp_for_using_berry"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","maxHpForUsingBerry"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build30(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multAllyDamage.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_ally_damage_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_ally_damage"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multAllyDamage"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build31(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multDamageCh.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_damage_ch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_damage_ch"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multDamageCh"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build32(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multEvtRateCh.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_evt_rate_ch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_evt_rate_ch"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multEvtRateCh"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build33(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multEvtRateSecEffectOwner.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_evt_rate_sec_effect_owner_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_evt_rate_sec_effect_owner"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multEvtRateSecEffectOwner"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build34(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStab.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stab_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stab"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multStab"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build35(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multSufferedDamageSuperEff.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_suffered_damage_super_eff_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_suffered_damage_super_eff"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multSufferedDamageSuperEff"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build36(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multVarBoost.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_var_boost_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_var_boost"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","multVarBoost"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build37(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!recoilDamageFoe.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,recoil_damage_foe_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,recoil_damage_foe"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","recoilDamageFoe"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build38(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!recoilDamageFoeByKoOwner.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,recoil_damage_foe_by_ko_owner_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,recoil_damage_foe_by_ko_owner"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","recoilDamageFoeByKoOwner"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build39(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","decreaseNecStepsHatchInt()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,decrease_nec_steps_hatch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,decrease_nec_steps_hatch"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","decreaseNecStepsHatch"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build40(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","nbUsedPpInt()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,nb_used_pp_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,nb_used_pp"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","nbUsedPp"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build41(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuMove.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_moves"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","immuMove"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickImmuMove({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrImmuMove(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build42(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuAllyFromMoves.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_ally_from_moves"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","immuAllyFromMoves"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickImmuAllyFromMoves({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrImmuAllyFromMoves(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build43(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuWeather.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_weathers"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","immuWeather"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickWeather({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrWeather(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build44(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!ignAbility.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,ign_ability_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,ign_ability"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","ignAbility"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickIgnAbility({([m])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrIgnAbility(([m]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt7_=el(_doc,"br");
ad(elt0_,elt7_);
ad(_body,elt0_);
}
static void build45(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!ignFoeTeamMove.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,ign_foe_team_move_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,ign_foe_team_move"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","ignFoeTeamMove"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickIgnFoeTeamMove({([m])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrIgnFoeTeamMove(([m]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt7_=el(_doc,"br");
ad(elt0_,elt7_);
ad(_body,elt0_);
}
static void build46(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuAbility.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_ability_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_ability"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","immuAbility"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickImmuAbility({([m])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrImmuAbility(([m]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt7_=el(_doc,"br");
ad(elt0_,elt7_);
ad(_body,elt0_);
}
static void build47(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuStatusBeginRound.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_status_begin_round_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_status_begin_round"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","immuStatusBeginRound"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickImmuStatusBeginRound({([m])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrImmuStatusBeginRound(([m]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt7_=el(_doc,"br");
ad(elt0_,elt7_);
ad(_body,elt0_);
}
static void build48(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!typeForMoves.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,type_for_moves_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,type_for_moves"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","typeForMoves"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build49(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","typeForMoves.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","!changingBoostTypes.isEmpty()"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,changing_boost_types_time"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,changing_boost_types"));
at(elt3_,attrs3_);
ad(elt1_,elt3_);
Element elt4_=el(_doc,"table");
Element elt5_=el(_doc,"thead");
Element elt6_=el(_doc,"tr");
Element elt7_=el(_doc,"th");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,changing_boost_types_old"));
at(elt8_,attrs4_);
ad(elt7_,elt8_);
ad(elt6_,elt7_);
Element elt9_=el(_doc,"th");
Element elt10_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,changing_boost_types_new"));
at(elt10_,attrs5_);
ad(elt9_,elt10_);
ad(elt6_,elt9_);
Element elt11_=el(_doc,"th");
Element elt12_=el(_doc,"c:message");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","msg_ability,changing_boost_types_rate"));
at(elt12_,attrs6_);
ad(elt11_,elt12_);
ad(elt6_,elt11_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
Element elt13_=el(_doc,"tbody");
Element elt14_=el(_doc,"c:for");
CustList<Attr> attrs7_=al(5);
attrs7_.add(at("key","s"));
attrs7_.add(at("map","changingBoostTypes"));
attrs7_.add(at("value","r"));
attrs7_.add(at("keyClassName","java.lang.Object"));
attrs7_.add(at("varClassName","aiki.fight.util.TypeDamageBoost"));
at(elt14_,attrs7_);
Element elt15_=el(_doc,"tr");
Element elt16_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrChangingBoostTypesOld(([s]))}");
ad(elt16_,txt0_);
ad(elt15_,elt16_);
Element elt17_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrChangingBoostTypesNew(([s]))}");
ad(elt17_,txt1_);
ad(elt15_,elt17_);
Element elt18_=el(_doc,"td");
Text txt2_=tx(_doc,"{r.getBoost()}");
ad(elt18_,txt2_);
ad(elt15_,elt18_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt4_,elt13_);
ad(elt1_,elt4_);
Element elt19_=el(_doc,"br");
ad(elt1_,elt19_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build50(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multPower.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_power"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","multPower"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build51(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multDamage.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_damage"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","multDamage"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build52(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!healHpByWeather.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,heal_hp_by_weather_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,heal_hp_by_weather"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,heal_hp_by_weather_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,heal_hp_by_weather_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","healHpByWeather"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","r"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("condition","isHealHpByWeather(([s]))"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickHealHpByWeatherKey({([s])})"));
attrs7_.add(at("href",""));
at(elt15_,attrs7_);
Text txt0_=tx(_doc,"{getTrHealHpByWeatherKey(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","!isHealHpByWeather(([s]))"));
at(elt16_,attrs8_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_ability,heal_hp_by_weather_no"));
at(elt18_,attrs9_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"c:if");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("condition","r.isZeroOrGt()"));
at(elt19_,attrs10_);
Element elt20_=el(_doc,"td");
Element elt21_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_ability,heal_hp_by_weather_heal"));
at(elt21_,attrs11_);
Element elt22_=el(_doc,"param");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("value","r.absNb()"));
at(elt22_,attrs12_);
ad(elt21_,elt22_);
ad(elt20_,elt21_);
ad(elt19_,elt20_);
ad(elt12_,elt19_);
Element elt23_=el(_doc,"c:if");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("condition","!r.isZeroOrGt()"));
at(elt23_,attrs13_);
Element elt24_=el(_doc,"td");
Element elt25_=el(_doc,"c:message");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("value","msg_ability,heal_hp_by_weather_loss"));
at(elt25_,attrs14_);
Element elt26_=el(_doc,"param");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("value","r.absNb()"));
at(elt26_,attrs15_);
ad(elt25_,elt26_);
ad(elt24_,elt25_);
ad(elt23_,elt24_);
ad(elt12_,elt23_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt27_=el(_doc,"br");
ad(elt0_,elt27_);
ad(_body,elt0_);
}
static void build53(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!healHpByTypeIfWeather.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,heal_hp_by_weather_type_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,heal_hp_by_weather_type"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,heal_hp_by_weather_type_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,heal_hp_by_weather_type_key_sec"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,heal_hp_by_weather_type_value"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(5);
attrs6_.add(at("key","s"));
attrs6_.add(at("map","healHpByTypeIfWeather"));
attrs6_.add(at("value","r"));
attrs6_.add(at("keyClassName","java.lang.Object"));
attrs6_.add(at("varClassName","r"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","isHealHpByTypeIfWeather(([s]))"));
at(elt15_,attrs7_);
Element elt16_=el(_doc,"td");
Element elt17_=el(_doc,"a");
CustList<Attr> attrs8_=al(2);
attrs8_.add(at("c:command","$clickHealHpByTypeIfWeatherKey({([s])})"));
attrs8_.add(at("href",""));
at(elt17_,attrs8_);
Text txt0_=tx(_doc,"{getTrHealHpByTypeIfWeatherKey(([s]))}");
ad(elt17_,txt0_);
ad(elt16_,elt17_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
Element elt18_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","!isHealHpByTypeIfWeather(([s]))"));
at(elt18_,attrs9_);
Element elt19_=el(_doc,"td");
Element elt20_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_ability,heal_hp_by_weather_type_no"));
at(elt20_,attrs10_);
ad(elt19_,elt20_);
ad(elt18_,elt19_);
ad(elt14_,elt18_);
Element elt21_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrHealHpByTypeIfWeatherKeySec(([s]))}");
ad(elt21_,txt1_);
ad(elt14_,elt21_);
Element elt22_=el(_doc,"c:if");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("condition","r.isZeroOrGt()"));
at(elt22_,attrs11_);
Element elt23_=el(_doc,"td");
Element elt24_=el(_doc,"c:message");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("value","msg_ability,heal_hp_by_weather_type_heal"));
at(elt24_,attrs12_);
Element elt25_=el(_doc,"param");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("value","r.absNb()"));
at(elt25_,attrs13_);
ad(elt24_,elt25_);
ad(elt23_,elt24_);
ad(elt22_,elt23_);
ad(elt14_,elt22_);
Element elt26_=el(_doc,"c:if");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("condition","!r.isZeroOrGt()"));
at(elt26_,attrs14_);
Element elt27_=el(_doc,"td");
Element elt28_=el(_doc,"c:message");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("value","msg_ability,heal_hp_by_weather_type_loss"));
at(elt28_,attrs15_);
Element elt29_=el(_doc,"param");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("value","r.absNb()"));
at(elt29_,attrs16_);
ad(elt28_,elt29_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
ad(elt14_,elt26_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt30_=el(_doc,"br");
ad(elt0_,elt30_);
ad(_body,elt0_);
}
static void build54(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuLowStat.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_low_stat_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_low_stat"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","immuLowStat"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Text txt0_=tx(_doc,"{getTrImmuLowStat(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt6_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_low_stat_2"));
at(elt6_,attrs4_);
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build55(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuLowStatIfStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_low_stat_aff_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_low_stat_aff"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_low_stat_aff_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_low_stat_aff_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(2);
attrs5_.add(at("list","immuLowStatIfStatus"));
attrs5_.add(at("var","s"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Element elt14_=el(_doc,"a");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("c:command","$clickImmuLowStatIfStatusKey({([s])})"));
attrs6_.add(at("href",""));
at(elt14_,attrs6_);
Text txt0_=tx(_doc,"{getTrImmuLowStatIfStatusKey(([s]))}");
ad(elt14_,txt0_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt15_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrImmuLowStatIfStatusValue(([s]))}");
ad(elt15_,txt1_);
ad(elt12_,elt15_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt16_=el(_doc,"br");
ad(elt0_,elt16_);
ad(_body,elt0_);
}
static void build56(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuLowStatisTypes.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_low_statis_types_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_low_statis_types"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_low_statis_types_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_low_statis_types_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","immuLowStatisTypes"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","ls"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("list","r"));
attrs6_.add(at("var","t"));
at(elt12_,attrs6_);
Element elt13_=el(_doc,"tr");
Element elt14_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrImmuLowStatisTypes(([s]))}");
ad(elt14_,txt0_);
ad(elt13_,elt14_);
Element elt15_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrImmuLowStatisValue(([s]),([t]))}");
ad(elt15_,txt1_);
ad(elt13_,elt15_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt16_=el(_doc,"br");
ad(elt0_,elt16_);
ad(_body,elt0_);
}
static void build57(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!maxStatisticsIfCh.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,max_statistics_if_ch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,max_statistics_if_ch"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","maxStatisticsIfCh"));
attrs3_.add(at("var","m"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Text txt0_=tx(_doc,"{getTrMaxStatisticsIfCh(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build58(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!singleStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,single_status_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,single_status"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,single_status_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,single_status_rate"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","singleStatus"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","r"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("condition","isStatus(([s]))"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickSingleStatus({([s])})"));
attrs7_.add(at("href",""));
at(elt15_,attrs7_);
Text txt0_=tx(_doc,"{getTrSingleStatus(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","!isStatus(([s]))"));
at(elt16_,attrs8_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_ability,single_status_no"));
at(elt18_,attrs9_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt19_,txt1_);
ad(elt12_,elt19_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt20_=el(_doc,"br");
ad(elt0_,elt20_);
ad(_body,elt0_);
}
static void build59(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuMoveTypesByWeather.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_move_types_weather_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_move_types_weather"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_move_types_weather_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_move_types_weather_type"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","immuMoveTypesByWeather"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","ls"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("list","r"));
attrs6_.add(at("var","t"));
at(elt12_,attrs6_);
Element elt13_=el(_doc,"tr");
Element elt14_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","isMoveByWeather(([s]))"));
at(elt14_,attrs7_);
Element elt15_=el(_doc,"td");
Element elt16_=el(_doc,"a");
CustList<Attr> attrs8_=al(2);
attrs8_.add(at("c:command","$clickImmuMoveByWeather({([s])})"));
attrs8_.add(at("href",""));
at(elt16_,attrs8_);
Text txt0_=tx(_doc,"{getTrImmuMoveByWeather(([s]))}");
ad(elt16_,txt0_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
Element elt17_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","!isMoveByWeather(([s]))"));
at(elt17_,attrs9_);
Element elt18_=el(_doc,"td");
Element elt19_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_ability,immu_move_types_weather_no"));
at(elt19_,attrs10_);
ad(elt18_,elt19_);
ad(elt17_,elt18_);
ad(elt13_,elt17_);
Element elt20_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrImmuTypeByWeather(([s]),([t]))}");
ad(elt20_,txt1_);
ad(elt13_,elt20_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt21_=el(_doc,"br");
ad(elt0_,elt21_);
ad(_body,elt0_);
}
static void build60(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_status_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_status"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_status_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_status_status"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","immuStatus"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","ls"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("list","r"));
attrs6_.add(at("var","t"));
at(elt12_,attrs6_);
Element elt13_=el(_doc,"tr");
Element elt14_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","isMoveByStatus(([s]))"));
at(elt14_,attrs7_);
Element elt15_=el(_doc,"td");
Element elt16_=el(_doc,"a");
CustList<Attr> attrs8_=al(2);
attrs8_.add(at("c:command","$clickImmuStatusWeather({([s])})"));
attrs8_.add(at("href",""));
at(elt16_,attrs8_);
Text txt0_=tx(_doc,"{getTrImmuStatusWeather(([s]))}");
ad(elt16_,txt0_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
Element elt17_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","!isMoveByStatus(([s]))"));
at(elt17_,attrs9_);
Element elt18_=el(_doc,"td");
Element elt19_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_ability,immu_status_no"));
at(elt19_,attrs10_);
ad(elt18_,elt19_);
ad(elt17_,elt18_);
ad(elt13_,elt17_);
Element elt20_=el(_doc,"td");
Element elt21_=el(_doc,"a");
CustList<Attr> attrs11_=al(2);
attrs11_.add(at("c:command","$clickImmuStatus({([s])},{([t])})"));
attrs11_.add(at("href",""));
at(elt21_,attrs11_);
Text txt1_=tx(_doc,"{getTrImmuStatus(([s]),([t]))}");
ad(elt21_,txt1_);
ad(elt20_,elt21_);
ad(elt13_,elt20_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt22_=el(_doc,"br");
ad(elt0_,elt22_);
ad(_body,elt0_);
}
static void build61(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!immuStatusTypes.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,immu_status_type_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,immu_status_type"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,immu_status_type_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,immu_status_type_status"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","immuStatusTypes"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","ls"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("list","r"));
attrs6_.add(at("var","t"));
at(elt12_,attrs6_);
Element elt13_=el(_doc,"tr");
Element elt14_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrImmuStatusTypes(([s]))}");
ad(elt14_,txt0_);
ad(elt13_,elt14_);
Element elt15_=el(_doc,"td");
Element elt16_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickImmuStatusTypes({([s])},{([t])})"));
attrs7_.add(at("href",""));
at(elt16_,attrs7_);
Text txt1_=tx(_doc,"{getTrImmuStatusValue(([s]),([t]))}");
ad(elt16_,txt1_);
ad(elt15_,elt16_);
ad(elt13_,elt15_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt17_=el(_doc,"br");
ad(elt0_,elt17_);
ad(_body,elt0_);
}
static void build62(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!divideStatusRound.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,divide_status_round_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,divide_status_round"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,divide_status_round_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,divide_status_round_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","divideStatusRound"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","r"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Element elt14_=el(_doc,"a");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("c:command","$clickDivideStatusRoundKey({([s])})"));
attrs6_.add(at("href",""));
at(elt14_,attrs6_);
Text txt0_=tx(_doc,"{getTrDivideStatusRoundKey(([s]))}");
ad(elt14_,txt0_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt15_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt15_,txt1_);
ad(elt12_,elt15_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt16_=el(_doc,"br");
ad(elt0_,elt16_);
ad(_body,elt0_);
}
static void build63(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!forwardStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,forward_status_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,forward_status"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,forward_status_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,forward_status_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","forwardStatus"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Object"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Element elt14_=el(_doc,"a");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("c:command","$clickForwardStatusKey({([s])})"));
attrs6_.add(at("href",""));
at(elt14_,attrs6_);
Text txt0_=tx(_doc,"{getTrForwardStatusKey(([s]))}");
ad(elt14_,txt0_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt15_=el(_doc,"td");
Element elt16_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickForwardStatusValue({([s])})"));
attrs7_.add(at("href",""));
at(elt16_,attrs7_);
Text txt1_=tx(_doc,"{getTrForwardStatusValue(([s]))}");
ad(elt16_,txt1_);
ad(elt15_,elt16_);
ad(elt12_,elt15_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt17_=el(_doc,"br");
ad(elt0_,elt17_);
ad(_body,elt0_);
}
static void build64(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!breakFoeImmune.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,break_foe_immune_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,break_foe_immune"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,break_foe_immune_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,break_foe_immune_value"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,break_foe_immune_value_rate"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("list","breakFoeImmune"));
attrs6_.add(at("var","s"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrBreakFoeImmuneKey(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
Element elt16_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrBreakFoeImmuneValue(([s]))}");
ad(elt16_,txt1_);
ad(elt14_,elt16_);
Element elt17_=el(_doc,"td");
Text txt2_=tx(_doc,"{defEff}");
ad(elt17_,txt2_);
ad(elt14_,elt17_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt18_=el(_doc,"br");
ad(elt0_,elt18_);
ad(_body,elt0_);
}
static void build65(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStat.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"table");
Element elt3_=el(_doc,"thead");
Element elt4_=el(_doc,"tr");
Element elt5_=el(_doc,"th");
Element elt6_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_key"));
at(elt6_,attrs2_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
Element elt7_=el(_doc,"th");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_rate"));
at(elt8_,attrs3_);
ad(elt7_,elt8_);
ad(elt4_,elt7_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
Element elt9_=el(_doc,"tbody");
Element elt10_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","s"));
attrs4_.add(at("map","multStat"));
attrs4_.add(at("value","r"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","java.lang.String"));
at(elt10_,attrs4_);
Element elt11_=el(_doc,"tr");
Element elt12_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStat(([s]))}");
ad(elt12_,txt0_);
ad(elt11_,elt12_);
Element elt13_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt13_,txt1_);
ad(elt11_,elt13_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
ad(elt2_,elt9_);
ad(elt0_,elt2_);
Element elt14_=el(_doc,"br");
ad(elt0_,elt14_);
ad(_body,elt0_);
}
static void build66(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfDamageCat.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_damage_cat_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_damage_cat"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_damage_cat_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_damage_cat_key_sec"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,mult_stat_damage_cat_var"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(5);
attrs6_.add(at("key","s"));
attrs6_.add(at("map","multStatIfDamageCat"));
attrs6_.add(at("value","r"));
attrs6_.add(at("keyClassName","java.lang.Object"));
attrs6_.add(at("varClassName","java.lang.Byte"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfDamageCatKey(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
Element elt16_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrMultStatIfDamageCatKeySec(([s]))}");
ad(elt16_,txt1_);
ad(elt14_,elt16_);
Element elt17_=el(_doc,"td");
Text txt2_=tx(_doc,"{r}");
ad(elt17_,txt2_);
ad(elt14_,elt17_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt18_=el(_doc,"br");
ad(elt0_,elt18_);
ad(_body,elt0_);
}
static void build67(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfDamgeType.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_damage_type_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_damage_type"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_damage_type_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_damage_type_key_sec"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,mult_stat_damage_type_var"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(5);
attrs6_.add(at("key","s"));
attrs6_.add(at("map","multStatIfDamgeType"));
attrs6_.add(at("value","r"));
attrs6_.add(at("keyClassName","java.lang.Object"));
attrs6_.add(at("varClassName","java.lang.Byte"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfDamgeType(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
Element elt16_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrMultStatIfDamgeTypeSec(([s]))}");
ad(elt16_,txt1_);
ad(elt14_,elt16_);
Element elt17_=el(_doc,"td");
Text txt2_=tx(_doc,"{r}");
ad(elt17_,txt2_);
ad(elt14_,elt17_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt18_=el(_doc,"br");
ad(elt0_,elt18_);
ad(_body,elt0_);
}
static void build68(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfCat.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_cat_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_cat"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_cat_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_cat_key_sec"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,mult_stat_cat_rate"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(5);
attrs6_.add(at("key","s"));
attrs6_.add(at("map","multStatIfCat"));
attrs6_.add(at("value","r"));
attrs6_.add(at("keyClassName","java.lang.Object"));
attrs6_.add(at("varClassName","r"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfCatKey(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
Element elt16_=el(_doc,"td");
Text txt1_=tx(_doc,"{getTrMultStatIfCatKeySec(([s]))}");
ad(elt16_,txt1_);
ad(elt14_,elt16_);
Element elt17_=el(_doc,"td");
Text txt2_=tx(_doc,"{r}");
ad(elt17_,txt2_);
ad(elt14_,elt17_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt18_=el(_doc,"br");
ad(elt0_,elt18_);
ad(_body,elt0_);
}
static void build69(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfStatutRank.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_status_rank_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_status_rank"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_status_rank_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_status_rank_key_sec"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_ability,mult_stat_status_rank_var"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt5_,elt10_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt12_=el(_doc,"tbody");
Element elt13_=el(_doc,"c:for");
CustList<Attr> attrs6_=al(5);
attrs6_.add(at("key","s"));
attrs6_.add(at("map","multStatIfStatutRank"));
attrs6_.add(at("value","r"));
attrs6_.add(at("keyClassName","java.lang.Object"));
attrs6_.add(at("varClassName","java.lang.Byte"));
at(elt13_,attrs6_);
Element elt14_=el(_doc,"tr");
Element elt15_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfStatutRank(([s]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
Element elt16_=el(_doc,"td");
Element elt17_=el(_doc,"a");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("c:command","$clickMultStatIfStatutRankSec({([s])})"));
attrs7_.add(at("href",""));
at(elt17_,attrs7_);
Text txt1_=tx(_doc,"{getTrMultStatIfStatutRankSec(([s]))}");
ad(elt17_,txt1_);
ad(elt16_,elt17_);
ad(elt14_,elt16_);
Element elt18_=el(_doc,"td");
Text txt2_=tx(_doc,"{r}");
ad(elt18_,txt2_);
ad(elt14_,elt18_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
ad(elt3_,elt12_);
ad(elt0_,elt3_);
Element elt19_=el(_doc,"br");
ad(elt0_,elt19_);
ad(_body,elt0_);
}
static void build70(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!bonusStatRank.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,bonus_stat_rank_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,bonus_stat_rank"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,bonus_stat_rank_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,bonus_stat_rank_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","bonusStatRank"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrBonusStatRank(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build71(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!boostStatRankEndRound.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,bonus_stat_rank_end_round_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,bonus_stat_rank_end_round"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,bonus_stat_rank_end_round_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,bonus_stat_rank_end_round_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","boostStatRankEndRound"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrBoostStatRankEndRound(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build72(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!boostStatRankProtected.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,bonus_stat_rank_protected_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,bonus_stat_rank_protected"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,bonus_stat_rank_protected_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,bonus_stat_rank_protected_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","boostStatRankProtected"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrBoostStatRankProtected(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build73(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!lowStatFoeHit.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,low_stat_foe_hit_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,low_stat_foe_hit"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,low_stat_foe_hit_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,low_stat_foe_hit_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","lowStatFoeHit"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrLowStatFoeHit(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build74(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfKoFoe.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_if_ko_foe_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_if_ko_foe"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_if_ko_foe_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_if_ko_foe_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","multStatIfKoFoe"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfKoFoe(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build75(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatIfLowStat.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_if_low_stat_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_if_low_stat"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_if_low_stat_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_stat_if_low_stat_boost"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","multStatIfLowStat"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Byte"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatIfLowStat(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build76(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multStatAlly.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_stat_ally"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"table");
Element elt3_=el(_doc,"thead");
Element elt4_=el(_doc,"tr");
Element elt5_=el(_doc,"th");
Element elt6_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_stat_ally_key"));
at(elt6_,attrs2_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
Element elt7_=el(_doc,"th");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_stat_ally_rate"));
at(elt8_,attrs3_);
ad(elt7_,elt8_);
ad(elt4_,elt7_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
Element elt9_=el(_doc,"tbody");
Element elt10_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","s"));
attrs4_.add(at("map","multStatAlly"));
attrs4_.add(at("value","r"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","r"));
at(elt10_,attrs4_);
Element elt11_=el(_doc,"tr");
Element elt12_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultStatAlly(([s]))}");
ad(elt12_,txt0_);
ad(elt11_,elt12_);
Element elt13_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt13_,txt1_);
ad(elt11_,elt13_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
ad(elt2_,elt9_);
ad(elt0_,elt2_);
Element elt14_=el(_doc,"br");
ad(elt0_,elt14_);
ad(_body,elt0_);
}
static void build77(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!increasedPrio.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,increased_prio_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,increased_prio"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,increased_prio_cat"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,increased_prio_inc"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","increasedPrio"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Short"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrIncreasedPrio(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build78(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!increasedPrioTypes.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,increased_prio_type_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,increased_prio_type"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,increased_prio_type_key"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,increased_prio_type_inc"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","increasedPrioTypes"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","java.lang.Short"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrIncreasedPrioTypes(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build79(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multDamageFoe.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_damage_foe_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_damage_foe"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_damage_foe_type"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_damage_foe_rate"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","multDamageFoe"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","r"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultDamageFoe(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build80(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!multPowerMovesTypesGlobal.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,mult_power_moves_types_global_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,mult_power_moves_types_global"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
Element elt3_=el(_doc,"table");
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,mult_power_moves_types_global_move"));
at(elt7_,attrs3_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_ability,mult_power_moves_types_global_rate"));
at(elt9_,attrs4_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs5_=al(5);
attrs5_.add(at("key","s"));
attrs5_.add(at("map","multPowerMovesTypesGlobal"));
attrs5_.add(at("value","r"));
attrs5_.add(at("keyClassName","java.lang.Object"));
attrs5_.add(at("varClassName","r"));
at(elt11_,attrs5_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrMultPowerMovesTypesGlobalKey(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt12_,elt14_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt3_,elt10_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build81(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!failStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,fail_status"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"table");
Element elt3_=el(_doc,"thead");
Element elt4_=el(_doc,"tr");
Element elt5_=el(_doc,"th");
Element elt6_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,fail_status_key"));
at(elt6_,attrs2_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
Element elt7_=el(_doc,"th");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_ability,fail_status_cond"));
at(elt8_,attrs3_);
ad(elt7_,elt8_);
ad(elt4_,elt7_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
Element elt9_=el(_doc,"tbody");
Element elt10_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","s"));
attrs4_.add(at("map","failStatus"));
attrs4_.add(at("value","r"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","java.lang.String"));
at(elt10_,attrs4_);
Element elt11_=el(_doc,"tr");
Element elt12_=el(_doc,"td");
Element elt13_=el(_doc,"a");
CustList<Attr> attrs5_=al(2);
attrs5_.add(at("c:command","$clickFailStatus({([s])})"));
attrs5_.add(at("href",""));
at(elt13_,attrs5_);
Text txt0_=tx(_doc,"{getTrFailStatus(([s]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
Element elt14_=el(_doc,"td");
Text txt1_=tx(_doc,"{r}");
ad(elt14_,txt1_);
ad(elt11_,elt14_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
ad(elt2_,elt9_);
ad(elt0_,elt2_);
Element elt15_=el(_doc,"br");
ad(elt0_,elt15_);
ad(_body,elt0_);
}
static void build82(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!mapVars.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"ul");
Element elt2_=el(_doc,"c:for");
CustList<Attr> attrs1_=al(5);
attrs1_.add(at("key","k"));
attrs1_.add(at("map","mapVars"));
attrs1_.add(at("value","v"));
attrs1_.add(at("keyClassName","java.lang.String"));
attrs1_.add(at("varClassName","java.lang.String"));
at(elt2_,attrs1_);
Element elt3_=el(_doc,"li");
Text txt0_=tx(_doc,"{k} :");
ad(elt3_,txt0_);
Element elt4_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("quoted",""));
attrs2_.add(at("value","msg_ability,formula"));
at(elt4_,attrs2_);
Element elt5_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","v"));
at(elt5_,attrs3_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build83(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!healedHpRateBySwitch.isZero()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,healed_hp_rate_by_switch_time"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_ability,healed_hp_rate_by_switch"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","healedHpRateBySwitch"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build84(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!pokemon.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_ability,learnt_pk"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","displayName"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc,"ul");
Element elt4_=el(_doc,"c:for");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("list","pokemon"));
attrs3_.add(at("var","p"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"li");
Element elt6_=el(_doc,"a");
CustList<Attr> attrs4_=al(2);
attrs4_.add(at("c:command","$clickPokemon({([p])})"));
attrs4_.add(at("href",""));
at(elt6_,attrs4_);
Text txt0_=tx(_doc,"{getTrPokemon(([p]))}");
ad(elt6_,txt0_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
ad(_body,elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
