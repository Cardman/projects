package code.scripts.pages.aiki;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class PageDataMovesData{
private PageDataMovesData(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("xmlns:c","javahtml"));
attrs0_.add(at("c:bean","move"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"head");
Element elt2_=el(_doc,"title");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,title"));
at(elt3_,attrs1_);
Element elt4_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","displayName"));
at(elt4_,attrs2_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt5_=el(_doc,"link");
CustList<Attr> attrs3_=al(3);
attrs3_.add(at("href","web/css/moves.css"));
attrs3_.add(at("rel","stylesheet"));
attrs3_.add(at("type","text/css"));
at(elt5_,attrs3_);
ad(elt1_,elt5_);
ad(elt0_,elt1_);
Element elt6_=el(_doc,"body");
build0(elt6_,_doc);
build1(elt6_,_doc);
build2(elt6_,_doc);
build3(elt6_,_doc);
build4(elt6_,_doc);
build5(elt6_,_doc);
build6(elt6_,_doc);
build7(elt6_,_doc);
build8(elt6_,_doc);
build9(elt6_,_doc);
build10(elt6_,_doc);
build11(elt6_,_doc);
build12(elt6_,_doc);
build13(elt6_,_doc);
build14(elt6_,_doc);
build15(elt6_,_doc);
build16(elt6_,_doc);
build17(elt6_,_doc);
build18(elt6_,_doc);
build19(elt6_,_doc);
build20(elt6_,_doc);
build21(elt6_,_doc);
build22(elt6_,_doc);
build23(elt6_,_doc);
build24(elt6_,_doc);
build25(elt6_,_doc);
build26(elt6_,_doc);
build27(elt6_,_doc);
build28(elt6_,_doc);
build29(elt6_,_doc);
build30(elt6_,_doc);
build31(elt6_,_doc);
build32(elt6_,_doc);
build33(elt6_,_doc);
build34(elt6_,_doc);
build35(elt6_,_doc);
build36(elt6_,_doc);
build37(elt6_,_doc);
build38(elt6_,_doc);
build39(elt6_,_doc);
build40(elt6_,_doc);
build41(elt6_,_doc);
build42(elt6_,_doc);
build43(elt6_,_doc);
build44(elt6_,_doc);
build45(elt6_,_doc);
build46(elt6_,_doc);
build47(elt6_,_doc);
build48(elt6_,_doc);
build49(elt6_,_doc);
ad(elt0_,elt6_);
_doc.appendChild(elt0_);
}
static void build0(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build1(Element _body,Document _doc){
Element elt0_=el(_doc,"a");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("c:command","$clickMoves"));
attrs0_.add(at("href",""));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,moves"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build2(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build3(Element _body,Document _doc){
Element elt0_=el(_doc,"h1");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,general_move"));
at(elt1_,attrs0_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","displayName"));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build4(Element _body,Document _doc){
Element elt0_=el(_doc,"h2");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,type_cat"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build5(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,typesBoost"));
at(elt0_,attrs0_);
ad(_body,elt0_);
}
static void build6(Element _body,Document _doc){
Element elt0_=el(_doc,"ul");
Element elt1_=el(_doc,"c:for");
CustList<Attr> attrs0_=al(3);
attrs0_.add(at("list","boostedTypes"));
attrs0_.add(at("var","t"));
attrs0_.add(at("className","java.lang.String"));
at(elt1_,attrs0_);
Element elt2_=el(_doc,"li");
Text txt0_=tx(_doc,"{t}");
ad(elt2_,txt0_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build7(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!hasDefaultTypes"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,type_title"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(3);
attrs2_.add(at("list","types"));
attrs2_.add(at("var","t"));
attrs2_.add(at("className","java.lang.String"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Text txt0_=tx(_doc,"{t}");
ad(elt4_,txt0_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build8(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","typesDependOnlyOnItem()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"table");
Element elt2_=el(_doc,"caption");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,moves"));
at(elt3_,attrs1_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,item"));
at(elt7_,attrs2_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,type_title"));
at(elt9_,attrs3_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","i"));
attrs4_.add(at("map","typesByOwnedItems"));
attrs4_.add(at("value","t"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","java.lang.String"));
at(elt11_,attrs4_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("condition","isItem(([i]))"));
at(elt13_,attrs5_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("c:command","$clickTypesByOwnedItems({([i])})"));
at(elt15_,attrs6_);
Text txt0_=tx(_doc,"{getTrTypesByOwnedItems(([i]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","!isItem(([i]))"));
at(elt16_,attrs7_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_movedata,other_item"));
at(elt18_,attrs8_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{t}");
ad(elt19_,txt1_);
ad(elt12_,elt19_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt1_,elt10_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build9(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","typesDependOnlyOnWeather()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"table");
Element elt2_=el(_doc,"caption");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,moves"));
at(elt3_,attrs1_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,weather"));
at(elt7_,attrs2_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,type_title"));
at(elt9_,attrs3_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","i"));
attrs4_.add(at("map","typesByWeathers"));
attrs4_.add(at("value","t"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","java.lang.String"));
at(elt11_,attrs4_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("condition","isWeather(([i]))"));
at(elt13_,attrs5_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("c:command","$clickTypesByWeathers({([i])})"));
at(elt15_,attrs6_);
Text txt0_=tx(_doc,"{getTrTypesByWeathers(([i]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","!isWeather(([i]))"));
at(elt16_,attrs7_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_movedata,other_weather"));
at(elt18_,attrs8_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{t}");
ad(elt19_,txt1_);
ad(elt12_,elt19_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt1_,elt10_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build10(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","typesDependOnWeatherAndItem()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"table");
Element elt2_=el(_doc,"caption");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,moves"));
at(elt3_,attrs1_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt4_=el(_doc,"thead");
Element elt5_=el(_doc,"tr");
Element elt6_=el(_doc,"th");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,item"));
at(elt7_,attrs2_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"th");
Element elt9_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,type_title"));
at(elt9_,attrs3_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
ad(elt4_,elt5_);
ad(elt1_,elt4_);
Element elt10_=el(_doc,"tbody");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","i"));
attrs4_.add(at("map","typesByOwnedItems"));
attrs4_.add(at("value","t"));
attrs4_.add(at("keyClassName","java.lang.Object"));
attrs4_.add(at("varClassName","java.lang.String"));
at(elt11_,attrs4_);
Element elt12_=el(_doc,"tr");
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("condition","isItem(([i]))"));
at(elt13_,attrs5_);
Element elt14_=el(_doc,"td");
Element elt15_=el(_doc,"a");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("c:command","$clickTypesByOwnedItems({([i])})"));
at(elt15_,attrs6_);
Text txt0_=tx(_doc,"{getTrTypesByOwnedItems(([i]))}");
ad(elt15_,txt0_);
ad(elt14_,elt15_);
ad(elt13_,elt14_);
ad(elt12_,elt13_);
Element elt16_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","!isItem(([i]))"));
at(elt16_,attrs7_);
Element elt17_=el(_doc,"td");
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_movedata,other_item"));
at(elt18_,attrs8_);
ad(elt17_,elt18_);
ad(elt16_,elt17_);
ad(elt12_,elt16_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{t}");
ad(elt19_,txt1_);
ad(elt12_,elt19_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt1_,elt10_);
ad(elt0_,elt1_);
Element elt20_=el(_doc,"br");
ad(elt0_,elt20_);
Element elt21_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_movedata,types"));
at(elt21_,attrs9_);
ad(elt0_,elt21_);
Element elt22_=el(_doc,"table");
Element elt23_=el(_doc,"caption");
Element elt24_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_movedata,moves"));
at(elt24_,attrs10_);
ad(elt23_,elt24_);
ad(elt22_,elt23_);
Element elt25_=el(_doc,"thead");
Element elt26_=el(_doc,"tr");
Element elt27_=el(_doc,"th");
Element elt28_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_movedata,weather"));
at(elt28_,attrs11_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
Element elt29_=el(_doc,"th");
Element elt30_=el(_doc,"c:message");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("value","msg_movedata,type_title"));
at(elt30_,attrs12_);
ad(elt29_,elt30_);
ad(elt26_,elt29_);
ad(elt25_,elt26_);
ad(elt22_,elt25_);
Element elt31_=el(_doc,"tbody");
Element elt32_=el(_doc,"c:for");
CustList<Attr> attrs13_=al(5);
attrs13_.add(at("key","i"));
attrs13_.add(at("map","typesByWeathers"));
attrs13_.add(at("value","t"));
attrs13_.add(at("keyClassName","java.lang.Object"));
attrs13_.add(at("varClassName","java.lang.String"));
at(elt32_,attrs13_);
Element elt33_=el(_doc,"tr");
Element elt34_=el(_doc,"c:if");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("condition","isWeather(([i]))"));
at(elt34_,attrs14_);
Element elt35_=el(_doc,"td");
Element elt36_=el(_doc,"a");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("c:command","$clickTypesByWeathers({([i])})"));
at(elt36_,attrs15_);
Text txt2_=tx(_doc,"{getTrTypesByWeathers(([i]))}");
ad(elt36_,txt2_);
ad(elt35_,elt36_);
ad(elt34_,elt35_);
ad(elt33_,elt34_);
Element elt37_=el(_doc,"c:if");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("condition","!isWeather(([i]))"));
at(elt37_,attrs16_);
Element elt38_=el(_doc,"td");
Element elt39_=el(_doc,"c:message");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("value","msg_movedata,other_weather"));
at(elt39_,attrs17_);
ad(elt38_,elt39_);
ad(elt37_,elt38_);
ad(elt33_,elt37_);
Element elt40_=el(_doc,"td");
Text txt3_=tx(_doc,"{t}");
ad(elt40_,txt3_);
ad(elt33_,elt40_);
ad(elt32_,elt33_);
ad(elt31_,elt32_);
ad(elt22_,elt31_);
ad(elt0_,elt22_);
ad(_body,elt0_);
}
static void build11(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","isDamagingMove()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","isDamagingDirectMove()"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,cat_direct_true"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","category"));
at(elt3_,attrs3_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt4_=el(_doc,"c:if");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("condition","!isDamagingDirectMove()"));
at(elt4_,attrs4_);
Element elt5_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_movedata,cat_direct_false"));
at(elt5_,attrs5_);
Element elt6_=el(_doc,"param");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","category"));
at(elt6_,attrs6_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt0_,elt4_);
ad(_body,elt0_);
}
static void build12(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!isDamagingMove()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,cat_status"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build13(Element _body,Document _doc){
Element elt0_=el(_doc,"hr");
ad(_body,elt0_);
}
static void build14(Element _body,Document _doc){
Element elt0_=el(_doc,"h2");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,pp_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build15(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,pp"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"param");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","pp"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build16(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","isZeroPriority()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,priority_zero"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build17(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!isZeroPriority()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,priority"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","priority"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build18(Element _body,Document _doc){
Element elt0_=el(_doc,"h2");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,targets_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build19(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,targets"));
at(elt0_,attrs0_);
ad(_body,elt0_);
}
static void build20(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","isAdjAdv()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,targets_ADJ_ADV"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"br");
ad(elt0_,elt2_);
ad(_body,elt0_);
Element elt3_=el(_doc,"c:if");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("condition","isAdjMult()"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,targets_ADJ_MULT"));
at(elt4_,attrs3_);
ad(elt3_,elt4_);
Element elt5_=el(_doc,"br");
ad(elt3_,elt5_);
ad(_body,elt3_);
Element elt6_=el(_doc,"c:if");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("condition","isAdjUniq()"));
at(elt6_,attrs4_);
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_movedata,targets_ADJ_UNIQ"));
at(elt7_,attrs5_);
ad(elt6_,elt7_);
Element elt8_=el(_doc,"br");
ad(elt6_,elt8_);
ad(_body,elt6_);
Element elt9_=el(_doc,"c:if");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("condition","isAllie()"));
at(elt9_,attrs6_);
Element elt10_=el(_doc,"c:message");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("value","msg_movedata,targets_ALLIE"));
at(elt10_,attrs7_);
ad(elt9_,elt10_);
Element elt11_=el(_doc,"br");
ad(elt9_,elt11_);
ad(_body,elt9_);
Element elt12_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","isAllies()"));
at(elt12_,attrs8_);
Element elt13_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_movedata,targets_ALLIES"));
at(elt13_,attrs9_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"br");
ad(elt12_,elt14_);
ad(_body,elt12_);
Element elt15_=el(_doc,"c:if");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("condition","isAnyFoe()"));
at(elt15_,attrs10_);
Element elt16_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_movedata,targets_ANY_FOE"));
at(elt16_,attrs11_);
ad(elt15_,elt16_);
Element elt17_=el(_doc,"br");
ad(elt15_,elt17_);
ad(_body,elt15_);
Element elt18_=el(_doc,"c:if");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("condition","isAutreUniq()"));
at(elt18_,attrs12_);
Element elt19_=el(_doc,"c:message");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("value","msg_movedata,targets_AUTRE_UNIQ"));
at(elt19_,attrs13_);
ad(elt18_,elt19_);
Element elt20_=el(_doc,"br");
ad(elt18_,elt20_);
ad(_body,elt18_);
Element elt21_=el(_doc,"c:if");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("condition","isGlobale()"));
at(elt21_,attrs14_);
Element elt22_=el(_doc,"c:message");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("value","msg_movedata,targets_GLOBALE"));
at(elt22_,attrs15_);
ad(elt21_,elt22_);
Element elt23_=el(_doc,"br");
ad(elt21_,elt23_);
ad(_body,elt21_);
Element elt24_=el(_doc,"c:if");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("condition","isLanceur()"));
at(elt24_,attrs16_);
Element elt25_=el(_doc,"c:message");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("value","msg_movedata,targets_LANCEUR"));
at(elt25_,attrs17_);
ad(elt24_,elt25_);
Element elt26_=el(_doc,"br");
ad(elt24_,elt26_);
ad(_body,elt24_);
Element elt27_=el(_doc,"c:if");
CustList<Attr> attrs18_=al(1);
attrs18_.add(at("condition","isPseudoGlobale()"));
at(elt27_,attrs18_);
Element elt28_=el(_doc,"c:message");
CustList<Attr> attrs19_=al(1);
attrs19_.add(at("value","msg_movedata,targets_PSEUDO_GLOBALE"));
at(elt28_,attrs19_);
ad(elt27_,elt28_);
Element elt29_=el(_doc,"br");
ad(elt27_,elt29_);
ad(_body,elt27_);
Element elt30_=el(_doc,"c:if");
CustList<Attr> attrs20_=al(1);
attrs20_.add(at("condition","isTousAdv()"));
at(elt30_,attrs20_);
Element elt31_=el(_doc,"c:message");
CustList<Attr> attrs21_=al(1);
attrs21_.add(at("value","msg_movedata,targets_TOUS_ADV"));
at(elt31_,attrs21_);
ad(elt30_,elt31_);
Element elt32_=el(_doc,"br");
ad(elt30_,elt32_);
ad(_body,elt30_);
Element elt33_=el(_doc,"c:if");
CustList<Attr> attrs22_=al(1);
attrs22_.add(at("condition","isUniqueImporte()"));
at(elt33_,attrs22_);
Element elt34_=el(_doc,"c:message");
CustList<Attr> attrs23_=al(1);
attrs23_.add(at("value","msg_movedata,targets_UNIQUE_IMPORTE"));
at(elt34_,attrs23_);
ad(elt33_,elt34_);
Element elt35_=el(_doc,"br");
ad(elt33_,elt35_);
ad(_body,elt33_);
Element elt36_=el(_doc,"c:if");
CustList<Attr> attrs24_=al(1);
attrs24_.add(at("condition","isAdjAdv()"));
at(elt36_,attrs24_);
Element elt37_=el(_doc,"c:message");
CustList<Attr> attrs25_=al(1);
attrs25_.add(at("value","msg_movedata,chosen_targets_ADJ_ADV"));
at(elt37_,attrs25_);
ad(elt36_,elt37_);
Element elt38_=el(_doc,"br");
ad(elt36_,elt38_);
ad(_body,elt36_);
Element elt39_=el(_doc,"c:if");
CustList<Attr> attrs26_=al(1);
attrs26_.add(at("condition","isAdjMult()"));
at(elt39_,attrs26_);
Element elt40_=el(_doc,"c:message");
CustList<Attr> attrs27_=al(1);
attrs27_.add(at("value","msg_movedata,chosen_targets_ADJ_MULT"));
at(elt40_,attrs27_);
ad(elt39_,elt40_);
Element elt41_=el(_doc,"br");
ad(elt39_,elt41_);
ad(_body,elt39_);
Element elt42_=el(_doc,"c:if");
CustList<Attr> attrs28_=al(1);
attrs28_.add(at("condition","isAdjUniq()"));
at(elt42_,attrs28_);
Element elt43_=el(_doc,"c:message");
CustList<Attr> attrs29_=al(1);
attrs29_.add(at("value","msg_movedata,chosen_targets_ADJ_UNIQ"));
at(elt43_,attrs29_);
ad(elt42_,elt43_);
Element elt44_=el(_doc,"br");
ad(elt42_,elt44_);
ad(_body,elt42_);
Element elt45_=el(_doc,"c:if");
CustList<Attr> attrs30_=al(1);
attrs30_.add(at("condition","isAllie()"));
at(elt45_,attrs30_);
Element elt46_=el(_doc,"c:message");
CustList<Attr> attrs31_=al(1);
attrs31_.add(at("value","msg_movedata,chosen_targets_ALLIE"));
at(elt46_,attrs31_);
ad(elt45_,elt46_);
Element elt47_=el(_doc,"br");
ad(elt45_,elt47_);
ad(_body,elt45_);
Element elt48_=el(_doc,"c:if");
CustList<Attr> attrs32_=al(1);
attrs32_.add(at("condition","isAllies()"));
at(elt48_,attrs32_);
Element elt49_=el(_doc,"c:message");
CustList<Attr> attrs33_=al(1);
attrs33_.add(at("value","msg_movedata,chosen_targets_ALLIES"));
at(elt49_,attrs33_);
ad(elt48_,elt49_);
Element elt50_=el(_doc,"br");
ad(elt48_,elt50_);
ad(_body,elt48_);
Element elt51_=el(_doc,"c:if");
CustList<Attr> attrs34_=al(1);
attrs34_.add(at("condition","isAnyFoe()"));
at(elt51_,attrs34_);
Element elt52_=el(_doc,"c:message");
CustList<Attr> attrs35_=al(1);
attrs35_.add(at("value","msg_movedata,chosen_targets_ANY_FOE"));
at(elt52_,attrs35_);
ad(elt51_,elt52_);
Element elt53_=el(_doc,"br");
ad(elt51_,elt53_);
ad(_body,elt51_);
Element elt54_=el(_doc,"c:if");
CustList<Attr> attrs36_=al(1);
attrs36_.add(at("condition","isAutreUniq()"));
at(elt54_,attrs36_);
Element elt55_=el(_doc,"c:message");
CustList<Attr> attrs37_=al(1);
attrs37_.add(at("value","msg_movedata,chosen_targets_AUTRE_UNIQ"));
at(elt55_,attrs37_);
ad(elt54_,elt55_);
Element elt56_=el(_doc,"br");
ad(elt54_,elt56_);
ad(_body,elt54_);
Element elt57_=el(_doc,"c:if");
CustList<Attr> attrs38_=al(1);
attrs38_.add(at("condition","isGlobale()"));
at(elt57_,attrs38_);
Element elt58_=el(_doc,"c:message");
CustList<Attr> attrs39_=al(1);
attrs39_.add(at("value","msg_movedata,chosen_targets_GLOBALE"));
at(elt58_,attrs39_);
ad(elt57_,elt58_);
Element elt59_=el(_doc,"br");
ad(elt57_,elt59_);
ad(_body,elt57_);
Element elt60_=el(_doc,"c:if");
CustList<Attr> attrs40_=al(1);
attrs40_.add(at("condition","isLanceur()"));
at(elt60_,attrs40_);
Element elt61_=el(_doc,"c:message");
CustList<Attr> attrs41_=al(1);
attrs41_.add(at("value","msg_movedata,chosen_targets_LANCEUR"));
at(elt61_,attrs41_);
ad(elt60_,elt61_);
Element elt62_=el(_doc,"br");
ad(elt60_,elt62_);
ad(_body,elt60_);
Element elt63_=el(_doc,"c:if");
CustList<Attr> attrs42_=al(1);
attrs42_.add(at("condition","isPseudoGlobale()"));
at(elt63_,attrs42_);
Element elt64_=el(_doc,"c:message");
CustList<Attr> attrs43_=al(1);
attrs43_.add(at("value","msg_movedata,chosen_targets_PSEUDO_GLOBALE"));
at(elt64_,attrs43_);
ad(elt63_,elt64_);
Element elt65_=el(_doc,"br");
ad(elt63_,elt65_);
ad(_body,elt63_);
Element elt66_=el(_doc,"c:if");
CustList<Attr> attrs44_=al(1);
attrs44_.add(at("condition","isTousAdv()"));
at(elt66_,attrs44_);
Element elt67_=el(_doc,"c:message");
CustList<Attr> attrs45_=al(1);
attrs45_.add(at("value","msg_movedata,chosen_targets_TOUS_ADV"));
at(elt67_,attrs45_);
ad(elt66_,elt67_);
Element elt68_=el(_doc,"br");
ad(elt66_,elt68_);
ad(_body,elt66_);
Element elt69_=el(_doc,"c:if");
CustList<Attr> attrs46_=al(1);
attrs46_.add(at("condition","isUniqueImporte()"));
at(elt69_,attrs46_);
Element elt70_=el(_doc,"c:message");
CustList<Attr> attrs47_=al(1);
attrs47_.add(at("value","msg_movedata,chosen_targets_UNIQUE_IMPORTE"));
at(elt70_,attrs47_);
ad(elt69_,elt70_);
Element elt71_=el(_doc,"br");
ad(elt69_,elt71_);
ad(_body,elt69_);
}
static void build21(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build22(Element _body,Document _doc){
Element elt0_=el(_doc,"h2");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,accuracy_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build23(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","isConstAccuracy()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,accuracy_const"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","accuracy"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build24(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!isConstAccuracy()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,accuracy_var"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","accuracy"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build25(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!mapVarsAccuracy.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"br");
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs1_=al(5);
attrs1_.add(at("key","k"));
attrs1_.add(at("map","mapVarsAccuracy"));
attrs1_.add(at("value","v"));
attrs1_.add(at("keyClassName","java.lang.String"));
attrs1_.add(at("varClassName","java.lang.String"));
at(elt3_,attrs1_);
Element elt4_=el(_doc,"li");
Text txt0_=tx(_doc,"{k} :");
ad(elt4_,txt0_);
Element elt5_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("quoted",""));
attrs2_.add(at("value","msg_movedata,formula"));
at(elt5_,attrs2_);
Element elt6_=el(_doc,"param");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","v"));
at(elt6_,attrs3_);
ad(elt5_,elt6_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build26(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build27(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","ignVarAccurUserNeg"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,ign_var_prec_lanceur_neg"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build28(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","ignVarEvasTargetPos"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,ign_var_esq_cible_pos"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build29(Element _body,Document _doc){
Element elt0_=el(_doc,"h2");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,prepa_round_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build30(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!isZeroPrepaRound()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,prepa_tour_climat"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","nbPrepaRound"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build31(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","disappearBeforeUse"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,disparition_tour"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build32(Element _body,Document _doc){
Element elt0_=el(_doc,"hr");
ad(_body,elt0_);
}
static void build33(Element _body,Document _doc){
Element elt0_=el(_doc,"h1");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,success_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build34(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!deletedStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,deleted_status"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","deletedStatus"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickDeletedStatus({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getDeletedStatus(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build35(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!requiredStatus.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,requiered_status"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","requiredStatus"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickRequiredStatus({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getRequiredStatus(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build36(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!achieveDisappearedPkUsingMove.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,touche_pk_disparus"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","achieveDisappearedPkUsingMove"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Text txt0_=tx(_doc,"{getTrAchieveDisappearedPkUsingMove(([m]))}");
ad(elt4_,txt0_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt5_=el(_doc,"br");
ad(elt0_,elt5_);
ad(_body,elt0_);
}
static void build37(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!abilities.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,abilities_affect"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","abilities"));
attrs2_.add(at("var","a"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickAbility({([a])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrAbility(([a]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build38(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!items.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,items_affect"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","items"));
attrs2_.add(at("var","i"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickItem({([i])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrItem(([i]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build39(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","cannotKo"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,cannot_ko"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"br");
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build40(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!affectedByMoves.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,affect_by_moves"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"ul");
Element elt3_=el(_doc,"c:for");
CustList<Attr> attrs2_=al(2);
attrs2_.add(at("list","affectedByMoves"));
attrs2_.add(at("var","m"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"li");
Element elt5_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","$clickMove({([m])})"));
attrs3_.add(at("href",""));
at(elt5_,attrs3_);
Text txt0_=tx(_doc,"{getTrMove(([m]))}");
ad(elt5_,txt0_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
ad(_body,elt0_);
}
static void build41(Element _body,Document _doc){
Element elt0_=el(_doc,"br");
ad(_body,elt0_);
}
static void build42(Element _body,Document _doc){
Element elt0_=el(_doc,"h1");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,effects_title"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build43(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","secEffectsByItem.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:for");
CustList<Attr> attrs1_=al(3);
attrs1_.add(at("className","$int"));
attrs1_.add(at("list","effects"));
attrs1_.add(at("var","e"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:if");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("condition","isBeforePrimaryEffect(e)"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"h2");
Element elt4_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,effects_bef_first"));
at(elt4_,attrs3_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt5_=el(_doc,"c:if");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("condition","!isEndRoundEffect(e)"));
at(elt5_,attrs4_);
Element elt6_=el(_doc,"c:if");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("condition","isPrimaryEffect(e)"));
at(elt6_,attrs5_);
Element elt7_=el(_doc,"h2");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","msg_movedata,effects_first"));
at(elt8_,attrs6_);
ad(elt7_,elt8_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt9_=el(_doc,"c:if");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("condition","isAfterPrimaryEffect(e)"));
at(elt9_,attrs7_);
Element elt10_=el(_doc,"h2");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_movedata,effects_sec"));
at(elt11_,attrs8_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
Element elt12_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","secEffectIfNoDamage"));
at(elt12_,attrs9_);
Element elt13_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_movedata,effect_while_no_damage"));
at(elt13_,attrs10_);
ad(elt12_,elt13_);
ad(elt9_,elt12_);
ad(elt5_,elt9_);
ad(elt1_,elt5_);
Element elt14_=el(_doc,"c:if");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("condition","isEndRoundEffect(e)"));
at(elt14_,attrs11_);
Element elt15_=el(_doc,"h2");
Element elt16_=el(_doc,"c:message");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("value","msg_movedata,effects_end_round"));
at(elt16_,attrs12_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
ad(elt1_,elt14_);
Element elt17_=el(_doc,"c:import");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("page","{getPage(([e]))}"));
at(elt17_,attrs13_);
Element elt18_=el(_doc,"c:package");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("name","aiki.beans.moves.effects"));
at(elt18_,attrs14_);
Element elt19_=el(_doc,"c:class");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("name","EffectBean"));
at(elt19_,attrs15_);
Element elt20_=el(_doc,"c:field");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("prepare","$intern.index=e"));
at(elt20_,attrs16_);
ad(elt19_,elt20_);
Element elt21_=el(_doc,"c:field");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("prepare","$intern.move=name"));
at(elt21_,attrs17_);
ad(elt19_,elt21_);
ad(elt18_,elt19_);
ad(elt17_,elt18_);
ad(elt1_,elt17_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build44(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!secEffectsByItem.isEmpty()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:for");
CustList<Attr> attrs1_=al(3);
attrs1_.add(at("className","$int"));
attrs1_.add(at("list","effects"));
attrs1_.add(at("var","e"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:if");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("condition","isBeforePrimaryEffect(e)"));
at(elt2_,attrs2_);
Element elt3_=el(_doc,"h2");
Element elt4_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,effects_bef_first"));
at(elt4_,attrs3_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
Element elt5_=el(_doc,"c:import");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("page","{getPage(([e]))}"));
at(elt5_,attrs4_);
Element elt6_=el(_doc,"c:package");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("name","aiki.beans.moves.effects"));
at(elt6_,attrs5_);
Element elt7_=el(_doc,"c:class");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("name","EffectBean"));
at(elt7_,attrs6_);
Element elt8_=el(_doc,"c:field");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("prepare","$intern.index=e"));
at(elt8_,attrs7_);
ad(elt7_,elt8_);
Element elt9_=el(_doc,"c:field");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("prepare","$intern.move=name"));
at(elt9_,attrs8_);
ad(elt7_,elt9_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
ad(elt2_,elt5_);
ad(elt1_,elt2_);
Element elt10_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","!isEndRoundEffect(e)"));
at(elt10_,attrs9_);
Element elt11_=el(_doc,"c:if");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("condition","isPrimaryEffect(e)"));
at(elt11_,attrs10_);
Element elt12_=el(_doc,"h2");
Element elt13_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_movedata,effects_first"));
at(elt13_,attrs11_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
Element elt14_=el(_doc,"c:import");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("page","{getPage(([e]))}"));
at(elt14_,attrs12_);
Element elt15_=el(_doc,"c:package");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("name","aiki.beans.moves.effects"));
at(elt15_,attrs13_);
Element elt16_=el(_doc,"c:class");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("name","EffectBean"));
at(elt16_,attrs14_);
Element elt17_=el(_doc,"c:field");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("prepare","$intern.index=e"));
at(elt17_,attrs15_);
ad(elt16_,elt17_);
Element elt18_=el(_doc,"c:field");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("prepare","$intern.move=name"));
at(elt18_,attrs16_);
ad(elt16_,elt18_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
ad(elt11_,elt14_);
ad(elt10_,elt11_);
ad(elt1_,elt10_);
ad(elt0_,elt1_);
Element elt19_=el(_doc,"h2");
Element elt20_=el(_doc,"c:message");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("value","msg_movedata,effects_sec_dpt"));
at(elt20_,attrs17_);
ad(elt19_,elt20_);
ad(elt0_,elt19_);
Element elt21_=el(_doc,"c:for");
CustList<Attr> attrs18_=al(5);
attrs18_.add(at("key","e"));
attrs18_.add(at("map","secEffectsByItem"));
attrs18_.add(at("value","l"));
attrs18_.add(at("keyClassName","java.lang.Object"));
attrs18_.add(at("varClassName","ls"));
at(elt21_,attrs18_);
Element elt22_=el(_doc,"h3");
Text txt0_=tx(_doc,"{([e])}");
ad(elt22_,txt0_);
Element elt23_=el(_doc,"a");
CustList<Attr> attrs19_=al(2);
attrs19_.add(at("c:command","$clickItemSecEffect({([e])})"));
attrs19_.add(at("href",""));
at(elt23_,attrs19_);
Text txt1_=tx(_doc,"{translateItemSecEffect(([e]))}");
ad(elt23_,txt1_);
ad(elt22_,elt23_);
ad(elt21_,elt22_);
Element elt24_=el(_doc,"c:if");
CustList<Attr> attrs20_=al(1);
attrs20_.add(at("condition","secEffectIfNoDamage"));
at(elt24_,attrs20_);
Element elt25_=el(_doc,"c:message");
CustList<Attr> attrs21_=al(1);
attrs21_.add(at("value","msg_movedata,effect_while_no_damage"));
at(elt25_,attrs21_);
ad(elt24_,elt25_);
ad(elt21_,elt24_);
Element elt26_=el(_doc,"br");
ad(elt21_,elt26_);
Element elt27_=el(_doc,"c:for");
CustList<Attr> attrs22_=al(3);
attrs22_.add(at("className","$int"));
attrs22_.add(at("list","l"));
attrs22_.add(at("var","n"));
at(elt27_,attrs22_);
Element elt28_=el(_doc,"c:import");
CustList<Attr> attrs23_=al(1);
attrs23_.add(at("page","{getPage(n)}"));
at(elt28_,attrs23_);
Element elt29_=el(_doc,"c:package");
CustList<Attr> attrs24_=al(1);
attrs24_.add(at("name","aiki.beans.moves.effects"));
at(elt29_,attrs24_);
Element elt30_=el(_doc,"c:class");
CustList<Attr> attrs25_=al(1);
attrs25_.add(at("name","EffectBean"));
at(elt30_,attrs25_);
Element elt31_=el(_doc,"c:field");
CustList<Attr> attrs26_=al(1);
attrs26_.add(at("prepare","$intern.index=n"));
at(elt31_,attrs26_);
ad(elt30_,elt31_);
Element elt32_=el(_doc,"c:field");
CustList<Attr> attrs27_=al(1);
attrs27_.add(at("prepare","$intern.move=name"));
at(elt32_,attrs27_);
ad(elt30_,elt32_);
ad(elt29_,elt30_);
ad(elt28_,elt29_);
ad(elt27_,elt28_);
ad(elt21_,elt27_);
Element elt33_=el(_doc,"br");
ad(elt21_,elt33_);
Element elt34_=el(_doc,"br");
ad(elt21_,elt34_);
ad(elt0_,elt21_);
Element elt35_=el(_doc,"c:for");
CustList<Attr> attrs28_=al(3);
attrs28_.add(at("className","$int"));
attrs28_.add(at("list","effects"));
attrs28_.add(at("var","e"));
at(elt35_,attrs28_);
Element elt36_=el(_doc,"c:if");
CustList<Attr> attrs29_=al(1);
attrs29_.add(at("condition","isEndRoundEffect(e)"));
at(elt36_,attrs29_);
Element elt37_=el(_doc,"h2");
Element elt38_=el(_doc,"c:message");
CustList<Attr> attrs30_=al(1);
attrs30_.add(at("value","msg_movedata,effects_end_round"));
at(elt38_,attrs30_);
ad(elt37_,elt38_);
ad(elt36_,elt37_);
Element elt39_=el(_doc,"c:import");
CustList<Attr> attrs31_=al(1);
attrs31_.add(at("page","{getPage(([e]))}"));
at(elt39_,attrs31_);
Element elt40_=el(_doc,"c:package");
CustList<Attr> attrs32_=al(1);
attrs32_.add(at("name","aiki.beans.moves.effects"));
at(elt40_,attrs32_);
Element elt41_=el(_doc,"c:class");
CustList<Attr> attrs33_=al(1);
attrs33_.add(at("name","EffectBean"));
at(elt41_,attrs33_);
Element elt42_=el(_doc,"c:field");
CustList<Attr> attrs34_=al(1);
attrs34_.add(at("prepare","$intern.index=e"));
at(elt42_,attrs34_);
ad(elt41_,elt42_);
Element elt43_=el(_doc,"c:field");
CustList<Attr> attrs35_=al(1);
attrs35_.add(at("prepare","$intern.move=name"));
at(elt43_,attrs35_);
ad(elt41_,elt43_);
ad(elt40_,elt41_);
ad(elt39_,elt40_);
ad(elt36_,elt39_);
ad(elt35_,elt36_);
ad(elt0_,elt35_);
ad(_body,elt0_);
}
static void build45(Element _body,Document _doc){
Element elt0_=el(_doc,"h1");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_movedata,after_using"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build46(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","switchAfterUsingMove()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,switch"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build47(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","rechargeRound"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,recharge"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,recharge_ab"));
at(elt2_,attrs2_);
ad(elt0_,elt2_);
ad(_body,elt0_);
}
static void build48(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","isRepeatedRound()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:if");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("condition","constUserChoice"));
at(elt1_,attrs1_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","msg_movedata,const_user_choice"));
at(elt2_,attrs2_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc,"a");
CustList<Attr> attrs3_=al(2);
attrs3_.add(at("c:command","web/html/endround/endround.html"));
attrs3_.add(at("href",""));
at(elt3_,attrs3_);
Element elt4_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_movedata,end_round_link"));
at(elt4_,attrs4_);
ad(elt3_,elt4_);
ad(elt0_,elt3_);
Element elt5_=el(_doc,"br");
ad(elt0_,elt5_);
Element elt6_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_movedata,repeated_round"));
at(elt6_,attrs5_);
Element elt7_=el(_doc,"param");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","rankIncrementNbRound"));
at(elt7_,attrs6_);
ad(elt6_,elt7_);
ad(elt0_,elt6_);
Element elt8_=el(_doc,"table");
Element elt9_=el(_doc,"thead");
Element elt10_=el(_doc,"tr");
Element elt11_=el(_doc,"th");
Element elt12_=el(_doc,"c:message");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("value","msg_movedata,nb_rounds"));
at(elt12_,attrs7_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
Element elt13_=el(_doc,"th");
Element elt14_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_movedata,rate"));
at(elt14_,attrs8_);
ad(elt13_,elt14_);
ad(elt10_,elt13_);
ad(elt9_,elt10_);
ad(elt8_,elt9_);
Element elt15_=el(_doc,"tbody");
Element elt16_=el(_doc,"c:for");
CustList<Attr> attrs9_=al(5);
attrs9_.add(at("key","r"));
attrs9_.add(at("map","repeatRoundLaw"));
attrs9_.add(at("value","p"));
attrs9_.add(at("keyClassName","li"));
attrs9_.add(at("varClassName","r"));
at(elt16_,attrs9_);
Element elt17_=el(_doc,"tr");
Element elt18_=el(_doc,"td");
Text txt0_=tx(_doc,"{r}");
ad(elt18_,txt0_);
ad(elt17_,elt18_);
Element elt19_=el(_doc,"td");
Text txt1_=tx(_doc,"{p}");
ad(elt19_,txt1_);
ad(elt17_,elt19_);
ad(elt16_,elt17_);
ad(elt15_,elt16_);
ad(elt8_,elt15_);
ad(elt0_,elt8_);
Element elt20_=el(_doc,"br");
ad(elt0_,elt20_);
ad(_body,elt0_);
}
static void build49(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","canBeLearnt()"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"h1");
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_movedata,learning_move"));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc,"c:if");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("condition","!movesLevelLearntByPokemon.isEmpty()"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"h2");
Element elt5_=el(_doc,"c:message");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("value","msg_movedata,by_growing"));
at(elt5_,attrs3_);
ad(elt4_,elt5_);
ad(elt3_,elt4_);
Element elt6_=el(_doc,"c:for");
CustList<Attr> attrs4_=al(5);
attrs4_.add(at("key","l"));
attrs4_.add(at("map","movesLevelLearntByPokemon"));
attrs4_.add(at("value","p"));
attrs4_.add(at("keyClassName","java.lang.Short"));
attrs4_.add(at("varClassName","ls"));
at(elt6_,attrs4_);
Element elt7_=el(_doc,"h3");
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_movedata,grow_level"));
at(elt8_,attrs5_);
Element elt9_=el(_doc,"param");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","l"));
at(elt9_,attrs6_);
ad(elt8_,elt9_);
ad(elt7_,elt8_);
ad(elt6_,elt7_);
Element elt10_=el(_doc,"ul");
Element elt11_=el(_doc,"c:for");
CustList<Attr> attrs7_=al(2);
attrs7_.add(at("list","p"));
attrs7_.add(at("var","k"));
at(elt11_,attrs7_);
Element elt12_=el(_doc,"li");
Element elt13_=el(_doc,"a");
CustList<Attr> attrs8_=al(2);
attrs8_.add(at("c:command","$clickPokemon({([l])},{([k])})"));
attrs8_.add(at("href",""));
at(elt13_,attrs8_);
Text txt0_=tx(_doc,"{getTrPokemon(([l]),([k]))}");
ad(elt13_,txt0_);
ad(elt12_,elt13_);
ad(elt11_,elt12_);
ad(elt10_,elt11_);
ad(elt6_,elt10_);
Element elt14_=el(_doc,"br");
ad(elt6_,elt14_);
ad(elt3_,elt6_);
ad(elt0_,elt3_);
Element elt15_=el(_doc,"c:if");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("condition","!movesTmLearntByPokemon.isEmpty()"));
at(elt15_,attrs9_);
Element elt16_=el(_doc,"h2");
Element elt17_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_movedata,by_learn_tm"));
at(elt17_,attrs10_);
ad(elt16_,elt17_);
ad(elt15_,elt16_);
Element elt18_=el(_doc,"ul");
Element elt19_=el(_doc,"c:for");
CustList<Attr> attrs11_=al(2);
attrs11_.add(at("list","movesTmLearntByPokemon"));
attrs11_.add(at("var","l"));
at(elt19_,attrs11_);
Element elt20_=el(_doc,"li");
Element elt21_=el(_doc,"a");
CustList<Attr> attrs12_=al(2);
attrs12_.add(at("c:command","$clickPokemonTm({([l])})"));
attrs12_.add(at("href",""));
at(elt21_,attrs12_);
Text txt1_=tx(_doc,"{getTrPokemonTm(([l]))}");
ad(elt21_,txt1_);
ad(elt20_,elt21_);
ad(elt19_,elt20_);
ad(elt18_,elt19_);
ad(elt15_,elt18_);
ad(elt0_,elt15_);
Element elt22_=el(_doc,"c:if");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("condition","!movesHmLearntByPokemon.isEmpty()"));
at(elt22_,attrs13_);
Element elt23_=el(_doc,"h2");
Element elt24_=el(_doc,"c:message");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("value","msg_movedata,by_learn_hm"));
at(elt24_,attrs14_);
ad(elt23_,elt24_);
ad(elt22_,elt23_);
Element elt25_=el(_doc,"ul");
Element elt26_=el(_doc,"c:for");
CustList<Attr> attrs15_=al(2);
attrs15_.add(at("list","movesHmLearntByPokemon"));
attrs15_.add(at("var","l"));
at(elt26_,attrs15_);
Element elt27_=el(_doc,"li");
Element elt28_=el(_doc,"a");
CustList<Attr> attrs16_=al(2);
attrs16_.add(at("c:command","$clickPokemonHm({([l])})"));
attrs16_.add(at("href",""));
at(elt28_,attrs16_);
Text txt2_=tx(_doc,"{getTrPokemonHm(([l]))}");
ad(elt28_,txt2_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
ad(elt25_,elt26_);
ad(elt22_,elt25_);
ad(elt0_,elt22_);
Element elt29_=el(_doc,"c:if");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("condition","!movesMtLearntByPokemon.isEmpty()"));
at(elt29_,attrs17_);
Element elt30_=el(_doc,"h2");
Element elt31_=el(_doc,"c:message");
CustList<Attr> attrs18_=al(1);
attrs18_.add(at("value","msg_movedata,by_learn_mt"));
at(elt31_,attrs18_);
ad(elt30_,elt31_);
ad(elt29_,elt30_);
Element elt32_=el(_doc,"ul");
Element elt33_=el(_doc,"c:for");
CustList<Attr> attrs19_=al(2);
attrs19_.add(at("list","movesMtLearntByPokemon"));
attrs19_.add(at("var","l"));
at(elt33_,attrs19_);
Element elt34_=el(_doc,"li");
Element elt35_=el(_doc,"a");
CustList<Attr> attrs20_=al(2);
attrs20_.add(at("c:command","$clickPokemonMt({([l])})"));
attrs20_.add(at("href",""));
at(elt35_,attrs20_);
Text txt3_=tx(_doc,"{getTrPokemonMt(([l]))}");
ad(elt35_,txt3_);
ad(elt34_,elt35_);
ad(elt33_,elt34_);
ad(elt32_,elt33_);
ad(elt29_,elt32_);
ad(elt0_,elt29_);
ad(_body,elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
