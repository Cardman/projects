package code.scripts.pages.aiki;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class PageDataMovesEffectsEffinvoke{
private PageDataMovesEffectsEffinvoke(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("xmlns:c","javahtml"));
attrs0_.add(at("c:bean","eff_invoke"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"head");
Element elt2_=el(_doc,"link");
CustList<Attr> attrs1_=al(3);
attrs1_.add(at("href","web/css/moves.css"));
attrs1_.add(at("rel","stylesheet"));
attrs1_.add(at("type","text/css"));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc,"body");
build0(elt3_,_doc);
ad(elt0_,elt3_);
_doc.appendChild(elt0_);
}
static void build0(Element _body,Document _doc){
Element elt0_=el(_doc,"p");
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_effinvoke,effect"));
at(elt1_,attrs0_);
ad(elt0_,elt1_);
Element elt2_=el(_doc,"c:import");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("page","{effectBean}"));
at(elt2_,attrs1_);
Element elt3_=el(_doc,"c:package");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("name","aiki.beans.moves.effects"));
at(elt3_,attrs2_);
Element elt4_=el(_doc,"c:class");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("name","EffectBean"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"c:field");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("prepare","$intern.index=index"));
at(elt5_,attrs4_);
ad(elt4_,elt5_);
Element elt6_=el(_doc,"c:field");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("prepare","$intern.move=move"));
at(elt6_,attrs5_);
ad(elt4_,elt6_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt7_=el(_doc,"c:if");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("condition","invokingMoveButUser"));
at(elt7_,attrs6_);
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("value","msg_effinvoke,invoke_move_but_user"));
at(elt8_,attrs7_);
ad(elt7_,elt8_);
ad(elt0_,elt7_);
Element elt9_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","invokingTargetChosenMove"));
at(elt9_,attrs8_);
Element elt10_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_effinvoke,invoke_target_chosen_move"));
at(elt10_,attrs9_);
ad(elt9_,elt10_);
ad(elt0_,elt9_);
Element elt11_=el(_doc,"c:if");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("condition","invokingUserMoveWhileSleep"));
at(elt11_,attrs10_);
Element elt12_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_effinvoke,invoke_user_move_while_sleep"));
at(elt12_,attrs11_);
ad(elt11_,elt12_);
ad(elt0_,elt11_);
Element elt13_=el(_doc,"c:if");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("condition","invokingAllyMove"));
at(elt13_,attrs12_);
Element elt14_=el(_doc,"c:message");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("value","msg_effinvoke,invoke_move_part"));
at(elt14_,attrs13_);
ad(elt13_,elt14_);
ad(elt0_,elt13_);
Element elt15_=el(_doc,"c:if");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("condition","invokingTargetSuccesfulMove"));
at(elt15_,attrs14_);
Element elt16_=el(_doc,"c:message");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("value","msg_effinvoke,invoke_move_success_target"));
at(elt16_,attrs15_);
ad(elt15_,elt16_);
ad(elt0_,elt15_);
Element elt17_=el(_doc,"c:if");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("condition","invokingSufferedMove"));
at(elt17_,attrs16_);
Element elt18_=el(_doc,"c:message");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("value","msg_effinvoke,invoke_suffered_move"));
at(elt18_,attrs17_);
ad(elt17_,elt18_);
ad(elt0_,elt17_);
Element elt19_=el(_doc,"c:if");
CustList<Attr> attrs18_=al(1);
attrs18_.add(at("condition","!rateInvokationMove.isZero()"));
at(elt19_,attrs18_);
Element elt20_=el(_doc,"c:message");
CustList<Attr> attrs19_=al(1);
attrs19_.add(at("value","msg_effinvoke,rate_invoke_move"));
at(elt20_,attrs19_);
Element elt21_=el(_doc,"param");
CustList<Attr> attrs20_=al(1);
attrs20_.add(at("value","rateInvokationMove"));
at(elt21_,attrs20_);
ad(elt20_,elt21_);
ad(elt19_,elt20_);
ad(elt0_,elt19_);
Element elt22_=el(_doc,"c:if");
CustList<Attr> attrs21_=al(1);
attrs21_.add(at("condition","!moveFctEnv.isEmpty()"));
at(elt22_,attrs21_);
Element elt23_=el(_doc,"c:message");
CustList<Attr> attrs22_=al(1);
attrs22_.add(at("value","msg_effinvoke,move_fct_env"));
at(elt23_,attrs22_);
ad(elt22_,elt23_);
Element elt24_=el(_doc,"table");
Element elt25_=el(_doc,"thead");
Element elt26_=el(_doc,"tr");
Element elt27_=el(_doc,"th");
Element elt28_=el(_doc,"c:message");
CustList<Attr> attrs23_=al(1);
attrs23_.add(at("value","msg_effinvoke,env_type"));
at(elt28_,attrs23_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
Element elt29_=el(_doc,"th");
Element elt30_=el(_doc,"c:message");
CustList<Attr> attrs24_=al(1);
attrs24_.add(at("value","msg_effinvoke,invoked_move"));
at(elt30_,attrs24_);
ad(elt29_,elt30_);
ad(elt26_,elt29_);
ad(elt25_,elt26_);
ad(elt24_,elt25_);
Element elt31_=el(_doc,"tbody");
Element elt32_=el(_doc,"c:for");
CustList<Attr> attrs25_=al(5);
attrs25_.add(at("key","c"));
attrs25_.add(at("map","moveFctEnv"));
attrs25_.add(at("value","r"));
attrs25_.add(at("keyClassName","java.lang.Object"));
attrs25_.add(at("varClassName","java.lang.Object"));
at(elt32_,attrs25_);
Element elt33_=el(_doc,"tr");
Element elt34_=el(_doc,"td");
Text txt0_=tx(_doc,"{getTrEnv(([c]))}");
ad(elt34_,txt0_);
ad(elt33_,elt34_);
Element elt35_=el(_doc,"td");
Element elt36_=el(_doc,"a");
CustList<Attr> attrs26_=al(2);
attrs26_.add(at("c:command","$clickMoveFctEnv({([c])})"));
attrs26_.add(at("href",""));
at(elt36_,attrs26_);
Text txt1_=tx(_doc,"{getTrMoveFctEnv(([c]))}");
ad(elt36_,txt1_);
ad(elt35_,elt36_);
ad(elt33_,elt35_);
ad(elt32_,elt33_);
ad(elt31_,elt32_);
ad(elt24_,elt31_);
ad(elt22_,elt24_);
Element elt37_=el(_doc,"br");
ad(elt22_,elt37_);
Element elt38_=el(_doc,"c:if");
CustList<Attr> attrs27_=al(1);
attrs27_.add(at("condition","!globalMoves.isEmpty()"));
at(elt38_,attrs27_);
Element elt39_=el(_doc,"c:message");
CustList<Attr> attrs28_=al(1);
attrs28_.add(at("value","msg_effinvoke,move_fct_env_exc"));
at(elt39_,attrs28_);
ad(elt38_,elt39_);
Element elt40_=el(_doc,"ul");
Element elt41_=el(_doc,"c:for");
CustList<Attr> attrs29_=al(2);
attrs29_.add(at("list","globalMoves"));
attrs29_.add(at("var","m"));
at(elt41_,attrs29_);
Element elt42_=el(_doc,"li");
Element elt43_=el(_doc,"a");
CustList<Attr> attrs30_=al(2);
attrs30_.add(at("c:command","$clickGlobalMoveFctEnv({([m])})"));
attrs30_.add(at("href",""));
at(elt43_,attrs30_);
Text txt2_=tx(_doc,"{getTrGlobalMoveFctEnv(([m]))}");
ad(elt43_,txt2_);
ad(elt42_,elt43_);
ad(elt41_,elt42_);
ad(elt40_,elt41_);
ad(elt38_,elt40_);
Element elt44_=el(_doc,"br");
ad(elt38_,elt44_);
ad(elt22_,elt38_);
ad(elt0_,elt22_);
Element elt45_=el(_doc,"c:if");
CustList<Attr> attrs31_=al(1);
attrs31_.add(at("condition","!invokingMoveByUserTypes.isEmpty()"));
at(elt45_,attrs31_);
Element elt46_=el(_doc,"c:message");
CustList<Attr> attrs32_=al(1);
attrs32_.add(at("value","msg_effinvoke,invoke_move_type"));
at(elt46_,attrs32_);
ad(elt45_,elt46_);
Element elt47_=el(_doc,"table");
Element elt48_=el(_doc,"thead");
Element elt49_=el(_doc,"tr");
Element elt50_=el(_doc,"th");
Element elt51_=el(_doc,"c:message");
CustList<Attr> attrs33_=al(1);
attrs33_.add(at("value","msg_effinvoke,owned_type"));
at(elt51_,attrs33_);
ad(elt50_,elt51_);
ad(elt49_,elt50_);
Element elt52_=el(_doc,"th");
Element elt53_=el(_doc,"c:message");
CustList<Attr> attrs34_=al(1);
attrs34_.add(at("value","msg_effinvoke,invoked_move"));
at(elt53_,attrs34_);
ad(elt52_,elt53_);
ad(elt49_,elt52_);
ad(elt48_,elt49_);
ad(elt47_,elt48_);
Element elt54_=el(_doc,"tbody");
Element elt55_=el(_doc,"c:for");
CustList<Attr> attrs35_=al(5);
attrs35_.add(at("key","c"));
attrs35_.add(at("map","invokingMoveByUserTypes"));
attrs35_.add(at("value","r"));
attrs35_.add(at("keyClassName","java.lang.Object"));
attrs35_.add(at("varClassName","java.lang.Object"));
at(elt55_,attrs35_);
Element elt56_=el(_doc,"tr");
Element elt57_=el(_doc,"c:if");
CustList<Attr> attrs36_=al(1);
attrs36_.add(at("condition","!isType(([c]))"));
at(elt57_,attrs36_);
Element elt58_=el(_doc,"td");
Element elt59_=el(_doc,"c:message");
CustList<Attr> attrs37_=al(1);
attrs37_.add(at("value","msg_effinvoke,other_owned_type"));
at(elt59_,attrs37_);
ad(elt58_,elt59_);
ad(elt57_,elt58_);
ad(elt56_,elt57_);
Element elt60_=el(_doc,"c:if");
CustList<Attr> attrs38_=al(1);
attrs38_.add(at("condition","isType(([c]))"));
at(elt60_,attrs38_);
Element elt61_=el(_doc,"td");
Text txt3_=tx(_doc,"{getTrUserTypes(([c]))}");
ad(elt61_,txt3_);
ad(elt60_,elt61_);
ad(elt56_,elt60_);
Element elt62_=el(_doc,"td");
Element elt63_=el(_doc,"a");
CustList<Attr> attrs39_=al(2);
attrs39_.add(at("c:command","$clickMoveUserTypes({([c])})"));
attrs39_.add(at("href",""));
at(elt63_,attrs39_);
Text txt4_=tx(_doc,"{getTrMoveUserTypes(([c]))}");
ad(elt63_,txt4_);
ad(elt62_,elt63_);
ad(elt56_,elt62_);
ad(elt55_,elt56_);
ad(elt54_,elt55_);
ad(elt47_,elt54_);
ad(elt45_,elt47_);
Element elt64_=el(_doc,"br");
ad(elt45_,elt64_);
ad(elt0_,elt45_);
Element elt65_=el(_doc,"c:if");
CustList<Attr> attrs40_=al(1);
attrs40_.add(at("condition","!movesNotToBeInvoked.isEmpty()"));
at(elt65_,attrs40_);
Element elt66_=el(_doc,"c:message");
CustList<Attr> attrs41_=al(1);
attrs41_.add(at("value","msg_effinvoke,moves_not_invoked"));
at(elt66_,attrs41_);
ad(elt65_,elt66_);
Element elt67_=el(_doc,"ul");
Element elt68_=el(_doc,"c:for");
CustList<Attr> attrs42_=al(2);
attrs42_.add(at("list","movesNotToBeInvoked"));
attrs42_.add(at("var","s"));
at(elt68_,attrs42_);
Element elt69_=el(_doc,"li");
Element elt70_=el(_doc,"a");
CustList<Attr> attrs43_=al(2);
attrs43_.add(at("c:command","$clickMoveNotInvok({([s])})"));
attrs43_.add(at("href",""));
at(elt70_,attrs43_);
Text txt5_=tx(_doc,"{getTrMoveNotInvok(([s]))}");
ad(elt70_,txt5_);
ad(elt69_,elt70_);
ad(elt68_,elt69_);
ad(elt67_,elt68_);
ad(elt65_,elt67_);
Element elt71_=el(_doc,"br");
ad(elt65_,elt71_);
ad(elt0_,elt65_);
ad(_body,elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
