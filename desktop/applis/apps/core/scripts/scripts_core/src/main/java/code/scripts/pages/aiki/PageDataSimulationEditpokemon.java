package code.scripts.pages.aiki;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class PageDataSimulationEditpokemon{
private PageDataSimulationEditpokemon(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("xmlns:c","javahtml"));
attrs0_.add(at("c:bean","editpokemon"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"head");
Element elt2_=el(_doc,"title");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_levelsimu,title_edit_pokemon_pl"));
at(elt3_,attrs1_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt4_=el(_doc,"link");
CustList<Attr> attrs2_=al(3);
attrs2_.add(at("href","web/css/simulation.css"));
attrs2_.add(at("rel","stylesheet"));
attrs2_.add(at("type","text/css"));
at(elt4_,attrs2_);
ad(elt1_,elt4_);
ad(elt0_,elt1_);
Element elt5_=el(_doc,"body");
build0(elt5_,_doc);
build1(elt5_,_doc);
build2(elt5_,_doc);
build3(elt5_,_doc);
build4(elt5_,_doc);
build5(elt5_,_doc);
ad(elt0_,elt5_);
_doc.appendChild(elt0_);
}
static void build0(Element _body,Document _doc){
Element elt0_=el(_doc,"a");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("c:command","$cancel"));
attrs0_.add(at("href",""));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_levelsimu,cancel"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build1(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_simulation,name_pk"));
at(elt0_,attrs0_);
ad(_body,elt0_);
Text txt0_=tx(_doc,"{translateName()}");
ad(_body,txt0_);
Element elt1_=el(_doc,"br");
ad(_body,elt1_);
}
static void build2(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_simulation,level_pk"));
at(elt0_,attrs0_);
ad(_body,elt0_);
Text txt0_=tx(_doc,"{level}");
ad(_body,txt0_);
Element elt1_=el(_doc,"br");
ad(_body,elt1_);
}
static void build3(Element _body,Document _doc){
Element elt0_=el(_doc,"c:message");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("value","msg_simulation,item_pk"));
at(elt0_,attrs0_);
ad(_body,elt0_);
Text txt0_=tx(_doc,": {translateItem()}");
ad(_body,txt0_);
Element elt1_=el(_doc,"br");
ad(_body,elt1_);
}
static void build4(Element _body,Document _doc){
Element elt0_=el(_doc,"form");
CustList<Attr> attrs0_=al(4);
attrs0_.add(at("action",""));
attrs0_.add(at("c:command","$chooseItem"));
attrs0_.add(at("method","post"));
attrs0_.add(at("name","item"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"c:submit");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("message","msg_simulation,item_pk"));
at(elt1_,attrs1_);
ad(elt0_,elt1_);
ad(_body,elt0_);
}
static void build5(Element _body,Document _doc){
Element elt0_=el(_doc,"c:if");
CustList<Attr> attrs0_=al(1);
attrs0_.add(at("condition","!isEmpty(namePk)"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"br");
ad(elt0_,elt1_);
Element elt2_=el(_doc,"form");
CustList<Attr> attrs1_=al(4);
attrs1_.add(at("action",""));
attrs1_.add(at("c:command","$addMoves"));
attrs1_.add(at("method","post"));
attrs1_.add(at("name","adding_moves"));
at(elt2_,attrs1_);
Element elt3_=el(_doc,"c:submit");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("message","msg_simulation,add"));
at(elt3_,attrs2_);
ad(elt2_,elt3_);
ad(elt0_,elt2_);
Element elt4_=el(_doc,"form");
CustList<Attr> attrs3_=al(4);
attrs3_.add(at("action",""));
attrs3_.add(at("c:command","$deleteMoves"));
attrs3_.add(at("method","post"));
attrs3_.add(at("name","delete_moves"));
at(elt4_,attrs3_);
Element elt5_=el(_doc,"table");
Element elt6_=el(_doc,"caption");
Element elt7_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_moves,moves"));
at(elt7_,attrs4_);
ad(elt6_,elt7_);
ad(elt5_,elt6_);
Element elt8_=el(_doc,"thead");
Element elt9_=el(_doc,"tr");
Element elt10_=el(_doc,"th");
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","msg_moves,name_h"));
at(elt11_,attrs5_);
ad(elt10_,elt11_);
ad(elt9_,elt10_);
Element elt12_=el(_doc,"th");
Element elt13_=el(_doc,"c:message");
CustList<Attr> attrs6_=al(1);
attrs6_.add(at("value","msg_moves,pp_h"));
at(elt13_,attrs6_);
ad(elt12_,elt13_);
ad(elt9_,elt12_);
Element elt14_=el(_doc,"th");
Element elt15_=el(_doc,"c:message");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("value","msg_moves,types_h"));
at(elt15_,attrs7_);
ad(elt14_,elt15_);
ad(elt9_,elt14_);
Element elt16_=el(_doc,"th");
Element elt17_=el(_doc,"c:message");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("value","msg_moves,cat_h"));
at(elt17_,attrs8_);
ad(elt16_,elt17_);
ad(elt9_,elt16_);
Element elt18_=el(_doc,"th");
Element elt19_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_moves,damag_h"));
at(elt19_,attrs9_);
ad(elt18_,elt19_);
ad(elt9_,elt18_);
Element elt20_=el(_doc,"th");
Element elt21_=el(_doc,"c:message");
CustList<Attr> attrs10_=al(1);
attrs10_.add(at("value","msg_moves,direc_h"));
at(elt21_,attrs10_);
ad(elt20_,elt21_);
ad(elt9_,elt20_);
Element elt22_=el(_doc,"th");
Element elt23_=el(_doc,"c:message");
CustList<Attr> attrs11_=al(1);
attrs11_.add(at("value","msg_moves,prio_h"));
at(elt23_,attrs11_);
ad(elt22_,elt23_);
ad(elt9_,elt22_);
Element elt24_=el(_doc,"th");
Element elt25_=el(_doc,"c:message");
CustList<Attr> attrs12_=al(1);
attrs12_.add(at("value","msg_simulation,selected"));
at(elt25_,attrs12_);
ad(elt24_,elt25_);
ad(elt9_,elt24_);
ad(elt8_,elt9_);
ad(elt5_,elt8_);
Element elt26_=el(_doc,"tbody");
Element elt27_=el(_doc,"c:for");
CustList<Attr> attrs13_=al(3);
attrs13_.add(at("className","aiki.beans.facade.simulation.dto.SelectLineMove"));
attrs13_.add(at("list","moves"));
attrs13_.add(at("var","d"));
at(elt27_,attrs13_);
Element elt28_=el(_doc,"tr");
Element elt29_=el(_doc,"td");
Text txt0_=tx(_doc,"{d.displayName}");
ad(elt29_,txt0_);
ad(elt28_,elt29_);
Element elt30_=el(_doc,"td");
Text txt1_=tx(_doc,"{d.pp}");
ad(elt30_,txt1_);
ad(elt28_,elt30_);
Element elt31_=el(_doc,"td");
Element elt32_=el(_doc,"c:for");
CustList<Attr> attrs14_=al(3);
attrs14_.add(at("list","d.getTypes()"));
attrs14_.add(at("var","t"));
attrs14_.add(at("className","java.lang.String"));
at(elt32_,attrs14_);
Text txt2_=tx(_doc,"{t} -");
ad(elt32_,txt2_);
ad(elt31_,elt32_);
ad(elt28_,elt31_);
Element elt33_=el(_doc,"td");
Text txt3_=tx(_doc,"{d.category}");
ad(elt33_,txt3_);
ad(elt28_,elt33_);
Element elt34_=el(_doc,"td");
Element elt35_=el(_doc,"c:if");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("condition","d.isDamageMove()"));
at(elt35_,attrs15_);
Element elt36_=el(_doc,"c:message");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("value","msg_moves,damaging"));
at(elt36_,attrs16_);
ad(elt35_,elt36_);
ad(elt34_,elt35_);
Element elt37_=el(_doc,"c:if");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("condition","!d.isDamageMove()"));
at(elt37_,attrs17_);
Element elt38_=el(_doc,"c:message");
CustList<Attr> attrs18_=al(1);
attrs18_.add(at("value","msg_moves,status"));
at(elt38_,attrs18_);
ad(elt37_,elt38_);
ad(elt34_,elt37_);
ad(elt28_,elt34_);
Element elt39_=el(_doc,"td");
Element elt40_=el(_doc,"c:if");
CustList<Attr> attrs19_=al(1);
attrs19_.add(at("condition","!d.isDamageMove()"));
at(elt40_,attrs19_);
Element elt41_=el(_doc,"c:message");
CustList<Attr> attrs20_=al(1);
attrs20_.add(at("value","msg_moves,status_indirect"));
at(elt41_,attrs20_);
ad(elt40_,elt41_);
ad(elt39_,elt40_);
Element elt42_=el(_doc,"c:if");
CustList<Attr> attrs21_=al(1);
attrs21_.add(at("condition","d.isDamageMove()"));
at(elt42_,attrs21_);
Element elt43_=el(_doc,"c:if");
CustList<Attr> attrs22_=al(1);
attrs22_.add(at("condition","d.isDirect()"));
at(elt43_,attrs22_);
Element elt44_=el(_doc,"c:message");
CustList<Attr> attrs23_=al(1);
attrs23_.add(at("value","msg_moves,damaging_direct"));
at(elt44_,attrs23_);
ad(elt43_,elt44_);
ad(elt42_,elt43_);
Element elt45_=el(_doc,"c:if");
CustList<Attr> attrs24_=al(1);
attrs24_.add(at("condition","!d.isDirect()"));
at(elt45_,attrs24_);
Element elt46_=el(_doc,"c:message");
CustList<Attr> attrs25_=al(1);
attrs25_.add(at("value","msg_moves,damaging_indirect"));
at(elt46_,attrs25_);
ad(elt45_,elt46_);
ad(elt42_,elt45_);
ad(elt39_,elt42_);
ad(elt28_,elt39_);
Element elt47_=el(_doc,"td");
Text txt4_=tx(_doc,"{d.priority}");
ad(elt47_,txt4_);
ad(elt28_,elt47_);
Element elt48_=el(_doc,"td");
Element elt49_=el(_doc,"input");
CustList<Attr> attrs26_=al(3);
attrs26_.add(at("c:varValue","d.selected"));
attrs26_.add(at("name","d.selected"));
attrs26_.add(at("type","checkbox"));
at(elt49_,attrs26_);
ad(elt48_,elt49_);
ad(elt28_,elt48_);
ad(elt27_,elt28_);
ad(elt26_,elt27_);
ad(elt5_,elt26_);
ad(elt4_,elt5_);
Element elt50_=el(_doc,"c:submit");
CustList<Attr> attrs27_=al(1);
attrs27_.add(at("message","msg_simulation,remove"));
at(elt50_,attrs27_);
ad(elt4_,elt50_);
ad(elt0_,elt4_);
Element elt51_=el(_doc,"form");
CustList<Attr> attrs28_=al(4);
attrs28_.add(at("action",""));
attrs28_.add(at("c:command","$edit"));
attrs28_.add(at("method","post"));
attrs28_.add(at("name","adding"));
at(elt51_,attrs28_);
Element elt52_=el(_doc,"c:message");
CustList<Attr> attrs29_=al(1);
attrs29_.add(at("value","msg_simulation,exp_pk"));
at(elt52_,attrs29_);
ad(elt51_,elt52_);
Element elt53_=el(_doc,"input");
CustList<Attr> attrs30_=al(5);
attrs30_.add(at("c:validator","positive_rate_validator"));
attrs30_.add(at("c:varValue","experience"));
attrs30_.add(at("id","experienceId"));
attrs30_.add(at("name","experience"));
attrs30_.add(at("type","text"));
at(elt53_,attrs30_);
ad(elt51_,elt53_);
Element elt54_=el(_doc,"span");
CustList<Attr> attrs31_=al(3);
attrs31_.add(at("c:for","experienceId"));
attrs31_.add(at("class","errormessage"));
attrs31_.add(at("c:valueMessage","msg_simulation,rate_issue"));
at(elt54_,attrs31_);
ad(elt51_,elt54_);
Element elt55_=el(_doc,"br");
ad(elt51_,elt55_);
Element elt56_=el(_doc,"c:message");
CustList<Attr> attrs32_=al(1);
attrs32_.add(at("value","msg_simulation,catching_ball"));
at(elt56_,attrs32_);
ad(elt51_,elt56_);
Element elt57_=el(_doc,"c:select");
CustList<Attr> attrs33_=al(5);
attrs33_.add(at("default",""));
attrs33_.add(at("map","balls"));
attrs33_.add(at("name","ball"));
attrs33_.add(at("update",""));
attrs33_.add(at("varValue","ball"));
at(elt57_,attrs33_);
ad(elt51_,elt57_);
Element elt58_=el(_doc,"br");
ad(elt51_,elt58_);
Element elt59_=el(_doc,"c:message");
CustList<Attr> attrs34_=al(1);
attrs34_.add(at("value","msg_simulation,happiness_pk"));
at(elt59_,attrs34_);
ad(elt51_,elt59_);
Element elt60_=el(_doc,"input");
CustList<Attr> attrs35_=al(5);
attrs35_.add(at("c:validator","short_validator"));
attrs35_.add(at("c:varValue","happiness"));
attrs35_.add(at("id","happinessId"));
attrs35_.add(at("name","happiness"));
attrs35_.add(at("type","text"));
at(elt60_,attrs35_);
ad(elt51_,elt60_);
Element elt61_=el(_doc,"span");
CustList<Attr> attrs36_=al(3);
attrs36_.add(at("c:for","happinessId"));
attrs36_.add(at("class","errormessage"));
attrs36_.add(at("c:valueMessage","msg_simulation,short_issue"));
at(elt61_,attrs36_);
ad(elt51_,elt61_);
Element elt62_=el(_doc,"br");
ad(elt51_,elt62_);
Element elt63_=el(_doc,"c:message");
CustList<Attr> attrs37_=al(1);
attrs37_.add(at("value","msg_simulation,remaining_hp"));
at(elt63_,attrs37_);
ad(elt51_,elt63_);
Element elt64_=el(_doc,"input");
CustList<Attr> attrs38_=al(5);
attrs38_.add(at("c:validator","positive_rate_validator"));
attrs38_.add(at("c:varValue","remainingHp"));
attrs38_.add(at("id","remainingHpId"));
attrs38_.add(at("name","remainingHp"));
attrs38_.add(at("type","text"));
at(elt64_,attrs38_);
ad(elt51_,elt64_);
Element elt65_=el(_doc,"span");
CustList<Attr> attrs39_=al(3);
attrs39_.add(at("c:for","remainingHpId"));
attrs39_.add(at("class","errormessage"));
attrs39_.add(at("c:valueMessage","msg_simulation,rate_issue"));
at(elt65_,attrs39_);
ad(elt51_,elt65_);
Element elt66_=el(_doc,"br");
ad(elt51_,elt66_);
Element elt67_=el(_doc,"c:message");
CustList<Attr> attrs40_=al(1);
attrs40_.add(at("value","msg_simulation,heal_hp"));
at(elt67_,attrs40_);
ad(elt51_,elt67_);
Element elt68_=el(_doc,"input");
CustList<Attr> attrs41_=al(3);
attrs41_.add(at("c:varValue","heal"));
attrs41_.add(at("name","heal"));
attrs41_.add(at("type","checkbox"));
at(elt68_,attrs41_);
ad(elt51_,elt68_);
Element elt69_=el(_doc,"br");
ad(elt51_,elt69_);
Element elt70_=el(_doc,"c:message");
CustList<Attr> attrs42_=al(1);
attrs42_.add(at("value","msg_simulation,ev"));
at(elt70_,attrs42_);
ad(elt51_,elt70_);
Element elt71_=el(_doc,"br");
ad(elt51_,elt71_);
Element elt72_=el(_doc,"c:for");
CustList<Attr> attrs43_=al(5);
attrs43_.add(at("key","s"));
attrs43_.add(at("map","ev"));
attrs43_.add(at("value","e"));
attrs43_.add(at("keyClassName","java.lang.Object"));
attrs43_.add(at("varClassName","aiki.beans.facade.simulation.dto.EvLine"));
at(elt72_,attrs43_);
Text txt5_=tx(_doc,"{getTranslatedStatistic(([s]))}:");
ad(elt72_,txt5_);
Element elt73_=el(_doc,"input");
CustList<Attr> attrs44_=al(5);
attrs44_.add(at("c:validator","short_validator"));
attrs44_.add(at("c:varValue","e.ev"));
attrs44_.add(at("id","id{([s])}"));
attrs44_.add(at("name","e.ev"));
attrs44_.add(at("type","text"));
at(elt73_,attrs44_);
ad(elt72_,elt73_);
Element elt74_=el(_doc,"span");
CustList<Attr> attrs45_=al(3);
attrs45_.add(at("c:for","id{([s])}"));
attrs45_.add(at("class","errormessage"));
attrs45_.add(at("c:valueMessage","msg_simulation,short_issue"));
at(elt74_,attrs45_);
ad(elt72_,elt74_);
Element elt75_=el(_doc,"br");
ad(elt72_,elt75_);
ad(elt51_,elt72_);
Element elt76_=el(_doc,"br");
ad(elt51_,elt76_);
Element elt77_=el(_doc,"input");
CustList<Attr> attrs46_=al(2);
attrs46_.add(at("type","submit"));
attrs46_.add(at("value","OK"));
at(elt77_,attrs46_);
ad(elt51_,elt77_);
ad(elt0_,elt51_);
ad(_body,elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
