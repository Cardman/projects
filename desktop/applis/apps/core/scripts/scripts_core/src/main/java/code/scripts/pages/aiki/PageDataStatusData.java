package code.scripts.pages.aiki;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class PageDataStatusData{
private PageDataStatusData(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("xmlns:c","javahtml"));
attrs0_.add(at("c:bean","status"));
at(elt0_,attrs0_);
Element elt1_=el(_doc,"head");
Element elt2_=el(_doc,"title");
Element elt3_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_status,title"));
at(elt3_,attrs1_);
Element elt4_=el(_doc,"param");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("value","displayName"));
at(elt4_,attrs2_);
ad(elt3_,elt4_);
ad(elt2_,elt3_);
ad(elt1_,elt2_);
Element elt5_=el(_doc,"link");
CustList<Attr> attrs3_=al(3);
attrs3_.add(at("href","web/css/abilities.css"));
attrs3_.add(at("rel","stylesheet"));
attrs3_.add(at("type","text/css"));
at(elt5_,attrs3_);
ad(elt1_,elt5_);
ad(elt0_,elt1_);
Element elt6_=el(_doc,"body");
build0(elt6_,_doc);
ad(elt0_,elt6_);
_doc.appendChild(elt0_);
}
static void build0(Element _body,Document _doc){
Element elt0_=el(_doc,"p");
Element elt1_=el(_doc,"a");
CustList<Attr> attrs0_=al(2);
attrs0_.add(at("c:command","$clickIndex"));
attrs0_.add(at("href",""));
at(elt1_,attrs0_);
Element elt2_=el(_doc,"c:message");
CustList<Attr> attrs1_=al(1);
attrs1_.add(at("value","msg_status,status"));
at(elt2_,attrs1_);
ad(elt1_,elt2_);
ad(elt0_,elt1_);
Element elt3_=el(_doc,"br");
ad(elt0_,elt3_);
Text txt0_=tx(_doc,"{displayName}");
ad(elt0_,txt0_);
Element elt4_=el(_doc,"br");
ad(elt0_,elt4_);
Element elt5_=el(_doc,"c:img");
CustList<Attr> attrs2_=al(1);
attrs2_.add(at("src","{animStatus}"));
at(elt5_,attrs2_);
ad(elt0_,elt5_);
Element elt6_=el(_doc,"br");
ad(elt0_,elt6_);
Element elt7_=el(_doc,"c:if");
CustList<Attr> attrs3_=al(1);
attrs3_.add(at("condition","endRound"));
at(elt7_,attrs3_);
Element elt8_=el(_doc,"c:message");
CustList<Attr> attrs4_=al(1);
attrs4_.add(at("value","msg_effendround,rank"));
at(elt8_,attrs4_);
Element elt9_=el(_doc,"param");
CustList<Attr> attrs5_=al(1);
attrs5_.add(at("value","endRoundRank"));
at(elt9_,attrs5_);
ad(elt8_,elt9_);
ad(elt7_,elt8_);
Element elt10_=el(_doc,"a");
CustList<Attr> attrs6_=al(2);
attrs6_.add(at("c:command","web/html/endround/endround.html"));
attrs6_.add(at("href",""));
at(elt10_,attrs6_);
Element elt11_=el(_doc,"c:message");
CustList<Attr> attrs7_=al(1);
attrs7_.add(at("value","msg_status,endRound"));
at(elt11_,attrs7_);
ad(elt10_,elt11_);
ad(elt7_,elt10_);
Element elt12_=el(_doc,"c:if");
CustList<Attr> attrs8_=al(1);
attrs8_.add(at("condition","!reasonsEndRound.isEmpty()"));
at(elt12_,attrs8_);
Element elt13_=el(_doc,"c:message");
CustList<Attr> attrs9_=al(1);
attrs9_.add(at("value","msg_effendround,reasons"));
at(elt13_,attrs9_);
ad(elt12_,elt13_);
Element elt14_=el(_doc,"ul");
Element elt15_=el(_doc,"c:for");
CustList<Attr> attrs10_=al(3);
attrs10_.add(at("list","reasonsEndRound"));
attrs10_.add(at("var","r"));
attrs10_.add(at("className","java.lang.String"));
at(elt15_,attrs10_);
Element elt16_=el(_doc,"li");
Text txt1_=tx(_doc,"{r}");
ad(elt16_,txt1_);
ad(elt15_,elt16_);
ad(elt14_,elt15_);
ad(elt12_,elt14_);
Element elt17_=el(_doc,"br");
ad(elt12_,elt17_);
Element elt18_=el(_doc,"ul");
Element elt19_=el(_doc,"c:for");
CustList<Attr> attrs11_=al(5);
attrs11_.add(at("key","c"));
attrs11_.add(at("map","mapVarsFailEndRound"));
attrs11_.add(at("value","r"));
attrs11_.add(at("keyClassName","java.lang.String"));
attrs11_.add(at("varClassName","java.lang.String"));
at(elt19_,attrs11_);
Element elt20_=el(_doc,"li");
Text txt2_=tx(_doc,"{c} :");
ad(elt20_,txt2_);
Element elt21_=el(_doc,"c:message");
CustList<Attr> attrs12_=al(2);
attrs12_.add(at("quoted",""));
attrs12_.add(at("value","msg_status,formula"));
at(elt21_,attrs12_);
Element elt22_=el(_doc,"param");
CustList<Attr> attrs13_=al(1);
attrs13_.add(at("value","r"));
at(elt22_,attrs13_);
ad(elt21_,elt22_);
ad(elt20_,elt21_);
ad(elt19_,elt20_);
ad(elt18_,elt19_);
ad(elt12_,elt18_);
Element elt23_=el(_doc,"br");
ad(elt12_,elt23_);
ad(elt7_,elt12_);
Element elt24_=el(_doc,"c:if");
CustList<Attr> attrs14_=al(1);
attrs14_.add(at("condition","singleStatus"));
at(elt24_,attrs14_);
Element elt25_=el(_doc,"c:if");
CustList<Attr> attrs15_=al(1);
attrs15_.add(at("condition","incrementingDamageByRounds"));
at(elt25_,attrs15_);
Element elt26_=el(_doc,"c:message");
CustList<Attr> attrs16_=al(1);
attrs16_.add(at("value","msg_status,damage_incremented_true"));
at(elt26_,attrs16_);
ad(elt25_,elt26_);
ad(elt24_,elt25_);
Element elt27_=el(_doc,"c:if");
CustList<Attr> attrs17_=al(1);
attrs17_.add(at("condition","!incrementingDamageByRounds"));
at(elt27_,attrs17_);
Element elt28_=el(_doc,"c:message");
CustList<Attr> attrs18_=al(1);
attrs18_.add(at("value","msg_status,damage_incremented_false"));
at(elt28_,attrs18_);
ad(elt27_,elt28_);
ad(elt24_,elt27_);
ad(elt7_,elt24_);
ad(elt0_,elt7_);
Element elt29_=el(_doc,"c:if");
CustList<Attr> attrs19_=al(1);
attrs19_.add(at("condition","!catchingRate.isZero()"));
at(elt29_,attrs19_);
Element elt30_=el(_doc,"c:message");
CustList<Attr> attrs20_=al(1);
attrs20_.add(at("value","msg_status,catching_rate"));
at(elt30_,attrs20_);
Element elt31_=el(_doc,"param");
CustList<Attr> attrs21_=al(1);
attrs21_.add(at("value","catchingRate"));
at(elt31_,attrs21_);
ad(elt30_,elt31_);
ad(elt29_,elt30_);
ad(elt0_,elt29_);
Element elt32_=el(_doc,"c:if");
CustList<Attr> attrs22_=al(1);
attrs22_.add(at("condition","disabledEffIfSwitch"));
at(elt32_,attrs22_);
Element elt33_=el(_doc,"c:message");
CustList<Attr> attrs23_=al(1);
attrs23_.add(at("value","msg_status,disabled_eff_if_switch"));
at(elt33_,attrs23_);
ad(elt32_,elt33_);
ad(elt0_,elt32_);
Element elt34_=el(_doc,"c:if");
CustList<Attr> attrs24_=al(1);
attrs24_.add(at("condition","incrementEndRoundInt()"));
at(elt34_,attrs24_);
Element elt35_=el(_doc,"c:message");
CustList<Attr> attrs25_=al(1);
attrs25_.add(at("value","msg_status,increment_end_round"));
at(elt35_,attrs25_);
Element elt36_=el(_doc,"param");
CustList<Attr> attrs26_=al(1);
attrs26_.add(at("value","incrementEndRound"));
at(elt36_,attrs26_);
ad(elt35_,elt36_);
ad(elt34_,elt35_);
ad(elt0_,elt34_);
Element elt37_=el(_doc,"c:if");
CustList<Attr> attrs27_=al(1);
attrs27_.add(at("condition","incrementingEndRound"));
at(elt37_,attrs27_);
Element elt38_=el(_doc,"c:message");
CustList<Attr> attrs28_=al(1);
attrs28_.add(at("value","msg_status,incrementing_end_round_true"));
at(elt38_,attrs28_);
ad(elt37_,elt38_);
ad(elt0_,elt37_);
Element elt39_=el(_doc,"c:if");
CustList<Attr> attrs29_=al(1);
attrs29_.add(at("condition","!incrementingEndRound"));
at(elt39_,attrs29_);
Element elt40_=el(_doc,"c:message");
CustList<Attr> attrs30_=al(1);
attrs30_.add(at("value","msg_status,incrementing_end_round_false"));
at(elt40_,attrs30_);
ad(elt39_,elt40_);
ad(elt0_,elt39_);
Element elt41_=el(_doc,"c:if");
CustList<Attr> attrs31_=al(1);
attrs31_.add(at("condition","isSingle()"));
at(elt41_,attrs31_);
Element elt42_=el(_doc,"c:message");
CustList<Attr> attrs32_=al(1);
attrs32_.add(at("value","msg_status,single"));
at(elt42_,attrs32_);
ad(elt41_,elt42_);
ad(elt0_,elt41_);
Element elt43_=el(_doc,"c:if");
CustList<Attr> attrs33_=al(1);
attrs33_.add(at("condition","!isSingle()"));
at(elt43_,attrs33_);
Element elt44_=el(_doc,"c:message");
CustList<Attr> attrs34_=al(1);
attrs34_.add(at("value","msg_status,relation"));
at(elt44_,attrs34_);
ad(elt43_,elt44_);
ad(elt0_,elt43_);
Element elt45_=el(_doc,"c:if");
CustList<Attr> attrs35_=al(1);
attrs35_.add(at("condition","!multStat.isEmpty()"));
at(elt45_,attrs35_);
Element elt46_=el(_doc,"c:message");
CustList<Attr> attrs36_=al(1);
attrs36_.add(at("value","msg_status,mult_stat"));
at(elt46_,attrs36_);
ad(elt45_,elt46_);
Element elt47_=el(_doc,"table");
Element elt48_=el(_doc,"thead");
Element elt49_=el(_doc,"tr");
Element elt50_=el(_doc,"th");
Element elt51_=el(_doc,"c:message");
CustList<Attr> attrs37_=al(1);
attrs37_.add(at("value","msg_status,mult_stat_key"));
at(elt51_,attrs37_);
ad(elt50_,elt51_);
ad(elt49_,elt50_);
Element elt52_=el(_doc,"th");
Element elt53_=el(_doc,"c:message");
CustList<Attr> attrs38_=al(1);
attrs38_.add(at("value","msg_status,mult_stat_value"));
at(elt53_,attrs38_);
ad(elt52_,elt53_);
ad(elt49_,elt52_);
ad(elt48_,elt49_);
ad(elt47_,elt48_);
Element elt54_=el(_doc,"tbody");
Element elt55_=el(_doc,"c:for");
CustList<Attr> attrs39_=al(5);
attrs39_.add(at("key","s"));
attrs39_.add(at("map","multStat"));
attrs39_.add(at("value","r"));
attrs39_.add(at("keyClassName","java.lang.Object"));
attrs39_.add(at("varClassName","r"));
at(elt55_,attrs39_);
Element elt56_=el(_doc,"tr");
Element elt57_=el(_doc,"td");
Text txt3_=tx(_doc,"{getTrMultStat(([s]))}");
ad(elt57_,txt3_);
ad(elt56_,elt57_);
Element elt58_=el(_doc,"td");
Text txt4_=tx(_doc,"{r}");
ad(elt58_,txt4_);
ad(elt56_,elt58_);
ad(elt55_,elt56_);
ad(elt54_,elt55_);
ad(elt47_,elt54_);
ad(elt45_,elt47_);
Element elt59_=el(_doc,"br");
ad(elt45_,elt59_);
ad(elt0_,elt45_);
Element elt60_=el(_doc,"c:if");
CustList<Attr> attrs40_=al(1);
attrs40_.add(at("condition","!reasons.isEmpty()"));
at(elt60_,attrs40_);
Element elt61_=el(_doc,"c:message");
CustList<Attr> attrs41_=al(1);
attrs41_.add(at("value","msg_status,reasons"));
at(elt61_,attrs41_);
ad(elt60_,elt61_);
Element elt62_=el(_doc,"ul");
Element elt63_=el(_doc,"c:for");
CustList<Attr> attrs42_=al(3);
attrs42_.add(at("list","reasons"));
attrs42_.add(at("var","r"));
attrs42_.add(at("className","java.lang.String"));
at(elt63_,attrs42_);
Element elt64_=el(_doc,"li");
Text txt5_=tx(_doc,"{r}");
ad(elt64_,txt5_);
ad(elt63_,elt64_);
ad(elt62_,elt63_);
ad(elt60_,elt62_);
Element elt65_=el(_doc,"br");
ad(elt60_,elt65_);
Element elt66_=el(_doc,"ul");
Element elt67_=el(_doc,"c:for");
CustList<Attr> attrs43_=al(5);
attrs43_.add(at("key","c"));
attrs43_.add(at("map","mapVarsFail"));
attrs43_.add(at("value","r"));
attrs43_.add(at("keyClassName","java.lang.String"));
attrs43_.add(at("varClassName","java.lang.String"));
at(elt67_,attrs43_);
Element elt68_=el(_doc,"li");
Text txt6_=tx(_doc,"{c} :");
ad(elt68_,txt6_);
Element elt69_=el(_doc,"c:message");
CustList<Attr> attrs44_=al(2);
attrs44_.add(at("quoted",""));
attrs44_.add(at("value","msg_status,formula"));
at(elt69_,attrs44_);
Element elt70_=el(_doc,"param");
CustList<Attr> attrs45_=al(1);
attrs45_.add(at("value","r"));
at(elt70_,attrs45_);
ad(elt69_,elt70_);
ad(elt68_,elt69_);
ad(elt67_,elt68_);
ad(elt66_,elt67_);
ad(elt60_,elt66_);
Element elt71_=el(_doc,"br");
ad(elt60_,elt71_);
ad(elt0_,elt60_);
Element elt72_=el(_doc,"c:if");
CustList<Attr> attrs46_=al(1);
attrs46_.add(at("condition","!rateForUsingAMove.isZero()"));
at(elt72_,attrs46_);
Element elt73_=el(_doc,"c:message");
CustList<Attr> attrs47_=al(1);
attrs47_.add(at("value","msg_status,rate_use_move"));
at(elt73_,attrs47_);
Element elt74_=el(_doc,"param");
CustList<Attr> attrs48_=al(1);
attrs48_.add(at("value","rateForUsingAMove"));
at(elt74_,attrs48_);
ad(elt73_,elt74_);
ad(elt72_,elt73_);
ad(elt0_,elt72_);
Element elt75_=el(_doc,"c:if");
CustList<Attr> attrs49_=al(1);
attrs49_.add(at("condition","notAttack"));
at(elt75_,attrs49_);
Element elt76_=el(_doc,"c:message");
CustList<Attr> attrs50_=al(1);
attrs50_.add(at("value","msg_status,not_attack"));
at(elt76_,attrs50_);
ad(elt75_,elt76_);
ad(elt0_,elt75_);
Element elt77_=el(_doc,"c:if");
CustList<Attr> attrs51_=al(1);
attrs51_.add(at("condition","!rateForUsingAMoveIfFoe.isZero()"));
at(elt77_,attrs51_);
Element elt78_=el(_doc,"c:message");
CustList<Attr> attrs52_=al(1);
attrs52_.add(at("value","msg_status,rate_use_move_foe"));
at(elt78_,attrs52_);
Element elt79_=el(_doc,"param");
CustList<Attr> attrs53_=al(1);
attrs53_.add(at("value","rateForUsingAMoveIfFoe"));
at(elt79_,attrs53_);
ad(elt78_,elt79_);
ad(elt77_,elt78_);
ad(elt0_,elt77_);
Element elt80_=el(_doc,"c:if");
CustList<Attr> attrs54_=al(1);
attrs54_.add(at("condition","notAttackFoe"));
at(elt80_,attrs54_);
Element elt81_=el(_doc,"c:message");
CustList<Attr> attrs55_=al(1);
attrs55_.add(at("value","msg_status,not_attack_foe"));
at(elt81_,attrs55_);
ad(elt80_,elt81_);
ad(elt0_,elt80_);
Element elt82_=el(_doc,"c:if");
CustList<Attr> attrs56_=al(1);
attrs56_.add(at("condition","!rateForFullHealIfMove.isZero()"));
at(elt82_,attrs56_);
Element elt83_=el(_doc,"c:message");
CustList<Attr> attrs57_=al(1);
attrs57_.add(at("value","msg_status,rate_heal_move"));
at(elt83_,attrs57_);
Element elt84_=el(_doc,"param");
CustList<Attr> attrs58_=al(1);
attrs58_.add(at("value","rateForFullHealIfMove"));
at(elt84_,attrs58_);
ad(elt83_,elt84_);
ad(elt82_,elt83_);
ad(elt0_,elt82_);
Element elt85_=el(_doc,"c:if");
CustList<Attr> attrs59_=al(1);
attrs59_.add(at("condition","!lawForUsingAMoveNbRound.isEmpty()"));
at(elt85_,attrs59_);
Element elt86_=el(_doc,"c:message");
CustList<Attr> attrs60_=al(1);
attrs60_.add(at("value","msg_status,rate_use_move_round"));
at(elt86_,attrs60_);
ad(elt85_,elt86_);
Element elt87_=el(_doc,"table");
Element elt88_=el(_doc,"thead");
Element elt89_=el(_doc,"tr");
Element elt90_=el(_doc,"th");
Element elt91_=el(_doc,"c:message");
CustList<Attr> attrs61_=al(1);
attrs61_.add(at("value","msg_status,rate_use_move_round_key"));
at(elt91_,attrs61_);
ad(elt90_,elt91_);
ad(elt89_,elt90_);
Element elt92_=el(_doc,"th");
Element elt93_=el(_doc,"c:message");
CustList<Attr> attrs62_=al(1);
attrs62_.add(at("value","msg_status,rate_use_move_round_rate"));
at(elt93_,attrs62_);
ad(elt92_,elt93_);
ad(elt89_,elt92_);
ad(elt88_,elt89_);
ad(elt87_,elt88_);
Element elt94_=el(_doc,"tbody");
Element elt95_=el(_doc,"c:for");
CustList<Attr> attrs63_=al(5);
attrs63_.add(at("key","s"));
attrs63_.add(at("map","lawForUsingAMoveNbRound"));
attrs63_.add(at("value","r"));
attrs63_.add(at("keyClassName","li"));
attrs63_.add(at("varClassName","r"));
at(elt95_,attrs63_);
Element elt96_=el(_doc,"tr");
Element elt97_=el(_doc,"td");
Text txt7_=tx(_doc,"{s}");
ad(elt97_,txt7_);
ad(elt96_,elt97_);
Element elt98_=el(_doc,"td");
Text txt8_=tx(_doc,"{r}");
ad(elt98_,txt8_);
ad(elt96_,elt98_);
ad(elt95_,elt96_);
ad(elt94_,elt95_);
ad(elt87_,elt94_);
ad(elt85_,elt87_);
Element elt99_=el(_doc,"br");
ad(elt85_,elt99_);
ad(elt0_,elt85_);
Element elt100_=el(_doc,"c:if");
CustList<Attr> attrs64_=al(1);
attrs64_.add(at("condition","!power.isZero()"));
at(elt100_,attrs64_);
Element elt101_=el(_doc,"c:message");
CustList<Attr> attrs65_=al(1);
attrs65_.add(at("value","msg_status,auto_damage"));
at(elt101_,attrs65_);
Element elt102_=el(_doc,"param");
CustList<Attr> attrs66_=al(1);
attrs66_.add(at("value","power"));
at(elt102_,attrs66_);
ad(elt101_,elt102_);
Element elt103_=el(_doc,"param");
CustList<Attr> attrs67_=al(1);
attrs67_.add(at("value","attack"));
at(elt103_,attrs67_);
ad(elt101_,elt103_);
Element elt104_=el(_doc,"param");
CustList<Attr> attrs68_=al(1);
attrs68_.add(at("value","defense"));
at(elt104_,attrs68_);
ad(elt101_,elt104_);
ad(elt100_,elt101_);
ad(elt0_,elt100_);
Element elt105_=el(_doc,"c:if");
CustList<Attr> attrs69_=al(1);
attrs69_.add(at("condition","!effectsPartner.isEmpty()"));
at(elt105_,attrs69_);
Element elt106_=el(_doc,"hr");
ad(elt105_,elt106_);
Element elt107_=el(_doc,"c:if");
CustList<Attr> attrs70_=al(1);
attrs70_.add(at("condition","!getEffectPartner().getRestoredHpRateLovedAlly().isZero()"));
at(elt107_,attrs70_);
Element elt108_=el(_doc,"c:message");
CustList<Attr> attrs71_=al(1);
attrs71_.add(at("value","msg_status,heal_hp"));
at(elt108_,attrs71_);
Element elt109_=el(_doc,"param");
CustList<Attr> attrs72_=al(1);
attrs72_.add(at("value","getEffectPartner().getRestoredHpRateLovedAlly()"));
at(elt109_,attrs72_);
ad(elt108_,elt109_);
ad(elt107_,elt108_);
ad(elt105_,elt107_);
Element elt110_=el(_doc,"c:if");
CustList<Attr> attrs73_=al(1);
attrs73_.add(at("condition","getEffectPartner().getWeddingAlly()"));
at(elt110_,attrs73_);
Element elt111_=el(_doc,"c:message");
CustList<Attr> attrs74_=al(1);
attrs74_.add(at("value","msg_status,wedding"));
at(elt111_,attrs74_);
ad(elt110_,elt111_);
Element elt112_=el(_doc,"c:message");
CustList<Attr> attrs75_=al(1);
attrs75_.add(at("value","msg_status,damaged_foes"));
at(elt112_,attrs75_);
Element elt113_=el(_doc,"param");
CustList<Attr> attrs76_=al(1);
attrs76_.add(at("value","getEffectPartner().getMultDamageAgainstFoe()"));
at(elt113_,attrs76_);
ad(elt112_,elt113_);
ad(elt110_,elt112_);
ad(elt105_,elt110_);
ad(elt0_,elt105_);
ad(_body,elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
