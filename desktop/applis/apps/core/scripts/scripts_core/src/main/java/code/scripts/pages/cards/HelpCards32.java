package code.scripts.pages.cards;
import code.sml.*;
import code.util.*;
import code.util.ints.*;
final class HelpCards32{
private HelpCards32(){}
static Document build(){
FullDocument doc_ = DocumentBuilder.newXmlDocument(4);
build(doc_);
return doc_;
}
static void build(Document _doc){
Element elt0_=el(_doc,"html");
Element elt1_=el(_doc,"body");
Text txt0_=tx(_doc,"As all card games, there are variants.");
ad(elt1_,txt0_);
Element elt2_=el(_doc,"br");
ad(elt1_,elt2_);
Element elt3_=el(_doc,"br");
ad(elt1_,elt3_);
Text txt1_=tx(_doc,"Here is some variants:");
ad(elt1_,txt1_);
Element elt4_=el(_doc,"br");
ad(elt1_,elt4_);
Element elt5_=el(_doc,"br");
ad(elt1_,elt5_);
Element elt6_=el(_doc,"ol");
Element elt7_=el(_doc,"li");
Text txt2_=tx(_doc,"The declaring miseres can be used:");
ad(elt7_,txt2_);
Element elt8_=el(_doc,"br");
ad(elt7_,elt8_);
Element elt9_=el(_doc,"ol");
Element elt10_=el(_doc,"li");
Text txt3_=tx(_doc,"Misere of trump: no trump card(The Excuse is a trump card here).");
ad(elt10_,txt3_);
ad(elt9_,elt10_);
Element elt11_=el(_doc,"li");
Text txt4_=tx(_doc,"Misere of points: neither Oudler nor characters.");
ad(elt11_,txt4_);
ad(elt9_,elt11_);
Element elt12_=el(_doc,"li");
Text txt5_=tx(_doc,"Misere of low cards: no low card from ace to ten.");
ad(elt12_,txt5_);
ad(elt9_,elt12_);
Element elt13_=el(_doc,"li");
Text txt6_=tx(_doc,"Misere of suit: only trump cards and possibly the Excuse.");
ad(elt13_,txt6_);
ad(elt9_,elt13_);
Element elt14_=el(_doc,"li");
Text txt7_=tx(_doc,"Misere of characters: no characters card.");
ad(elt14_,txt7_);
ad(elt9_,elt14_);
ad(elt7_,elt9_);
ad(elt6_,elt7_);
Element elt15_=el(_doc,"li");
Text txt8_=tx(_doc,"The tarot can be played by 3 players.");
ad(elt15_,txt8_);
Element elt16_=el(_doc,"br");
ad(elt15_,elt16_);
Text txt9_=tx(_doc,"&#160;&#160;By convention the taker wins only if the taker scores with one more point than necessary,");
ad(elt15_,txt9_);
Element elt17_=el(_doc,"br");
ad(elt15_,elt17_);
Text txt10_=tx(_doc,"&#160;&#160;(If a half of point is missing for the taker, then the taker looses the deal.).");
ad(elt15_,txt10_);
Element elt18_=el(_doc,"br");
ad(elt15_,elt18_);
ad(elt6_,elt15_);
Element elt19_=el(_doc,"li");
Text txt11_=tx(_doc,"With 4 players, other dealings are possible,");
ad(elt19_,txt11_);
Element elt20_=el(_doc,"br");
ad(elt19_,elt20_);
Element elt21_=el(_doc,"ol");
Element elt22_=el(_doc,"li");
Text txt12_=tx(_doc,"with a call at a king or at a point card.");
ad(elt22_,txt12_);
ad(elt21_,elt22_);
Element elt23_=el(_doc,"li");
Text txt13_=tx(_doc,"without call, in this case, each player is the partner of the player in the opposite side.");
ad(elt23_,txt13_);
ad(elt21_,elt23_);
ad(elt19_,elt21_);
ad(elt6_,elt19_);
Element elt24_=el(_doc,"li");
Text txt14_=tx(_doc,"The tarot can be played by 5 players. One of the following dealings is possible:");
ad(elt24_,txt14_);
Element elt25_=el(_doc,"br");
ad(elt24_,elt25_);
Element elt26_=el(_doc,"ol");
Element elt27_=el(_doc,"li");
Text txt15_=tx(_doc,"Call of a king.");
ad(elt27_,txt15_);
ad(elt26_,elt27_);
Element elt28_=el(_doc,"li");
Text txt16_=tx(_doc,"Call of a character.");
ad(elt28_,txt16_);
ad(elt26_,elt28_);
Element elt29_=el(_doc,"li");
Text txt17_=tx(_doc,"The taker plays against the 4 other players.");
ad(elt29_,txt17_);
ad(elt26_,elt29_);
ad(elt24_,elt26_);
Text txt18_=tx(_doc,"&#160;&#160;By convention, the taker wins only if the taker scores with one more point than necessary,");
ad(elt24_,txt18_);
Element elt30_=el(_doc,"br");
ad(elt24_,elt30_);
Text txt19_=tx(_doc,"&#160;&#160;(If a half of point is missing for the taker, then the taker looses the deal.).");
ad(elt24_,txt19_);
Element elt31_=el(_doc,"br");
ad(elt24_,elt31_);
ad(elt6_,elt24_);
Element elt32_=el(_doc,"li");
Text txt20_=tx(_doc,"The tarot can be played by 6 players. One of the following dealings is possible:");
ad(elt32_,txt20_);
Element elt33_=el(_doc,"br");
ad(elt32_,elt33_);
Element elt34_=el(_doc,"ol");
Element elt35_=el(_doc,"li");
Text txt21_=tx(_doc,"Call of a king.");
ad(elt35_,txt21_);
ad(elt34_,elt35_);
Element elt36_=el(_doc,"li");
Text txt22_=tx(_doc,"Call of a character.");
ad(elt36_,txt22_);
ad(elt34_,elt36_);
Element elt37_=el(_doc,"li");
Text txt23_=tx(_doc,"The taker is the partner of the player in the opposite side.");
ad(elt37_,txt23_);
ad(elt34_,elt37_);
ad(elt32_,elt34_);
ad(elt6_,elt32_);
Element elt38_=el(_doc,"li");
Text txt24_=tx(_doc,"While the number of players is odd, the rule of half point can be changed.");
ad(elt38_,txt24_);
Element elt39_=el(_doc,"br");
ad(elt38_,elt39_);
Text txt25_=tx(_doc,"It is possible:");
ad(elt38_,txt25_);
Element elt40_=el(_doc,"br");
ad(elt38_,elt40_);
Element elt41_=el(_doc,"ol");
Element elt42_=el(_doc,"li");
Text txt26_=tx(_doc,"The end is classic (The taker looses the deal by one point by rounding.).");
ad(elt42_,txt26_);
ad(elt41_,elt42_);
Element elt43_=el(_doc,"li");
Text txt27_=tx(_doc,"The match is equality (Nobody scores point at last.).");
ad(elt43_,txt27_);
ad(elt41_,elt43_);
Element elt44_=el(_doc,"li");
Text txt28_=tx(_doc,"The taker wins the deal by one point by rounding.");
ad(elt44_,txt28_);
ad(elt41_,elt44_);
ad(elt38_,elt41_);
ad(elt6_,elt38_);
Element elt45_=el(_doc,"li");
Text txt29_=tx(_doc,"Slam can be regarded as a bid greater than \"Guard against\".");
ad(elt45_,txt29_);
Element elt46_=el(_doc,"br");
ad(elt45_,elt46_);
Text txt30_=tx(_doc,"&#160;&#160;In this case, it is impossible to declare it as additional declaring.");
ad(elt45_,txt30_);
Element elt47_=el(_doc,"br");
ad(elt45_,elt47_);
Text txt31_=tx(_doc,"&#160;&#160;In this case, the dog is hidden and belongs to the defense.");
ad(elt45_,txt31_);
Element elt48_=el(_doc,"br");
ad(elt45_,elt48_);
ad(elt6_,elt45_);
Element elt49_=el(_doc,"li");
Text txt32_=tx(_doc,"Playing discards is to loose the most cards as possible, in the following cases:");
ad(elt49_,txt32_);
Element elt50_=el(_doc,"br");
ad(elt49_,elt50_);
Element elt51_=el(_doc,"ol");
Element elt52_=el(_doc,"li");
Text txt33_=tx(_doc,"If there is no bidding.");
ad(elt52_,txt33_);
ad(elt51_,elt52_);
Element elt53_=el(_doc,"li");
Text txt34_=tx(_doc,"If all players declare \"pass\".");
ad(elt53_,txt34_);
ad(elt51_,elt53_);
ad(elt49_,elt51_);
Element elt54_=el(_doc,"br");
ad(elt49_,elt54_);
Text txt35_=tx(_doc,"&#160;&#160;In the two cases, there is no team.");
ad(elt49_,txt35_);
Element elt55_=el(_doc,"br");
ad(elt49_,elt55_);
ad(elt6_,elt49_);
Element elt56_=el(_doc,"li");
Text txt36_=tx(_doc,"Playing one for one is to win the most cards as possible, in the following cases:");
ad(elt56_,txt36_);
Element elt57_=el(_doc,"br");
ad(elt56_,elt57_);
Element elt58_=el(_doc,"ol");
Element elt59_=el(_doc,"li");
Text txt37_=tx(_doc,"If there is no bidding.");
ad(elt59_,txt37_);
ad(elt58_,elt59_);
Element elt60_=el(_doc,"li");
Text txt38_=tx(_doc,"If all players declare \"pass\".");
ad(elt60_,txt38_);
ad(elt58_,elt60_);
ad(elt56_,elt58_);
Element elt61_=el(_doc,"br");
ad(elt56_,elt61_);
Text txt39_=tx(_doc,"&#160;&#160;In the two cases, there is no team.");
ad(elt56_,txt39_);
Element elt62_=el(_doc,"br");
ad(elt56_,elt62_);
ad(elt6_,elt56_);
Element elt63_=el(_doc,"li");
Text txt40_=tx(_doc,"Certain declarings may be allowed.");
ad(elt63_,txt40_);
ad(elt6_,elt63_);
Element elt64_=el(_doc,"li");
Text txt41_=tx(_doc,"Cards can be dealt clock wise.");
ad(elt64_,txt41_);
ad(elt6_,elt64_);
Element elt65_=el(_doc,"li");
Text txt42_=tx(_doc,"Cards may not be mixed.");
ad(elt65_,txt42_);
ad(elt6_,elt65_);
Element elt66_=el(_doc,"li");
Text txt43_=tx(_doc,"Cards may be mixed once.");
ad(elt66_,txt43_);
ad(elt6_,elt66_);
ad(elt1_,elt6_);
Text txt44_=tx(_doc,"Variants numbered from 1 to 5 and 8 and 9 will be seen in detail.");
ad(elt1_,txt44_);
Element elt67_=el(_doc,"br");
ad(elt1_,elt67_);
ad(elt0_,elt1_);
_doc.appendChild(elt0_);
}
static Attr at(String _name,String _value){
return CoreDocument.createAttribute(_name,_value);
}
static void at(Element _elt,CustList<Attr> _ls){
_elt.setAttributes(new NamedNodeMap(_ls));
}
static CustList<Attr> al(int _len){
return new CustList<Attr>(new CollCapacity(_len));
}
static Text tx(Document _doc,String _value){
return _doc.createEscapedTextNode(_value);
}
static Element el(Document _doc,String _value){
return _doc.createElement(_value);
}
static void ad(Element _elt,Node _value){
_elt.appendChild(_value);
}
}
