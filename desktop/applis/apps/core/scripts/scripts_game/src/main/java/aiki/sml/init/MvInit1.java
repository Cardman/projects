package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit1 extends CstIgame{
private MvInit1(){}
static MoveData m25(){
DamagingMoveData m575damagingMoveData_ = Instances.newDamagingMoveData();
m575damagingMoveData_.setCategory(I_PHYSIQUE);
m575damagingMoveData_.setStoppableMoveKoSingle(true);
m575damagingMoveData_.setPp(15);
StringList m575stringList_=new StringList(new CollCapacity(1));
m575stringList_.add(I_INSECTE);
m575damagingMoveData_.setTypes(m575stringList_);
m575stringList_=new StringList(new CollCapacity(1));
m575stringList_.add(I_INSECTE);
m575damagingMoveData_.setBoostedTypes(m575stringList_);
m575damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m575custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m575effectDamage_=Instances.newEffectDamage();
m575effectDamage_.setChRate(1);
m575effectDamage_.setPower(R_90);
m575effectDamage_.setUserAttack(true);
m575effectDamage_.setStatisAtt(Statistic.ATTACK);
m575effectDamage_.setTargetDefense(true);
m575effectDamage_.setStatisDef(Statistic.DEFENSE);
m575effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m575effectDamage_.setFail(ES);
m575custListEffect_.add(m575effectDamage_);
m575damagingMoveData_.setEffects(m575custListEffect_);
m575damagingMoveData_.setStoppableMoveSolo(true);
m575damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m575damagingMoveData_;
}
static MoveData m26(){
StatusMoveData m576statusMoveData_ = Instances.newStatusMoveData();
m576statusMoveData_.setThievableMove(true);
m576statusMoveData_.setPp(10);
StringList m576stringList_=new StringList(new CollCapacity(1));
m576stringList_.add(I_INSECTE);
m576statusMoveData_.setTypes(m576stringList_);
m576stringList_=new StringList(new CollCapacity(1));
m576stringList_.add(I_INSECTE);
m576statusMoveData_.setBoostedTypes(m576stringList_);
m576statusMoveData_.setAccuracy(R_1);
CustList<Effect> m576custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m576effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m576enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(2));
m576enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1);
m576enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1);
m576effectStatistic_.setStatisVarRank(m576enumMapStatisticByte_);
m576effectStatistic_.setEvtRate(Rate.newRate(R_1));
m576effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m576effectStatistic_.setFail(ES);
m576custListEffect_.add(m576effectStatistic_);
m576statusMoveData_.setEffects(m576custListEffect_);
m576statusMoveData_.setStoppableMoveMulti(true);
m576statusMoveData_.setIgnVarAccurUserNeg(true);
m576statusMoveData_.setIgnVarEvasTargetPos(true);
m576statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m576statusMoveData_;
}
static MoveData m27(){
StatusMoveData m577statusMoveData_ = Instances.newStatusMoveData();
m577statusMoveData_.setThievableMove(true);
m577statusMoveData_.setPp(10);
StringList m577stringList_=new StringList(new CollCapacity(1));
m577stringList_.add(I_INSECTE);
m577statusMoveData_.setTypes(m577stringList_);
m577stringList_=new StringList(new CollCapacity(1));
m577stringList_.add(I_INSECTE);
m577statusMoveData_.setBoostedTypes(m577stringList_);
m577statusMoveData_.setAccuracy(R_1);
CustList<Effect> m577custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m577effectFullHpRate_=Instances.newEffectFullHpRate();
m577effectFullHpRate_.setRestoredHp(R_1_2);
m577effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m577effectFullHpRate_.setFail(ES);
m577custListEffect_.add(m577effectFullHpRate_);
m577statusMoveData_.setEffects(m577custListEffect_);
m577statusMoveData_.setStoppableMoveMulti(true);
m577statusMoveData_.setIgnVarAccurUserNeg(true);
m577statusMoveData_.setIgnVarEvasTargetPos(true);
m577statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m577statusMoveData_;
}
static MoveData m28(){
StatusMoveData m578statusMoveData_ = Instances.newStatusMoveData();
m578statusMoveData_.setPp(15);
StringList m578stringList_=new StringList(new CollCapacity(1));
m578stringList_.add(I_NORMAL);
m578statusMoveData_.setTypes(m578stringList_);
m578stringList_=new StringList(new CollCapacity(1));
m578stringList_.add(I_NORMAL);
m578statusMoveData_.setBoostedTypes(m578stringList_);
m578statusMoveData_.setAccuracy(R_1);
CustList<Effect> m578custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectOrder m578effectOrder_=Instances.newEffectOrder();
m578effectOrder_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m578effectOrder_.setFail(V_NB_COMBATTANTS_TERRAIN+LT+R_3+OO+V_CIBLE_JOUE+OE+R_1);
m578custListEffect_.add(m578effectOrder_);
m578statusMoveData_.setEffects(m578custListEffect_);
m578statusMoveData_.setStoppableMoveSolo(true);
m578statusMoveData_.setIgnVarAccurUserNeg(true);
m578statusMoveData_.setIgnVarEvasTargetPos(true);
m578statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m578statusMoveData_;
}
static MoveData m29(){
DamagingMoveData m579damagingMoveData_ = Instances.newDamagingMoveData();
m579damagingMoveData_.setCategory(I_PHYSIQUE);
m579damagingMoveData_.setDirect(true);
m579damagingMoveData_.setStoppableMoveKoSingle(true);
m579damagingMoveData_.setPp(20);
StringList m579stringList_=new StringList(new CollCapacity(1));
m579stringList_.add(I_EAU);
m579damagingMoveData_.setTypes(m579stringList_);
m579stringList_=new StringList(new CollCapacity(1));
m579stringList_.add(I_EAU);
m579damagingMoveData_.setBoostedTypes(m579stringList_);
m579damagingMoveData_.setPriority(1);
m579damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m579custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m579effectDamage_=Instances.newEffectDamage();
m579effectDamage_.setPower(R_40);
m579effectDamage_.setUserAttack(true);
m579effectDamage_.setStatisAtt(Statistic.ATTACK);
m579effectDamage_.setTargetDefense(true);
m579effectDamage_.setStatisDef(Statistic.DEFENSE);
m579effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m579effectDamage_.setFail(ES);
m579custListEffect_.add(m579effectDamage_);
m579damagingMoveData_.setEffects(m579custListEffect_);
m579damagingMoveData_.setStoppableMoveSolo(true);
m579damagingMoveData_.setStoppableMovePrio(true);
m579damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m579damagingMoveData_;
}
static MoveData m30(){
StatusMoveData m580statusMoveData_ = Instances.newStatusMoveData();
m580statusMoveData_.setThievableMove(true);
m580statusMoveData_.setPp(30);
StringList m580stringList_=new StringList(new CollCapacity(1));
m580stringList_.add(I_NORMAL);
m580statusMoveData_.setTypes(m580stringList_);
m580stringList_=new StringList(new CollCapacity(1));
m580stringList_.add(I_NORMAL);
m580statusMoveData_.setBoostedTypes(m580stringList_);
m580statusMoveData_.setAccuracy(R_1);
CustList<Effect> m580custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m580effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m580enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m580enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1);
m580effectStatistic_.setStatisVarRank(m580enumMapStatisticByte_);
m580effectStatistic_.setEvtRate(Rate.newRate(R_1));
m580effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m580effectStatistic_.setFail(ES);
m580custListEffect_.add(m580effectStatistic_);
m580statusMoveData_.setEffects(m580custListEffect_);
m580statusMoveData_.setStoppableMoveMulti(true);
m580statusMoveData_.setIgnVarAccurUserNeg(true);
m580statusMoveData_.setIgnVarEvasTargetPos(true);
m580statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m580statusMoveData_;
}
static MoveData m31(){
StatusMoveData m581statusMoveData_ = Instances.newStatusMoveData();
m581statusMoveData_.setThievableMove(true);
m581statusMoveData_.setPp(5);
StringList m581stringList_=new StringList(new CollCapacity(1));
m581stringList_.add(I_PLANTE);
m581statusMoveData_.setTypes(m581stringList_);
m581stringList_=new StringList(new CollCapacity(1));
m581stringList_.add(I_PLANTE);
m581statusMoveData_.setBoostedTypes(m581stringList_);
m581statusMoveData_.setAccuracy(R_1);
CustList<Effect> m581custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m581effectStatus_=Instances.newEffectStatus();
m581stringList_=new StringList(new CollCapacity(13));
m581stringList_.add(I_POISON_GRAVE);
m581stringList_.add(I_PEUR);
m581stringList_.add(I_BRULURE);
m581stringList_.add(I_VAMPIGRAINE_ST);
m581stringList_.add(I_SIMPLE_POISON);
m581stringList_.add(I_GEL);
m581stringList_.add(I_AMOUR);
m581stringList_.add(I_SOMMEIL);
m581stringList_.add(I_SOMMEIL_REPOS);
m581stringList_.add(I_MAUDIT);
m581stringList_.add(I_CAUCHEMAR_ST);
m581stringList_.add(I_CONFUSION);
m581stringList_.add(I_PARALYSIE);
m581effectStatus_.setDeletedStatus(m581stringList_);
m581effectStatus_.setTargetChoice(TargetChoice.ALLIES);
m581effectStatus_.setFail(ES);
m581custListEffect_.add(m581effectStatus_);
m581statusMoveData_.setEffects(m581custListEffect_);
m581statusMoveData_.setStoppableMoveMulti(true);
m581statusMoveData_.setIgnVarAccurUserNeg(true);
m581statusMoveData_.setIgnVarEvasTargetPos(true);
m581statusMoveData_.setTargetChoice(TargetChoice.ALLIES);
return m581statusMoveData_;
}
static MoveData m32(){
StatusMoveData m582statusMoveData_ = Instances.newStatusMoveData();
m582statusMoveData_.setPp(20);
StringList m582stringList_=new StringList(new CollCapacity(1));
m582stringList_.add(I_NORMAL);
m582statusMoveData_.setTypes(m582stringList_);
m582stringList_=new StringList(new CollCapacity(1));
m582stringList_.add(I_NORMAL);
m582statusMoveData_.setBoostedTypes(m582stringList_);
m582statusMoveData_.setAccuracy(R_1);
CustList<Effect> m582custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m582effectInvoke_=Instances.newEffectInvoke();
m582effectInvoke_.setInvokingAllyMove(true);
m582stringList_=new StringList(new CollCapacity(23));
m582stringList_.add(I_ASSISTANCE);
m582stringList_.add(I_BABIL);
m582stringList_.add(I_BLABLA_DODO);
m582stringList_.add(I_COUP_D_MAIN);
m582stringList_.add(I_COPIE);
m582stringList_.add(I_DETECTION);
m582stringList_.add(I_GRIBOUILLE);
m582stringList_.add(I_IMPLORE);
m582stringList_.add(I_LARCIN);
m582stringList_.add(I_LUTTE);
m582stringList_.add(I_MIMIQUE);
m582stringList_.add(I_MITRA_POING);
m582stringList_.add(I_METRONOME);
m582stringList_.add(I_MOI_D_ABORD);
m582stringList_.add(I_PAR_ICI);
m582stringList_.add(I_PASSE_PASSE);
m582stringList_.add(I_REFLET_MAGIK);
m582stringList_.add(I_RIPOSTE);
m582stringList_.add(I_RUSE);
m582stringList_.add(I_SAISIE);
m582stringList_.add(I_TENACITE);
m582stringList_.add(I_TOURMAGIK);
m582stringList_.add(I_VOILE_MIROIR);
m582effectInvoke_.setMovesNotToBeInvoked(m582stringList_);
m582effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m582effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC);
m582custListEffect_.add(m582effectInvoke_);
m582statusMoveData_.setEffects(m582custListEffect_);
m582statusMoveData_.setStoppableMoveSolo(true);
m582statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m582statusMoveData_;
}
static MoveData m33(){
DamagingMoveData m583damagingMoveData_ = Instances.newDamagingMoveData();
m583damagingMoveData_.setCategory(I_PHYSIQUE);
m583damagingMoveData_.setDirect(true);
m583damagingMoveData_.setStoppableMoveKoSingle(true);
m583damagingMoveData_.setPp(10);
StringList m583stringList_=new StringList(new CollCapacity(1));
m583stringList_.add(I_TENEBRE);
m583damagingMoveData_.setTypes(m583stringList_);
m583stringList_=new StringList(new CollCapacity(1));
m583stringList_.add(I_TENEBRE);
m583damagingMoveData_.setBoostedTypes(m583stringList_);
m583damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m583custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m583effectDamage_=Instances.newEffectDamage();
m583effectDamage_.setPower(R_50+OM+LP+A_CARACFERME+LP+V_CIBLE_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+OC+R_0+RP+OP+R_2+OM+A_CARACDROITEOUVERT+LP+V_CIBLE_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+RP+RP);
m583effectDamage_.setUserAttack(true);
m583effectDamage_.setStatisAtt(Statistic.ATTACK);
m583effectDamage_.setTargetDefense(true);
m583effectDamage_.setStatisDef(Statistic.DEFENSE);
m583effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m583effectDamage_.setFail(ES);
m583custListEffect_.add(m583effectDamage_);
m583damagingMoveData_.setEffects(m583custListEffect_);
m583damagingMoveData_.setStoppableMoveSolo(true);
m583damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m583damagingMoveData_;
}
static MoveData m34(){
StatusMoveData m584statusMoveData_ = Instances.newStatusMoveData();
m584statusMoveData_.setThievableMove(true);
m584statusMoveData_.setPp(10);
StringList m584stringList_=new StringList(new CollCapacity(1));
m584stringList_.add(I_PSY);
m584statusMoveData_.setTypes(m584stringList_);
m584stringList_=new StringList(new CollCapacity(1));
m584stringList_.add(I_PSY);
m584statusMoveData_.setBoostedTypes(m584stringList_);
m584statusMoveData_.setAccuracy(R_1);
CustList<Effect> m584custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m584effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m584enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(5));
m584enumMapStatisticByte_.addEntry(Statistic.ACCURACY,1);
m584enumMapStatisticByte_.addEntry(Statistic.ATTACK,1);
m584enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1);
m584enumMapStatisticByte_.addEntry(Statistic.CRITICAL_HIT,1);
m584enumMapStatisticByte_.addEntry(Statistic.SPEED,1);
m584effectStatistic_.setStatisVarRank(m584enumMapStatisticByte_);
IdMap<Statistic,String> m584enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(4));
m584enumMapStatisticString_.addEntry(Statistic.ACCURACY,CF);
m584enumMapStatisticString_.addEntry(Statistic.ATTACK,CF);
m584enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,CF);
m584enumMapStatisticString_.addEntry(Statistic.CRITICAL_HIT,CF);
m584effectStatistic_.setLocalFailStatis(m584enumMapStatisticString_);
m584effectStatistic_.setEvtRate(Rate.newRate(R_1));
m584effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m584effectStatistic_.setFail(ES);
m584custListEffect_.add(m584effectStatistic_);
m584statusMoveData_.setEffects(m584custListEffect_);
m584statusMoveData_.setStoppableMoveMulti(true);
m584statusMoveData_.setIgnVarAccurUserNeg(true);
m584statusMoveData_.setIgnVarEvasTargetPos(true);
m584statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m584statusMoveData_;
}
static MoveData m35(){
DamagingMoveData m585damagingMoveData_ = Instances.newDamagingMoveData();
m585damagingMoveData_.setCategory(I_SPECIALE);
m585damagingMoveData_.setDirect(true);
m585damagingMoveData_.setStoppableMoveKoSingle(true);
m585damagingMoveData_.setPp(5);
StringList m585stringList_=new StringList(new CollCapacity(1));
m585stringList_.add(I_NORMAL);
m585damagingMoveData_.setTypes(m585stringList_);
m585stringList_=new StringList(new CollCapacity(1));
m585stringList_.add(I_NORMAL);
m585damagingMoveData_.setBoostedTypes(m585stringList_);
m585damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m585custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m585effectDamage_=Instances.newEffectDamage();
m585effectDamage_.setPower(A_CARACFERME+LP+V_LANCEUR_PP+SE+I_ATOUT+OC+R_1+OC+R_1+RP+OM+R_200+OP+A_CARACFERME+LP+V_LANCEUR_PP+SE+I_ATOUT+OC+R_2+OC+R_2+RP+OM+R_80+OP+A_CARACFERME+LP+V_LANCEUR_PP+SE+I_ATOUT+OC+R_3+OC+R_3+RP+OM+R_60+OP+A_CARACFERME+LP+V_LANCEUR_PP+SE+I_ATOUT+OC+R_4+OC+R_4+RP+OM+R_50+OP+A_CARACDROITEFERME+LP+V_LANCEUR_PP+SE+I_ATOUT+OC+R_5+RP+OM+R_40);
m585effectDamage_.setUserAttack(true);
m585effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m585effectDamage_.setTargetDefense(true);
m585effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m585effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m585effectDamage_.setFail(ES);
m585custListEffect_.add(m585effectDamage_);
m585damagingMoveData_.setEffects(m585custListEffect_);
m585damagingMoveData_.setStoppableMoveSolo(true);
m585damagingMoveData_.setIgnVarAccurUserNeg(true);
m585damagingMoveData_.setIgnVarEvasTargetPos(true);
m585damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m585damagingMoveData_;
}
static MoveData m36(){
StatusMoveData m586statusMoveData_ = Instances.newStatusMoveData();
m586statusMoveData_.setThievableMove(true);
m586statusMoveData_.setPp(10);
StringList m586stringList_=new StringList(new CollCapacity(1));
m586stringList_.add(I_VOL);
m586statusMoveData_.setTypes(m586stringList_);
m586stringList_=new StringList(new CollCapacity(1));
m586stringList_.add(I_VOL);
m586statusMoveData_.setBoostedTypes(m586stringList_);
m586statusMoveData_.setAccuracy(R_1);
CustList<Effect> m586custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m586effectFullHpRate_=Instances.newEffectFullHpRate();
m586effectFullHpRate_.setRestoredHp(R_1_2);
m586effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m586effectFullHpRate_.setFail(ES);
m586custListEffect_.add(m586effectFullHpRate_);
m586statusMoveData_.setEffects(m586custListEffect_);
m586statusMoveData_.setStoppableMoveMulti(true);
m586statusMoveData_.setIgnVarAccurUserNeg(true);
m586statusMoveData_.setIgnVarEvasTargetPos(true);
m586statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m586statusMoveData_;
}
static MoveData m37(){
StatusMoveData m587statusMoveData_ = Instances.newStatusMoveData();
m587statusMoveData_.setCounterableMove(true);
m587statusMoveData_.setPp(15);
StringList m587stringList_=new StringList(new CollCapacity(1));
m587stringList_.add(I_NORMAL);
m587statusMoveData_.setTypes(m587stringList_);
m587stringList_=new StringList(new CollCapacity(1));
m587stringList_.add(I_NORMAL);
m587statusMoveData_.setBoostedTypes(m587stringList_);
m587statusMoveData_.setAccuracy(R_1);
CustList<Effect> m587custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m587effectStatus_=Instances.newEffectStatus();
MonteCarloString m587monteCarloString_=new MonteCarloString(new CollCapacity(1));
m587monteCarloString_.addQuickEvent(I_AMOUR,LgInt.newLgInt(R_1));
m587effectStatus_.setLawStatus(m587monteCarloString_);
StringMap<String> m587stringMapString_=new StringMap<String>(new CollCapacity(1));
m587stringMapString_.addEntry(I_AMOUR,V_EXISTE_GENRE_ASSEXUE+OO+V_GENRES_EGAUX+OO+V_CIBLE_POSSEDE_STATUT_RELATION+SE+I_AMOUR);
m587effectStatus_.setLocalFailStatus(m587stringMapString_);
m587effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m587effectStatus_.setFail(ES);
m587custListEffect_.add(m587effectStatus_);
m587statusMoveData_.setEffects(m587custListEffect_);
m587statusMoveData_.setStoppableMoveSolo(true);
m587statusMoveData_.setStoppableMoveMulti(true);
m587statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m587statusMoveData_;
}
static MoveData m38(){
DamagingMoveData m588damagingMoveData_ = Instances.newDamagingMoveData();
m588damagingMoveData_.setCategory(I_PHYSIQUE);
m588damagingMoveData_.setDirect(true);
m588damagingMoveData_.setStoppableMoveKoSingle(true);
m588damagingMoveData_.setPp(20);
StringList m588stringList_=new StringList(new CollCapacity(1));
m588stringList_.add(I_NORMAL);
m588damagingMoveData_.setTypes(m588stringList_);
m588stringList_=new StringList(new CollCapacity(1));
m588stringList_.add(I_NORMAL);
m588damagingMoveData_.setBoostedTypes(m588stringList_);
m588damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m588custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m588effectDamage_=Instances.newEffectDamage();
m588effectDamage_.setPower(R_70);
IdList<Statistic> m588enumListStatistic_=new IdList<Statistic>(new CollCapacity(1));
m588enumListStatistic_.add(Statistic.DEFENSE);
m588effectDamage_.setIgnVarStatTargetPos(m588enumListStatistic_);
m588effectDamage_.setUserAttack(true);
m588effectDamage_.setStatisAtt(Statistic.ATTACK);
m588effectDamage_.setTargetDefense(true);
m588effectDamage_.setStatisDef(Statistic.DEFENSE);
m588effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m588effectDamage_.setFail(ES);
m588custListEffect_.add(m588effectDamage_);
m588damagingMoveData_.setEffects(m588custListEffect_);
m588damagingMoveData_.setStoppableMoveSolo(true);
m588damagingMoveData_.setIgnVarEvasTargetPos(true);
m588damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m588damagingMoveData_;
}
static MoveData m39(){
DamagingMoveData m589damagingMoveData_ = Instances.newDamagingMoveData();
m589damagingMoveData_.setCategory(I_SPECIALE);
m589damagingMoveData_.setStoppableMoveKoSingle(true);
m589damagingMoveData_.setPp(20);
StringList m589stringList_=new StringList(new CollCapacity(1));
m589stringList_.add(I_COMBAT);
m589damagingMoveData_.setTypes(m589stringList_);
m589stringList_=new StringList(new CollCapacity(1));
m589stringList_.add(I_COMBAT);
m589damagingMoveData_.setBoostedTypes(m589stringList_);
m589damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m589custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m589effectDamage_=Instances.newEffectDamage();
m589effectDamage_.setPower(R_90);
m589effectDamage_.setUserAttack(true);
m589effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m589effectDamage_.setTargetDefense(true);
m589effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m589effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m589effectDamage_.setFail(ES);
m589custListEffect_.add(m589effectDamage_);
m589damagingMoveData_.setEffects(m589custListEffect_);
m589damagingMoveData_.setStoppableMoveSolo(true);
m589damagingMoveData_.setIgnVarAccurUserNeg(true);
m589damagingMoveData_.setIgnVarEvasTargetPos(true);
m589damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m589damagingMoveData_;
}
static MoveData m40(){
StatusMoveData m590statusMoveData_ = Instances.newStatusMoveData();
m590statusMoveData_.setThievableMove(true);
m590statusMoveData_.setPp(5);
StringList m590stringList_=new StringList(new CollCapacity(1));
m590stringList_.add(I_NORMAL);
m590statusMoveData_.setTypes(m590stringList_);
m590stringList_=new StringList(new CollCapacity(1));
m590stringList_.add(I_NORMAL);
m590statusMoveData_.setBoostedTypes(m590stringList_);
m590statusMoveData_.setAccuracy(R_1);
CustList<Effect> m590custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m590effectFullHpRate_=Instances.newEffectFullHpRate();
m590effectFullHpRate_.setRestoredHp(R_1_2+OM+A_CARACFERME+LP+A_CARDINAL+LP+LB+V_CLIMATS+RB+RP+OC+R_0+OC+R_0+RP+OP+A_CARACDROITEFERME+LP+A_CARDINAL+LP+LB+V_CLIMATS+RB+RP+OC+R_1+RP+OM+LP+R_2_3+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ZENITH+RB+RP+RP+OP+R_1_5+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ORAGE+RB+RP+RP+OP+R_1_4+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_GRELE+OS+I_DANSE_PLUIE+OS+I_TEMPETESABLE+RB+RP+RP+RP);
m590effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m590effectFullHpRate_.setFail(ES);
m590custListEffect_.add(m590effectFullHpRate_);
m590statusMoveData_.setEffects(m590custListEffect_);
m590statusMoveData_.setStoppableMoveMulti(true);
m590statusMoveData_.setIgnVarAccurUserNeg(true);
m590statusMoveData_.setIgnVarEvasTargetPos(true);
m590statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m590statusMoveData_;
}
static MoveData m41(){
DamagingMoveData m591damagingMoveData_ = Instances.newDamagingMoveData();
m591damagingMoveData_.setCategory(I_PHYSIQUE);
m591damagingMoveData_.setDirect(true);
m591damagingMoveData_.setStoppableMoveKoSingle(true);
m591damagingMoveData_.setPp(10);
StringList m591stringList_=new StringList(new CollCapacity(1));
m591stringList_.add(I_GLACE);
m591damagingMoveData_.setTypes(m591stringList_);
m591stringList_=new StringList(new CollCapacity(1));
m591stringList_.add(I_GLACE);
m591damagingMoveData_.setBoostedTypes(m591stringList_);
m591damagingMoveData_.setPriority(-4);
m591damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m591custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m591effectDamage_=Instances.newEffectDamage();
m591effectDamage_.setPower(R_60+OM+LP+A_CARACFERME+LP+V_LANCEUR_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+OC+R_0+RP+OP+R_2+OM+A_CARACDROITEOUVERT+LP+V_LANCEUR_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+RP+RP);
m591effectDamage_.setUserAttack(true);
m591effectDamage_.setStatisAtt(Statistic.ATTACK);
m591effectDamage_.setTargetDefense(true);
m591effectDamage_.setStatisDef(Statistic.DEFENSE);
m591effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m591effectDamage_.setFail(ES);
m591custListEffect_.add(m591effectDamage_);
m591damagingMoveData_.setEffects(m591custListEffect_);
m591damagingMoveData_.setStoppableMoveSolo(true);
m591damagingMoveData_.setStoppableMoveMulti(true);
m591damagingMoveData_.setStoppableMovePrio(true);
m591damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m591damagingMoveData_;
}
static MoveData m42(){
StatusMoveData m592statusMoveData_ = Instances.newStatusMoveData();
m592statusMoveData_.setThievableMove(true);
m592statusMoveData_.setPp(10);
StringList m592stringList_=new StringList(new CollCapacity(1));
m592stringList_.add(I_NORMAL);
m592statusMoveData_.setTypes(m592stringList_);
m592stringList_=new StringList(new CollCapacity(1));
m592stringList_.add(I_NORMAL);
m592statusMoveData_.setBoostedTypes(m592stringList_);
m592statusMoveData_.setAccuracy(R_1);
CustList<Effect> m592custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m592effectFullHpRate_=Instances.newEffectFullHpRate();
m592effectFullHpRate_.setRestoredHp(R_1_4+OM+A_PUIS+LP+R_2+OC+V_LANCEUR_NB_UTILISATION+SE+I_STOCKAGE+OD+R_1+RP);
m592effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m592effectFullHpRate_.setFail(V_LANCEUR_NB_UTILISATION+SE+I_STOCKAGE+LT+R_1);
m592custListEffect_.add(m592effectFullHpRate_);
m592statusMoveData_.setEffects(m592custListEffect_);
m592statusMoveData_.setStoppableMoveMulti(true);
m592statusMoveData_.setIgnVarAccurUserNeg(true);
m592statusMoveData_.setIgnVarEvasTargetPos(true);
m592statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m592statusMoveData_;
}
static MoveData m43(){
StatusMoveData m593statusMoveData_ = Instances.newStatusMoveData();
m593statusMoveData_.setCounterableMove(true);
m593statusMoveData_.setPp(15);
StringList m593stringList_=new StringList(new CollCapacity(1));
m593stringList_.add(I_TENEBRE);
m593statusMoveData_.setTypes(m593stringList_);
m593stringList_=new StringList(new CollCapacity(1));
m593stringList_.add(I_TENEBRE);
m593statusMoveData_.setBoostedTypes(m593stringList_);
m593statusMoveData_.setAccuracy(R_1);
CustList<Effect> m593custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectOrder m593effectOrder_=Instances.newEffectOrder();
m593effectOrder_.setTargetAttacksLast(true);
m593effectOrder_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m593effectOrder_.setFail(V_NB_COMBATTANTS_TERRAIN+LT+R_3+OO+V_CIBLE_JOUE+OE+R_1);
m593custListEffect_.add(m593effectOrder_);
m593statusMoveData_.setEffects(m593custListEffect_);
m593statusMoveData_.setStoppableMoveSolo(true);
m593statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m593statusMoveData_;
}
static MoveData m44(){
DamagingMoveData m594damagingMoveData_ = Instances.newDamagingMoveData();
m594damagingMoveData_.setCategory(I_SPECIALE);
m594damagingMoveData_.setStoppableMoveKoSingle(true);
m594damagingMoveData_.setPp(20);
StringList m594stringList_=new StringList(new CollCapacity(1));
m594stringList_.add(I_VOL);
m594damagingMoveData_.setTypes(m594stringList_);
m594stringList_=new StringList(new CollCapacity(1));
m594stringList_.add(I_VOL);
m594damagingMoveData_.setBoostedTypes(m594stringList_);
m594damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m594custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m594effectDamage_=Instances.newEffectDamage();
m594effectDamage_.setPower(R_60);
m594effectDamage_.setUserAttack(true);
m594effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m594effectDamage_.setTargetDefense(true);
m594effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m594effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m594effectDamage_.setFail(ES);
m594custListEffect_.add(m594effectDamage_);
EffectStatus m594effectStatus_=Instances.newEffectStatus();
MonteCarloString m594monteCarloString_=new MonteCarloString(new CollCapacity(2));
m594monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m594monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m594effectStatus_.setLawStatus(m594monteCarloString_);
StringMap<String> m594stringMapString_=new StringMap<String>(new CollCapacity(1));
m594stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m594effectStatus_.setLocalFailStatus(m594stringMapString_);
m594effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m594effectStatus_.setFail(ES);
Ints m594ints_=new Ints(new CollCapacity(1));
m594ints_.add(0);
m594effectStatus_.setRequiredSuccessfulEffects(m594ints_);
m594custListEffect_.add(m594effectStatus_);
m594damagingMoveData_.setEffects(m594custListEffect_);
m594damagingMoveData_.setStoppableMoveSolo(true);
m594damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m594damagingMoveData_;
}
static MoveData m45(){
StatusMoveData m595statusMoveData_ = Instances.newStatusMoveData();
m595statusMoveData_.setCounterableMove(true);
m595statusMoveData_.setPp(10);
StringList m595stringList_=new StringList(new CollCapacity(1));
m595stringList_.add(I_NORMAL);
m595statusMoveData_.setTypes(m595stringList_);
m595stringList_=new StringList(new CollCapacity(1));
m595stringList_.add(I_NORMAL);
m595statusMoveData_.setBoostedTypes(m595stringList_);
m595statusMoveData_.setAccuracy(R_1);
CustList<Effect> m595custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m595effectStatus_=Instances.newEffectStatus();
MonteCarloString m595monteCarloString_=new MonteCarloString(new CollCapacity(1));
m595monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m595effectStatus_.setLawStatus(m595monteCarloString_);
StringMap<String> m595stringMapString_=new StringMap<String>(new CollCapacity(1));
m595stringMapString_.addEntry(I_SOMMEIL,V_CIBLE_CLONE+GT+R_0);
m595effectStatus_.setLocalFailStatus(m595stringMapString_);
m595effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m595effectStatus_.setFail(ES);
m595custListEffect_.add(m595effectStatus_);
m595statusMoveData_.setEffects(m595custListEffect_);
m595statusMoveData_.setStoppableMoveSolo(true);
m595statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m595statusMoveData_;
}
static MoveData m46(){
DamagingMoveData m596damagingMoveData_ = Instances.newDamagingMoveData();
m596damagingMoveData_.setCategory(I_SPECIALE);
m596damagingMoveData_.setStoppableMoveKoSingle(true);
m596damagingMoveData_.setPp(15);
StringList m596stringList_=new StringList(new CollCapacity(1));
m596stringList_.add(I_POISON);
m596damagingMoveData_.setTypes(m596stringList_);
m596stringList_=new StringList(new CollCapacity(1));
m596stringList_.add(I_POISON);
m596damagingMoveData_.setBoostedTypes(m596stringList_);
m596damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m596custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m596effectDamage_=Instances.newEffectDamage();
m596effectDamage_.setPower(R_50);
m596effectDamage_.setUserAttack(true);
m596effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m596effectDamage_.setTargetDefense(true);
m596effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m596effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m596effectDamage_.setFail(V_CIBLE_CLONE+GT+R_0);
m596custListEffect_.add(m596effectDamage_);
EffectStatistic m596effectStatistic_=Instances.newEffectStatistic();
m596effectStatistic_.setEvtRate(Rate.newRate(R_1));
IdList<Statistic> m596enumListStatistic_=new IdList<Statistic>(new CollCapacity(7));
m596enumListStatistic_.add(Statistic.ATTACK);
m596enumListStatistic_.add(Statistic.DEFENSE);
m596enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m596enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m596enumListStatistic_.add(Statistic.SPEED);
m596enumListStatistic_.add(Statistic.ACCURACY);
m596enumListStatistic_.add(Statistic.EVASINESS);
m596effectStatistic_.setCancelChgtStat(m596enumListStatistic_);
m596effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m596effectStatistic_.setFail(ES);
Ints m596ints_=new Ints(new CollCapacity(1));
m596ints_.add(0);
m596effectStatistic_.setRequiredSuccessfulEffects(m596ints_);
m596custListEffect_.add(m596effectStatistic_);
m596damagingMoveData_.setEffects(m596custListEffect_);
m596damagingMoveData_.setStoppableMoveSolo(true);
m596damagingMoveData_.setIgnVarAccurUserNeg(true);
m596damagingMoveData_.setIgnVarEvasTargetPos(true);
m596damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m596damagingMoveData_;
}
static MoveData m47(){
StatusMoveData m597statusMoveData_ = Instances.newStatusMoveData();
m597statusMoveData_.setPp(20);
StringList m597stringList_=new StringList(new CollCapacity(1));
m597stringList_.add(I_NORMAL);
m597statusMoveData_.setTypes(m597stringList_);
m597stringList_=new StringList(new CollCapacity(1));
m597stringList_.add(I_NORMAL);
m597statusMoveData_.setBoostedTypes(m597stringList_);
m597statusMoveData_.setAccuracy(R_1);
CustList<Effect> m597custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCommonStatistics m597effectCommonStatistics_=Instances.newEffectCommonStatistics();
IdMap<Statistic,String> m597enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m597enumMapStatisticString_.addEntry(Statistic.PV_RESTANTS,A_MOY+LP+V_LANCEUR_PV_RESTANTS+OC+V_CIBLE_PV_RESTANTS+RP);
m597effectCommonStatistics_.setCommonValue(m597enumMapStatisticString_);
m597effectCommonStatistics_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m597effectCommonStatistics_.setFail(V_CIBLE_CLONE+GT+R_0);
m597custListEffect_.add(m597effectCommonStatistics_);
m597statusMoveData_.setEffects(m597custListEffect_);
m597statusMoveData_.setStoppableMoveSolo(true);
m597statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m597statusMoveData_;
}
static MoveData m48(){
DamagingMoveData m598damagingMoveData_ = Instances.newDamagingMoveData();
m598damagingMoveData_.setCategory(I_PHYSIQUE);
m598damagingMoveData_.setDirect(true);
m598damagingMoveData_.setStoppableMoveKoSingle(true);
m598damagingMoveData_.setPp(30);
StringList m598stringList_=new StringList(new CollCapacity(1));
m598stringList_.add(I_COMBAT);
m598damagingMoveData_.setTypes(m598stringList_);
m598stringList_=new StringList(new CollCapacity(1));
m598stringList_.add(I_COMBAT);
m598damagingMoveData_.setBoostedTypes(m598stringList_);
m598damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m598custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m598effectDamage_=Instances.newEffectDamage();
m598effectDamage_.setPower(A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_0+OC+R_10+RP+OM+R_20+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_10+OC+R_25+RP+OM+R_40+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_25+OC+R_50+RP+OM+R_60+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_50+OC+R_100+RP+OM+R_80+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_100+OC+R_200+RP+OM+R_100+OP+A_CARACDROITEFERME+LP+V_CIBLE_MASSE+OC+R_200+RP+OM+R_120);
m598effectDamage_.setUserAttack(true);
m598effectDamage_.setStatisAtt(Statistic.ATTACK);
m598effectDamage_.setTargetDefense(true);
m598effectDamage_.setStatisDef(Statistic.DEFENSE);
m598effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m598effectDamage_.setFail(ES);
m598custListEffect_.add(m598effectDamage_);
m598damagingMoveData_.setEffects(m598custListEffect_);
m598damagingMoveData_.setStoppableMoveSolo(true);
m598damagingMoveData_.setStoppableMoveMulti(true);
m598damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m598damagingMoveData_;
}
static MoveData m49(){
DamagingMoveData m599damagingMoveData_ = Instances.newDamagingMoveData();
m599damagingMoveData_.setCategory(I_PHYSIQUE);
m599damagingMoveData_.setDirect(true);
m599damagingMoveData_.setStoppableMoveKoSingle(true);
m599damagingMoveData_.setPp(20);
StringList m599stringList_=new StringList(new CollCapacity(1));
m599stringList_.add(I_COMBAT);
m599damagingMoveData_.setTypes(m599stringList_);
m599stringList_=new StringList(new CollCapacity(1));
m599stringList_.add(I_COMBAT);
m599damagingMoveData_.setBoostedTypes(m599stringList_);
m599damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m599custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m599effectDamage_=Instances.newEffectDamage();
m599effectDamage_.setPower(R_60);
m599effectDamage_.setUserAttack(true);
m599effectDamage_.setStatisAtt(Statistic.ATTACK);
m599effectDamage_.setTargetDefense(true);
m599effectDamage_.setStatisDef(Statistic.DEFENSE);
m599effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m599effectDamage_.setFail(ES);
m599custListEffect_.add(m599effectDamage_);
EffectStatistic m599effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m599enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m599enumMapStatisticByte_.addEntry(Statistic.SPEED,-1);
m599effectStatistic_.setStatisVarRank(m599enumMapStatisticByte_);
IdMap<Statistic,String> m599enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m599enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m599effectStatistic_.setLocalFailStatis(m599enumMapStatisticString_);
m599effectStatistic_.setEvtRate(Rate.newRate(R_1));
m599effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m599effectStatistic_.setFail(ES);
Ints m599ints_=new Ints(new CollCapacity(1));
m599ints_.add(0);
m599effectStatistic_.setRequiredSuccessfulEffects(m599ints_);
m599custListEffect_.add(m599effectStatistic_);
m599damagingMoveData_.setEffects(m599custListEffect_);
m599damagingMoveData_.setStoppableMoveSolo(true);
m599damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m599damagingMoveData_;
}
}
