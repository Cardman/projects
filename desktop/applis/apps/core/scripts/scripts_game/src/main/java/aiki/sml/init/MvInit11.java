package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit11 extends CstIgame{
private MvInit11(){}
static MoveData m275(){
DamagingMoveData m629damagingMoveData_ = Instances.newDamagingMoveData();
m629damagingMoveData_.setCategory(I_PHYSIQUE);
m629damagingMoveData_.setDirect(true);
m629damagingMoveData_.setStoppableMoveKoSingle(true);
m629damagingMoveData_.setPp((short)20);
StringList m629stringList_=new StringList(new CollCapacity(1));
m629stringList_.add(I_NORMAL);
m629damagingMoveData_.setTypes(m629stringList_);
m629stringList_=new StringList(new CollCapacity(1));
m629stringList_.add(I_NORMAL);
m629damagingMoveData_.setBoostedTypes(m629stringList_);
m629damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m629custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m629effectDamage_=Instances.newEffectDamage();
m629effectDamage_.setPower(R_20);
m629effectDamage_.setUserAttack(true);
m629effectDamage_.setStatisAtt(Statistic.ATTACK);
m629effectDamage_.setTargetDefense(true);
m629effectDamage_.setStatisDef(Statistic.DEFENSE);
m629effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m629effectDamage_.setFail(ES);
m629custListEffect_.add(m629effectDamage_);
EffectStatistic m629effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m629enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m629enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
m629effectStatistic_.setStatisVarRank(m629enumMapStatisticByte_);
m629effectStatistic_.setEvtRate(Rate.newRate(R_1));
m629effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m629effectStatistic_.setFail(ES);
Ints m629ints_=new Ints(new CollCapacity(1));
m629ints_.add(0);
m629effectStatistic_.setRequiredSuccessfulEffects(m629ints_);
m629custListEffect_.add(m629effectStatistic_);
m629damagingMoveData_.setEffects(m629custListEffect_);
m629damagingMoveData_.setStoppableMoveSolo(true);
m629damagingMoveData_.setStoppableMoveMulti(true);
m629damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m629damagingMoveData_;
}
static MoveData m276(){
DamagingMoveData m630damagingMoveData_ = Instances.newDamagingMoveData();
m630damagingMoveData_.setCategory(I_PHYSIQUE);
m630damagingMoveData_.setDirect(true);
m630damagingMoveData_.setStoppableMoveKoSingle(true);
m630damagingMoveData_.setPp((short)20);
StringList m630stringList_=new StringList(new CollCapacity(1));
m630stringList_.add(I_ELECTRIQUE);
m630damagingMoveData_.setTypes(m630stringList_);
m630stringList_=new StringList(new CollCapacity(1));
m630stringList_.add(I_ELECTRIQUE);
m630damagingMoveData_.setBoostedTypes(m630stringList_);
m630damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m630custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m630effectDamage_=Instances.newEffectDamage();
m630effectDamage_.setPower(R_20);
m630effectDamage_.setUserAttack(true);
m630effectDamage_.setStatisAtt(Statistic.ATTACK);
m630effectDamage_.setTargetDefense(true);
m630effectDamage_.setStatisDef(Statistic.DEFENSE);
m630effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m630effectDamage_.setFail(ES);
m630custListEffect_.add(m630effectDamage_);
EffectStatus m630effectStatus_=Instances.newEffectStatus();
MonteCarloString m630monteCarloString_=new MonteCarloString(new CollCapacity(1));
m630monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m630effectStatus_.setLawStatus(m630monteCarloString_);
StringMap<String> m630stringMapString_=new StringMap<String>(new CollCapacity(1));
m630stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m630effectStatus_.setLocalFailStatus(m630stringMapString_);
m630effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m630effectStatus_.setFail(ES);
Ints m630ints_=new Ints(new CollCapacity(1));
m630ints_.add(0);
m630effectStatus_.setRequiredSuccessfulEffects(m630ints_);
m630custListEffect_.add(m630effectStatus_);
m630damagingMoveData_.setEffects(m630custListEffect_);
m630damagingMoveData_.setStoppableMoveSolo(true);
m630damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m630damagingMoveData_;
}
static MoveData m277(){
DamagingMoveData m631damagingMoveData_ = Instances.newDamagingMoveData();
m631damagingMoveData_.setCategory(I_PHYSIQUE);
m631damagingMoveData_.setDirect(true);
m631damagingMoveData_.setStoppableMoveKoSingle(true);
m631damagingMoveData_.setPp((short)20);
StringList m631stringList_=new StringList(new CollCapacity(1));
m631stringList_.add(I_NORMAL);
m631damagingMoveData_.setTypes(m631stringList_);
m631stringList_=new StringList(new CollCapacity(1));
m631stringList_.add(I_NORMAL);
m631damagingMoveData_.setBoostedTypes(m631stringList_);
m631damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m631custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m631effectDamage_=Instances.newEffectDamage();
m631effectDamage_.setPower(V_LANCEUR_BONHEUR+OM+R_2_5+OP+R_1);
m631effectDamage_.setUserAttack(true);
m631effectDamage_.setStatisAtt(Statistic.ATTACK);
m631effectDamage_.setTargetDefense(true);
m631effectDamage_.setStatisDef(Statistic.DEFENSE);
m631effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m631effectDamage_.setFail(ES);
m631custListEffect_.add(m631effectDamage_);
m631damagingMoveData_.setEffects(m631custListEffect_);
m631damagingMoveData_.setStoppableMoveSolo(true);
m631damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m631damagingMoveData_;
}
static MoveData m278(){
DamagingMoveData m632damagingMoveData_ = Instances.newDamagingMoveData();
m632damagingMoveData_.setCategory(I_PHYSIQUE);
m632damagingMoveData_.setStoppableMoveKoSingle(true);
m632damagingMoveData_.setPp((short)10);
StringList m632stringList_=new StringList(new CollCapacity(1));
m632stringList_.add(I_ACIER);
m632damagingMoveData_.setTypes(m632stringList_);
m632stringList_=new StringList(new CollCapacity(1));
m632stringList_.add(I_ACIER);
m632damagingMoveData_.setBoostedTypes(m632stringList_);
m632damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m632custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m632effectDamage_=Instances.newEffectDamage();
StringMap<Rate> m632stringMapRate_=new StringMap<Rate>(new CollCapacity(2));
m632stringMapRate_.addEntry(I_SPECIALE,Rate.newRate(R_2));
m632stringMapRate_.addEntry(I_PHYSIQUE,Rate.newRate(R_2));
m632effectDamage_.setMultDamageAgainst(m632stringMapRate_);
m632effectDamage_.setPower(ES);
m632effectDamage_.setUserAttack(true);
m632effectDamage_.setStatisAtt(Statistic.ATTACK);
m632effectDamage_.setTargetDefense(true);
m632effectDamage_.setStatisDef(Statistic.DEFENSE);
m632effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m632effectDamage_.setFail(A_CARACDROITEOUVERT+LP+V_LANCEUR_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+RP+OE+R_0);
m632custListEffect_.add(m632effectDamage_);
m632damagingMoveData_.setEffects(m632custListEffect_);
m632damagingMoveData_.setStoppableMoveSolo(true);
m632damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m632damagingMoveData_;
}
static MoveData m279(){
DamagingMoveData m633damagingMoveData_ = Instances.newDamagingMoveData();
m633damagingMoveData_.setCategory(I_SPECIALE);
m633damagingMoveData_.setStoppableMoveKoSingle(true);
m633damagingMoveData_.setPp((short)5);
StringList m633stringList_=new StringList(new CollCapacity(1));
m633stringList_.add(I_PLANTE);
m633damagingMoveData_.setTypes(m633stringList_);
m633stringList_=new StringList(new CollCapacity(1));
m633stringList_.add(I_PLANTE);
m633damagingMoveData_.setBoostedTypes(m633stringList_);
m633damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m633custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m633effectDamage_=Instances.newEffectDamage();
m633effectDamage_.setPower(R_120);
m633effectDamage_.setUserAttack(true);
m633effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m633effectDamage_.setTargetDefense(true);
m633effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m633effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m633effectDamage_.setFail(ES);
m633custListEffect_.add(m633effectDamage_);
EffectStatistic m633effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m633enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m633enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-1);
m633effectStatistic_.setStatisVarRank(m633enumMapStatisticByte_);
IdMap<Statistic,String> m633enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m633enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m633effectStatistic_.setLocalFailStatis(m633enumMapStatisticString_);
m633effectStatistic_.setEvtRate(Rate.newRate(R_1));
m633effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m633effectStatistic_.setFail(ES);
Ints m633ints_=new Ints(new CollCapacity(1));
m633ints_.add(0);
m633effectStatistic_.setRequiredSuccessfulEffects(m633ints_);
m633custListEffect_.add(m633effectStatistic_);
m633damagingMoveData_.setEffects(m633custListEffect_);
m633damagingMoveData_.setStoppableMoveSolo(true);
m633damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m633damagingMoveData_;
}
static MoveData m280(){
DamagingMoveData m634damagingMoveData_ = Instances.newDamagingMoveData();
m634damagingMoveData_.setCategory(I_PHYSIQUE);
m634damagingMoveData_.setDirect(true);
m634damagingMoveData_.setStoppableMoveKoSingle(true);
m634damagingMoveData_.setPp((short)20);
StringList m634stringList_=new StringList(new CollCapacity(1));
m634stringList_.add(I_NORMAL);
m634damagingMoveData_.setTypes(m634stringList_);
m634stringList_=new StringList(new CollCapacity(1));
m634stringList_.add(I_NORMAL);
m634damagingMoveData_.setBoostedTypes(m634stringList_);
m634damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m634custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m634effectDamage_=Instances.newEffectDamage();
m634effectDamage_.setPower(R_15);
m634effectDamage_.setUserAttack(true);
m634effectDamage_.setStatisAtt(Statistic.ATTACK);
m634effectDamage_.setTargetDefense(true);
m634effectDamage_.setStatisDef(Statistic.DEFENSE);
m634effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m634effectDamage_.setFail(ES);
m634custListEffect_.add(m634effectDamage_);
m634damagingMoveData_.setEffects(m634custListEffect_);
m634damagingMoveData_.setStoppableMoveSolo(true);
m634damagingMoveData_.setStoppableMoveMulti(true);
m634damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m634damagingMoveData_;
}
static MoveData m281(){
StatusMoveData m635statusMoveData_ = Instances.newStatusMoveData();
m635statusMoveData_.setPp((short)10);
StringList m635stringList_=new StringList(new CollCapacity(1));
m635stringList_.add(I_FEE);
m635statusMoveData_.setTypes(m635stringList_);
m635stringList_=new StringList(new CollCapacity(1));
m635stringList_.add(I_FEE);
m635statusMoveData_.setBoostedTypes(m635stringList_);
m635statusMoveData_.setAccuracy(R_1);
CustList<Effect> m635custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m635effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m635enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m635enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)1);
m635effectStatistic_.setStatisVarRank(m635enumMapStatisticByte_);
m635effectStatistic_.setEvtRate(Rate.newRate(R_1));
m635effectStatistic_.setTargetChoice(TargetChoice.GLOBALE);
m635effectStatistic_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_PLANTE+RB+RP+RP+OE+R_0);
m635custListEffect_.add(m635effectStatistic_);
m635statusMoveData_.setEffects(m635custListEffect_);
m635statusMoveData_.setStoppableMoveMulti(true);
m635statusMoveData_.setIgnVarAccurUserNeg(true);
m635statusMoveData_.setIgnVarEvasTargetPos(true);
m635statusMoveData_.setTargetChoice(TargetChoice.GLOBALE);
return m635statusMoveData_;
}
static MoveData m282(){
StatusMoveData m636statusMoveData_ = Instances.newStatusMoveData();
m636statusMoveData_.setThievableMove(true);
m636statusMoveData_.setPp((short)10);
StringList m636stringList_=new StringList(new CollCapacity(1));
m636stringList_.add(I_ROCHE);
m636statusMoveData_.setTypes(m636stringList_);
m636stringList_=new StringList(new CollCapacity(1));
m636stringList_.add(I_ROCHE);
m636statusMoveData_.setBoostedTypes(m636stringList_);
m636statusMoveData_.setPriority((byte)3);
m636statusMoveData_.setAccuracy(A_PUIS+LP+R_2+OC+OD+V_LANCEUR_NB_UTILISATION+SE+I_GARDE_LARGE+OD+V_LANCEUR_NB_UTILISATION+SE+I_PREVENTION+RP);
CustList<Effect> m636custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectProtection m636effectProtection_=Instances.newEffectProtection();
m636effectProtection_.setProtTeamAgainstMultTargets(true);
m636effectProtection_.setTargetChoice(TargetChoice.LANCEUR);
m636effectProtection_.setFail(ES);
m636custListEffect_.add(m636effectProtection_);
m636statusMoveData_.setEffects(m636custListEffect_);
m636statusMoveData_.setStoppableMoveMulti(true);
m636statusMoveData_.setStoppableMovePrio(true);
m636statusMoveData_.setIgnVarEvasTargetPos(true);
m636statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m636statusMoveData_;
}
static MoveData m283(){
StatusMoveData m637statusMoveData_ = Instances.newStatusMoveData();
m637statusMoveData_.setCounterableMove(true);
m637statusMoveData_.setPp((short)40);
StringList m637stringList_=new StringList(new CollCapacity(1));
m637stringList_.add(I_POISON);
m637statusMoveData_.setTypes(m637stringList_);
m637stringList_=new StringList(new CollCapacity(1));
m637stringList_.add(I_POISON);
m637statusMoveData_.setBoostedTypes(m637stringList_);
m637statusMoveData_.setAccuracy(R_4_5);
CustList<Effect> m637custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m637effectStatus_=Instances.newEffectStatus();
MonteCarloString m637monteCarloString_=new MonteCarloString(new CollCapacity(1));
m637monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m637effectStatus_.setLawStatus(m637monteCarloString_);
StringMap<String> m637stringMapString_=new StringMap<String>(new CollCapacity(1));
m637stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m637effectStatus_.setLocalFailStatus(m637stringMapString_);
m637effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
m637effectStatus_.setFail(ES);
m637custListEffect_.add(m637effectStatus_);
m637statusMoveData_.setEffects(m637custListEffect_);
m637statusMoveData_.setStoppableMoveSolo(true);
m637statusMoveData_.setStoppableMoveMulti(true);
m637statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m637statusMoveData_;
}
static MoveData m284(){
StatusMoveData m638statusMoveData_ = Instances.newStatusMoveData();
m638statusMoveData_.setPp((short)10);
StringList m638stringList_=new StringList(new CollCapacity(1));
m638stringList_.add(I_FEE);
m638statusMoveData_.setTypes(m638stringList_);
m638stringList_=new StringList(new CollCapacity(1));
m638stringList_.add(I_FEE);
m638statusMoveData_.setBoostedTypes(m638stringList_);
m638statusMoveData_.setAccuracy(R_1);
CustList<Effect> m638custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m638effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m638enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(3));
m638enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)2);
m638enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)2);
m638enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)2);
m638effectStatistic_.setStatisVarRank(m638enumMapStatisticByte_);
m638effectStatistic_.setEvtRate(Rate.newRate(R_1));
m638effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m638effectStatistic_.setFail(ES);
m638custListEffect_.add(m638effectStatistic_);
m638statusMoveData_.setEffects(m638custListEffect_);
m638statusMoveData_.setNbPrepaRound((short)1);
m638statusMoveData_.setIgnVarAccurUserNeg(true);
m638statusMoveData_.setIgnVarEvasTargetPos(true);
m638statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m638statusMoveData_;
}
static MoveData m285(){
DamagingMoveData m639damagingMoveData_ = Instances.newDamagingMoveData();
m639damagingMoveData_.setCategory(I_SPECIALE);
m639damagingMoveData_.setStoppableMoveKoSingle(true);
m639damagingMoveData_.setPp((short)5);
StringList m639stringList_=new StringList(new CollCapacity(1));
m639stringList_.add(I_EAU);
m639damagingMoveData_.setTypes(m639stringList_);
m639stringList_=new StringList(new CollCapacity(1));
m639stringList_.add(I_EAU);
m639damagingMoveData_.setBoostedTypes(m639stringList_);
m639damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m639custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m639effectDamage_=Instances.newEffectDamage();
m639effectDamage_.setPower(R_150+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP);
m639effectDamage_.setUserAttack(true);
m639effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m639effectDamage_.setTargetDefense(true);
m639effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m639effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m639effectDamage_.setFail(ES);
m639custListEffect_.add(m639effectDamage_);
m639damagingMoveData_.setEffects(m639custListEffect_);
m639damagingMoveData_.setStoppableMoveSolo(true);
m639damagingMoveData_.setStoppableMoveMulti(true);
m639damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m639damagingMoveData_;
}
static MoveData m286(){
DamagingMoveData m640damagingMoveData_ = Instances.newDamagingMoveData();
m640damagingMoveData_.setCategory(I_PHYSIQUE);
m640damagingMoveData_.setDirect(true);
m640damagingMoveData_.setStoppableMoveKoSingle(true);
m640damagingMoveData_.setPp((short)5);
StringList m640stringList_=new StringList(new CollCapacity(1));
m640stringList_.add(I_NORMAL);
m640damagingMoveData_.setTypes(m640stringList_);
m640stringList_=new StringList(new CollCapacity(1));
m640stringList_.add(I_NORMAL);
m640damagingMoveData_.setBoostedTypes(m640stringList_);
m640damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m640custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m640effectDamage_=Instances.newEffectDamage();
m640effectDamage_.setPower(R_150);
m640effectDamage_.setUserAttack(true);
m640effectDamage_.setStatisAtt(Statistic.ATTACK);
m640effectDamage_.setTargetDefense(true);
m640effectDamage_.setStatisDef(Statistic.DEFENSE);
m640effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m640effectDamage_.setFail(ES);
m640custListEffect_.add(m640effectDamage_);
m640damagingMoveData_.setEffects(m640custListEffect_);
m640damagingMoveData_.setRechargeRound(true);
m640damagingMoveData_.setConstUserChoice(true);
m640damagingMoveData_.setStoppableMoveSolo(true);
m640damagingMoveData_.setStoppableMoveMulti(true);
m640damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m640damagingMoveData_;
}
static MoveData m287(){
DamagingMoveData m641damagingMoveData_ = Instances.newDamagingMoveData();
m641damagingMoveData_.setCategory(I_SPECIALE);
m641damagingMoveData_.setStoppableMoveKoSingle(true);
m641damagingMoveData_.setPp((short)10);
StringList m641stringList_=new StringList(new CollCapacity(1));
m641stringList_.add(I_PLANTE);
m641damagingMoveData_.setTypes(m641stringList_);
m641stringList_=new StringList(new CollCapacity(1));
m641stringList_.add(I_PLANTE);
m641damagingMoveData_.setBoostedTypes(m641stringList_);
m641damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m641custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m641effectDamage_=Instances.newEffectDamage();
m641effectDamage_.setPower(R_75);
m641effectDamage_.setUserAttack(true);
m641effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m641effectDamage_.setTargetDefense(true);
m641effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m641effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m641effectDamage_.setFail(ES);
m641custListEffect_.add(m641effectDamage_);
EffectDamageRate m641effectDamageRate_=Instances.newEffectDamageRate();
m641effectDamageRate_.setRateDamage(Rate.newRate(R_1_2));
m641effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m641effectDamageRate_.setFail(ES);
Ints m641ints_=new Ints(new CollCapacity(1));
m641ints_.add(0);
m641effectDamageRate_.setRequiredSuccessfulEffects(m641ints_);
m641custListEffect_.add(m641effectDamageRate_);
m641damagingMoveData_.setEffects(m641custListEffect_);
m641damagingMoveData_.setStoppableMoveSolo(true);
m641damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m641damagingMoveData_;
}
static MoveData m288(){
StatusMoveData m642statusMoveData_ = Instances.newStatusMoveData();
m642statusMoveData_.setPp((short)5);
StringList m642stringList_=new StringList(new CollCapacity(1));
m642stringList_.add(I_GLACE);
m642statusMoveData_.setTypes(m642stringList_);
m642stringList_=new StringList(new CollCapacity(1));
m642stringList_.add(I_GLACE);
m642statusMoveData_.setBoostedTypes(m642stringList_);
m642statusMoveData_.setAccuracy(A_DIV+LP+A_MAX+LP+V_LANCEUR_NIVEAU+OD+V_CIBLE_NIVEAU+OC+R_0+RP+OC+R_100+RP);
CustList<Effect> m642custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectRemainedHpRate m642effectRemainedHpRate_=Instances.newEffectRemainedHpRate();
m642effectRemainedHpRate_.setRateHp(Rate.newRate(OD+R_1));
m642effectRemainedHpRate_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m642effectRemainedHpRate_.setFail(ES);
m642custListEffect_.add(m642effectRemainedHpRate_);
m642statusMoveData_.setEffects(m642custListEffect_);
m642statusMoveData_.setStoppableMoveSolo(true);
m642statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m642statusMoveData_;
}
static MoveData m289(){
StatusMoveData m643statusMoveData_ = Instances.newStatusMoveData();
m643statusMoveData_.setThievableMove(true);
m643statusMoveData_.setPp((short)5);
StringList m643stringList_=new StringList(new CollCapacity(1));
m643stringList_.add(I_NORMAL);
m643statusMoveData_.setTypes(m643stringList_);
m643stringList_=new StringList(new CollCapacity(1));
m643stringList_.add(I_NORMAL);
m643statusMoveData_.setBoostedTypes(m643stringList_);
m643statusMoveData_.setAccuracy(R_1);
CustList<Effect> m643custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m643effectStatus_=Instances.newEffectStatus();
m643stringList_=new StringList(new CollCapacity(13));
m643stringList_.add(I_POISON_GRAVE);
m643stringList_.add(I_PEUR);
m643stringList_.add(I_BRULURE);
m643stringList_.add(I_VAMPIGRAINE_ST);
m643stringList_.add(I_SIMPLE_POISON);
m643stringList_.add(I_GEL);
m643stringList_.add(I_AMOUR);
m643stringList_.add(I_SOMMEIL);
m643stringList_.add(I_SOMMEIL_REPOS);
m643stringList_.add(I_MAUDIT);
m643stringList_.add(I_CAUCHEMAR_ST);
m643stringList_.add(I_CONFUSION);
m643stringList_.add(I_PARALYSIE);
m643effectStatus_.setDeletedStatus(m643stringList_);
m643effectStatus_.setTargetChoice(TargetChoice.ALLIES);
m643effectStatus_.setFail(ES);
m643custListEffect_.add(m643effectStatus_);
m643statusMoveData_.setEffects(m643custListEffect_);
m643statusMoveData_.setStoppableMoveMulti(true);
m643statusMoveData_.setIgnVarAccurUserNeg(true);
m643statusMoveData_.setIgnVarEvasTargetPos(true);
m643statusMoveData_.setTargetChoice(TargetChoice.ALLIES);
return m643statusMoveData_;
}
static MoveData m290(){
StatusMoveData m644statusMoveData_ = Instances.newStatusMoveData();
m644statusMoveData_.setPp((short)20);
StringList m644stringList_=new StringList(new CollCapacity(1));
m644stringList_.add(I_COMBAT);
m644statusMoveData_.setTypes(m644stringList_);
m644stringList_=new StringList(new CollCapacity(1));
m644stringList_.add(I_COMBAT);
m644statusMoveData_.setBoostedTypes(m644stringList_);
m644statusMoveData_.setAccuracy(R_1);
CustList<Effect> m644custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m644effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m644enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(2));
m644enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
m644enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)1);
m644effectStatistic_.setStatisVarRank(m644enumMapStatisticByte_);
m644effectStatistic_.setEvtRate(Rate.newRate(R_1));
m644effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m644effectStatistic_.setFail(ES);
m644custListEffect_.add(m644effectStatistic_);
m644statusMoveData_.setEffects(m644custListEffect_);
m644statusMoveData_.setStoppableMoveMulti(true);
m644statusMoveData_.setIgnVarAccurUserNeg(true);
m644statusMoveData_.setIgnVarEvasTargetPos(true);
m644statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m644statusMoveData_;
}
static MoveData m291(){
StatusMoveData m645statusMoveData_ = Instances.newStatusMoveData();
m645statusMoveData_.setPp((short)5);
StringList m645stringList_=new StringList(new CollCapacity(1));
m645stringList_.add(I_PSY);
m645statusMoveData_.setTypes(m645stringList_);
m645stringList_=new StringList(new CollCapacity(1));
m645stringList_.add(I_PSY);
m645statusMoveData_.setBoostedTypes(m645stringList_);
m645statusMoveData_.setAccuracy(R_1);
CustList<Effect> m645custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectGlobal m645effectGlobal_=Instances.newEffectGlobal();
m645effectGlobal_.setMultAccuracy(Rate.newRate(R_8_5));
m645effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m645effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m645effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
TypesDuos m645objectMapTypesDuoRate_=new TypesDuos(new CollCapacity(1));
m645objectMapTypesDuoRate_.addEntry(new TypesDuo(I_SOL,I_VOL),Rate.newRate(R_1));
m645effectGlobal_.setEfficiencyMoves(m645objectMapTypesDuoRate_);
m645stringList_=new StringList(new CollCapacity(1));
m645stringList_.add(I_SOL);
m645effectGlobal_.setDisableImmuAgainstTypes(m645stringList_);
m645stringList_=new StringList(new CollCapacity(1));
m645stringList_.add(I_LEVITATION);
m645effectGlobal_.setCancelProtectingAbilities(m645stringList_);
m645stringList_=new StringList(new CollCapacity(7));
m645stringList_.add(I_ENVOL);
m645stringList_.add(I_REBOND);
m645stringList_.add(I_CHUTE_LIBRE);
m645stringList_.add(I_PIED_SAUTE);
m645stringList_.add(I_PIED_VOLTIGE);
m645stringList_.add(I_LEVIKINESIE);
m645stringList_.add(I_VOL_MAGNETIK);
m645effectGlobal_.setUnusableMoves(m645stringList_);
m645effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m645effectGlobal_.setInvokedMoveTerrain(ES);
m645effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m645effectGlobal_.setFail(ES);
m645custListEffect_.add(m645effectGlobal_);
m645statusMoveData_.setEffects(m645custListEffect_);
m645statusMoveData_.setRankIncrementNbRound((short)9);
m645statusMoveData_.setStoppableMoveMulti(true);
m645statusMoveData_.setIgnVarAccurUserNeg(true);
m645statusMoveData_.setIgnVarEvasTargetPos(true);
m645statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m645statusMoveData_;
}
static MoveData m292(){
StatusMoveData m646statusMoveData_ = Instances.newStatusMoveData();
m646statusMoveData_.setPp((short)10);
StringList m646stringList_=new StringList(new CollCapacity(1));
m646stringList_.add(I_GLACE);
m646statusMoveData_.setTypes(m646stringList_);
m646stringList_=new StringList(new CollCapacity(1));
m646stringList_.add(I_GLACE);
m646statusMoveData_.setBoostedTypes(m646stringList_);
m646statusMoveData_.setAccuracy(R_1);
CustList<Effect> m646custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m646effectGlobal_=Instances.newEffectGlobal();
m646effectGlobal_.setWeather(true);
m646effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m646stringList_=new StringList(new CollCapacity(1));
m646stringList_.add(I_GLACE);
m646effectGlobal_.setImmuneTypes(m646stringList_);
m646effectGlobal_.setDamageEndRound(Rate.newRate(R_1_16));
m646effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m646effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m646effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m646stringList_=new StringList(new CollCapacity(3));
m646stringList_.add(I_DANSE_PLUIE);
m646stringList_.add(I_TEMPETESABLE);
m646stringList_.add(I_ZENITH);
m646effectGlobal_.setCancelEffects(m646stringList_);
m646effectGlobal_.setInvokedMoveTerrain(ES);
m646effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m646effectGlobal_.setFail(ES);
m646custListEffect_.add(m646effectGlobal_);
EffectEndRoundGlobal m646effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m646effectEndRoundGlobal_.setFailEndRound(ES);
m646effectEndRoundGlobal_.setEndRoundRank(29);
m646effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m646effectEndRoundGlobal_.setFail(ES);
Ints m646ints_=new Ints(new CollCapacity(1));
m646ints_.add(0);
m646effectEndRoundGlobal_.setRequiredSuccessfulEffects(m646ints_);
m646custListEffect_.add(m646effectEndRoundGlobal_);
m646statusMoveData_.setEffects(m646custListEffect_);
m646statusMoveData_.setRankIncrementNbRound((short)27);
m646statusMoveData_.setStoppableMoveMulti(true);
m646statusMoveData_.setIgnVarAccurUserNeg(true);
m646statusMoveData_.setIgnVarEvasTargetPos(true);
m646statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m646statusMoveData_;
}
static MoveData m293(){
StatusMoveData m647statusMoveData_ = Instances.newStatusMoveData();
m647statusMoveData_.setPp((short)1);
StringList m647stringList_=new StringList(new CollCapacity(1));
m647stringList_.add(I_NORMAL);
m647statusMoveData_.setTypes(m647stringList_);
m647stringList_=new StringList(new CollCapacity(1));
m647stringList_.add(I_NORMAL);
m647statusMoveData_.setBoostedTypes(m647stringList_);
m647statusMoveData_.setAccuracy(R_1);
CustList<Effect> m647custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCopyMove m647effectCopyMove_=Instances.newEffectCopyMove();
m647effectCopyMove_.setCopyingMoveForUser((short)0);
m647effectCopyMove_.setCopyingMoveForUserDef(true);
m647stringList_=new StringList(new CollCapacity(2));
m647stringList_.add(I_GRIBOUILLE);
m647stringList_.add(I_LUTTE);
m647effectCopyMove_.setMovesNotToBeCopied(m647stringList_);
m647effectCopyMove_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m647effectCopyMove_.setFail(V_PAS_ATTAQUES_COPIABLES+OO+V_PAS_TOUR_TERRAIN);
m647custListEffect_.add(m647effectCopyMove_);
m647statusMoveData_.setEffects(m647custListEffect_);
m647statusMoveData_.setStoppableMoveSolo(true);
m647statusMoveData_.setIgnVarAccurUserNeg(true);
m647statusMoveData_.setIgnVarEvasTargetPos(true);
m647statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m647statusMoveData_;
}
static MoveData m294(){
DamagingMoveData m648damagingMoveData_ = Instances.newDamagingMoveData();
m648damagingMoveData_.setCategory(I_PHYSIQUE);
m648damagingMoveData_.setDirect(true);
m648damagingMoveData_.setStoppableMoveKoSingle(true);
m648damagingMoveData_.setPp((short)35);
StringList m648stringList_=new StringList(new CollCapacity(1));
m648stringList_.add(I_NORMAL);
m648damagingMoveData_.setTypes(m648stringList_);
m648stringList_=new StringList(new CollCapacity(1));
m648stringList_.add(I_NORMAL);
m648damagingMoveData_.setBoostedTypes(m648stringList_);
m648damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m648custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m648effectDamage_=Instances.newEffectDamage();
m648effectDamage_.setPower(R_40);
m648effectDamage_.setUserAttack(true);
m648effectDamage_.setStatisAtt(Statistic.ATTACK);
m648effectDamage_.setTargetDefense(true);
m648effectDamage_.setStatisDef(Statistic.DEFENSE);
m648effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m648effectDamage_.setFail(ES);
m648custListEffect_.add(m648effectDamage_);
m648damagingMoveData_.setEffects(m648custListEffect_);
m648damagingMoveData_.setStoppableMoveSolo(true);
m648damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m648damagingMoveData_;
}
static MoveData m295(){
DamagingMoveData m649damagingMoveData_ = Instances.newDamagingMoveData();
m649damagingMoveData_.setCategory(I_PHYSIQUE);
m649damagingMoveData_.setDirect(true);
m649damagingMoveData_.setStoppableMoveKoSingle(true);
m649damagingMoveData_.setPp((short)35);
StringList m649stringList_=new StringList(new CollCapacity(1));
m649stringList_.add(I_ACIER);
m649damagingMoveData_.setTypes(m649stringList_);
m649stringList_=new StringList(new CollCapacity(1));
m649stringList_.add(I_ACIER);
m649damagingMoveData_.setBoostedTypes(m649stringList_);
m649damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m649custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m649effectDamage_=Instances.newEffectDamage();
m649effectDamage_.setPower(R_50);
m649effectDamage_.setUserAttack(true);
m649effectDamage_.setStatisAtt(Statistic.ATTACK);
m649effectDamage_.setTargetDefense(true);
m649effectDamage_.setStatisDef(Statistic.DEFENSE);
m649effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m649effectDamage_.setFail(ES);
m649custListEffect_.add(m649effectDamage_);
EffectStatistic m649effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m649enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m649enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
m649effectStatistic_.setStatisVarRank(m649enumMapStatisticByte_);
m649effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m649effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m649effectStatistic_.setFail(ES);
Ints m649ints_=new Ints(new CollCapacity(1));
m649ints_.add(0);
m649effectStatistic_.setRequiredSuccessfulEffects(m649ints_);
m649custListEffect_.add(m649effectStatistic_);
m649damagingMoveData_.setEffects(m649custListEffect_);
m649damagingMoveData_.setStoppableMoveSolo(true);
m649damagingMoveData_.setStoppableMoveMulti(true);
m649damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m649damagingMoveData_;
}
static MoveData m296(){
DamagingMoveData m650damagingMoveData_ = Instances.newDamagingMoveData();
m650damagingMoveData_.setCategory(I_PHYSIQUE);
m650damagingMoveData_.setDirect(true);
m650damagingMoveData_.setStoppableMoveKoSingle(true);
m650damagingMoveData_.setPp((short)15);
StringList m650stringList_=new StringList(new CollCapacity(1));
m650stringList_.add(I_SPECTRE);
m650damagingMoveData_.setTypes(m650stringList_);
m650stringList_=new StringList(new CollCapacity(1));
m650stringList_.add(I_SPECTRE);
m650damagingMoveData_.setBoostedTypes(m650stringList_);
m650damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m650custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m650effectDamage_=Instances.newEffectDamage();
m650effectDamage_.setChRate((byte)1);
m650effectDamage_.setPower(R_95);
m650effectDamage_.setUserAttack(true);
m650effectDamage_.setStatisAtt(Statistic.ATTACK);
m650effectDamage_.setTargetDefense(true);
m650effectDamage_.setStatisDef(Statistic.DEFENSE);
m650effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m650effectDamage_.setFail(ES);
m650custListEffect_.add(m650effectDamage_);
m650damagingMoveData_.setEffects(m650custListEffect_);
m650damagingMoveData_.setStoppableMoveSolo(true);
m650damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m650damagingMoveData_;
}
static MoveData m297(){
StatusMoveData m651statusMoveData_ = Instances.newStatusMoveData();
m651statusMoveData_.setCounterableMove(true);
m651statusMoveData_.setPp((short)10);
StringList m651stringList_=new StringList(new CollCapacity(1));
m651stringList_.add(I_NORMAL);
m651statusMoveData_.setTypes(m651stringList_);
m651stringList_=new StringList(new CollCapacity(1));
m651stringList_.add(I_NORMAL);
m651statusMoveData_.setBoostedTypes(m651stringList_);
m651statusMoveData_.setAccuracy(R_1);
CustList<Effect> m651custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m651effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m651enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m651enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-2);
m651effectStatistic_.setStatisVarRank(m651enumMapStatisticByte_);
IdMap<Statistic,String> m651enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m651enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m651effectStatistic_.setLocalFailStatis(m651enumMapStatisticString_);
m651effectStatistic_.setEvtRate(Rate.newRate(R_1));
m651effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m651effectStatistic_.setFail(ES);
m651custListEffect_.add(m651effectStatistic_);
m651statusMoveData_.setEffects(m651custListEffect_);
m651statusMoveData_.setStoppableMoveSolo(true);
m651statusMoveData_.setStoppableMoveMulti(true);
m651statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m651statusMoveData_;
}
static MoveData m298(){
StatusMoveData m652statusMoveData_ = Instances.newStatusMoveData();
m652statusMoveData_.setCounterableMove(true);
m652statusMoveData_.setPp((short)40);
StringList m652stringList_=new StringList(new CollCapacity(1));
m652stringList_.add(I_NORMAL);
m652statusMoveData_.setTypes(m652stringList_);
m652stringList_=new StringList(new CollCapacity(1));
m652stringList_.add(I_NORMAL);
m652statusMoveData_.setBoostedTypes(m652stringList_);
m652statusMoveData_.setAccuracy(R_17_20);
CustList<Effect> m652custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m652effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m652enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m652enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-2);
m652effectStatistic_.setStatisVarRank(m652enumMapStatisticByte_);
IdMap<Statistic,String> m652enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m652enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m652effectStatistic_.setLocalFailStatis(m652enumMapStatisticString_);
m652effectStatistic_.setEvtRate(Rate.newRate(R_1));
m652effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m652effectStatistic_.setFail(ES);
m652custListEffect_.add(m652effectStatistic_);
m652statusMoveData_.setEffects(m652custListEffect_);
m652statusMoveData_.setStoppableMoveSolo(true);
m652statusMoveData_.setStoppableMoveMulti(true);
m652statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m652statusMoveData_;
}
static MoveData m299(){
StatusMoveData m653statusMoveData_ = Instances.newStatusMoveData();
m653statusMoveData_.setCounterableMove(true);
m653statusMoveData_.setPp((short)10);
StringList m653stringList_=new StringList(new CollCapacity(1));
m653stringList_.add(I_NORMAL);
m653statusMoveData_.setTypes(m653stringList_);
m653stringList_=new StringList(new CollCapacity(1));
m653stringList_.add(I_NORMAL);
m653statusMoveData_.setBoostedTypes(m653stringList_);
m653statusMoveData_.setAccuracy(R_3_4);
CustList<Effect> m653custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m653effectStatus_=Instances.newEffectStatus();
MonteCarloString m653monteCarloString_=new MonteCarloString(new CollCapacity(1));
m653monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m653effectStatus_.setLawStatus(m653monteCarloString_);
StringMap<String> m653stringMapString_=new StringMap<String>(new CollCapacity(1));
m653stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m653effectStatus_.setLocalFailStatus(m653stringMapString_);
m653effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m653effectStatus_.setFail(ES);
m653custListEffect_.add(m653effectStatus_);
m653statusMoveData_.setEffects(m653custListEffect_);
m653statusMoveData_.setStoppableMoveSolo(true);
m653statusMoveData_.setStoppableMoveMulti(true);
m653statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m653statusMoveData_;
}
}
