package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit12{
private MvInit12(){}
static MoveData m300(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)40);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m301(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)30);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.DEFENSE,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return statusMoveData_;
}
static MoveData m302(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("div(max(VAR__LANCEUR_NIVEAU-VAR__CIBLE_NIVEAU,0),100)");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectRemainedHpRate effectRemainedHpRate_=Instances.newEffectRemainedHpRate();
effectRemainedHpRate_.setRateHp(Rate.newRate("-1"));
effectRemainedHpRate_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectRemainedHpRate_.setFail("");
custListEffect_.add(effectRemainedHpRate_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return statusMoveData_;
}
static MoveData m303(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ACIER");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ACIER");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("1+25*div(VAR__CIBLE_STATIS__SPEED,VAR__LANCEUR_STATIS__SPEED)");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return damagingMoveData_;
}
static MoveData m304(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes effectSwitchTypes_=Instances.newEffectSwitchTypes();
effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
effectSwitchTypes_.setExchangeTypes(ExchangeType.NOTHING);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
effectSwitchTypes_.setAddedTypes(stringList_);
effectSwitchTypes_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectSwitchTypes_.setFail("cardinal(inter({VAR__CIBLE_TYPES},{SPECTRE}))=1");
custListEffect_.add(effectSwitchTypes_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return statusMoveData_;
}
static MoveData m305(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SPECTRE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("90");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setNbPrepaRound((short)1);
damagingMoveData_.setDisappearBeforeUse(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m306(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("INSECTE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("INSECTE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("20");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectEndRoundSingleRelation effectEndRoundSingleRelation_=Instances.newEffectEndRoundSingleRelation();
LongMap<Rate> longMapRate_=new LongMap<Rate>(new CollCapacity(5));
longMapRate_.addEntry(1L,Rate.newRate("1/8"));
longMapRate_.addEntry(2L,Rate.newRate("1/8"));
longMapRate_.addEntry(3L,Rate.newRate("1/8"));
longMapRate_.addEntry(4L,Rate.newRate("1/8"));
longMapRate_.addEntry(5L,Rate.newRate("1/8"));
effectEndRoundSingleRelation_.setRateDamageFunctionOfNbRounds(longMapRate_);
MonteCarloNumber monteCarloNumber_=new MonteCarloNumber(new CollCapacity(4));
monteCarloNumber_.addQuickEvent(Rate.newRate("3"),LgInt.newLgInt("3"));
monteCarloNumber_.addQuickEvent(Rate.newRate("2"),LgInt.newLgInt("3"));
monteCarloNumber_.addQuickEvent(Rate.newRate("4"),LgInt.newLgInt("1"));
monteCarloNumber_.addQuickEvent(Rate.newRate("5"),LgInt.newLgInt("1"));
effectEndRoundSingleRelation_.setLawForEnablingEffect(monteCarloNumber_);
effectEndRoundSingleRelation_.setFailEndRound("VAR__CIBLE_CLONE>0");
effectEndRoundSingleRelation_.setEndRoundRank(46);
effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectEndRoundSingleRelation_.setFail("VAR__CIBLE_CLONE>0");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectEndRoundSingleRelation_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectEndRoundSingleRelation_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m307(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setThievableMove(true);
statusMoveData_.setPp((short)30);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)2);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return statusMoveData_;
}
static MoveData m308(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setCannotKo(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)40);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("40");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m309(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setPriority((byte)-6);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("55");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMovePrio(true);
damagingMoveData_.setSwitchType(SwitchType.CIBLE);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m310(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("DRAGON");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("150");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setRechargeRound(true);
damagingMoveData_.setConstUserChoice(true);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m311(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("150");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setRechargeRound(true);
damagingMoveData_.setConstUserChoice(true);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m312(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("120");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m313(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("90");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m314(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("TENEBRE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("TENEBRE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("100");
EnumList<Statistic> enumListStatistic_=new EnumList<Statistic>(new CollCapacity(1));
enumListStatistic_.add(Statistic.EVASINESS);
effectDamage_.setIgnVarStatTargetPos(enumListStatistic_);
enumListStatistic_=new EnumList<Statistic>(new CollCapacity(1));
enumListStatistic_.add(Statistic.ACCURACY);
effectDamage_.setIgnVarStatUserNeg(enumListStatistic_);
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setIgnVarAccurUserNeg(true);
damagingMoveData_.setIgnVarEvasTargetPos(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m315(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("3/5");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(1));
monteCarloString_.addQuickEvent("SOMMEIL",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("SOMMEIL","cardinal(inter({VAR__CIBLE_STATUTS},{SOMMEIL;SOMMEIL_REPOS}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
custListEffect_.add(effectStatus_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return statusMoveData_;
}
static MoveData m316(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)10);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchAbilities effectSwitchAbilities_=Instances.newEffectSwitchAbilities();
effectSwitchAbilities_.setExchangeAbility(ExchangeType.GIVE_TO_THROWER);
effectSwitchAbilities_.setConstAbility("");
effectSwitchAbilities_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
effectSwitchAbilities_.setFail("");
custListEffect_.add(effectSwitchAbilities_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return statusMoveData_;
}
static MoveData m317(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setDirect(true);
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)40);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("60");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectSwitchItems effectSwitchItems_=Instances.newEffectSwitchItems();
effectSwitchItems_.setMoveObject(MoveItemType.TAKE_OBJET);
effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_MULT);
effectSwitchItems_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectSwitchItems_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectSwitchItems_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m318(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("FEU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("FEU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("100");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("BRULURE",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("BRULURE","cardinal(inter({VAR__CIBLE_STATUTS},{BRULURE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{FEU}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setNbPrepaRound((short)1);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
static MoveData m319(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("PSY");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setPriority((byte)1);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchPosition effectSwitchPosition_=Instances.newEffectSwitchPosition();
effectSwitchPosition_.setTargetChoice(TargetChoice.ALLIE);
effectSwitchPosition_.setFail("VAR__PAS_PARTENAIRE_TERRAIN");
custListEffect_.add(effectSwitchPosition_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setStoppableMovePrio(true);
statusMoveData_.setIgnVarAccurUserNeg(true);
statusMoveData_.setIgnVarEvasTargetPos(true);
statusMoveData_.setTargetChoice(TargetChoice.ALLIE);
return statusMoveData_;
}
static MoveData m320(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)30);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(1));
monteCarloString_.addQuickEvent("PARALYSIE",LgInt.newLgInt("1"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("PARALYSIE","cardinal(inter({VAR__CIBLE_STATUTS},{PARALYSIE}))>0|VAR__CIBLE_CLONE>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
effectStatus_.setFail("");
custListEffect_.add(effectStatus_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return statusMoveData_;
}
static MoveData m321(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)20);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("NORMAL");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("40");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectWinMoney effectWinMoney_=Instances.newEffectWinMoney();
effectWinMoney_.setWinningRateBySumTargetUser(Rate.newRate("40"));
effectWinMoney_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectWinMoney_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectWinMoney_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectWinMoney_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m322(){
StatusMoveData statusMoveData_ = Instances.newStatusMoveData();
statusMoveData_.setCounterableMove(true);
statusMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("SOL");
statusMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("SOL");
statusMoveData_.setBoostedTypes(stringList_);
statusMoveData_.setAccuracy("1");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
enumMapStatisticByte_.addEntry(Statistic.ACCURACY,(byte)-1);
effectStatistic_.setStatisVarRank(enumMapStatisticByte_);
EnumMap<Statistic,String> enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
enumMapStatisticString_.addEntry(Statistic.ACCURACY,"VAR__CIBLE_CLONE>0");
effectStatistic_.setLocalFailStatis(enumMapStatisticString_);
effectStatistic_.setEvtRate(Rate.newRate("1"));
effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
effectStatistic_.setFail("");
custListEffect_.add(effectStatistic_);
statusMoveData_.setEffects(custListEffect_);
statusMoveData_.setStoppableMoveSolo(true);
statusMoveData_.setStoppableMoveMulti(true);
statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return statusMoveData_;
}
static MoveData m323(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("SPECIALE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)5);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("EAU");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("19/20");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("110");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
EffectStatus effectStatus_=Instances.newEffectStatus();
MonteCarloString monteCarloString_=new MonteCarloString(new CollCapacity(2));
monteCarloString_.addQuickEvent("",LgInt.newLgInt("7"));
monteCarloString_.addQuickEvent("BRULURE",LgInt.newLgInt("3"));
effectStatus_.setLawStatus(monteCarloString_);
StringMap<String> stringMapString_=new StringMap<String>(new CollCapacity(1));
stringMapString_.addEntry("BRULURE","cardinal(inter({VAR__CIBLE_STATUTS},{BRULURE}))>0|VAR__CIBLE_CLONE>0|cardinal(inter({VAR__CIBLE_TYPES},{FEU}))>0");
effectStatus_.setLocalFailStatus(stringMapString_);
effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
effectStatus_.setFail("");
Ints ints_=new Ints(new CollCapacity(1));
ints_.add(0);
effectStatus_.setRequiredSuccessfulEffects(ints_);
custListEffect_.add(effectStatus_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return damagingMoveData_;
}
static MoveData m324(){
DamagingMoveData damagingMoveData_ = Instances.newDamagingMoveData();
damagingMoveData_.setCategory("PHYSIQUE");
damagingMoveData_.setStoppableMoveKoSingle(true);
damagingMoveData_.setPp((short)15);
StringList stringList_=new StringList(new CollCapacity(1));
stringList_.add("ROCHE");
damagingMoveData_.setTypes(stringList_);
stringList_=new StringList(new CollCapacity(1));
stringList_.add("ROCHE");
damagingMoveData_.setBoostedTypes(stringList_);
damagingMoveData_.setAccuracy("9/10");
CustList<Effect> custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage effectDamage_=Instances.newEffectDamage();
effectDamage_.setPower("50");
effectDamage_.setUserAttack(true);
effectDamage_.setStatisAtt(Statistic.ATTACK);
effectDamage_.setTargetDefense(true);
effectDamage_.setStatisDef(Statistic.DEFENSE);
effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
effectDamage_.setFail("");
custListEffect_.add(effectDamage_);
damagingMoveData_.setEffects(custListEffect_);
damagingMoveData_.setStoppableMoveSolo(true);
damagingMoveData_.setStoppableMoveMulti(true);
damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return damagingMoveData_;
}
}
