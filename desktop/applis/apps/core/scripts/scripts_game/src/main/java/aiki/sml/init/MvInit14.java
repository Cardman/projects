package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit14 extends CstIgame{
private MvInit14(){}
static MoveData m350(){
StatusMoveData m710statusMoveData_ = Instances.newStatusMoveData();
m710statusMoveData_.setThievableMove(true);
m710statusMoveData_.setPp((short)20);
StringList m710stringList_=new StringList(new CollCapacity(1));
m710stringList_.add(I_TENEBRE);
m710statusMoveData_.setTypes(m710stringList_);
m710stringList_=new StringList(new CollCapacity(1));
m710stringList_.add(I_TENEBRE);
m710statusMoveData_.setBoostedTypes(m710stringList_);
m710statusMoveData_.setAccuracy(R_1);
CustList<Effect> m710custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m710effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m710enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m710enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)2);
m710effectStatistic_.setStatisVarRank(m710enumMapStatisticByte_);
m710effectStatistic_.setEvtRate(Rate.newRate(R_1));
m710effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m710effectStatistic_.setFail(ES);
m710custListEffect_.add(m710effectStatistic_);
m710statusMoveData_.setEffects(m710custListEffect_);
m710statusMoveData_.setStoppableMoveMulti(true);
m710statusMoveData_.setIgnVarAccurUserNeg(true);
m710statusMoveData_.setIgnVarEvasTargetPos(true);
m710statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m710statusMoveData_;
}
static MoveData m351(){
DamagingMoveData m711damagingMoveData_ = Instances.newDamagingMoveData();
m711damagingMoveData_.setCategory(I_PHYSIQUE);
m711damagingMoveData_.setDirect(true);
m711damagingMoveData_.setStoppableMoveKoSingle(true);
m711damagingMoveData_.setPp((short)15);
StringList m711stringList_=new StringList(new CollCapacity(1));
m711stringList_.add(I_TENEBRE);
m711damagingMoveData_.setTypes(m711stringList_);
m711stringList_=new StringList(new CollCapacity(1));
m711stringList_.add(I_TENEBRE);
m711damagingMoveData_.setBoostedTypes(m711stringList_);
m711damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m711custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m711effectDamage_=Instances.newEffectDamage();
m711effectDamage_.setPower(R_80);
m711effectDamage_.setUserAttack(true);
m711effectDamage_.setStatisAtt(Statistic.ATTACK);
m711effectDamage_.setTargetDefense(true);
m711effectDamage_.setStatisDef(Statistic.DEFENSE);
m711effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m711effectDamage_.setFail(ES);
m711custListEffect_.add(m711effectDamage_);
EffectStatistic m711effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m711enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m711enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
m711effectStatistic_.setStatisVarRank(m711enumMapStatisticByte_);
EnumMap<Statistic,String> m711enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m711enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m711effectStatistic_.setLocalFailStatis(m711enumMapStatisticString_);
m711effectStatistic_.setEvtRate(Rate.newRate(R_1_5));
m711effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m711effectStatistic_.setFail(ES);
Ints m711ints_=new Ints(new CollCapacity(1));
m711ints_.add(0);
m711effectStatistic_.setRequiredSuccessfulEffects(m711ints_);
m711custListEffect_.add(m711effectStatistic_);
m711damagingMoveData_.setEffects(m711custListEffect_);
m711damagingMoveData_.setStoppableMoveSolo(true);
m711damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m711damagingMoveData_;
}
static MoveData m352(){
DamagingMoveData m712damagingMoveData_ = Instances.newDamagingMoveData();
m712damagingMoveData_.setCategory(I_PHYSIQUE);
m712damagingMoveData_.setDirect(true);
m712damagingMoveData_.setStoppableMoveKoSingle(true);
m712damagingMoveData_.setPp((short)30);
StringList m712stringList_=new StringList(new CollCapacity(1));
m712stringList_.add(I_COMBAT);
m712damagingMoveData_.setTypes(m712stringList_);
m712stringList_=new StringList(new CollCapacity(1));
m712stringList_.add(I_COMBAT);
m712damagingMoveData_.setBoostedTypes(m712stringList_);
m712damagingMoveData_.setPriority((byte)1);
m712damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m712custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m712effectDamage_=Instances.newEffectDamage();
m712effectDamage_.setPower(R_40);
m712effectDamage_.setUserAttack(true);
m712effectDamage_.setStatisAtt(Statistic.ATTACK);
m712effectDamage_.setTargetDefense(true);
m712effectDamage_.setStatisDef(Statistic.DEFENSE);
m712effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m712effectDamage_.setFail(ES);
m712custListEffect_.add(m712effectDamage_);
m712damagingMoveData_.setEffects(m712custListEffect_);
m712damagingMoveData_.setStoppableMoveSolo(true);
m712damagingMoveData_.setStoppableMovePrio(true);
m712damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m712damagingMoveData_;
}
static MoveData m353(){
StatusMoveData m713statusMoveData_ = Instances.newStatusMoveData();
m713statusMoveData_.setPp((short)20);
StringList m713stringList_=new StringList(new CollCapacity(1));
m713stringList_.add(I_ELECTRIQUE);
m713statusMoveData_.setTypes(m713stringList_);
m713stringList_=new StringList(new CollCapacity(1));
m713stringList_.add(I_ELECTRIQUE);
m713statusMoveData_.setBoostedTypes(m713stringList_);
m713statusMoveData_.setAccuracy(R_1);
CustList<Effect> m713custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m713effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m713enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(2));
m713enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)1);
m713enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)1);
m713effectStatistic_.setStatisVarRank(m713enumMapStatisticByte_);
m713effectStatistic_.setEvtRate(Rate.newRate(R_1));
m713effectStatistic_.setTargetChoice(TargetChoice.ALLIES);
m713effectStatistic_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_CAPACITE+RB+OC+LB+I_PLUS+OS+I_MINUS+RB+RP+RP+OE+R_0);
m713custListEffect_.add(m713effectStatistic_);
m713statusMoveData_.setEffects(m713custListEffect_);
m713statusMoveData_.setIgnVarAccurUserNeg(true);
m713statusMoveData_.setIgnVarEvasTargetPos(true);
m713statusMoveData_.setTargetChoice(TargetChoice.ALLIES);
return m713statusMoveData_;
}
static MoveData m354(){
StatusMoveData m714statusMoveData_ = Instances.newStatusMoveData();
m714statusMoveData_.setPp((short)10);
StringList m714stringList_=new StringList(new CollCapacity(1));
m714stringList_.add(I_NORMAL);
m714statusMoveData_.setTypes(m714stringList_);
m714stringList_=new StringList(new CollCapacity(1));
m714stringList_.add(I_NORMAL);
m714statusMoveData_.setBoostedTypes(m714stringList_);
m714statusMoveData_.setAccuracy(R_1);
CustList<Effect> m714custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m714effectInvoke_=Instances.newEffectInvoke();
StringMap<String> m714stringMapString_=new StringMap<String>(new CollCapacity(2));
m714stringMapString_.addEntry(ES,I_MALEDICTION_1);
m714stringMapString_.addEntry(I_SPECTRE,I_MALEDICTION_2);
m714effectInvoke_.setInvokingMoveByUserTypes(m714stringMapString_);
m714effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m714effectInvoke_.setFail(ES);
m714custListEffect_.add(m714effectInvoke_);
m714statusMoveData_.setEffects(m714custListEffect_);
m714statusMoveData_.setStoppableMoveSolo(true);
m714statusMoveData_.setIgnVarAccurUserNeg(true);
m714statusMoveData_.setIgnVarEvasTargetPos(true);
m714statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m714statusMoveData_;
}
static MoveData m355(){
StatusMoveData m715statusMoveData_ = Instances.newStatusMoveData();
m715statusMoveData_.setPp((short)10);
StringList m715stringList_=new StringList(new CollCapacity(1));
m715stringList_.add(I_NORMAL);
m715statusMoveData_.setTypes(m715stringList_);
m715stringList_=new StringList(new CollCapacity(1));
m715stringList_.add(I_NORMAL);
m715statusMoveData_.setBoostedTypes(m715stringList_);
m715statusMoveData_.setAccuracy(R_1);
CustList<Effect> m715custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m715effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m715enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(3));
m715enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)1);
m715enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)1);
m715enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-1);
m715effectStatistic_.setStatisVarRank(m715enumMapStatisticByte_);
m715effectStatistic_.setEvtRate(Rate.newRate(R_1));
m715effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m715effectStatistic_.setFail(ES);
m715custListEffect_.add(m715effectStatistic_);
m715statusMoveData_.setEffects(m715custListEffect_);
m715statusMoveData_.setStoppableMoveMulti(true);
m715statusMoveData_.setIgnVarAccurUserNeg(true);
m715statusMoveData_.setIgnVarEvasTargetPos(true);
m715statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m715statusMoveData_;
}
static MoveData m356(){
StatusMoveData m716statusMoveData_ = Instances.newStatusMoveData();
m716statusMoveData_.setPp((short)10);
StringList m716stringList_=new StringList(new CollCapacity(1));
m716stringList_.add(I_NORMAL);
m716statusMoveData_.setTypes(m716stringList_);
m716stringList_=new StringList(new CollCapacity(1));
m716stringList_.add(I_NORMAL);
m716statusMoveData_.setBoostedTypes(m716stringList_);
m716statusMoveData_.setAccuracy(R_1);
CustList<Effect> m716custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectFullHpRate m716effectFullHpRate_=Instances.newEffectFullHpRate();
m716effectFullHpRate_.setLeftUserHp(Rate.newRate(R_1_2));
m716effectFullHpRate_.setRestoredHp(ES);
m716effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m716effectFullHpRate_.setFail(ES);
m716custListEffect_.add(m716effectFullHpRate_);
EffectStatus m716effectStatus_=Instances.newEffectStatus();
MonteCarloString m716monteCarloString_=new MonteCarloString(new CollCapacity(1));
m716monteCarloString_.addQuickEvent(I_MAUDIT,LgInt.newLgInt(R_1));
m716effectStatus_.setLawStatus(m716monteCarloString_);
StringMap<String> m716stringMapString_=new StringMap<String>(new CollCapacity(1));
m716stringMapString_.addEntry(I_MAUDIT,V_CIBLE_POSSEDE_STATUT_RELATION+SE+I_MAUDIT+OO+V_CIBLE_CLONE+GT+R_0);
m716effectStatus_.setLocalFailStatus(m716stringMapString_);
m716effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m716effectStatus_.setFail(ES);
m716custListEffect_.add(m716effectStatus_);
m716statusMoveData_.setEffects(m716custListEffect_);
m716statusMoveData_.setStoppableMoveMulti(true);
m716statusMoveData_.setIgnVarAccurUserNeg(true);
m716statusMoveData_.setIgnVarEvasTargetPos(true);
m716statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m716statusMoveData_;
}
static MoveData m357(){
StatusMoveData m717statusMoveData_ = Instances.newStatusMoveData();
m717statusMoveData_.setPp((short)20);
StringList m717stringList_=new StringList(new CollCapacity(1));
m717stringList_.add(I_PLANTE);
m717statusMoveData_.setTypes(m717stringList_);
m717stringList_=new StringList(new CollCapacity(1));
m717stringList_.add(I_PLANTE);
m717statusMoveData_.setBoostedTypes(m717stringList_);
m717statusMoveData_.setAccuracy(R_1);
CustList<Effect> m717custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes m717effectSwitchTypes_=Instances.newEffectSwitchTypes();
m717effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
m717effectSwitchTypes_.setExchangeTypes(ExchangeType.NOTHING);
m717stringList_=new StringList(new CollCapacity(1));
m717stringList_.add(I_PLANTE);
m717effectSwitchTypes_.setAddedTypes(m717stringList_);
m717effectSwitchTypes_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m717effectSwitchTypes_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_PLANTE+RB+RP+RP+OE+R_1);
m717custListEffect_.add(m717effectSwitchTypes_);
m717statusMoveData_.setEffects(m717custListEffect_);
m717statusMoveData_.setStoppableMoveSolo(true);
m717statusMoveData_.setIgnVarAccurUserNeg(true);
m717statusMoveData_.setIgnVarEvasTargetPos(true);
m717statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m717statusMoveData_;
}
static MoveData m358(){
DamagingMoveData m718damagingMoveData_ = Instances.newDamagingMoveData();
m718damagingMoveData_.setCategory(I_PHYSIQUE);
m718damagingMoveData_.setDirect(true);
m718damagingMoveData_.setStoppableMoveKoSingle(true);
m718damagingMoveData_.setPp((short)20);
StringList m718stringList_=new StringList(new CollCapacity(1));
m718stringList_.add(I_NORMAL);
m718damagingMoveData_.setTypes(m718stringList_);
m718stringList_=new StringList(new CollCapacity(1));
m718stringList_.add(I_NORMAL);
m718damagingMoveData_.setBoostedTypes(m718stringList_);
m718damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m718custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m718effectDamage_=Instances.newEffectDamage();
m718effectDamage_.setPower(R_120);
m718effectDamage_.setUserAttack(true);
m718effectDamage_.setStatisAtt(Statistic.ATTACK);
m718effectDamage_.setTargetDefense(true);
m718effectDamage_.setStatisDef(Statistic.DEFENSE);
m718effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m718effectDamage_.setFail(ES);
m718custListEffect_.add(m718effectDamage_);
m718damagingMoveData_.setEffects(m718custListEffect_);
m718damagingMoveData_.setRankIncrementNbRound((short)17);
m718damagingMoveData_.setConstUserChoice(true);
m718damagingMoveData_.setStoppableMoveSolo(true);
m718damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m718damagingMoveData_;
}
static MoveData m359(){
DamagingMoveData m719damagingMoveData_ = Instances.newDamagingMoveData();
m719damagingMoveData_.setCategory(I_PHYSIQUE);
m719damagingMoveData_.setDirect(true);
m719damagingMoveData_.setStoppableMoveKoSingle(true);
m719damagingMoveData_.setPp((short)15);
StringList m719stringList_=new StringList(new CollCapacity(1));
m719stringList_.add(I_PLANTE);
m719damagingMoveData_.setTypes(m719stringList_);
m719stringList_=new StringList(new CollCapacity(1));
m719stringList_.add(I_PLANTE);
m719damagingMoveData_.setBoostedTypes(m719stringList_);
m719damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m719custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m719effectDamage_=Instances.newEffectDamage();
m719effectDamage_.setPower(R_120);
m719effectDamage_.setUserAttack(true);
m719effectDamage_.setStatisAtt(Statistic.ATTACK);
m719effectDamage_.setTargetDefense(true);
m719effectDamage_.setStatisDef(Statistic.DEFENSE);
m719effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m719effectDamage_.setFail(ES);
m719custListEffect_.add(m719effectDamage_);
EffectDamageRate m719effectDamageRate_=Instances.newEffectDamageRate();
m719effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_3));
m719effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m719effectDamageRate_.setFail(ES);
Ints m719ints_=new Ints(new CollCapacity(1));
m719ints_.add(0);
m719effectDamageRate_.setRequiredSuccessfulEffects(m719ints_);
m719custListEffect_.add(m719effectDamageRate_);
m719damagingMoveData_.setEffects(m719custListEffect_);
m719damagingMoveData_.setStoppableMoveSolo(true);
m719damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m719damagingMoveData_;
}
static MoveData m360(){
DamagingMoveData m720damagingMoveData_ = Instances.newDamagingMoveData();
m720damagingMoveData_.setCategory(I_PHYSIQUE);
m720damagingMoveData_.setDirect(true);
m720damagingMoveData_.setStoppableMoveKoSingle(true);
m720damagingMoveData_.setPp((short)10);
StringList m720stringList_=new StringList(new CollCapacity(1));
m720stringList_.add(I_COMBAT);
m720damagingMoveData_.setTypes(m720stringList_);
m720stringList_=new StringList(new CollCapacity(1));
m720stringList_.add(I_COMBAT);
m720damagingMoveData_.setBoostedTypes(m720stringList_);
m720damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m720custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m720effectDamage_=Instances.newEffectDamage();
m720effectDamage_.setPower(R_100);
m720effectDamage_.setUserAttack(true);
m720effectDamage_.setStatisAtt(Statistic.ATTACK);
m720effectDamage_.setTargetDefense(true);
m720effectDamage_.setStatisDef(Statistic.DEFENSE);
m720effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m720effectDamage_.setFail(ES);
m720custListEffect_.add(m720effectDamage_);
EffectStatistic m720effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m720enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m720enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-1);
m720effectStatistic_.setStatisVarRank(m720enumMapStatisticByte_);
EnumMap<Statistic,String> m720enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m720enumMapStatisticString_.addEntry(Statistic.SPEED,V_LANCEUR_CLONE+GT+R_0);
m720effectStatistic_.setLocalFailStatis(m720enumMapStatisticString_);
m720effectStatistic_.setEvtRate(Rate.newRate(R_1));
m720effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m720effectStatistic_.setFail(ES);
Ints m720ints_=new Ints(new CollCapacity(1));
m720ints_.add(0);
m720effectStatistic_.setRequiredSuccessfulEffects(m720ints_);
m720custListEffect_.add(m720effectStatistic_);
m720damagingMoveData_.setEffects(m720custListEffect_);
m720damagingMoveData_.setStoppableMoveSolo(true);
m720damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m720damagingMoveData_;
}
static MoveData m361(){
DamagingMoveData m721damagingMoveData_ = Instances.newDamagingMoveData();
m721damagingMoveData_.setCategory(I_PHYSIQUE);
m721damagingMoveData_.setStoppableMoveKoSingle(true);
m721damagingMoveData_.setPp((short)20);
StringList m721stringList_=new StringList(new CollCapacity(1));
m721stringList_.add(I_SOL);
m721damagingMoveData_.setTypes(m721stringList_);
m721stringList_=new StringList(new CollCapacity(1));
m721stringList_.add(I_SOL);
m721damagingMoveData_.setBoostedTypes(m721stringList_);
m721damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m721custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m721effectDamage_=Instances.newEffectDamage();
m721effectDamage_.setPower(R_65);
m721effectDamage_.setUserAttack(true);
m721effectDamage_.setStatisAtt(Statistic.ATTACK);
m721effectDamage_.setTargetDefense(true);
m721effectDamage_.setStatisDef(Statistic.DEFENSE);
m721effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m721effectDamage_.setFail(ES);
m721custListEffect_.add(m721effectDamage_);
EffectStatus m721effectStatus_=Instances.newEffectStatus();
MonteCarloString m721monteCarloString_=new MonteCarloString(new CollCapacity(2));
m721monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m721monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m721effectStatus_.setLawStatus(m721monteCarloString_);
StringMap<String> m721stringMapString_=new StringMap<String>(new CollCapacity(1));
m721stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m721effectStatus_.setLocalFailStatus(m721stringMapString_);
m721effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m721effectStatus_.setFail(ES);
Ints m721ints_=new Ints(new CollCapacity(1));
m721ints_.add(0);
m721effectStatus_.setRequiredSuccessfulEffects(m721ints_);
m721custListEffect_.add(m721effectStatus_);
m721damagingMoveData_.setEffects(m721custListEffect_);
m721damagingMoveData_.setStoppableMoveSolo(true);
m721damagingMoveData_.setStoppableMoveMulti(true);
m721damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m721damagingMoveData_;
}
static MoveData m362(){
DamagingMoveData m722damagingMoveData_ = Instances.newDamagingMoveData();
m722damagingMoveData_.setCategory(I_PHYSIQUE);
m722damagingMoveData_.setDirect(true);
m722damagingMoveData_.setStoppableMoveKoSingle(true);
m722damagingMoveData_.setPp((short)15);
StringList m722stringList_=new StringList(new CollCapacity(1));
m722stringList_.add(I_COMBAT);
m722damagingMoveData_.setTypes(m722stringList_);
m722stringList_=new StringList(new CollCapacity(1));
m722stringList_.add(I_COMBAT);
m722damagingMoveData_.setBoostedTypes(m722stringList_);
m722damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m722custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m722effectDamage_=Instances.newEffectDamage();
m722effectDamage_.setPower(R_60);
m722effectDamage_.setUserAttack(true);
m722effectDamage_.setStatisAtt(Statistic.ATTACK);
m722effectDamage_.setTargetDefense(true);
m722effectDamage_.setStatisDef(Statistic.DEFENSE);
m722effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m722effectDamage_.setFail(ES);
m722custListEffect_.add(m722effectDamage_);
EffectStatus m722effectStatus_=Instances.newEffectStatus();
MonteCarloString m722monteCarloString_=new MonteCarloString(new CollCapacity(2));
m722monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m722monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m722effectStatus_.setLawStatus(m722monteCarloString_);
StringMap<String> m722stringMapString_=new StringMap<String>(new CollCapacity(1));
m722stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m722effectStatus_.setLocalFailStatus(m722stringMapString_);
m722effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m722effectStatus_.setFail(ES);
Ints m722ints_=new Ints(new CollCapacity(1));
m722ints_.add(0);
m722effectStatus_.setRequiredSuccessfulEffects(m722ints_);
m722custListEffect_.add(m722effectStatus_);
m722damagingMoveData_.setEffects(m722custListEffect_);
m722damagingMoveData_.setStoppableMoveSolo(true);
m722damagingMoveData_.setStoppableMoveMulti(true);
m722damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m722damagingMoveData_;
}
static MoveData m363(){
DamagingMoveData m723damagingMoveData_ = Instances.newDamagingMoveData();
m723damagingMoveData_.setCategory(I_PHYSIQUE);
m723damagingMoveData_.setDirect(true);
m723damagingMoveData_.setStoppableMoveKoSingle(true);
m723damagingMoveData_.setPp((short)10);
StringList m723stringList_=new StringList(new CollCapacity(1));
m723stringList_.add(I_INSECTE);
m723damagingMoveData_.setTypes(m723stringList_);
m723stringList_=new StringList(new CollCapacity(1));
m723stringList_.add(I_INSECTE);
m723damagingMoveData_.setBoostedTypes(m723stringList_);
m723damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m723custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m723effectDamage_=Instances.newEffectDamage();
m723effectDamage_.setPower(R_120);
m723effectDamage_.setUserAttack(true);
m723effectDamage_.setStatisAtt(Statistic.ATTACK);
m723effectDamage_.setTargetDefense(true);
m723effectDamage_.setStatisDef(Statistic.DEFENSE);
m723effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m723effectDamage_.setFail(ES);
m723custListEffect_.add(m723effectDamage_);
m723damagingMoveData_.setEffects(m723custListEffect_);
m723damagingMoveData_.setStoppableMoveSolo(true);
m723damagingMoveData_.setStoppableMoveMulti(true);
m723damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m723damagingMoveData_;
}
static MoveData m364(){
DamagingMoveData m724damagingMoveData_ = Instances.newDamagingMoveData();
m724damagingMoveData_.setCategory(I_PHYSIQUE);
m724damagingMoveData_.setDirect(true);
m724damagingMoveData_.setStoppableMoveKoSingle(true);
m724damagingMoveData_.setPp((short)10);
StringList m724stringList_=new StringList(new CollCapacity(1));
m724stringList_.add(I_PLANTE);
m724damagingMoveData_.setTypes(m724stringList_);
m724stringList_=new StringList(new CollCapacity(1));
m724stringList_.add(I_PLANTE);
m724damagingMoveData_.setBoostedTypes(m724stringList_);
m724damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m724custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m724effectDamage_=Instances.newEffectDamage();
m724effectDamage_.setPower(R_120);
m724effectDamage_.setUserAttack(true);
m724effectDamage_.setStatisAtt(Statistic.ATTACK);
m724effectDamage_.setTargetDefense(true);
m724effectDamage_.setStatisDef(Statistic.DEFENSE);
m724effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m724effectDamage_.setFail(ES);
m724custListEffect_.add(m724effectDamage_);
m724damagingMoveData_.setEffects(m724custListEffect_);
m724damagingMoveData_.setStoppableMoveSolo(true);
m724damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m724damagingMoveData_;
}
static MoveData m365(){
DamagingMoveData m725damagingMoveData_ = Instances.newDamagingMoveData();
m725damagingMoveData_.setCategory(I_SPECIALE);
m725damagingMoveData_.setStoppableMoveKoSingle(true);
m725damagingMoveData_.setPp((short)10);
StringList m725stringList_=new StringList(new CollCapacity(1));
m725stringList_.add(I_NORMAL);
m725damagingMoveData_.setTypes(m725stringList_);
m725stringList_=new StringList(new CollCapacity(1));
m725stringList_.add(I_NORMAL);
m725damagingMoveData_.setBoostedTypes(m725stringList_);
m725damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m725custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m725effectDamage_=Instances.newEffectDamage();
m725effectDamage_.setPower(R_90);
m725effectDamage_.setUserAttack(true);
m725effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m725effectDamage_.setTargetDefense(true);
m725effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m725effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m725effectDamage_.setFail(ES);
m725custListEffect_.add(m725effectDamage_);
m725damagingMoveData_.setEffects(m725custListEffect_);
m725damagingMoveData_.setStoppableMoveSolo(true);
m725damagingMoveData_.setStoppableMoveMulti(true);
m725damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m725damagingMoveData_;
}
static MoveData m366(){
DamagingMoveData m726damagingMoveData_ = Instances.newDamagingMoveData();
m726damagingMoveData_.setCategory(I_SPECIALE);
m726damagingMoveData_.setStoppableMoveKoSingle(true);
m726damagingMoveData_.setPp((short)15);
StringList m726stringList_=new StringList(new CollCapacity(1));
m726stringList_.add(I_PLANTE);
m726damagingMoveData_.setTypes(m726stringList_);
m726stringList_=new StringList(new CollCapacity(1));
m726stringList_.add(I_PLANTE);
m726damagingMoveData_.setBoostedTypes(m726stringList_);
m726damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m726custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m726effectDamage_=Instances.newEffectDamage();
m726effectDamage_.setPower(R_40);
m726effectDamage_.setUserAttack(true);
m726effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m726effectDamage_.setTargetDefense(true);
m726effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m726effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m726effectDamage_.setFail(ES);
m726custListEffect_.add(m726effectDamage_);
EffectDamageRate m726effectDamageRate_=Instances.newEffectDamageRate();
m726effectDamageRate_.setRateDamage(Rate.newRate(R_1_2));
m726effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m726effectDamageRate_.setFail(ES);
Ints m726ints_=new Ints(new CollCapacity(1));
m726ints_.add(0);
m726effectDamageRate_.setRequiredSuccessfulEffects(m726ints_);
m726custListEffect_.add(m726effectDamageRate_);
m726damagingMoveData_.setEffects(m726custListEffect_);
m726damagingMoveData_.setStoppableMoveSolo(true);
m726damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m726damagingMoveData_;
}
static MoveData m367(){
DamagingMoveData m727damagingMoveData_ = Instances.newDamagingMoveData();
m727damagingMoveData_.setCategory(I_SPECIALE);
m727damagingMoveData_.setStoppableMoveKoSingle(true);
m727damagingMoveData_.setPp((short)20);
StringList m727stringList_=new StringList(new CollCapacity(1));
m727stringList_.add(I_NORMAL);
m727damagingMoveData_.setTypes(m727stringList_);
m727stringList_=new StringList(new CollCapacity(1));
m727stringList_.add(I_NORMAL);
m727damagingMoveData_.setBoostedTypes(m727stringList_);
m727damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m727custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m727effectDamage_=Instances.newEffectDamage();
m727effectDamage_.setPower(R_60);
m727effectDamage_.setUserAttack(true);
m727effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m727effectDamage_.setTargetDefense(true);
m727effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m727effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m727effectDamage_.setFail(ES);
m727custListEffect_.add(m727effectDamage_);
m727damagingMoveData_.setEffects(m727custListEffect_);
m727damagingMoveData_.setStoppableMoveSolo(true);
m727damagingMoveData_.setStoppableMoveMulti(true);
m727damagingMoveData_.setIgnVarAccurUserNeg(true);
m727damagingMoveData_.setIgnVarEvasTargetPos(true);
m727damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m727damagingMoveData_;
}
static MoveData m368(){
StatusMoveData m728statusMoveData_ = Instances.newStatusMoveData();
m728statusMoveData_.setPp((short)10);
StringList m728stringList_=new StringList(new CollCapacity(1));
m728stringList_.add(I_NORMAL);
m728statusMoveData_.setTypes(m728stringList_);
m728stringList_=new StringList(new CollCapacity(1));
m728stringList_.add(I_NORMAL);
m728statusMoveData_.setBoostedTypes(m728stringList_);
m728statusMoveData_.setAccuracy(R_1);
CustList<Effect> m728custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m728effectInvoke_=Instances.newEffectInvoke();
m728effectInvoke_.setInvokingMoveButUser(true);
m728stringList_=new StringList(new CollCapacity(41));
m728stringList_.add(I_A_LA_QUEUE);
m728stringList_.add(I_ABOIEMENT);
m728stringList_.add(I_ABRI);
m728stringList_.add(I_APRES_VOUS);
m728stringList_.add(I_ASSISTANCE);
m728stringList_.add(I_BABIL);
m728stringList_.add(I_BLABLA_DODO);
m728stringList_.add(I_CHANT_ANTIQUE);
m728stringList_.add(I_COPIE);
m728stringList_.add(I_COUP_D_MAIN);
m728stringList_.add(I_COUP_VICTOIRE);
m728stringList_.add(I_DETECTION);
m728stringList_.add(I_ECLAIR_GELE);
m728stringList_.add(I_FEU_GLACE);
m728stringList_.add(I_FORCE_NATURE);
m728stringList_.add(I_GARDE_LARGE);
m728stringList_.add(I_GRIBOUILLE);
m728stringList_.add(I_IMPLORE);
m728stringList_.add(I_LAME_OINTE);
m728stringList_.add(I_LARCIN);
m728stringList_.add(I_LUTTE);
m728stringList_.add(I_METRONOME);
m728stringList_.add(I_MIMIQUE);
m728stringList_.add(I_MITRA_POING);
m728stringList_.add(I_MOI_D_ABORD);
m728stringList_.add(I_MORPHING);
m728stringList_.add(I_PAR_ICI);
m728stringList_.add(I_PASSE_CADEAU);
m728stringList_.add(I_PASSE_PASSE);
m728stringList_.add(I_PHOTOCOPIE);
m728stringList_.add(I_POUDREFUREUR);
m728stringList_.add(I_PREVENTION);
m728stringList_.add(I_REFLET_MAGIK);
m728stringList_.add(I_RIPOSTE);
m728stringList_.add(I_RONFLEMENT);
m728stringList_.add(I_RUSE);
m728stringList_.add(I_SAISIE);
m728stringList_.add(I_TECHNO_BUSTER);
m728stringList_.add(I_TENACITE);
m728stringList_.add(I_TOURMAGIK);
m728stringList_.add(I_VOILE_MIROIR);
m728effectInvoke_.setMovesNotToBeInvoked(m728stringList_);
m728effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m728effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC);
m728custListEffect_.add(m728effectInvoke_);
m728statusMoveData_.setEffects(m728custListEffect_);
m728statusMoveData_.setStoppableMoveSolo(true);
m728statusMoveData_.setIgnVarAccurUserNeg(true);
m728statusMoveData_.setIgnVarEvasTargetPos(true);
m728statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m728statusMoveData_;
}
static MoveData m369(){
StatusMoveData m729statusMoveData_ = Instances.newStatusMoveData();
m729statusMoveData_.setPp((short)20);
StringList m729stringList_=new StringList(new CollCapacity(1));
m729stringList_.add(I_VOL);
m729statusMoveData_.setTypes(m729stringList_);
m729stringList_=new StringList(new CollCapacity(1));
m729stringList_.add(I_VOL);
m729statusMoveData_.setBoostedTypes(m729stringList_);
m729statusMoveData_.setAccuracy(R_1);
CustList<Effect> m729custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m729effectInvoke_=Instances.newEffectInvoke();
m729effectInvoke_.setInvokingSufferedMove(true);
m729stringList_=new StringList(new CollCapacity(16));
m729stringList_.add(I_ACUPRESSION);
m729stringList_.add(I_BLABLA_DODO);
m729stringList_.add(I_BOOST);
m729stringList_.add(I_CARNAREKET);
m729stringList_.add(I_COPIE);
m729stringList_.add(I_ENCORE);
m729stringList_.add(I_GRIBOUILLE);
m729stringList_.add(I_IMITATION);
m729stringList_.add(I_LUTTE);
m729stringList_.add(I_MALEDICTION_2);
m729stringList_.add(I_METRONOME);
m729stringList_.add(I_MIMIQUE);
m729stringList_.add(I_MORPHING);
m729stringList_.add(I_POSSESSIF);
m729stringList_.add(I_PRESCIENCE);
m729stringList_.add(I_REQUIEM);
m729effectInvoke_.setMovesNotToBeInvoked(m729stringList_);
m729effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m729effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC);
m729custListEffect_.add(m729effectInvoke_);
m729statusMoveData_.setEffects(m729custListEffect_);
m729statusMoveData_.setStoppableMoveSolo(true);
m729statusMoveData_.setIgnVarAccurUserNeg(true);
m729statusMoveData_.setIgnVarEvasTargetPos(true);
m729statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m729statusMoveData_;
}
static MoveData m370(){
StatusMoveData m730statusMoveData_ = Instances.newStatusMoveData();
m730statusMoveData_.setCounterableMove(true);
m730statusMoveData_.setPp((short)30);
StringList m730stringList_=new StringList(new CollCapacity(1));
m730stringList_.add(I_NORMAL);
m730statusMoveData_.setTypes(m730stringList_);
m730stringList_=new StringList(new CollCapacity(1));
m730stringList_.add(I_NORMAL);
m730statusMoveData_.setBoostedTypes(m730stringList_);
m730statusMoveData_.setAccuracy(R_1);
CustList<Effect> m730custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m730effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m730enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m730enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)-1);
m730effectStatistic_.setStatisVarRank(m730enumMapStatisticByte_);
EnumMap<Statistic,String> m730enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m730enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m730effectStatistic_.setLocalFailStatis(m730enumMapStatisticString_);
m730effectStatistic_.setEvtRate(Rate.newRate(R_1));
m730effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m730effectStatistic_.setFail(ES);
m730custListEffect_.add(m730effectStatistic_);
m730statusMoveData_.setEffects(m730custListEffect_);
m730statusMoveData_.setStoppableMoveSolo(true);
m730statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m730statusMoveData_;
}
static MoveData m371(){
DamagingMoveData m731damagingMoveData_ = Instances.newDamagingMoveData();
m731damagingMoveData_.setCategory(I_SPECIALE);
m731damagingMoveData_.setStoppableMoveKoSingle(true);
m731damagingMoveData_.setPp((short)10);
StringList m731stringList_=new StringList(new CollCapacity(1));
m731stringList_.add(I_ACIER);
m731damagingMoveData_.setTypes(m731stringList_);
m731stringList_=new StringList(new CollCapacity(1));
m731stringList_.add(I_ACIER);
m731damagingMoveData_.setBoostedTypes(m731stringList_);
m731damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m731custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m731effectDamage_=Instances.newEffectDamage();
m731effectDamage_.setPower(R_65);
m731effectDamage_.setUserAttack(true);
m731effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m731effectDamage_.setTargetDefense(true);
m731effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m731effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m731effectDamage_.setFail(ES);
m731custListEffect_.add(m731effectDamage_);
EffectStatistic m731effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m731enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m731enumMapStatisticByte_.addEntry(Statistic.ACCURACY,(byte)-1);
m731effectStatistic_.setStatisVarRank(m731enumMapStatisticByte_);
EnumMap<Statistic,String> m731enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m731enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m731effectStatistic_.setLocalFailStatis(m731enumMapStatisticString_);
m731effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m731effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m731effectStatistic_.setFail(ES);
Ints m731ints_=new Ints(new CollCapacity(1));
m731ints_.add(0);
m731effectStatistic_.setRequiredSuccessfulEffects(m731ints_);
m731custListEffect_.add(m731effectStatistic_);
m731damagingMoveData_.setEffects(m731custListEffect_);
m731damagingMoveData_.setStoppableMoveSolo(true);
m731damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m731damagingMoveData_;
}
static MoveData m372(){
DamagingMoveData m732damagingMoveData_ = Instances.newDamagingMoveData();
m732damagingMoveData_.setCategory(I_PHYSIQUE);
m732damagingMoveData_.setDirect(true);
m732damagingMoveData_.setStoppableMoveKoSingle(true);
m732damagingMoveData_.setPp((short)20);
StringList m732stringList_=new StringList(new CollCapacity(1));
m732stringList_.add(I_COMBAT);
m732damagingMoveData_.setTypes(m732stringList_);
m732stringList_=new StringList(new CollCapacity(1));
m732stringList_.add(I_COMBAT);
m732damagingMoveData_.setBoostedTypes(m732stringList_);
m732damagingMoveData_.setPriority((byte)-3);
m732damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m732custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m732effectDamage_=Instances.newEffectDamage();
m732effectDamage_.setPower(R_150);
m732effectDamage_.setUserAttack(true);
m732effectDamage_.setStatisAtt(Statistic.ATTACK);
m732effectDamage_.setTargetDefense(true);
m732effectDamage_.setStatisDef(Statistic.DEFENSE);
m732effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m732effectDamage_.setFail(ES);
m732custListEffect_.add(m732effectDamage_);
m732damagingMoveData_.setEffects(m732custListEffect_);
m732damagingMoveData_.setStoppableMoveSolo(true);
m732damagingMoveData_.setStoppableMovePrio(true);
m732damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m732damagingMoveData_;
}
static MoveData m373(){
StatusMoveData m733statusMoveData_ = Instances.newStatusMoveData();
m733statusMoveData_.setPp((short)20);
StringList m733stringList_=new StringList(new CollCapacity(1));
m733stringList_.add(I_NORMAL);
m733statusMoveData_.setTypes(m733stringList_);
m733stringList_=new StringList(new CollCapacity(1));
m733stringList_.add(I_NORMAL);
m733statusMoveData_.setBoostedTypes(m733stringList_);
m733statusMoveData_.setAccuracy(R_1);
CustList<Effect> m733custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m733effectInvoke_=Instances.newEffectInvoke();
m733effectInvoke_.setInvokingTargetChosenMove(true);
m733stringList_=new StringList(new CollCapacity(201));
m733stringList_.add(I_PATIENCE);
m733stringList_.add(I_FULMIFER);
m733stringList_.add(I_EFFORT);
m733stringList_.add(I_RIPOSTE);
m733stringList_.add(I_VOILE_MIROIR);
m733stringList_.add(I_TOUT_OU_RIEN);
m733stringList_.add(I_ABRI);
m733stringList_.add(I_ACIDARMURE);
m733stringList_.add(I_ACUPRESSION);
m733stringList_.add(I_ADAPTATION);
m733stringList_.add(I_AFFUTAGE);
m733stringList_.add(I_AIGUISAGE);
m733stringList_.add(I_AIR_VEINARD);
m733stringList_.add(I_A_LA_QUEUE);
m733stringList_.add(I_ALLEGEMENT);
m733stringList_.add(I_AMNESIE);
m733stringList_.add(I_ANNEAU_HYDRO);
m733stringList_.add(I_ANTI_BRUME);
m733stringList_.add(I_ANTI_SOIN);
m733stringList_.add(I_APPEL_DEFENS);
m733stringList_.add(I_APPEL_SOINS);
m733stringList_.add(I_APRES_VOUS);
m733stringList_.add(I_ARMURE);
m733stringList_.add(I_AROMATHERAPI);
m733stringList_.add(I_ASSISTANCE);
m733stringList_.add(I_ASTUCE_FORCE);
m733stringList_.add(I_ATTERRISSAGE);
m733stringList_.add(I_ATTRACTION);
m733stringList_.add(I_AURORE);
m733stringList_.add(I_AVALE);
m733stringList_.add(I_BAILLEMENT);
m733stringList_.add(I_BALANCE);
m733stringList_.add(I_BARRAGE);
m733stringList_.add(I_BERCEUSE);
m733stringList_.add(I_BLABLA_DODO);
m733stringList_.add(I_BOOST);
m733stringList_.add(I_BOUCLIER);
m733stringList_.add(I_BOUL_ARMURE);
m733stringList_.add(I_BROUILLARD);
m733stringList_.add(I_BRUME);
m733stringList_.add(I_BUEE_NOIRE);
m733stringList_.add(I_CAGE_ECLAIR);
m733stringList_.add(I_CAMOUFLAGE);
m733stringList_.add(I_CAUCHEMAR);
m733stringList_.add(I_CHARGEUR);
m733stringList_.add(I_CHARME);
m733stringList_.add(I_CHATOUILLE);
m733stringList_.add(I_CHGT_VITESSE);
m733stringList_.add(I_CLAIRVOYANCE);
m733stringList_.add(I_CLONAGE);
m733stringList_.add(I_COGNOBIDON);
m733stringList_.add(I_CONVERSION_2);
m733stringList_.add(I_COPIE);
m733stringList_.add(I_COPIE_TYPE);
m733stringList_.add(I_COTOGARDE);
m733stringList_.add(I_COUP_D_MAIN);
m733stringList_.add(I_CROCO_LARME);
m733stringList_.add(I_CROISSANCE);
m733stringList_.add(I_CYCLONE);
m733stringList_.add(I_DANSE_DRACO);
m733stringList_.add(I_DANSE_FOLLE);
m733stringList_.add(I_DANSE_LAMES);
m733stringList_.add(I_DANSE_LUNE);
m733stringList_.add(I_DANSE_PLUIE);
m733stringList_.add(I_DANSE_PLUME);
m733stringList_.add(I_DEPIT);
m733stringList_.add(I_DETECTION);
m733stringList_.add(I_DETREMPAGE);
m733stringList_.add(I_DISTORSION);
m733stringList_.add(I_DOUX_BAISER);
m733stringList_.add(I_DOUX_PARFUM);
m733stringList_.add(I_ECHANGE_PSY);
m733stringList_.add(I_ECHANGE);
m733stringList_.add(I_E_COQUE);
m733stringList_.add(I_EMBARGO);
m733stringList_.add(I_ENCORE);
m733stringList_.add(I_ENROULEMENT);
m733stringList_.add(I_ENTRAVE);
m733stringList_.add(I_EXUVIATION);
m733stringList_.add(I_FEU_FOLLET);
m733stringList_.add(I_FLAIR);
m733stringList_.add(I_FLASH);
m733stringList_.add(I_FLATTERIE);
m733stringList_.add(I_FORCE_COSMIK);
m733stringList_.add(I_FORCE_NATURE);
m733stringList_.add(I_GARDE_LARGE);
m733stringList_.add(I_GAZ_TOXIK);
m733stringList_.add(I_GLAS_DE_SOIN);
m733stringList_.add(I_GONFLETTE);
m733stringList_.add(I_GRAVITE);
m733stringList_.add(I_GRELE);
m733stringList_.add(I_GRIBOUILLE);
m733stringList_.add(I_GRIMACE);
m733stringList_.add(I_GRINCEMENT);
m733stringList_.add(I_GROBISOU);
m733stringList_.add(I_GRONDEMENT);
m733stringList_.add(I_GROZ_YEUX);
m733stringList_.add(I_HATE);
m733stringList_.add(I_HURLEMENT);
m733stringList_.add(I_HYPNOSE);
m733stringList_.add(I_IMITATION);
m733stringList_.add(I_INTERVERSION);
m733stringList_.add(I_INTIMIDATION);
m733stringList_.add(I_JET_DE_SABLE);
m733stringList_.add(I_LAIT_A_BOIRE);
m733stringList_.add(I_LANCE_BOUE);
m733stringList_.add(I_LEVIKINESIE);
m733stringList_.add(I_LILLIPUT);
m733stringList_.add(I_LIRE_ESPRIT);
m733stringList_.add(I_LUMIQUEUE);
m733stringList_.add(I_MACHINATION);
m733stringList_.add(I_MALEDICTION_1);
m733stringList_.add(I_MALEDICTION_2);
m733stringList_.add(I_MALEDICTION);
m733stringList_.add(I_METRONOME);
m733stringList_.add(I_MIMIQUE);
m733stringList_.add(I_MIMI_QUEUE);
m733stringList_.add(I_MOI_D_ABORD);
m733stringList_.add(I_MORPHING);
m733stringList_.add(I_MUR_DE_FER);
m733stringList_.add(I_MUR_LUMIERE);
m733stringList_.add(I_OEIL_MIRACLE);
m733stringList_.add(I_ONDE_FOLIE);
m733stringList_.add(I_ORAGE);
m733stringList_.add(I_PAPILLODANSE);
m733stringList_.add(I_PARA_SPORE);
m733stringList_.add(I_PARESSE);
m733stringList_.add(I_PAR_ICI);
m733stringList_.add(I_PARTAGE_FORCE);
m733stringList_.add(I_PARTAGE_GARDE);
m733stringList_.add(I_PASSE_CADEAU);
m733stringList_.add(I_PASSE_PASSE);
m733stringList_.add(I_PERMUCOEUR);
m733stringList_.add(I_PERMUFORCE);
m733stringList_.add(I_PERMUGARDE);
m733stringList_.add(I_PHOTOCOPIE);
m733stringList_.add(I_PICOTS);
m733stringList_.add(I_PICS_TOXIK);
m733stringList_.add(I_PIEGE_DE_ROC);
m733stringList_.add(I_PLENITUDE);
m733stringList_.add(I_POLIROCHE);
m733stringList_.add(I_POSSESSIF);
m733stringList_.add(I_POUDRE_DODO);
m733stringList_.add(I_POUDREFUREUR);
m733stringList_.add(I_POUDRE_TOXIK);
m733stringList_.add(I_PREVENTION);
m733stringList_.add(I_PROTECTION);
m733stringList_.add(I_PROVOC);
m733stringList_.add(I_PUISSANCE);
m733stringList_.add(I_RACINES);
m733stringList_.add(I_RAYON_LUNE);
m733stringList_.add(I_RAYON_SIMPLE);
m733stringList_.add(I_RECYCLAGE);
m733stringList_.add(I_REFLET_MAGIK);
m733stringList_.add(I_REFLET);
m733stringList_.add(I_REGARD_NOIR);
m733stringList_.add(I_REGENERATION);
m733stringList_.add(I_RELAIS);
m733stringList_.add(I_RENGORGEMENT);
m733stringList_.add(I_REPLI);
m733stringList_.add(I_REPOS);
m733stringList_.add(I_REQUIEM);
m733stringList_.add(I_RUGISSEMENT);
m733stringList_.add(I_RUNE_PROTECT);
m733stringList_.add(I_SAISIE);
m733stringList_.add(I_SECRETION);
m733stringList_.add(I_SEDUCTION);
m733stringList_.add(I_SIFFL_HERBE);
m733stringList_.add(I_SOIN);
m733stringList_.add(I_SOUCIGRAINE);
m733stringList_.add(I_SOUVENIR);
m733stringList_.add(I_SPORE_COTON);
m733stringList_.add(I_SPORE);
m733stringList_.add(I_STOCKAGE);
m733stringList_.add(I_STRIDO_SON);
m733stringList_.add(I_SUC_DIGESTIF);
m733stringList_.add(I_SYNTHESE);
m733stringList_.add(I_TELEKINESIE);
m733stringList_.add(I_TELEPORT);
m733stringList_.add(I_TEMPETESABLE);
m733stringList_.add(I_TENACITE);
m733stringList_.add(I_TEN_DANSE);
m733stringList_.add(I_TOILE);
m733stringList_.add(I_TOURMAGIK);
m733stringList_.add(I_TOURMENTE);
m733stringList_.add(I_TOURNIQUET);
m733stringList_.add(I_TOXIK);
m733stringList_.add(I_TROU_NOIR);
m733stringList_.add(I_ULTRASON);
m733stringList_.add(I_VAMPIGRAINE);
m733stringList_.add(I_VANTARDISE);
m733stringList_.add(I_VENT_ARRIERE);
m733stringList_.add(I_VERROUILLAGE);
m733stringList_.add(I_VIBRA_SOIN);
m733stringList_.add(I_VOEU_SOIN);
m733stringList_.add(I_VOEU);
m733stringList_.add(I_VOL_MAGNETIK);
m733stringList_.add(I_YOGA);
m733stringList_.add(I_ZENITH);
m733stringList_.add(I_ZONE_ETRANGE);
m733stringList_.add(I_ZONE_MAGIQUE);
m733effectInvoke_.setMovesNotToBeInvoked(m733stringList_);
m733effectInvoke_.setRateInvokationMove(Rate.newRate(R_3_2));
m733effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m733effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC);
m733custListEffect_.add(m733effectInvoke_);
m733statusMoveData_.setEffects(m733custListEffect_);
m733statusMoveData_.setStoppableMoveSolo(true);
m733statusMoveData_.setIgnVarAccurUserNeg(true);
m733statusMoveData_.setIgnVarEvasTargetPos(true);
m733statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m733statusMoveData_;
}
static MoveData m374(){
StatusMoveData m734statusMoveData_ = Instances.newStatusMoveData();
m734statusMoveData_.setPp((short)10);
StringList m734stringList_=new StringList(new CollCapacity(1));
m734stringList_.add(I_NORMAL);
m734statusMoveData_.setTypes(m734stringList_);
m734stringList_=new StringList(new CollCapacity(1));
m734stringList_.add(I_NORMAL);
m734statusMoveData_.setBoostedTypes(m734stringList_);
m734statusMoveData_.setAccuracy(R_1);
CustList<Effect> m734custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCopyFighter m734effectCopyFighter_=Instances.newEffectCopyFighter();
m734effectCopyFighter_.setPpForMoves((short)5);
m734effectCopyFighter_.setTargetChoice(TargetChoice.ADJ_MULT);
m734effectCopyFighter_.setFail(ES);
m734custListEffect_.add(m734effectCopyFighter_);
m734statusMoveData_.setEffects(m734custListEffect_);
m734statusMoveData_.setStoppableMoveMulti(true);
m734statusMoveData_.setIgnVarAccurUserNeg(true);
m734statusMoveData_.setIgnVarEvasTargetPos(true);
m734statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m734statusMoveData_;
}
}
