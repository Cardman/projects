package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit15 extends CstIgame{
private MvInit15(){}
static MoveData m375(){
DamagingMoveData m737damagingMoveData_ = Instances.newDamagingMoveData();
m737damagingMoveData_.setCategory(I_PHYSIQUE);
m737damagingMoveData_.setDirect(true);
m737damagingMoveData_.setStoppableMoveKoSingle(true);
m737damagingMoveData_.setPp(25);
StringList m737stringList_=new StringList(new CollCapacity(1));
m737stringList_.add(I_TENEBRE);
m737damagingMoveData_.setTypes(m737stringList_);
m737stringList_=new StringList(new CollCapacity(1));
m737stringList_.add(I_TENEBRE);
m737damagingMoveData_.setBoostedTypes(m737stringList_);
m737damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m737custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m737effectDamage_=Instances.newEffectDamage();
m737effectDamage_.setPower(R_60);
m737effectDamage_.setUserAttack(true);
m737effectDamage_.setStatisAtt(Statistic.ATTACK);
m737effectDamage_.setTargetDefense(true);
m737effectDamage_.setStatisDef(Statistic.DEFENSE);
m737effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m737effectDamage_.setFail(ES);
m737custListEffect_.add(m737effectDamage_);
EffectStatus m737effectStatus_=Instances.newEffectStatus();
MonteCarloString m737monteCarloString_=new MonteCarloString(new CollCapacity(2));
m737monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m737monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m737effectStatus_.setLawStatus(m737monteCarloString_);
StringMap<String> m737stringMapString_=new StringMap<String>(new CollCapacity(1));
m737stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m737effectStatus_.setLocalFailStatus(m737stringMapString_);
m737effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m737effectStatus_.setFail(ES);
Ints m737ints_=new Ints(new CollCapacity(1));
m737ints_.add(0);
m737effectStatus_.setRequiredSuccessfulEffects(m737ints_);
m737custListEffect_.add(m737effectStatus_);
m737damagingMoveData_.setEffects(m737custListEffect_);
m737damagingMoveData_.setStoppableMoveSolo(true);
m737damagingMoveData_.setStoppableMoveMulti(true);
m737damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m737damagingMoveData_;
}
static MoveData m376(){
DamagingMoveData m738damagingMoveData_ = Instances.newDamagingMoveData();
m738damagingMoveData_.setCategory(I_SPECIALE);
m738damagingMoveData_.setStoppableMoveKoSingle(true);
m738damagingMoveData_.setPp(10);
StringList m738stringList_=new StringList(new CollCapacity(1));
m738stringList_.add(I_VOL);
m738damagingMoveData_.setTypes(m738stringList_);
m738stringList_=new StringList(new CollCapacity(1));
m738stringList_.add(I_VOL);
m738damagingMoveData_.setBoostedTypes(m738stringList_);
m738damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m738custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m738effectDamage_=Instances.newEffectDamage();
m738effectDamage_.setPower(R_80);
m738effectDamage_.setUserAttack(true);
m738effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m738effectDamage_.setTargetDefense(true);
m738effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m738effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m738effectDamage_.setFail(ES);
m738custListEffect_.add(m738effectDamage_);
EffectDamageRate m738effectDamageRate_=Instances.newEffectDamageRate();
m738effectDamageRate_.setRateDamage(Rate.newRate(R_3_4));
m738effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m738effectDamageRate_.setFail(ES);
Ints m738ints_=new Ints(new CollCapacity(1));
m738ints_.add(0);
m738effectDamageRate_.setRequiredSuccessfulEffects(m738ints_);
m738custListEffect_.add(m738effectDamageRate_);
m738damagingMoveData_.setEffects(m738custListEffect_);
m738damagingMoveData_.setStoppableMoveSolo(true);
m738damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m738damagingMoveData_;
}
static MoveData m377(){
StatusMoveData m739statusMoveData_ = Instances.newStatusMoveData();
m739statusMoveData_.setThievableMove(true);
m739statusMoveData_.setPp(15);
StringList m739stringList_=new StringList(new CollCapacity(1));
m739stringList_.add(I_ACIER);
m739statusMoveData_.setTypes(m739stringList_);
m739stringList_=new StringList(new CollCapacity(1));
m739stringList_.add(I_ACIER);
m739statusMoveData_.setBoostedTypes(m739stringList_);
m739statusMoveData_.setAccuracy(R_1);
CustList<Effect> m739custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m739effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m739enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m739enumMapStatisticByte_.addEntry(Statistic.DEFENSE,2L);
m739effectStatistic_.setStatisVarRank(m739enumMapStatisticByte_);
m739effectStatistic_.setEvtRate(Rate.newRate(R_1));
m739effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m739effectStatistic_.setFail(ES);
m739custListEffect_.add(m739effectStatistic_);
m739statusMoveData_.setEffects(m739custListEffect_);
m739statusMoveData_.setStoppableMoveMulti(true);
m739statusMoveData_.setIgnVarAccurUserNeg(true);
m739statusMoveData_.setIgnVarEvasTargetPos(true);
m739statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m739statusMoveData_;
}
static MoveData m378(){
StatusMoveData m740statusMoveData_ = Instances.newStatusMoveData();
m740statusMoveData_.setThievableMove(true);
m740statusMoveData_.setPp(30);
StringList m740stringList_=new StringList(new CollCapacity(1));
m740stringList_.add(I_PSY);
m740statusMoveData_.setTypes(m740stringList_);
m740stringList_=new StringList(new CollCapacity(1));
m740stringList_.add(I_PSY);
m740statusMoveData_.setBoostedTypes(m740stringList_);
m740statusMoveData_.setAccuracy(R_1);
CustList<Effect> m740custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeam m740effectTeam_=Instances.newEffectTeam();
CategoryMults m740objectMapCategoryMultRate_=new CategoryMults(new CollCapacity(4));
m740objectMapCategoryMultRate_.addEntry(new CategoryMult(I_SPECIALE,4),Rate.newRate(R_4_5));
m740objectMapCategoryMultRate_.addEntry(new CategoryMult(I_SPECIALE,3),Rate.newRate(R_3_4));
m740objectMapCategoryMultRate_.addEntry(new CategoryMult(I_SPECIALE,2),Rate.newRate(R_2_3));
m740objectMapCategoryMultRate_.addEntry(new CategoryMult(I_SPECIALE,1),Rate.newRate(R_1_2));
m740effectTeam_.setMultDamage(m740objectMapCategoryMultRate_);
m740effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m740effectTeam_.setFail(ES);
m740custListEffect_.add(m740effectTeam_);
m740statusMoveData_.setEffects(m740custListEffect_);
m740statusMoveData_.setRankIncrementNbRound(11);
m740statusMoveData_.setStoppableMoveMulti(true);
m740statusMoveData_.setIgnVarAccurUserNeg(true);
m740statusMoveData_.setIgnVarEvasTargetPos(true);
m740statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m740statusMoveData_;
}
static MoveData m379(){
DamagingMoveData m741damagingMoveData_ = Instances.newDamagingMoveData();
m741damagingMoveData_.setCategory(I_PHYSIQUE);
m741damagingMoveData_.setDirect(true);
m741damagingMoveData_.setStoppableMoveKoSingle(true);
m741damagingMoveData_.setPp(20);
StringList m741stringList_=new StringList(new CollCapacity(1));
m741stringList_.add(I_FEU);
m741damagingMoveData_.setTypes(m741stringList_);
m741stringList_=new StringList(new CollCapacity(1));
m741stringList_.add(I_FEU);
m741damagingMoveData_.setBoostedTypes(m741stringList_);
m741damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m741custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m741effectDamage_=Instances.newEffectDamage();
m741effectDamage_.setPower(R_50);
m741effectDamage_.setUserAttack(true);
m741effectDamage_.setStatisAtt(Statistic.ATTACK);
m741effectDamage_.setTargetDefense(true);
m741effectDamage_.setStatisDef(Statistic.DEFENSE);
m741effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m741effectDamage_.setFail(ES);
m741custListEffect_.add(m741effectDamage_);
EffectStatistic m741effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m741enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m741enumMapStatisticByte_.addEntry(Statistic.SPEED,1L);
m741effectStatistic_.setStatisVarRank(m741enumMapStatisticByte_);
m741effectStatistic_.setEvtRate(Rate.newRate(R_1));
m741effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m741effectStatistic_.setFail(ES);
Ints m741ints_=new Ints(new CollCapacity(1));
m741ints_.add(0);
m741effectStatistic_.setRequiredSuccessfulEffects(m741ints_);
m741custListEffect_.add(m741effectStatistic_);
m741damagingMoveData_.setEffects(m741custListEffect_);
m741damagingMoveData_.setStoppableMoveSolo(true);
m741damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m741damagingMoveData_;
}
static MoveData m380(){
DamagingMoveData m742damagingMoveData_ = Instances.newDamagingMoveData();
m742damagingMoveData_.setCategory(I_SPECIALE);
m742damagingMoveData_.setDirect(true);
m742damagingMoveData_.setStoppableMoveKoSingle(true);
m742damagingMoveData_.setPp(20);
StringList m742stringList_=new StringList(new CollCapacity(1));
m742stringList_.add(I_PLANTE);
m742damagingMoveData_.setTypes(m742stringList_);
m742stringList_=new StringList(new CollCapacity(1));
m742stringList_.add(I_PLANTE);
m742damagingMoveData_.setBoostedTypes(m742stringList_);
m742damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m742custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m742effectDamage_=Instances.newEffectDamage();
m742effectDamage_.setPower(A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_0+OC+R_10+RP+OM+R_20+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_10+OC+R_25+RP+OM+R_40+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_25+OC+R_50+RP+OM+R_60+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_50+OC+R_100+RP+OM+R_80+OP+A_CARACSEMIOUVERTD+LP+V_CIBLE_MASSE+OC+R_100+OC+R_200+RP+OM+R_100+OP+A_CARACDROITEFERME+LP+V_CIBLE_MASSE+OC+R_200+RP+OM+R_120);
m742effectDamage_.setUserAttack(true);
m742effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m742effectDamage_.setTargetDefense(true);
m742effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m742effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m742effectDamage_.setFail(ES);
m742custListEffect_.add(m742effectDamage_);
m742damagingMoveData_.setEffects(m742custListEffect_);
m742damagingMoveData_.setStoppableMoveSolo(true);
m742damagingMoveData_.setStoppableMoveMulti(true);
m742damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m742damagingMoveData_;
}
static MoveData m381(){
StatusMoveData m743statusMoveData_ = Instances.newStatusMoveData();
m743statusMoveData_.setPp(20);
StringList m743stringList_=new StringList(new CollCapacity(1));
m743stringList_.add(I_INSECTE);
m743statusMoveData_.setTypes(m743stringList_);
m743stringList_=new StringList(new CollCapacity(1));
m743stringList_.add(I_INSECTE);
m743statusMoveData_.setBoostedTypes(m743stringList_);
m743statusMoveData_.setPriority(1);
m743statusMoveData_.setAccuracy(R_1);
CustList<Effect> m743custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCounterAttack m743effectCounterAttack_=Instances.newEffectCounterAttack();
StringMap<Rate> m743stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m743stringMapRate_.addEntry(I_FEU,Rate.newRate(R_1_4));
m743effectCounterAttack_.setSufferingDamageTypes(m743stringMapRate_);
m743effectCounterAttack_.setSufferingDamageDirectMove(Rate.newRate(R_0));
m743effectCounterAttack_.setProtectFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_PLANTE+RB+RP+RP+OE+R_1+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_OBJET+RB+OC+LB+I_LUNETTES_FILTRE+RB+RP+RP+OE+R_1+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_CAPACITE+RB+OC+LB+I_ENVELOCAPE+RB+RP+RP+OE+R_1);
m743effectCounterAttack_.setCounterFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_PLANTE+RB+RP+RP+OE+R_1+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_OBJET+RB+OC+LB+I_LUNETTES_FILTRE+RB+RP+RP+OE+R_1+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_CAPACITE+RB+OC+LB+I_ENVELOCAPE+OS+I_GARDE_MAGIK+RB+RP+RP+OE+R_1);
m743effectCounterAttack_.setTargetChoice(TargetChoice.LANCEUR);
m743effectCounterAttack_.setFail(ES);
m743custListEffect_.add(m743effectCounterAttack_);
m743statusMoveData_.setEffects(m743custListEffect_);
m743statusMoveData_.setStoppableMoveSolo(true);
m743statusMoveData_.setStoppableMovePrio(true);
m743statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m743statusMoveData_;
}
static MoveData m382(){
DamagingMoveData m744damagingMoveData_ = Instances.newDamagingMoveData();
m744damagingMoveData_.setCategory(I_SPECIALE);
m744damagingMoveData_.setStoppableMoveKoSingle(true);
m744damagingMoveData_.setPp(10);
StringList m744stringList_=new StringList(new CollCapacity(1));
m744stringList_.add(I_EAU);
m744damagingMoveData_.setTypes(m744stringList_);
m744stringList_=new StringList(new CollCapacity(1));
m744stringList_.add(I_EAU);
m744damagingMoveData_.setBoostedTypes(m744stringList_);
m744damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m744custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m744effectDamage_=Instances.newEffectDamage();
m744effectDamage_.setPower(R_95);
m744effectDamage_.setUserAttack(true);
m744effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m744effectDamage_.setTargetDefense(true);
m744effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m744effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m744effectDamage_.setFail(ES);
m744custListEffect_.add(m744effectDamage_);
EffectStatistic m744effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m744enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m744enumMapStatisticByte_.addEntry(Statistic.ACCURACY,-1L);
m744effectStatistic_.setStatisVarRank(m744enumMapStatisticByte_);
IdMap<Statistic,String> m744enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m744enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m744effectStatistic_.setLocalFailStatis(m744enumMapStatisticString_);
m744effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m744effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m744effectStatistic_.setFail(ES);
Ints m744ints_=new Ints(new CollCapacity(1));
m744ints_.add(0);
m744effectStatistic_.setRequiredSuccessfulEffects(m744ints_);
m744custListEffect_.add(m744effectStatistic_);
m744damagingMoveData_.setEffects(m744custListEffect_);
m744damagingMoveData_.setStoppableMoveSolo(true);
m744damagingMoveData_.setStoppableMoveMulti(true);
m744damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m744damagingMoveData_;
}
static MoveData m383(){
DamagingMoveData m745damagingMoveData_ = Instances.newDamagingMoveData();
m745damagingMoveData_.setCategory(I_SPECIALE);
m745damagingMoveData_.setStoppableMoveKoSingle(true);
m745damagingMoveData_.setPp(10);
StringList m745stringList_=new StringList(new CollCapacity(1));
m745stringList_.add(I_EAU);
m745damagingMoveData_.setTypes(m745stringList_);
m745stringList_=new StringList(new CollCapacity(1));
m745stringList_.add(I_EAU);
m745damagingMoveData_.setBoostedTypes(m745stringList_);
m745damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m745custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m745effectDamage_=Instances.newEffectDamage();
m745effectDamage_.setPower(R_65);
m745effectDamage_.setUserAttack(true);
m745effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m745effectDamage_.setTargetDefense(true);
m745effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m745effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m745effectDamage_.setFail(ES);
m745custListEffect_.add(m745effectDamage_);
EffectStatistic m745effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m745enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m745enumMapStatisticByte_.addEntry(Statistic.ACCURACY,-1L);
m745effectStatistic_.setStatisVarRank(m745enumMapStatisticByte_);
IdMap<Statistic,String> m745enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m745enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m745effectStatistic_.setLocalFailStatis(m745enumMapStatisticString_);
m745effectStatistic_.setEvtRate(Rate.newRate(R_1_2));
m745effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m745effectStatistic_.setFail(ES);
Ints m745ints_=new Ints(new CollCapacity(1));
m745ints_.add(0);
m745effectStatistic_.setRequiredSuccessfulEffects(m745ints_);
m745custListEffect_.add(m745effectStatistic_);
m745damagingMoveData_.setEffects(m745custListEffect_);
m745damagingMoveData_.setStoppableMoveSolo(true);
m745damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m745damagingMoveData_;
}
static MoveData m384(){
StatusMoveData m746statusMoveData_ = Instances.newStatusMoveData();
m746statusMoveData_.setCounterableMove(true);
m746statusMoveData_.setPp(40);
StringList m746stringList_=new StringList(new CollCapacity(1));
m746stringList_.add(I_PSY);
m746statusMoveData_.setTypes(m746stringList_);
m746stringList_=new StringList(new CollCapacity(1));
m746stringList_.add(I_PSY);
m746statusMoveData_.setBoostedTypes(m746stringList_);
m746statusMoveData_.setAccuracy(R_1);
CustList<Effect> m746custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectUnprotectFromTypes m746effectUnprotectFromTypes_=Instances.newEffectUnprotectFromTypes();
m746effectUnprotectFromTypes_.setTypes(new CustList<TypesDuo>(new TypesDuo(I_PSY,I_TENEBRE)));
m746effectUnprotectFromTypes_.setTargetChoice(TargetChoice.ANY_FOE);
m746effectUnprotectFromTypes_.setFail(ES);
m746custListEffect_.add(m746effectUnprotectFromTypes_);
m746statusMoveData_.setEffects(m746custListEffect_);
m746statusMoveData_.setStoppableMoveMulti(true);
m746statusMoveData_.setIgnVarAccurUserNeg(true);
m746statusMoveData_.setIgnVarEvasTargetPos(true);
m746statusMoveData_.setTargetChoice(TargetChoice.ANY_FOE);
return m746statusMoveData_;
}
static MoveData m385(){
DamagingMoveData m747damagingMoveData_ = Instances.newDamagingMoveData();
m747damagingMoveData_.setCategory(I_SPECIALE);
m747damagingMoveData_.setStoppableMoveKoSingle(true);
m747damagingMoveData_.setPp(15);
StringList m747stringList_=new StringList(new CollCapacity(1));
m747stringList_.add(I_SPECTRE);
m747damagingMoveData_.setTypes(m747stringList_);
m747stringList_=new StringList(new CollCapacity(1));
m747stringList_.add(I_SPECTRE);
m747damagingMoveData_.setBoostedTypes(m747stringList_);
m747damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m747custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m747effectDamage_=Instances.newEffectDamage();
MonteCarloString m747monteCarloString_=new MonteCarloString(new CollCapacity(1));
m747monteCarloString_.addQuickEvent(V_LANCEUR_NIVEAU,LgInt.newLgInt(R_1));
m747effectDamage_.setDamageLaw(m747monteCarloString_);
m747effectDamage_.setPower(ES);
m747effectDamage_.setUserAttack(true);
m747effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m747effectDamage_.setTargetDefense(true);
m747effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m747effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m747effectDamage_.setFail(ES);
m747custListEffect_.add(m747effectDamage_);
m747damagingMoveData_.setEffects(m747custListEffect_);
m747damagingMoveData_.setStoppableMoveSolo(true);
m747damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m747damagingMoveData_;
}
static MoveData m386(){
DamagingMoveData m748damagingMoveData_ = Instances.newDamagingMoveData();
m748damagingMoveData_.setCategory(I_PHYSIQUE);
m748damagingMoveData_.setDirect(true);
m748damagingMoveData_.setStoppableMoveKoSingle(true);
m748damagingMoveData_.setPp(30);
StringList m748stringList_=new StringList(new CollCapacity(1));
m748stringList_.add(I_SPECTRE);
m748damagingMoveData_.setTypes(m748stringList_);
m748stringList_=new StringList(new CollCapacity(1));
m748stringList_.add(I_SPECTRE);
m748damagingMoveData_.setBoostedTypes(m748stringList_);
m748damagingMoveData_.setPriority(1);
m748damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m748custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m748effectDamage_=Instances.newEffectDamage();
m748effectDamage_.setPower(R_40);
m748effectDamage_.setUserAttack(true);
m748effectDamage_.setStatisAtt(Statistic.ATTACK);
m748effectDamage_.setTargetDefense(true);
m748effectDamage_.setStatisDef(Statistic.DEFENSE);
m748effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m748effectDamage_.setFail(ES);
m748custListEffect_.add(m748effectDamage_);
m748damagingMoveData_.setEffects(m748custListEffect_);
m748damagingMoveData_.setStoppableMoveSolo(true);
m748damagingMoveData_.setStoppableMovePrio(true);
m748damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m748damagingMoveData_;
}
static MoveData m387(){
StatusMoveData m749statusMoveData_ = Instances.newStatusMoveData();
m749statusMoveData_.setCounterableMove(true);
m749statusMoveData_.setPp(15);
StringList m749stringList_=new StringList(new CollCapacity(1));
m749stringList_.add(I_ELECTRIQUE);
m749statusMoveData_.setTypes(m749stringList_);
m749stringList_=new StringList(new CollCapacity(1));
m749stringList_.add(I_ELECTRIQUE);
m749statusMoveData_.setBoostedTypes(m749stringList_);
m749statusMoveData_.setAccuracy(R_1);
CustList<Effect> m749custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m749effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m749enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m749enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-2L);
m749effectStatistic_.setStatisVarRank(m749enumMapStatisticByte_);
IdMap<Statistic,String> m749enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m749enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m749effectStatistic_.setLocalFailStatis(m749enumMapStatisticString_);
m749effectStatistic_.setEvtRate(Rate.newRate(R_1));
m749effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m749effectStatistic_.setFail(ES);
m749custListEffect_.add(m749effectStatistic_);
m749statusMoveData_.setEffects(m749custListEffect_);
m749statusMoveData_.setStoppableMoveSolo(true);
m749statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m749statusMoveData_;
}
static MoveData m388(){
DamagingMoveData m750damagingMoveData_ = Instances.newDamagingMoveData();
m750damagingMoveData_.setCategory(I_SPECIALE);
m750damagingMoveData_.setStoppableMoveKoSingle(true);
m750damagingMoveData_.setPp(20);
StringList m750stringList_=new StringList(new CollCapacity(1));
m750stringList_.add(I_GLACE);
m750damagingMoveData_.setTypes(m750stringList_);
m750stringList_=new StringList(new CollCapacity(1));
m750stringList_.add(I_GLACE);
m750damagingMoveData_.setBoostedTypes(m750stringList_);
m750damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m750custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m750effectDamage_=Instances.newEffectDamage();
m750effectDamage_.setPower(R_65);
m750effectDamage_.setUserAttack(true);
m750effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m750effectDamage_.setTargetDefense(true);
m750effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m750effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m750effectDamage_.setFail(ES);
m750custListEffect_.add(m750effectDamage_);
EffectStatistic m750effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m750enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m750enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m750effectStatistic_.setStatisVarRank(m750enumMapStatisticByte_);
IdMap<Statistic,String> m750enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m750enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m750effectStatistic_.setLocalFailStatis(m750enumMapStatisticString_);
m750effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m750effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m750effectStatistic_.setFail(ES);
Ints m750ints_=new Ints(new CollCapacity(1));
m750ints_.add(0);
m750effectStatistic_.setRequiredSuccessfulEffects(m750ints_);
m750custListEffect_.add(m750effectStatistic_);
m750damagingMoveData_.setEffects(m750custListEffect_);
m750damagingMoveData_.setStoppableMoveSolo(true);
m750damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m750damagingMoveData_;
}
static MoveData m389(){
DamagingMoveData m751damagingMoveData_ = Instances.newDamagingMoveData();
m751damagingMoveData_.setCategory(I_SPECIALE);
m751damagingMoveData_.setStoppableMoveKoSingle(true);
m751damagingMoveData_.setPp(20);
StringList m751stringList_=new StringList(new CollCapacity(1));
m751stringList_.add(I_ELECTRIQUE);
m751damagingMoveData_.setTypes(m751stringList_);
m751stringList_=new StringList(new CollCapacity(1));
m751stringList_.add(I_ELECTRIQUE);
m751damagingMoveData_.setBoostedTypes(m751stringList_);
m751damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m751custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m751effectDamage_=Instances.newEffectDamage();
m751effectDamage_.setPower(R_60);
m751effectDamage_.setUserAttack(true);
m751effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m751effectDamage_.setTargetDefense(true);
m751effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m751effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m751effectDamage_.setFail(ES);
m751custListEffect_.add(m751effectDamage_);
m751damagingMoveData_.setEffects(m751custListEffect_);
m751damagingMoveData_.setStoppableMoveSolo(true);
m751damagingMoveData_.setIgnVarAccurUserNeg(true);
m751damagingMoveData_.setIgnVarEvasTargetPos(true);
m751damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m751damagingMoveData_;
}
static MoveData m390(){
StatusMoveData m752statusMoveData_ = Instances.newStatusMoveData();
m752statusMoveData_.setCounterableMove(true);
m752statusMoveData_.setPp(10);
StringList m752stringList_=new StringList(new CollCapacity(1));
m752stringList_.add(I_SPECTRE);
m752statusMoveData_.setTypes(m752stringList_);
m752stringList_=new StringList(new CollCapacity(1));
m752stringList_.add(I_SPECTRE);
m752statusMoveData_.setBoostedTypes(m752stringList_);
m752statusMoveData_.setAccuracy(R_1);
CustList<Effect> m752custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m752effectStatus_=Instances.newEffectStatus();
MonteCarloString m752monteCarloString_=new MonteCarloString(new CollCapacity(1));
m752monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m752effectStatus_.setLawStatus(m752monteCarloString_);
StringMap<String> m752stringMapString_=new StringMap<String>(new CollCapacity(1));
m752stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m752effectStatus_.setLocalFailStatus(m752stringMapString_);
m752effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m752effectStatus_.setFail(ES);
m752custListEffect_.add(m752effectStatus_);
m752statusMoveData_.setEffects(m752custListEffect_);
m752statusMoveData_.setStoppableMoveSolo(true);
m752statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m752statusMoveData_;
}
static MoveData m391(){
DamagingMoveData m753damagingMoveData_ = Instances.newDamagingMoveData();
m753damagingMoveData_.setCategory(I_SPECIALE);
m753damagingMoveData_.setStoppableMoveKoSingle(true);
m753damagingMoveData_.setPp(30);
StringList m753stringList_=new StringList(new CollCapacity(1));
m753stringList_.add(I_COMBAT);
m753damagingMoveData_.setTypes(m753stringList_);
m753stringList_=new StringList(new CollCapacity(1));
m753stringList_.add(I_COMBAT);
m753damagingMoveData_.setBoostedTypes(m753stringList_);
m753damagingMoveData_.setPriority(1);
m753damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m753custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m753effectDamage_=Instances.newEffectDamage();
m753effectDamage_.setPower(R_40);
m753effectDamage_.setUserAttack(true);
m753effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m753effectDamage_.setTargetDefense(true);
m753effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m753effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m753effectDamage_.setFail(ES);
m753custListEffect_.add(m753effectDamage_);
m753damagingMoveData_.setEffects(m753custListEffect_);
m753damagingMoveData_.setStoppableMoveSolo(true);
m753damagingMoveData_.setStoppableMovePrio(true);
m753damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m753damagingMoveData_;
}
static MoveData m392(){
StatusMoveData m754statusMoveData_ = Instances.newStatusMoveData();
m754statusMoveData_.setPp(5);
StringList m754stringList_=new StringList(new CollCapacity(1));
m754stringList_.add(I_ELECTRIQUE);
m754statusMoveData_.setTypes(m754stringList_);
m754stringList_=new StringList(new CollCapacity(1));
m754stringList_.add(I_ELECTRIQUE);
m754statusMoveData_.setBoostedTypes(m754stringList_);
m754statusMoveData_.setPriority(1);
m754statusMoveData_.setAccuracy(R_1);
CustList<Effect> m754custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m754effectGlobal_=Instances.newEffectGlobal();
m754effectGlobal_.setWeather(true);
m754effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m754stringList_=new StringList(new CollCapacity(1));
m754stringList_.add(I_ELECTRIQUE);
m754effectGlobal_.setImmuneTypes(m754stringList_);
m754effectGlobal_.setDamageEndRound(Rate.newRate(R_1_16));
m754effectGlobal_.setHealingEndRound(Rate.newRate(R_1_16));
m754effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
TypesDuos m754objectMapTypesDuoRate_=new TypesDuos(new CollCapacity(1));
m754objectMapTypesDuoRate_.addEntry(new TypesDuo(I_ELECTRIQUE,I_SOL),Rate.newRate(R_2));
m754effectGlobal_.setEfficiencyMoves(m754objectMapTypesDuoRate_);
m754effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_2));
StringMap<Rate> m754stringMapRate_=new StringMap<Rate>(new CollCapacity(3));
m754stringMapRate_.addEntry(I_COLERE,Rate.newRate(R_2));
m754stringMapRate_.addEntry(I_MANIA,Rate.newRate(R_2));
m754stringMapRate_.addEntry(I_DANSE_FLEUR,Rate.newRate(R_2));
m754effectGlobal_.setMultPowerMoves(m754stringMapRate_);
m754stringList_=new StringList(new CollCapacity(2));
m754stringList_.add(I_GRELE);
m754stringList_.add(I_TEMPETESABLE);
m754effectGlobal_.setCancelEffects(m754stringList_);
m754stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m754stringMapRate_.addEntry(I_ELECTRIQUE,Rate.newRate(R_2));
m754effectGlobal_.setMultDamageTypesMoves(m754stringMapRate_);
m754effectGlobal_.setInvokedMoveTerrain(ES);
m754effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m754effectGlobal_.setFail(ES);
m754custListEffect_.add(m754effectGlobal_);
EffectEndRoundGlobal m754effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m754effectEndRoundGlobal_.setFailEndRound(ES);
m754effectEndRoundGlobal_.setEndRoundRank(37);
m754effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m754effectEndRoundGlobal_.setFail(ES);
Ints m754ints_=new Ints(new CollCapacity(1));
m754ints_.add(0);
m754effectEndRoundGlobal_.setRequiredSuccessfulEffects(m754ints_);
m754custListEffect_.add(m754effectEndRoundGlobal_);
m754statusMoveData_.setEffects(m754custListEffect_);
m754statusMoveData_.setRankIncrementNbRound(27);
m754statusMoveData_.setStoppableMoveMulti(true);
m754statusMoveData_.setStoppableMovePrio(true);
m754statusMoveData_.setIgnVarAccurUserNeg(true);
m754statusMoveData_.setIgnVarEvasTargetPos(true);
m754statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m754statusMoveData_;
}
static MoveData m393(){
DamagingMoveData m755damagingMoveData_ = Instances.newDamagingMoveData();
m755damagingMoveData_.setCategory(I_PHYSIQUE);
m755damagingMoveData_.setStoppableMoveKoSingle(true);
m755damagingMoveData_.setPp(5);
StringList m755stringList_=new StringList(new CollCapacity(1));
m755stringList_.add(I_ROCHE);
m755damagingMoveData_.setTypes(m755stringList_);
m755stringList_=new StringList(new CollCapacity(1));
m755stringList_.add(I_ROCHE);
m755damagingMoveData_.setBoostedTypes(m755stringList_);
m755damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m755custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m755effectDamage_=Instances.newEffectDamage();
m755effectDamage_.setPower(R_100);
m755effectDamage_.setUserAttack(true);
m755effectDamage_.setStatisAtt(Statistic.ATTACK);
m755effectDamage_.setTargetDefense(true);
m755effectDamage_.setStatisDef(Statistic.DEFENSE);
m755effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m755effectDamage_.setFail(ES);
m755custListEffect_.add(m755effectDamage_);
EffectStatistic m755effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m755enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m755enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1L);
m755effectStatistic_.setStatisVarRank(m755enumMapStatisticByte_);
m755effectStatistic_.setEvtRate(Rate.newRate(R_1_2));
m755effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m755effectStatistic_.setFail(ES);
Ints m755ints_=new Ints(new CollCapacity(1));
m755ints_.add(0);
m755effectStatistic_.setRequiredSuccessfulEffects(m755ints_);
m755custListEffect_.add(m755effectStatistic_);
m755damagingMoveData_.setEffects(m755custListEffect_);
m755damagingMoveData_.setStoppableMoveSolo(true);
m755damagingMoveData_.setStoppableMoveMulti(true);
m755damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m755damagingMoveData_;
}
static MoveData m394(){
DamagingMoveData m756damagingMoveData_ = Instances.newDamagingMoveData();
m756damagingMoveData_.setCategory(I_SPECIALE);
m756damagingMoveData_.setStoppableMoveKoSingle(true);
m756damagingMoveData_.setPp(10);
StringList m756stringList_=new StringList(new CollCapacity(1));
m756stringList_.add(I_EAU);
m756damagingMoveData_.setTypes(m756stringList_);
m756stringList_=new StringList(new CollCapacity(1));
m756stringList_.add(I_EAU);
m756damagingMoveData_.setBoostedTypes(m756stringList_);
m756damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m756custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m756effectDamage_=Instances.newEffectDamage();
m756effectDamage_.setPower(R_1);
m756effectDamage_.setUserAttack(true);
m756effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m756effectDamage_.setTargetDefense(true);
m756effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m756effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m756effectDamage_.setFail(ES);
m756custListEffect_.add(m756effectDamage_);
m756damagingMoveData_.setEffects(m756custListEffect_);
m756damagingMoveData_.setStoppableMoveSolo(true);
m756damagingMoveData_.setStoppableMoveMulti(true);
m756damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m756damagingMoveData_;
}
static MoveData m395(){
DamagingMoveData m757damagingMoveData_ = Instances.newDamagingMoveData();
m757damagingMoveData_.setCategory(I_PHYSIQUE);
m757damagingMoveData_.setStoppableMoveKoSingle(true);
m757damagingMoveData_.setPp(10);
StringList m757stringList_=new StringList(new CollCapacity(1));
m757stringList_.add(I_SOL);
m757damagingMoveData_.setTypes(m757stringList_);
m757stringList_=new StringList(new CollCapacity(1));
m757stringList_.add(I_SOL);
m757damagingMoveData_.setBoostedTypes(m757stringList_);
m757damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m757custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m757effectDamage_=newEffectDamageLaw(new Rate(R_2));
m757effectDamage_.setPower(R_50);
m757effectDamage_.setUserAttack(true);
m757effectDamage_.setStatisAtt(Statistic.ATTACK);
m757effectDamage_.setTargetDefense(true);
m757effectDamage_.setStatisDef(Statistic.DEFENSE);
m757effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m757effectDamage_.setFail(ES);
m757custListEffect_.add(m757effectDamage_);
m757damagingMoveData_.setEffects(m757custListEffect_);
m757damagingMoveData_.setStoppableMoveSolo(true);
m757damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m757damagingMoveData_;
}
static MoveData m396(){
DamagingMoveData m758damagingMoveData_ = Instances.newDamagingMoveData();
m758damagingMoveData_.setCategory(I_SPECIALE);
m758damagingMoveData_.setStoppableMoveKoSingle(true);
m758damagingMoveData_.setPp(20);
StringList m758stringList_=new StringList(new CollCapacity(1));
m758stringList_.add(I_DRAGON);
m758damagingMoveData_.setTypes(m758stringList_);
m758stringList_=new StringList(new CollCapacity(1));
m758stringList_.add(I_DRAGON);
m758damagingMoveData_.setBoostedTypes(m758stringList_);
m758damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m758custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m758effectDamage_=Instances.newEffectDamage();
m758effectDamage_.setPower(R_40+OM+LP+R_2+OM+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_ENVOL+OS+I_REBOND+OS+I_CHUTE_LIBRE+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m758effectDamage_.setUserAttack(true);
m758effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m758effectDamage_.setTargetDefense(true);
m758effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m758effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m758effectDamage_.setFail(ES);
m758custListEffect_.add(m758effectDamage_);
EffectStatus m758effectStatus_=Instances.newEffectStatus();
MonteCarloString m758monteCarloString_=new MonteCarloString(new CollCapacity(2));
m758monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m758monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m758effectStatus_.setLawStatus(m758monteCarloString_);
StringMap<String> m758stringMapString_=new StringMap<String>(new CollCapacity(1));
m758stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m758effectStatus_.setLocalFailStatus(m758stringMapString_);
m758effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
m758effectStatus_.setFail(ES);
Ints m758ints_=new Ints(new CollCapacity(1));
m758ints_.add(0);
m758effectStatus_.setRequiredSuccessfulEffects(m758ints_);
m758custListEffect_.add(m758effectStatus_);
m758damagingMoveData_.setEffects(m758custListEffect_);
m758damagingMoveData_.setStoppableMoveSolo(true);
m758damagingMoveData_.setStoppableMoveMulti(true);
m758stringList_=new StringList(new CollCapacity(3));
m758stringList_.add(I_ENVOL);
m758stringList_.add(I_REBOND);
m758stringList_.add(I_CHUTE_LIBRE);
m758damagingMoveData_.setAchieveDisappearedPkUsingMove(m758stringList_);
m758damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m758damagingMoveData_;
}
static MoveData m397(){
StatusMoveData m759statusMoveData_ = Instances.newStatusMoveData();
m759statusMoveData_.setThievableMove(true);
m759statusMoveData_.setPp(20);
StringList m759stringList_=new StringList(new CollCapacity(1));
m759stringList_.add(I_INSECTE);
m759statusMoveData_.setTypes(m759stringList_);
m759stringList_=new StringList(new CollCapacity(1));
m759stringList_.add(I_INSECTE);
m759statusMoveData_.setBoostedTypes(m759stringList_);
m759statusMoveData_.setAccuracy(R_1);
CustList<Effect> m759custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m759effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m759enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(3));
m759enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1L);
m759enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1L);
m759enumMapStatisticByte_.addEntry(Statistic.SPEED,1L);
m759effectStatistic_.setStatisVarRank(m759enumMapStatisticByte_);
m759effectStatistic_.setEvtRate(Rate.newRate(R_1));
m759effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m759effectStatistic_.setFail(ES);
m759custListEffect_.add(m759effectStatistic_);
m759statusMoveData_.setEffects(m759custListEffect_);
m759statusMoveData_.setStoppableMoveMulti(true);
m759statusMoveData_.setIgnVarAccurUserNeg(true);
m759statusMoveData_.setIgnVarEvasTargetPos(true);
m759statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m759statusMoveData_;
}
static MoveData m398(){
DamagingMoveData m760damagingMoveData_ = Instances.newDamagingMoveData();
m760damagingMoveData_.setCategory(I_SPECIALE);
m760damagingMoveData_.setStoppableMoveKoSingle(true);
m760damagingMoveData_.setPp(20);
StringList m760stringList_=new StringList(new CollCapacity(1));
m760stringList_.add(I_ELECTRIQUE);
m760damagingMoveData_.setTypes(m760stringList_);
m760stringList_=new StringList(new CollCapacity(1));
m760stringList_.add(I_ELECTRIQUE);
m760damagingMoveData_.setBoostedTypes(m760stringList_);
m760damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m760custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m760effectDamage_=Instances.newEffectDamage();
m760effectDamage_.setPower(R_50);
m760effectDamage_.setUserAttack(true);
m760effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m760effectDamage_.setTargetDefense(true);
m760effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m760effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m760effectDamage_.setFail(ES);
m760custListEffect_.add(m760effectDamage_);
EffectDamageRate m760effectDamageRate_=Instances.newEffectDamageRate();
m760effectDamageRate_.setRateDamage(Rate.newRate(R_1_2));
m760effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m760effectDamageRate_.setFail(ES);
Ints m760ints_=new Ints(new CollCapacity(1));
m760ints_.add(0);
m760effectDamageRate_.setRequiredSuccessfulEffects(m760ints_);
m760custListEffect_.add(m760effectDamageRate_);
m760damagingMoveData_.setEffects(m760custListEffect_);
m760damagingMoveData_.setStoppableMoveSolo(true);
m760damagingMoveData_.setStoppableMoveMulti(true);
m760damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m760damagingMoveData_;
}
static MoveData m399(){
StatusMoveData m761statusMoveData_ = Instances.newStatusMoveData();
m761statusMoveData_.setCounterableMove(true);
m761statusMoveData_.setPp(30);
StringList m761stringList_=new StringList(new CollCapacity(1));
m761stringList_.add(I_PLANTE);
m761statusMoveData_.setTypes(m761stringList_);
m761stringList_=new StringList(new CollCapacity(1));
m761stringList_.add(I_PLANTE);
m761statusMoveData_.setBoostedTypes(m761stringList_);
m761statusMoveData_.setAccuracy(R_3_4);
CustList<Effect> m761custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m761effectStatus_=Instances.newEffectStatus();
MonteCarloString m761monteCarloString_=new MonteCarloString(new CollCapacity(1));
m761monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m761effectStatus_.setLawStatus(m761monteCarloString_);
StringMap<String> m761stringMapString_=new StringMap<String>(new CollCapacity(1));
m761stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m761effectStatus_.setLocalFailStatus(m761stringMapString_);
m761effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m761effectStatus_.setFail(ES);
m761custListEffect_.add(m761effectStatus_);
m761statusMoveData_.setEffects(m761custListEffect_);
m761statusMoveData_.setStoppableMoveSolo(true);
m761statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m761statusMoveData_;
}
}
