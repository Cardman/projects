package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit16 extends CstIgame{
private MvInit16(){}
static MoveData m400(){
StatusMoveData m764statusMoveData_ = Instances.newStatusMoveData();
m764statusMoveData_.setThievableMove(true);
m764statusMoveData_.setPp(10);
StringList m764stringList_=new StringList(new CollCapacity(1));
m764stringList_.add(I_NORMAL);
m764statusMoveData_.setTypes(m764stringList_);
m764stringList_=new StringList(new CollCapacity(1));
m764stringList_.add(I_NORMAL);
m764statusMoveData_.setBoostedTypes(m764stringList_);
m764statusMoveData_.setAccuracy(R_1);
CustList<Effect> m764custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m764effectFullHpRate_=Instances.newEffectFullHpRate();
m764effectFullHpRate_.setRestoredHp(R_1_2);
m764effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m764custListEffect_.add(m764effectFullHpRate_);
m764statusMoveData_.setEffects(m764custListEffect_);
m764statusMoveData_.setStoppableMoveMulti(true);
m764statusMoveData_.setIgnVarAccurUserNeg(true);
m764statusMoveData_.setIgnVarEvasTargetPos(true);
m764statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m764statusMoveData_;
}
static MoveData m401(){
StatusMoveData m765statusMoveData_ = Instances.newStatusMoveData();
m765statusMoveData_.setPp(10);
StringList m765stringList_=new StringList(new CollCapacity(1));
m765stringList_.add(I_PSY);
m765statusMoveData_.setTypes(m765stringList_);
m765stringList_=new StringList(new CollCapacity(1));
m765stringList_.add(I_PSY);
m765statusMoveData_.setBoostedTypes(m765stringList_);
m765statusMoveData_.setAccuracy(R_1);
CustList<Effect> m765custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCommonStatistics m765effectCommonStatistics_=Instances.newEffectCommonStatistics();
IdMap<Statistic,String> m765enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m765enumMapStatisticString_.addEntry(Statistic.ATTACK,A_MOY+LP+V_LANCEUR_STATIS+SE+I_ATTACK+OC+V_CIBLE_STATIS+SE+I_ATTACK+RP);
m765enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,A_MOY+LP+V_LANCEUR_STATIS+SE+I_SPECIAL_ATTACK+OC+V_CIBLE_STATIS+SE+I_SPECIAL_ATTACK+RP);
m765effectCommonStatistics_.setCommonValue(m765enumMapStatisticString_);
m765effectCommonStatistics_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m765custListEffect_.add(m765effectCommonStatistics_);
m765statusMoveData_.setEffects(m765custListEffect_);
m765statusMoveData_.setStoppableMoveSolo(true);
m765statusMoveData_.setIgnVarAccurUserNeg(true);
m765statusMoveData_.setIgnVarEvasTargetPos(true);
m765statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m765statusMoveData_;
}
static MoveData m402(){
StatusMoveData m766statusMoveData_ = Instances.newStatusMoveData();
m766statusMoveData_.setPp(10);
StringList m766stringList_=new StringList(new CollCapacity(1));
m766stringList_.add(I_PSY);
m766statusMoveData_.setTypes(m766stringList_);
m766stringList_=new StringList(new CollCapacity(1));
m766stringList_.add(I_PSY);
m766statusMoveData_.setBoostedTypes(m766stringList_);
m766statusMoveData_.setAccuracy(R_1);
CustList<Effect> m766custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCommonStatistics m766effectCommonStatistics_=Instances.newEffectCommonStatistics();
IdMap<Statistic,String> m766enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m766enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,A_MOY+LP+V_LANCEUR_STATIS+SE+I_SPECIAL_DEFENSE+OC+V_CIBLE_STATIS+SE+I_SPECIAL_DEFENSE+RP);
m766enumMapStatisticString_.addEntry(Statistic.DEFENSE,A_MOY+LP+V_LANCEUR_STATIS+SE+I_DEFENSE+OC+V_CIBLE_STATIS+SE+I_DEFENSE+RP);
m766effectCommonStatistics_.setCommonValue(m766enumMapStatisticString_);
m766effectCommonStatistics_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m766custListEffect_.add(m766effectCommonStatistics_);
m766statusMoveData_.setEffects(m766custListEffect_);
m766statusMoveData_.setStoppableMoveSolo(true);
m766statusMoveData_.setIgnVarAccurUserNeg(true);
m766statusMoveData_.setIgnVarEvasTargetPos(true);
m766statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m766statusMoveData_;
}
static MoveData m403(){
StatusMoveData m767statusMoveData_ = Instances.newStatusMoveData();
m767statusMoveData_.setPp(20);
StringList m767stringList_=new StringList(new CollCapacity(1));
m767stringList_.add(I_NORMAL);
m767statusMoveData_.setTypes(m767stringList_);
m767stringList_=new StringList(new CollCapacity(1));
m767stringList_.add(I_NORMAL);
m767statusMoveData_.setBoostedTypes(m767stringList_);
m767statusMoveData_.setPriority(3);
m767statusMoveData_.setAccuracy(R_1);
CustList<Effect> m767custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchPointView m767effectSwitchPointView_=Instances.newEffectSwitchPointView();
m767effectSwitchPointView_.setPointViewChangement(PointViewChangementType.ATTRACT_DAMAGES_MOVES);
m767effectSwitchPointView_.setTargetChoice(TargetChoice.LANCEUR);
m767custListEffect_.add(m767effectSwitchPointView_);
m767statusMoveData_.setEffects(m767custListEffect_);
m767statusMoveData_.setStoppableMoveMulti(true);
m767statusMoveData_.setStoppableMovePrio(true);
m767statusMoveData_.setIgnVarAccurUserNeg(true);
m767statusMoveData_.setIgnVarEvasTargetPos(true);
m767statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m767statusMoveData_;
}
static MoveData m404(){
StatusMoveData m768statusMoveData_ = Instances.newStatusMoveData();
m768statusMoveData_.setCounterableMove(true);
m768statusMoveData_.setPp(15);
StringList m768stringList_=new StringList(new CollCapacity(1));
m768stringList_.add(I_NORMAL);
m768statusMoveData_.setTypes(m768stringList_);
m768stringList_=new StringList(new CollCapacity(1));
m768stringList_.add(I_NORMAL);
m768statusMoveData_.setBoostedTypes(m768stringList_);
m768statusMoveData_.setAccuracy(R_1);
CustList<Effect> m768custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchItems m768effectSwitchItems_=Instances.newEffectSwitchItems();
m768effectSwitchItems_.setMoveObject(MoveItemType.GIVE_OBJECT_TARGET);
m768effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m768effectSwitchItems_.setFail(V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+LB+V_LANCEUR_OBJET+RB+RP+OE+R_0+OO+A_CARDINAL+LP+LB+V_CIBLE_OBJET+RB+RP+GT+R_0+OO+V_CIBLE_EFFET+SE+I_REFLET_MAGIK);
m768custListEffect_.add(m768effectSwitchItems_);
m768statusMoveData_.setEffects(m768custListEffect_);
m768statusMoveData_.setStoppableMoveSolo(true);
m768statusMoveData_.setIgnVarAccurUserNeg(true);
m768statusMoveData_.setIgnVarEvasTargetPos(true);
m768statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m768statusMoveData_;
}
static MoveData m405(){
StatusMoveData m769statusMoveData_ = Instances.newStatusMoveData();
m769statusMoveData_.setPp(10);
StringList m769stringList_=new StringList(new CollCapacity(1));
m769stringList_.add(I_TENEBRE);
m769statusMoveData_.setTypes(m769stringList_);
m769stringList_=new StringList(new CollCapacity(1));
m769stringList_.add(I_TENEBRE);
m769statusMoveData_.setBoostedTypes(m769stringList_);
m769statusMoveData_.setAccuracy(R_1);
CustList<Effect> m769custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchItems m769effectSwitchItems_=Instances.newEffectSwitchItems();
m769effectSwitchItems_.setMoveObject(MoveItemType.EXCHANGE_OBJECTS);
m769effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m769effectSwitchItems_.setFail(V_CIBLE_CLONE+GT+R_0);
m769custListEffect_.add(m769effectSwitchItems_);
m769statusMoveData_.setEffects(m769custListEffect_);
m769statusMoveData_.setStoppableMoveSolo(true);
m769statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m769statusMoveData_;
}
static MoveData m406(){
DamagingMoveData m770damagingMoveData_ = Instances.newDamagingMoveData();
m770damagingMoveData_.setCategory(I_PHYSIQUE);
m770damagingMoveData_.setDirect(true);
m770damagingMoveData_.setCannotKo(true);
m770damagingMoveData_.setStoppableMoveKoSingle(true);
m770damagingMoveData_.setPp(10);
StringList m770stringList_=new StringList(new CollCapacity(1));
m770stringList_.add(I_NORMAL);
m770damagingMoveData_.setTypes(m770stringList_);
m770stringList_=new StringList(new CollCapacity(1));
m770stringList_.add(I_NORMAL);
m770damagingMoveData_.setBoostedTypes(m770stringList_);
m770damagingMoveData_.setPriority(1);
m770damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m770custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m770effectDamage_=newEffectDamage();
StringMap<Rate> m770stringMapRate_=new StringMap<Rate>(new CollCapacity(2));
m770stringMapRate_.addEntry(I_SPECIALE,Rate.newRate(R_2));
m770stringMapRate_.addEntry(I_PHYSIQUE,Rate.newRate(R_2));
m770effectDamage_.setMultDamageAgainst(m770stringMapRate_);
m770effectDamage_.setUserAttack(true);
m770effectDamage_.setStatisAtt(Statistic.ATTACK);
m770effectDamage_.setTargetDefense(true);
m770effectDamage_.setStatisDef(Statistic.DEFENSE);
m770effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m770effectDamage_.setFail(A_CARACDROITEOUVERT+LP+V_LANCEUR_DEGATS_RECUS_TOTAL+OC+R_0+RP+OE+R_0);
m770custListEffect_.add(m770effectDamage_);
m770damagingMoveData_.setEffects(m770custListEffect_);
m770damagingMoveData_.setNbPrepaRound(2);
m770damagingMoveData_.setRankIncrementNbRound(23);
m770damagingMoveData_.setStoppableMoveSolo(true);
m770damagingMoveData_.setStoppableMovePrio(true);
m770damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m770damagingMoveData_;
}
static MoveData m407(){
DamagingMoveData m771damagingMoveData_ = Instances.newDamagingMoveData();
m771damagingMoveData_.setCategory(I_PHYSIQUE);
m771damagingMoveData_.setDirect(true);
m771damagingMoveData_.setStoppableMoveKoSingle(true);
m771damagingMoveData_.setPp(15);
StringList m771stringList_=new StringList(new CollCapacity(1));
m771stringList_.add(I_NORMAL);
m771damagingMoveData_.setTypes(m771stringList_);
m771stringList_=new StringList(new CollCapacity(1));
m771stringList_.add(I_NORMAL);
m771damagingMoveData_.setBoostedTypes(m771stringList_);
m771damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m771custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m771effectDamage_=newEffectDamage();
m771effectDamage_.setPower(R_120);
m771effectDamage_.setUserAttack(true);
m771effectDamage_.setStatisAtt(Statistic.ATTACK);
m771effectDamage_.setTargetDefense(true);
m771effectDamage_.setStatisDef(Statistic.DEFENSE);
m771effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m771custListEffect_.add(m771effectDamage_);
EffectDamageRate m771effectDamageRate_=Instances.newEffectDamageRate();
m771effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_4));
m771effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
Ints m771ints_=new Ints(new CollCapacity(1));
m771ints_.add(0);
m771effectDamageRate_.setRequiredSuccessfulEffects(m771ints_);
m771custListEffect_.add(m771effectDamageRate_);
m771damagingMoveData_.setEffects(m771custListEffect_);
m771damagingMoveData_.setStoppableMoveSolo(true);
m771damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m771damagingMoveData_;
}
static MoveData m408(){
StatusMoveData m772statusMoveData_ = Instances.newStatusMoveData();
m772statusMoveData_.setPp(10);
StringList m772stringList_=new StringList(new CollCapacity(1));
m772stringList_.add(I_PSY);
m772statusMoveData_.setTypes(m772stringList_);
m772stringList_=new StringList(new CollCapacity(1));
m772stringList_.add(I_PSY);
m772statusMoveData_.setBoostedTypes(m772stringList_);
m772statusMoveData_.setAccuracy(R_1);
CustList<Effect> m772custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m772effectStatistic_=Instances.newEffectStatistic();
m772effectStatistic_.setEvtRate(Rate.newRate(R_1));
IdList<Statistic> m772enumListStatistic_=new IdList<Statistic>(new CollCapacity(4));
m772enumListStatistic_.add(Statistic.ATTACK);
m772enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m772enumListStatistic_.add(Statistic.DEFENSE);
m772enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m772effectStatistic_.setSwapBoostStatis(m772enumListStatistic_);
IdMap<Statistic,String> m772enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(4));
m772enumMapStatisticString_.addEntry(Statistic.ATTACK,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_ATTACK+GT+OE+V_CIBLE_BOOST+SE+I_ATTACK+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_ATTACK+GT+OE+V_LANCEUR_BOOST+SE+I_ATTACK);
m772enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_SPECIAL_ATTACK+GT+OE+V_CIBLE_BOOST+SE+I_SPECIAL_ATTACK+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_SPECIAL_ATTACK+GT+OE+V_LANCEUR_BOOST+SE+I_SPECIAL_ATTACK);
m772enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_SPECIAL_DEFENSE+GT+OE+V_CIBLE_BOOST+SE+I_SPECIAL_DEFENSE+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_SPECIAL_DEFENSE+GT+OE+V_LANCEUR_BOOST+SE+I_SPECIAL_DEFENSE);
m772enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_DEFENSE+GT+OE+V_CIBLE_BOOST+SE+I_DEFENSE+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_DEFENSE+GT+OE+V_LANCEUR_BOOST+SE+I_DEFENSE);
m772effectStatistic_.setLocalFailSwapBoostStatis(m772enumMapStatisticString_);
m772effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m772custListEffect_.add(m772effectStatistic_);
m772statusMoveData_.setEffects(m772custListEffect_);
m772statusMoveData_.setStoppableMoveSolo(true);
m772statusMoveData_.setIgnVarAccurUserNeg(true);
m772statusMoveData_.setIgnVarEvasTargetPos(true);
m772statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m772statusMoveData_;
}
static MoveData m409(){
StatusMoveData m773statusMoveData_ = Instances.newStatusMoveData();
m773statusMoveData_.setPp(10);
StringList m773stringList_=new StringList(new CollCapacity(1));
m773stringList_.add(I_PSY);
m773statusMoveData_.setTypes(m773stringList_);
m773stringList_=new StringList(new CollCapacity(1));
m773stringList_.add(I_PSY);
m773statusMoveData_.setBoostedTypes(m773stringList_);
m773statusMoveData_.setAccuracy(R_1);
CustList<Effect> m773custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m773effectStatistic_=Instances.newEffectStatistic();
m773effectStatistic_.setEvtRate(Rate.newRate(R_1));
IdList<Statistic> m773enumListStatistic_=new IdList<Statistic>(new CollCapacity(2));
m773enumListStatistic_.add(Statistic.ATTACK);
m773enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m773effectStatistic_.setSwapBoostStatis(m773enumListStatistic_);
IdMap<Statistic,String> m773enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m773enumMapStatisticString_.addEntry(Statistic.ATTACK,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_ATTACK+GT+OE+V_CIBLE_BOOST+SE+I_ATTACK+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_ATTACK+GT+OE+V_LANCEUR_BOOST+SE+I_ATTACK);
m773enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_SPECIAL_ATTACK+GT+OE+V_CIBLE_BOOST+SE+I_SPECIAL_ATTACK+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_SPECIAL_ATTACK+GT+OE+V_LANCEUR_BOOST+SE+I_SPECIAL_ATTACK);
m773effectStatistic_.setLocalFailSwapBoostStatis(m773enumMapStatisticString_);
m773effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m773custListEffect_.add(m773effectStatistic_);
m773statusMoveData_.setEffects(m773custListEffect_);
m773statusMoveData_.setStoppableMoveSolo(true);
m773statusMoveData_.setIgnVarAccurUserNeg(true);
m773statusMoveData_.setIgnVarEvasTargetPos(true);
m773statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m773statusMoveData_;
}
static MoveData m410(){
StatusMoveData m774statusMoveData_ = Instances.newStatusMoveData();
m774statusMoveData_.setPp(10);
StringList m774stringList_=new StringList(new CollCapacity(1));
m774stringList_.add(I_PSY);
m774statusMoveData_.setTypes(m774stringList_);
m774stringList_=new StringList(new CollCapacity(1));
m774stringList_.add(I_PSY);
m774statusMoveData_.setBoostedTypes(m774stringList_);
m774statusMoveData_.setAccuracy(R_1);
CustList<Effect> m774custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m774effectStatistic_=Instances.newEffectStatistic();
m774effectStatistic_.setEvtRate(Rate.newRate(R_1));
IdList<Statistic> m774enumListStatistic_=new IdList<Statistic>(new CollCapacity(2));
m774enumListStatistic_.add(Statistic.DEFENSE);
m774enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m774effectStatistic_.setSwapBoostStatis(m774enumListStatistic_);
IdMap<Statistic,String> m774enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m774enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_SPECIAL_DEFENSE+GT+OE+V_CIBLE_BOOST+SE+I_SPECIAL_DEFENSE+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_SPECIAL_DEFENSE+GT+OE+V_LANCEUR_BOOST+SE+I_SPECIAL_DEFENSE);
m774enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_LANCEUR_CLONE+GT+R_0+OA+V_LANCEUR_BOOST+SE+I_DEFENSE+GT+OE+V_CIBLE_BOOST+SE+I_DEFENSE+OO+V_CIBLE_CLONE+GT+R_0+OA+V_CIBLE_BOOST+SE+I_DEFENSE+GT+OE+V_LANCEUR_BOOST+SE+I_DEFENSE);
m774effectStatistic_.setLocalFailSwapBoostStatis(m774enumMapStatisticString_);
m774effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m774custListEffect_.add(m774effectStatistic_);
m774statusMoveData_.setEffects(m774custListEffect_);
m774statusMoveData_.setStoppableMoveSolo(true);
m774statusMoveData_.setIgnVarAccurUserNeg(true);
m774statusMoveData_.setIgnVarEvasTargetPos(true);
m774statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m774statusMoveData_;
}
static MoveData m411(){
StatusMoveData m775statusMoveData_ = Instances.newStatusMoveData();
m775statusMoveData_.setPp(20);
StringList m775stringList_=new StringList(new CollCapacity(1));
m775stringList_.add(I_NORMAL);
m775statusMoveData_.setTypes(m775stringList_);
m775stringList_=new StringList(new CollCapacity(1));
m775stringList_.add(I_NORMAL);
m775statusMoveData_.setBoostedTypes(m775stringList_);
m775statusMoveData_.setAccuracy(R_1);
CustList<Effect> m775custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m775effectInvoke_=Instances.newEffectInvoke();
m775effectInvoke_.setInvokingTargetSuccesfulMove(true);
m775stringList_=new StringList(new CollCapacity(1));
m775stringList_.add(I_PHOTOCOPIE);
m775effectInvoke_.setMovesNotToBeInvoked(m775stringList_);
m775effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m775effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC);
m775custListEffect_.add(m775effectInvoke_);
m775statusMoveData_.setEffects(m775custListEffect_);
m775statusMoveData_.setStoppableMoveSolo(true);
m775statusMoveData_.setIgnVarAccurUserNeg(true);
m775statusMoveData_.setIgnVarEvasTargetPos(true);
m775statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m775statusMoveData_;
}
static MoveData m412(){
DamagingMoveData m776damagingMoveData_ = Instances.newDamagingMoveData();
m776damagingMoveData_.setCategory(I_SPECIALE);
m776damagingMoveData_.setStoppableMoveKoSingle(true);
m776damagingMoveData_.setPp(10);
StringList m776stringList_=new StringList(new CollCapacity(1));
m776stringList_.add(I_PLANTE);
m776damagingMoveData_.setTypes(m776stringList_);
m776stringList_=new StringList(new CollCapacity(1));
m776stringList_.add(I_PLANTE);
m776damagingMoveData_.setBoostedTypes(m776stringList_);
m776damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m776custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m776effectDamage_=newEffectDamage();
m776effectDamage_.setPower(R_65);
m776effectDamage_.setUserAttack(true);
m776effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m776effectDamage_.setTargetDefense(true);
m776effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m776effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m776custListEffect_.add(m776effectDamage_);
EffectStatistic m776effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m776enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m776enumMapStatisticByte_.addEntry(Statistic.ACCURACY,-1L);
m776effectStatistic_.setStatisVarRank(m776enumMapStatisticByte_);
IdMap<Statistic,String> m776enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m776enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m776effectStatistic_.setLocalFailStatis(m776enumMapStatisticString_);
m776effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m776effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m776ints_=new Ints(new CollCapacity(1));
m776ints_.add(0);
m776effectStatistic_.setRequiredSuccessfulEffects(m776ints_);
m776custListEffect_.add(m776effectStatistic_);
m776damagingMoveData_.setEffects(m776custListEffect_);
m776damagingMoveData_.setStoppableMoveSolo(true);
m776damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m776damagingMoveData_;
}
static MoveData m413(){
DamagingMoveData m777damagingMoveData_ = Instances.newDamagingMoveData();
m777damagingMoveData_.setCategory(I_PHYSIQUE);
m777damagingMoveData_.setStoppableMoveKoSingle(true);
m777damagingMoveData_.setPp(15);
StringList m777stringList_=new StringList(new CollCapacity(1));
m777stringList_.add(I_NORMAL);
m777damagingMoveData_.setTypes(m777stringList_);
m777stringList_=new StringList(new CollCapacity(1));
m777stringList_.add(I_NORMAL);
m777damagingMoveData_.setBoostedTypes(m777stringList_);
m777damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m777custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m777effectDamage_=newEffectDamageLawFour(new LgInt(R_3),new LgInt(R_3),new LgInt(R_1),new LgInt(R_1));
m777effectDamage_.setPower(R_20);
m777effectDamage_.setUserAttack(true);
m777effectDamage_.setStatisAtt(Statistic.ATTACK);
m777effectDamage_.setTargetDefense(true);
m777effectDamage_.setStatisDef(Statistic.DEFENSE);
m777effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m777custListEffect_.add(m777effectDamage_);
m777damagingMoveData_.setEffects(m777custListEffect_);
m777damagingMoveData_.setStoppableMoveSolo(true);
m777damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m777damagingMoveData_;
}
static MoveData m414(){
DamagingMoveData m778damagingMoveData_ = Instances.newDamagingMoveData();
m778damagingMoveData_.setCategory(I_PHYSIQUE);
m778damagingMoveData_.setDirect(true);
m778damagingMoveData_.setStoppableMoveKoSingle(true);
m778damagingMoveData_.setPp(20);
StringList m778stringList_=new StringList(new CollCapacity(1));
m778stringList_.add(I_VOL);
m778damagingMoveData_.setTypes(m778stringList_);
m778stringList_=new StringList(new CollCapacity(1));
m778stringList_.add(I_VOL);
m778damagingMoveData_.setBoostedTypes(m778stringList_);
m778damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m778custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m778effectDamage_=newEffectDamage();
m778effectDamage_.setPower(R_60+OM+LP+A_INCLUSNUM+LP+LB+V_CIBLE_OBJET+RB+OC+LB+RB+RP+OP+R_1+RP);
m778effectDamage_.setUserAttack(true);
m778effectDamage_.setStatisAtt(Statistic.ATTACK);
m778effectDamage_.setTargetDefense(true);
m778effectDamage_.setStatisDef(Statistic.DEFENSE);
m778effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m778custListEffect_.add(m778effectDamage_);
EffectSwitchItems m778effectSwitchItems_=Instances.newEffectSwitchItems();
m778effectSwitchItems_.setMoveObject(MoveItemType.USE_OBJECT_AS_POSSIBLE);
m778effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m778ints_=new Ints(new CollCapacity(1));
m778ints_.add(0);
m778effectSwitchItems_.setRequiredSuccessfulEffects(m778ints_);
m778custListEffect_.add(m778effectSwitchItems_);
m778damagingMoveData_.setEffects(m778custListEffect_);
m778damagingMoveData_.setStoppableMoveSolo(true);
m778damagingMoveData_.setStoppableMoveMulti(true);
m778damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m778damagingMoveData_;
}
static MoveData m415(){
StatusMoveData m779statusMoveData_ = Instances.newStatusMoveData();
m779statusMoveData_.setCounterableMove(true);
m779statusMoveData_.setPp(20);
StringList m779stringList_=new StringList(new CollCapacity(1));
m779stringList_.add(I_SOL);
m779statusMoveData_.setTypes(m779stringList_);
m779stringList_=new StringList(new CollCapacity(1));
m779stringList_.add(I_SOL);
m779statusMoveData_.setBoostedTypes(m779stringList_);
m779statusMoveData_.setAccuracy(R_1);
CustList<Effect> m779custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeamWhileSendFoe m779effectTeamWhileSendFoe_=Instances.newEffectTeamWhileSendFoe();
m779effectTeamWhileSendFoe_.setFailSending(V_IMMU_TYPE_ATT_COMBATTANT_ENTRANT+SE+I_SOL+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_COMBATTANT_ENTRANT_TYPES+RB+OC+LB+I_VOL+RB+RP+RP+GT+R_0);
m779effectTeamWhileSendFoe_.setDamageRateAgainstFoe(LP+A_MIN+LP+V_EQUIPE_ADV_COMBATTANT_ENTRANT_NB_UTILISATION+SE+I_PICOTS+OC+R_3+RP+OP+R_1+RP+OQ+R_16);
m779effectTeamWhileSendFoe_.setTargetChoice(TargetChoice.LANCEUR);
m779custListEffect_.add(m779effectTeamWhileSendFoe_);
m779statusMoveData_.setEffects(m779custListEffect_);
m779statusMoveData_.setStoppableMoveMulti(true);
m779statusMoveData_.setIgnVarAccurUserNeg(true);
m779statusMoveData_.setIgnVarEvasTargetPos(true);
m779statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m779statusMoveData_;
}
static MoveData m416(){
StatusMoveData m780statusMoveData_ = Instances.newStatusMoveData();
m780statusMoveData_.setPp(10);
StringList m780stringList_=new StringList(new CollCapacity(1));
m780stringList_.add(I_PLANTE);
m780statusMoveData_.setTypes(m780stringList_);
m780stringList_=new StringList(new CollCapacity(1));
m780stringList_.add(I_PLANTE);
m780statusMoveData_.setBoostedTypes(m780stringList_);
m780statusMoveData_.setPriority(4);
m780statusMoveData_.setAccuracy(R_1);
CustList<Effect> m780custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCounterAttack m780effectCounterAttack_=Instances.newEffectCounterAttack();
m780effectCounterAttack_.setSufferingDamageDirectMove(Rate.newRate(R_1_8));
m780effectCounterAttack_.setTargetChoice(TargetChoice.LANCEUR);
m780custListEffect_.add(m780effectCounterAttack_);
m780statusMoveData_.setEffects(m780custListEffect_);
m780statusMoveData_.setStoppableMovePrio(true);
m780statusMoveData_.setIgnVarAccurUserNeg(true);
m780statusMoveData_.setIgnVarEvasTargetPos(true);
m780statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m780statusMoveData_;
}
static MoveData m417(){
DamagingMoveData m781damagingMoveData_ = Instances.newDamagingMoveData();
m781damagingMoveData_.setCategory(I_PHYSIQUE);
m781damagingMoveData_.setDirect(true);
m781damagingMoveData_.setStoppableMoveKoSingle(true);
m781damagingMoveData_.setPp(35);
StringList m781stringList_=new StringList(new CollCapacity(1));
m781stringList_.add(I_VOL);
m781damagingMoveData_.setTypes(m781stringList_);
m781stringList_=new StringList(new CollCapacity(1));
m781stringList_.add(I_VOL);
m781damagingMoveData_.setBoostedTypes(m781stringList_);
m781damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m781custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m781effectDamage_=newEffectDamage();
m781effectDamage_.setPower(R_35);
m781effectDamage_.setUserAttack(true);
m781effectDamage_.setStatisAtt(Statistic.ATTACK);
m781effectDamage_.setTargetDefense(true);
m781effectDamage_.setStatisDef(Statistic.DEFENSE);
m781effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m781custListEffect_.add(m781effectDamage_);
m781damagingMoveData_.setEffects(m781custListEffect_);
m781damagingMoveData_.setStoppableMoveSolo(true);
m781damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m781damagingMoveData_;
}
static MoveData m418(){
StatusMoveData m782statusMoveData_ = Instances.newStatusMoveData();
m782statusMoveData_.setCounterableMove(true);
m782statusMoveData_.setPp(20);
StringList m782stringList_=new StringList(new CollCapacity(1));
m782stringList_.add(I_POISON);
m782statusMoveData_.setTypes(m782stringList_);
m782stringList_=new StringList(new CollCapacity(1));
m782stringList_.add(I_POISON);
m782statusMoveData_.setBoostedTypes(m782stringList_);
m782statusMoveData_.setAccuracy(R_1);
CustList<Effect> m782custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeamWhileSendFoe m782effectTeamWhileSendFoe_=Instances.newEffectTeamWhileSendFoe();
m782effectTeamWhileSendFoe_.setFailSending(V_IMMU_TYPE_ATT_COMBATTANT_ENTRANT+SE+I_SOL+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_COMBATTANT_ENTRANT_TYPES+RB+OC+LB+I_VOL+OS+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0+OO+V_COMBATTANT_ENTRANT_CLONE+GT+R_0);
LongMap<String> m782shortMapString_=new LongMap<String>(new CollCapacity(4));
m782shortMapString_.addEntry(1L,I_SIMPLE_POISON);
m782shortMapString_.addEntry(2L,I_POISON_GRAVE);
m782effectTeamWhileSendFoe_.setStatusByNbUses(m782shortMapString_);
m782stringList_=new StringList(new CollCapacity(1));
m782stringList_.add(I_POISON);
m782effectTeamWhileSendFoe_.setDeletedByFoeTypes(m782stringList_);
m782effectTeamWhileSendFoe_.setTargetChoice(TargetChoice.LANCEUR);
m782custListEffect_.add(m782effectTeamWhileSendFoe_);
m782statusMoveData_.setEffects(m782custListEffect_);
m782statusMoveData_.setStoppableMoveMulti(true);
m782statusMoveData_.setIgnVarAccurUserNeg(true);
m782statusMoveData_.setIgnVarEvasTargetPos(true);
m782statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m782statusMoveData_;
}
static MoveData m419(){
DamagingMoveData m783damagingMoveData_ = Instances.newDamagingMoveData();
m783damagingMoveData_.setCategory(I_PHYSIQUE);
m783damagingMoveData_.setDirect(true);
m783damagingMoveData_.setStoppableMoveKoSingle(true);
m783damagingMoveData_.setPp(10);
StringList m783stringList_=new StringList(new CollCapacity(1));
m783stringList_.add(I_FEU);
m783damagingMoveData_.setTypes(m783stringList_);
m783stringList_=new StringList(new CollCapacity(1));
m783stringList_.add(I_FEU);
m783damagingMoveData_.setBoostedTypes(m783stringList_);
m783damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m783custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m783effectDamage_=newEffectDamage();
m783effectDamage_.setChRate(1);
m783effectDamage_.setPower(R_85);
m783effectDamage_.setUserAttack(true);
m783effectDamage_.setStatisAtt(Statistic.ATTACK);
m783effectDamage_.setTargetDefense(true);
m783effectDamage_.setStatisDef(Statistic.DEFENSE);
m783effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m783custListEffect_.add(m783effectDamage_);
EffectStatus m783effectStatus_=Instances.newEffectStatus();
MonteCarloString m783monteCarloString_=new MonteCarloString(new CollCapacity(2));
m783monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m783monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m783effectStatus_.setLawStatus(m783monteCarloString_);
StringMap<String> m783stringMapString_=new StringMap<String>(new CollCapacity(1));
m783stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m783effectStatus_.setLocalFailStatus(m783stringMapString_);
m783effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m783ints_=new Ints(new CollCapacity(1));
m783ints_.add(0);
m783effectStatus_.setRequiredSuccessfulEffects(m783ints_);
m783custListEffect_.add(m783effectStatus_);
m783damagingMoveData_.setEffects(m783custListEffect_);
m783damagingMoveData_.setStoppableMoveSolo(true);
m783damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m783damagingMoveData_;
}
static MoveData m420(){
DamagingMoveData m784damagingMoveData_ = Instances.newDamagingMoveData();
m784damagingMoveData_.setCategory(I_PHYSIQUE);
m784damagingMoveData_.setDirect(true);
m784damagingMoveData_.setStoppableMoveKoSingle(true);
m784damagingMoveData_.setPp(25);
StringList m784stringList_=new StringList(new CollCapacity(1));
m784stringList_.add(I_COMBAT);
m784damagingMoveData_.setTypes(m784stringList_);
m784stringList_=new StringList(new CollCapacity(1));
m784stringList_.add(I_COMBAT);
m784damagingMoveData_.setBoostedTypes(m784stringList_);
m784damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m784custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m784effectDamage_=newEffectDamage();
m784effectDamage_.setPower(R_100);
m784effectDamage_.setUserAttack(true);
m784effectDamage_.setStatisAtt(Statistic.ATTACK);
m784effectDamage_.setTargetDefense(true);
m784effectDamage_.setStatisDef(Statistic.DEFENSE);
m784effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m784custListEffect_.add(m784effectDamage_);
m784damagingMoveData_.setEffects(m784custListEffect_);
m784damagingMoveData_.setStoppableMoveSolo(true);
m784damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m784damagingMoveData_;
}
static MoveData m421(){
DamagingMoveData m785damagingMoveData_ = Instances.newDamagingMoveData();
m785damagingMoveData_.setCategory(I_PHYSIQUE);
m785damagingMoveData_.setDirect(true);
m785damagingMoveData_.setStoppableMoveKoSingle(true);
m785damagingMoveData_.setPp(20);
StringList m785stringList_=new StringList(new CollCapacity(1));
m785stringList_.add(I_COMBAT);
m785damagingMoveData_.setTypes(m785stringList_);
m785stringList_=new StringList(new CollCapacity(1));
m785stringList_.add(I_COMBAT);
m785damagingMoveData_.setBoostedTypes(m785stringList_);
m785damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m785custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m785effectDamage_=newEffectDamage();
m785effectDamage_.setPower(R_130);
m785effectDamage_.setUserAttack(true);
m785effectDamage_.setStatisAtt(Statistic.ATTACK);
m785effectDamage_.setTargetDefense(true);
m785effectDamage_.setStatisDef(Statistic.DEFENSE);
m785effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m785custListEffect_.add(m785effectDamage_);
m785damagingMoveData_.setEffects(m785custListEffect_);
m785damagingMoveData_.setStoppableMoveSolo(true);
m785damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m785damagingMoveData_;
}
static MoveData m422(){
StatusMoveData m786statusMoveData_ = Instances.newStatusMoveData();
m786statusMoveData_.setCounterableMove(true);
m786statusMoveData_.setPp(20);
StringList m786stringList_=new StringList(new CollCapacity(1));
m786stringList_.add(I_ROCHE);
m786statusMoveData_.setTypes(m786stringList_);
m786stringList_=new StringList(new CollCapacity(1));
m786stringList_.add(I_ROCHE);
m786statusMoveData_.setBoostedTypes(m786stringList_);
m786statusMoveData_.setAccuracy(R_1);
CustList<Effect> m786custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeamWhileSendFoe m786effectTeamWhileSendFoe_=Instances.newEffectTeamWhileSendFoe();
m786effectTeamWhileSendFoe_.setDamageRateAgainstFoe(V_COEFF_EFF_BASE_TYPES_COMBATTANT_ENTRANT+SE+I_ROCHE+OM+R_1_8);
m786effectTeamWhileSendFoe_.setTargetChoice(TargetChoice.LANCEUR);
m786custListEffect_.add(m786effectTeamWhileSendFoe_);
m786statusMoveData_.setEffects(m786custListEffect_);
m786statusMoveData_.setStoppableMoveMulti(true);
m786statusMoveData_.setIgnVarAccurUserNeg(true);
m786statusMoveData_.setIgnVarEvasTargetPos(true);
m786statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m786statusMoveData_;
}
static MoveData m423(){
StatusMoveData m787statusMoveData_ = Instances.newStatusMoveData();
m787statusMoveData_.setCounterableMove(true);
m787statusMoveData_.setPp(20);
StringList m787stringList_=new StringList(new CollCapacity(1));
m787stringList_.add(I_POISON);
m787statusMoveData_.setTypes(m787stringList_);
m787stringList_=new StringList(new CollCapacity(1));
m787stringList_.add(I_POISON);
m787statusMoveData_.setBoostedTypes(m787stringList_);
m787statusMoveData_.setAccuracy(R_1);
CustList<Effect> m787custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m787effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m787enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(3));
m787enumMapStatisticByte_.addEntry(Statistic.ATTACK,-1L);
m787enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1L);
m787enumMapStatisticByte_.addEntry(Statistic.SPEED,-1L);
m787effectStatistic_.setStatisVarRank(m787enumMapStatisticByte_);
IdMap<Statistic,String> m787enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(3));
m787enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m787enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m787enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m787effectStatistic_.setLocalFailStatis(m787enumMapStatisticString_);
m787effectStatistic_.setEvtRate(Rate.newRate(R_1));
m787effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m787effectStatistic_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+OE+R_0);
m787custListEffect_.add(m787effectStatistic_);
m787statusMoveData_.setEffects(m787custListEffect_);
m787statusMoveData_.setStoppableMoveSolo(true);
m787statusMoveData_.setStoppableMoveMulti(true);
m787statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m787statusMoveData_;
}
static MoveData m424(){
DamagingMoveData m788damagingMoveData_ = Instances.newDamagingMoveData();
m788damagingMoveData_.setCategory(I_PHYSIQUE);
m788damagingMoveData_.setStoppableMoveKoSingle(true);
m788damagingMoveData_.setPp(20);
StringList m788stringList_=new StringList(new CollCapacity(1));
m788stringList_.add(I_SOL);
m788damagingMoveData_.setTypes(m788stringList_);
m788stringList_=new StringList(new CollCapacity(1));
m788stringList_.add(I_SOL);
m788damagingMoveData_.setBoostedTypes(m788stringList_);
m788damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m788custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m788effectDamage_=newEffectDamage();
m788effectDamage_.setPower(R_60);
m788effectDamage_.setUserAttack(true);
m788effectDamage_.setStatisAtt(Statistic.ATTACK);
m788effectDamage_.setTargetDefense(true);
m788effectDamage_.setStatisDef(Statistic.DEFENSE);
m788effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m788custListEffect_.add(m788effectDamage_);
EffectStatistic m788effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m788enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m788enumMapStatisticByte_.addEntry(Statistic.SPEED,-1L);
m788effectStatistic_.setStatisVarRank(m788enumMapStatisticByte_);
IdMap<Statistic,String> m788enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m788enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m788effectStatistic_.setLocalFailStatis(m788enumMapStatisticString_);
m788effectStatistic_.setEvtRate(Rate.newRate(R_1));
m788effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m788ints_=new Ints(new CollCapacity(1));
m788ints_.add(0);
m788effectStatistic_.setRequiredSuccessfulEffects(m788ints_);
m788custListEffect_.add(m788effectStatistic_);
m788damagingMoveData_.setEffects(m788custListEffect_);
m788damagingMoveData_.setStoppableMoveSolo(true);
m788damagingMoveData_.setStoppableMoveMulti(true);
m788damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m788damagingMoveData_;
}
}
