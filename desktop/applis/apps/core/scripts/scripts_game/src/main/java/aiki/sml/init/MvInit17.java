package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit17 extends CstIgame{
private MvInit17(){}
static MoveData m425(){
DamagingMoveData m791damagingMoveData_ = Instances.newDamagingMoveData();
m791damagingMoveData_.setCategory(I_PHYSIQUE);
m791damagingMoveData_.setStoppableMoveKoSingle(true);
m791damagingMoveData_.setPp(20);
StringList m791stringList_=new StringList(new CollCapacity(1));
m791stringList_.add(I_NORMAL);
m791damagingMoveData_.setTypes(m791stringList_);
m791stringList_=new StringList(new CollCapacity(1));
m791stringList_.add(I_NORMAL);
m791damagingMoveData_.setBoostedTypes(m791stringList_);
m791damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m791custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m791effectDamage_=newEffectDamageLawFour(new LgInt(R_3),new LgInt(R_3),new LgInt(R_1),new LgInt(R_1));
m791effectDamage_.setPower(R_15);
m791effectDamage_.setUserAttack(true);
m791effectDamage_.setStatisAtt(Statistic.ATTACK);
m791effectDamage_.setTargetDefense(true);
m791effectDamage_.setStatisDef(Statistic.DEFENSE);
m791effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m791custListEffect_.add(m791effectDamage_);
m791damagingMoveData_.setEffects(m791custListEffect_);
m791damagingMoveData_.setStoppableMoveSolo(true);
m791damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m791damagingMoveData_;
}
static MoveData m426(){
DamagingMoveData m792damagingMoveData_ = Instances.newDamagingMoveData();
m792damagingMoveData_.setCategory(I_PHYSIQUE);
m792damagingMoveData_.setDirect(true);
m792damagingMoveData_.setStoppableMoveKoSingle(true);
m792damagingMoveData_.setPp(10);
StringList m792stringList_=new StringList(new CollCapacity(1));
m792stringList_.add(I_EAU);
m792damagingMoveData_.setTypes(m792stringList_);
m792stringList_=new StringList(new CollCapacity(1));
m792stringList_.add(I_EAU);
m792damagingMoveData_.setBoostedTypes(m792stringList_);
m792damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m792custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m792effectDamage_=newEffectDamage();
m792effectDamage_.setChRate(1);
m792effectDamage_.setPower(R_90);
m792effectDamage_.setUserAttack(true);
m792effectDamage_.setStatisAtt(Statistic.ATTACK);
m792effectDamage_.setTargetDefense(true);
m792effectDamage_.setStatisDef(Statistic.DEFENSE);
m792effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m792custListEffect_.add(m792effectDamage_);
m792damagingMoveData_.setEffects(m792custListEffect_);
m792damagingMoveData_.setStoppableMoveSolo(true);
m792damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m792damagingMoveData_;
}
static MoveData m427(){
DamagingMoveData m793damagingMoveData_ = Instances.newDamagingMoveData();
m793damagingMoveData_.setCategory(I_PHYSIQUE);
m793damagingMoveData_.setStoppableMoveKoSingle(true);
m793damagingMoveData_.setPp(5);
StringList m793stringList_=new StringList(new CollCapacity(1));
m793stringList_.add(I_VOL);
m793damagingMoveData_.setTypes(m793stringList_);
m793stringList_=new StringList(new CollCapacity(1));
m793stringList_.add(I_VOL);
m793damagingMoveData_.setBoostedTypes(m793stringList_);
m793damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m793custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m793effectDamage_=newEffectDamage();
m793effectDamage_.setPower(R_140);
m793effectDamage_.setUserAttack(true);
m793effectDamage_.setStatisAtt(Statistic.ATTACK);
m793effectDamage_.setTargetDefense(true);
m793effectDamage_.setStatisDef(Statistic.DEFENSE);
m793effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m793custListEffect_.add(m793effectDamage_);
EffectStatus m793effectStatus_=Instances.newEffectStatus();
MonteCarloString m793monteCarloString_=new MonteCarloString(new CollCapacity(2));
m793monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m793monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m793effectStatus_.setLawStatus(m793monteCarloString_);
StringMap<String> m793stringMapString_=new StringMap<String>(new CollCapacity(1));
m793stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m793effectStatus_.setLocalFailStatus(m793stringMapString_);
m793effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m793ints_=new Ints(new CollCapacity(1));
m793ints_.add(0);
m793effectStatus_.setRequiredSuccessfulEffects(m793ints_);
m793custListEffect_.add(m793effectStatus_);
m793damagingMoveData_.setEffects(m793custListEffect_);
m793damagingMoveData_.setNbPrepaRound(1);
m793damagingMoveData_.setStoppableMoveSolo(true);
m793damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m793damagingMoveData_;
}
static MoveData m428(){
DamagingMoveData m794damagingMoveData_ = Instances.newDamagingMoveData();
m794damagingMoveData_.setCategory(I_PHYSIQUE);
m794damagingMoveData_.setDirect(true);
m794damagingMoveData_.setStoppableMoveKoSingle(true);
m794damagingMoveData_.setPp(20);
StringList m794stringList_=new StringList(new CollCapacity(1));
m794stringList_.add(I_INSECTE);
m794damagingMoveData_.setTypes(m794stringList_);
m794stringList_=new StringList(new CollCapacity(1));
m794stringList_.add(I_INSECTE);
m794damagingMoveData_.setBoostedTypes(m794stringList_);
m794damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m794custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m794effectDamage_=newEffectDamage();
m794effectDamage_.setPower(R_60+OM+LP+A_INCLUSNUM+LP+LB+V_CIBLE_OBJET+RB+OC+LB+RB+RP+OP+R_1+RP);
m794effectDamage_.setUserAttack(true);
m794effectDamage_.setStatisAtt(Statistic.ATTACK);
m794effectDamage_.setTargetDefense(true);
m794effectDamage_.setStatisDef(Statistic.DEFENSE);
m794effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m794custListEffect_.add(m794effectDamage_);
EffectSwitchItems m794effectSwitchItems_=Instances.newEffectSwitchItems();
m794effectSwitchItems_.setMoveObject(MoveItemType.USE_OBJECT_AS_POSSIBLE);
m794effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m794ints_=new Ints(new CollCapacity(1));
m794ints_.add(0);
m794effectSwitchItems_.setRequiredSuccessfulEffects(m794ints_);
m794custListEffect_.add(m794effectSwitchItems_);
m794damagingMoveData_.setEffects(m794custListEffect_);
m794damagingMoveData_.setStoppableMoveSolo(true);
m794damagingMoveData_.setStoppableMoveMulti(true);
m794damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m794damagingMoveData_;
}
static MoveData m429(){
DamagingMoveData m795damagingMoveData_ = Instances.newDamagingMoveData();
m795damagingMoveData_.setCategory(I_SPECIALE);
m795damagingMoveData_.setStoppableMoveKoSingle(true);
m795damagingMoveData_.setPp(25);
StringList m795stringList_=new StringList(new CollCapacity(1));
m795stringList_.add(I_EAU);
m795damagingMoveData_.setTypes(m795stringList_);
m795stringList_=new StringList(new CollCapacity(1));
m795stringList_.add(I_EAU);
m795damagingMoveData_.setBoostedTypes(m795stringList_);
m795damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m795custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m795effectDamage_=newEffectDamage();
m795effectDamage_.setPower(R_40);
m795effectDamage_.setUserAttack(true);
m795effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m795effectDamage_.setTargetDefense(true);
m795effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m795effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m795custListEffect_.add(m795effectDamage_);
m795damagingMoveData_.setEffects(m795custListEffect_);
m795damagingMoveData_.setStoppableMoveSolo(true);
m795damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m795damagingMoveData_;
}
static MoveData m430(){
DamagingMoveData m796damagingMoveData_ = Instances.newDamagingMoveData();
m796damagingMoveData_.setCategory(I_PHYSIQUE);
m796damagingMoveData_.setDirect(true);
m796damagingMoveData_.setStoppableMoveKoSingle(true);
m796damagingMoveData_.setPp(30);
StringList m796stringList_=new StringList(new CollCapacity(1));
m796stringList_.add(I_ACIER);
m796damagingMoveData_.setTypes(m796stringList_);
m796stringList_=new StringList(new CollCapacity(1));
m796stringList_.add(I_ACIER);
m796damagingMoveData_.setBoostedTypes(m796stringList_);
m796damagingMoveData_.setPriority(1);
m796damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m796custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m796effectDamage_=newEffectDamage();
m796effectDamage_.setPower(R_40);
m796effectDamage_.setUserAttack(true);
m796effectDamage_.setStatisAtt(Statistic.ATTACK);
m796effectDamage_.setTargetDefense(true);
m796effectDamage_.setStatisDef(Statistic.DEFENSE);
m796effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m796custListEffect_.add(m796effectDamage_);
m796damagingMoveData_.setEffects(m796custListEffect_);
m796damagingMoveData_.setStoppableMoveSolo(true);
m796damagingMoveData_.setStoppableMovePrio(true);
m796damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m796damagingMoveData_;
}
static MoveData m431(){
DamagingMoveData m797damagingMoveData_ = Instances.newDamagingMoveData();
m797damagingMoveData_.setCategory(I_PHYSIQUE);
m797damagingMoveData_.setDirect(true);
m797damagingMoveData_.setStoppableMoveKoSingle(true);
m797damagingMoveData_.setPp(15);
StringList m797stringList_=new StringList(new CollCapacity(1));
m797stringList_.add(I_INSECTE);
m797damagingMoveData_.setTypes(m797stringList_);
m797stringList_=new StringList(new CollCapacity(1));
m797stringList_.add(I_INSECTE);
m797damagingMoveData_.setBoostedTypes(m797stringList_);
m797damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m797custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m797effectDamage_=newEffectDamage();
m797effectDamage_.setPower(R_80);
m797effectDamage_.setUserAttack(true);
m797effectDamage_.setStatisAtt(Statistic.ATTACK);
m797effectDamage_.setTargetDefense(true);
m797effectDamage_.setStatisDef(Statistic.DEFENSE);
m797effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m797custListEffect_.add(m797effectDamage_);
m797damagingMoveData_.setEffects(m797custListEffect_);
m797damagingMoveData_.setStoppableMoveSolo(true);
m797damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m797damagingMoveData_;
}
static MoveData m432(){
DamagingMoveData m798damagingMoveData_ = Instances.newDamagingMoveData();
m798damagingMoveData_.setCategory(I_PHYSIQUE);
m798damagingMoveData_.setDirect(true);
m798damagingMoveData_.setStoppableMoveKoSingle(true);
m798damagingMoveData_.setPp(20);
StringList m798stringList_=new StringList(new CollCapacity(1));
m798stringList_.add(I_VOL);
m798damagingMoveData_.setTypes(m798stringList_);
m798stringList_=new StringList(new CollCapacity(1));
m798stringList_.add(I_VOL);
m798damagingMoveData_.setBoostedTypes(m798stringList_);
m798damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m798custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m798effectDamage_=newEffectDamage();
m798effectDamage_.setPower(R_120);
m798effectDamage_.setUserAttack(true);
m798effectDamage_.setStatisAtt(Statistic.ATTACK);
m798effectDamage_.setTargetDefense(true);
m798effectDamage_.setStatisDef(Statistic.DEFENSE);
m798effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m798custListEffect_.add(m798effectDamage_);
m798damagingMoveData_.setEffects(m798custListEffect_);
m798damagingMoveData_.setNbPrepaRound(1);
m798damagingMoveData_.setDisappearBeforeUse(true);
m798damagingMoveData_.setStoppableMoveSolo(true);
m798damagingMoveData_.setIgnVarAccurUserNeg(true);
m798damagingMoveData_.setIgnVarEvasTargetPos(true);
m798damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m798damagingMoveData_;
}
static MoveData m433(){
DamagingMoveData m799damagingMoveData_ = Instances.newDamagingMoveData();
m799damagingMoveData_.setCategory(I_PHYSIQUE);
m799damagingMoveData_.setDirect(true);
m799damagingMoveData_.setStoppableMoveKoSingle(true);
m799damagingMoveData_.setPp(15);
StringList m799stringList_=new StringList(new CollCapacity(1));
m799stringList_.add(I_NORMAL);
m799damagingMoveData_.setTypes(m799stringList_);
m799stringList_=new StringList(new CollCapacity(1));
m799stringList_.add(I_NORMAL);
m799damagingMoveData_.setBoostedTypes(m799stringList_);
m799damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m799custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m799effectDamage_=newEffectDamage();
m799effectDamage_.setPower(R_85);
m799effectDamage_.setUserAttack(true);
m799effectDamage_.setStatisAtt(Statistic.ATTACK);
m799effectDamage_.setTargetDefense(true);
m799effectDamage_.setStatisDef(Statistic.DEFENSE);
m799effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m799custListEffect_.add(m799effectDamage_);
EffectStatus m799effectStatus_=Instances.newEffectStatus();
MonteCarloString m799monteCarloString_=new MonteCarloString(new CollCapacity(2));
m799monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m799monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_3));
m799effectStatus_.setLawStatus(m799monteCarloString_);
StringMap<String> m799stringMapString_=new StringMap<String>(new CollCapacity(1));
m799stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m799effectStatus_.setLocalFailStatus(m799stringMapString_);
m799effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m799ints_=new Ints(new CollCapacity(1));
m799ints_.add(0);
m799effectStatus_.setRequiredSuccessfulEffects(m799ints_);
m799custListEffect_.add(m799effectStatus_);
m799damagingMoveData_.setEffects(m799custListEffect_);
m799damagingMoveData_.setStoppableMoveSolo(true);
m799damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m799damagingMoveData_;
}
static MoveData m434(){
StatusMoveData m800statusMoveData_ = Instances.newStatusMoveData();
m800statusMoveData_.setThievableMove(true);
m800statusMoveData_.setPp(20);
StringList m800stringList_=new StringList(new CollCapacity(1));
m800stringList_.add(I_PSY);
m800statusMoveData_.setTypes(m800stringList_);
m800stringList_=new StringList(new CollCapacity(1));
m800stringList_.add(I_PSY);
m800statusMoveData_.setBoostedTypes(m800stringList_);
m800statusMoveData_.setAccuracy(R_1);
CustList<Effect> m800custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m800effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m800enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m800enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1L);
m800enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1L);
m800effectStatistic_.setStatisVarRank(m800enumMapStatisticByte_);
m800effectStatistic_.setEvtRate(Rate.newRate(R_1));
m800effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m800custListEffect_.add(m800effectStatistic_);
m800statusMoveData_.setEffects(m800custListEffect_);
m800statusMoveData_.setStoppableMoveMulti(true);
m800statusMoveData_.setIgnVarAccurUserNeg(true);
m800statusMoveData_.setIgnVarEvasTargetPos(true);
m800statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m800statusMoveData_;
}
static MoveData m435(){
DamagingMoveData m801damagingMoveData_ = Instances.newDamagingMoveData();
m801damagingMoveData_.setCategory(I_PHYSIQUE);
m801damagingMoveData_.setDirect(true);
m801damagingMoveData_.setStoppableMoveKoSingle(true);
m801damagingMoveData_.setPp(10);
StringList m801stringList_=new StringList(new CollCapacity(1));
m801stringList_.add(I_EAU);
m801damagingMoveData_.setTypes(m801stringList_);
m801stringList_=new StringList(new CollCapacity(1));
m801stringList_.add(I_EAU);
m801damagingMoveData_.setBoostedTypes(m801stringList_);
m801damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m801custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m801effectDamage_=newEffectDamage();
m801effectDamage_.setPower(R_60);
m801effectDamage_.setUserAttack(true);
m801effectDamage_.setStatisAtt(Statistic.ATTACK);
m801effectDamage_.setTargetDefense(true);
m801effectDamage_.setStatisDef(Statistic.DEFENSE);
m801effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m801custListEffect_.add(m801effectDamage_);
m801damagingMoveData_.setEffects(m801custListEffect_);
m801damagingMoveData_.setNbPrepaRound(1);
m801damagingMoveData_.setDisappearBeforeUse(true);
m801damagingMoveData_.setStoppableMoveSolo(true);
m801damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m801damagingMoveData_;
}
static MoveData m436(){
DamagingMoveData m802damagingMoveData_ = Instances.newDamagingMoveData();
m802damagingMoveData_.setCategory(I_PHYSIQUE);
m802damagingMoveData_.setDirect(true);
m802damagingMoveData_.setStoppableMoveKoSingle(true);
m802damagingMoveData_.setPp(10);
StringList m802stringList_=new StringList(new CollCapacity(1));
m802stringList_.add(I_NORMAL);
m802damagingMoveData_.setTypes(m802stringList_);
m802stringList_=new StringList(new CollCapacity(1));
m802stringList_.add(I_NORMAL);
m802damagingMoveData_.setBoostedTypes(m802stringList_);
m802damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m802custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m802effectDamage_=newEffectDamageLawFour(new LgInt(R_3),new LgInt(R_3),new LgInt(R_1),new LgInt(R_1));
m802effectDamage_.setPower(R_25);
m802effectDamage_.setUserAttack(true);
m802effectDamage_.setStatisAtt(Statistic.ATTACK);
m802effectDamage_.setTargetDefense(true);
m802effectDamage_.setStatisDef(Statistic.DEFENSE);
m802effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m802custListEffect_.add(m802effectDamage_);
m802damagingMoveData_.setEffects(m802custListEffect_);
m802damagingMoveData_.setStoppableMoveSolo(true);
m802damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m802damagingMoveData_;
}
static MoveData m437(){
DamagingMoveData m803damagingMoveData_ = Instances.newDamagingMoveData();
m803damagingMoveData_.setCategory(I_PHYSIQUE);
m803damagingMoveData_.setDirect(true);
m803damagingMoveData_.setStoppableMoveKoSingle(true);
m803damagingMoveData_.setPp(15);
StringList m803stringList_=new StringList(new CollCapacity(1));
m803stringList_.add(I_GLACE);
m803damagingMoveData_.setTypes(m803stringList_);
m803stringList_=new StringList(new CollCapacity(1));
m803stringList_.add(I_GLACE);
m803damagingMoveData_.setBoostedTypes(m803stringList_);
m803damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m803custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m803effectDamage_=newEffectDamage();
m803effectDamage_.setPower(R_90);
m803effectDamage_.setUserAttack(true);
m803effectDamage_.setStatisAtt(Statistic.ATTACK);
m803effectDamage_.setTargetDefense(true);
m803effectDamage_.setStatisDef(Statistic.DEFENSE);
m803effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m803custListEffect_.add(m803effectDamage_);
EffectStatus m803effectStatus_=Instances.newEffectStatus();
MonteCarloString m803monteCarloString_=new MonteCarloString(new CollCapacity(2));
m803monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m803monteCarloString_.addQuickEvent(I_GEL,LgInt.newLgInt(R_1));
m803effectStatus_.setLawStatus(m803monteCarloString_);
StringMap<String> m803stringMapString_=new StringMap<String>(new CollCapacity(1));
m803stringMapString_.addEntry(I_GEL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_GEL+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_GLACE+RB+RP+RP+GT+R_0);
m803effectStatus_.setLocalFailStatus(m803stringMapString_);
m803effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m803ints_=new Ints(new CollCapacity(1));
m803ints_.add(0);
m803effectStatus_.setRequiredSuccessfulEffects(m803ints_);
m803custListEffect_.add(m803effectStatus_);
m803damagingMoveData_.setEffects(m803custListEffect_);
m803damagingMoveData_.setStoppableMoveSolo(true);
m803damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m803damagingMoveData_;
}
static MoveData m438(){
DamagingMoveData m804damagingMoveData_ = Instances.newDamagingMoveData();
m804damagingMoveData_.setCategory(I_PHYSIQUE);
m804damagingMoveData_.setDirect(true);
m804damagingMoveData_.setStoppableMoveKoSingle(true);
m804damagingMoveData_.setPp(20);
StringList m804stringList_=new StringList(new CollCapacity(1));
m804stringList_.add(I_COMBAT);
m804damagingMoveData_.setTypes(m804stringList_);
m804stringList_=new StringList(new CollCapacity(1));
m804stringList_.add(I_COMBAT);
m804damagingMoveData_.setBoostedTypes(m804stringList_);
m804damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m804custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m804effectDamage_=newEffectDamage();
m804effectDamage_.setPower(R_40);
m804effectDamage_.setUserAttack(true);
m804effectDamage_.setStatisAtt(Statistic.ATTACK);
m804effectDamage_.setTargetDefense(true);
m804effectDamage_.setStatisDef(Statistic.DEFENSE);
m804effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m804custListEffect_.add(m804effectDamage_);
EffectStatistic m804effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m804enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m804enumMapStatisticByte_.addEntry(Statistic.ATTACK,1L);
m804effectStatistic_.setStatisVarRank(m804enumMapStatisticByte_);
m804effectStatistic_.setEvtRate(Rate.newRate(R_1));
m804effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m804ints_=new Ints(new CollCapacity(1));
m804ints_.add(0);
m804effectStatistic_.setRequiredSuccessfulEffects(m804ints_);
m804custListEffect_.add(m804effectStatistic_);
m804damagingMoveData_.setEffects(m804custListEffect_);
m804damagingMoveData_.setStoppableMoveSolo(true);
m804damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m804damagingMoveData_;
}
static MoveData m439(){
DamagingMoveData m805damagingMoveData_ = Instances.newDamagingMoveData();
m805damagingMoveData_.setCategory(I_PHYSIQUE);
m805damagingMoveData_.setDirect(true);
m805damagingMoveData_.setStoppableMoveKoSingle(true);
m805damagingMoveData_.setPp(15);
StringList m805stringList_=new StringList(new CollCapacity(1));
m805stringList_.add(I_NORMAL);
m805damagingMoveData_.setTypes(m805stringList_);
m805stringList_=new StringList(new CollCapacity(1));
m805stringList_.add(I_NORMAL);
m805damagingMoveData_.setBoostedTypes(m805stringList_);
m805damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m805custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m805effectDamage_=newEffectDamageLawFour(new LgInt(R_3),new LgInt(R_3),new LgInt(R_1),new LgInt(R_1));
m805effectDamage_.setPower(R_18);
m805effectDamage_.setUserAttack(true);
m805effectDamage_.setStatisAtt(Statistic.ATTACK);
m805effectDamage_.setTargetDefense(true);
m805effectDamage_.setStatisDef(Statistic.DEFENSE);
m805effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m805custListEffect_.add(m805effectDamage_);
m805damagingMoveData_.setEffects(m805custListEffect_);
m805damagingMoveData_.setStoppableMoveSolo(true);
m805damagingMoveData_.setStoppableMoveMulti(true);
m805damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m805damagingMoveData_;
}
static MoveData m440(){
DamagingMoveData m806damagingMoveData_ = Instances.newDamagingMoveData();
m806damagingMoveData_.setCategory(I_PHYSIQUE);
m806damagingMoveData_.setDirect(true);
m806damagingMoveData_.setStoppableMoveKoSingle(true);
m806damagingMoveData_.setPp(15);
StringList m806stringList_=new StringList(new CollCapacity(1));
m806stringList_.add(I_PLANTE);
m806damagingMoveData_.setTypes(m806stringList_);
m806stringList_=new StringList(new CollCapacity(1));
m806stringList_.add(I_PLANTE);
m806damagingMoveData_.setBoostedTypes(m806stringList_);
m806damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m806custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m806effectDamage_=newEffectDamage();
m806effectDamage_.setPower(R_60);
m806effectDamage_.setUserAttack(true);
m806effectDamage_.setStatisAtt(Statistic.ATTACK);
m806effectDamage_.setTargetDefense(true);
m806effectDamage_.setStatisDef(Statistic.DEFENSE);
m806effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m806custListEffect_.add(m806effectDamage_);
EffectStatus m806effectStatus_=Instances.newEffectStatus();
MonteCarloString m806monteCarloString_=new MonteCarloString(new CollCapacity(2));
m806monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m806monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m806effectStatus_.setLawStatus(m806monteCarloString_);
StringMap<String> m806stringMapString_=new StringMap<String>(new CollCapacity(1));
m806stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m806effectStatus_.setLocalFailStatus(m806stringMapString_);
m806effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m806ints_=new Ints(new CollCapacity(1));
m806ints_.add(0);
m806effectStatus_.setRequiredSuccessfulEffects(m806ints_);
m806custListEffect_.add(m806effectStatus_);
m806damagingMoveData_.setEffects(m806custListEffect_);
m806damagingMoveData_.setStoppableMoveSolo(true);
m806damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m806damagingMoveData_;
}
static MoveData m441(){
DamagingMoveData m807damagingMoveData_ = Instances.newDamagingMoveData();
m807damagingMoveData_.setCategory(I_PHYSIQUE);
m807damagingMoveData_.setDirect(true);
m807damagingMoveData_.setStoppableMoveKoSingle(true);
m807damagingMoveData_.setPp(15);
StringList m807stringList_=new StringList(new CollCapacity(1));
m807stringList_.add(I_FEU);
m807damagingMoveData_.setTypes(m807stringList_);
m807stringList_=new StringList(new CollCapacity(1));
m807stringList_.add(I_FEU);
m807damagingMoveData_.setBoostedTypes(m807stringList_);
m807damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m807custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m807effectDamage_=newEffectDamage();
m807effectDamage_.setPower(R_75);
m807effectDamage_.setUserAttack(true);
m807effectDamage_.setStatisAtt(Statistic.ATTACK);
m807effectDamage_.setTargetDefense(true);
m807effectDamage_.setStatisDef(Statistic.DEFENSE);
m807effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m807custListEffect_.add(m807effectDamage_);
EffectStatus m807effectStatus_=Instances.newEffectStatus();
MonteCarloString m807monteCarloString_=new MonteCarloString(new CollCapacity(2));
m807monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m807monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m807effectStatus_.setLawStatus(m807monteCarloString_);
StringMap<String> m807stringMapString_=new StringMap<String>(new CollCapacity(1));
m807stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m807effectStatus_.setLocalFailStatus(m807stringMapString_);
m807effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m807ints_=new Ints(new CollCapacity(1));
m807ints_.add(0);
m807effectStatus_.setRequiredSuccessfulEffects(m807ints_);
m807custListEffect_.add(m807effectStatus_);
m807damagingMoveData_.setEffects(m807custListEffect_);
m807damagingMoveData_.setStoppableMoveSolo(true);
m807damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m807damagingMoveData_;
}
static MoveData m442(){
DamagingMoveData m808damagingMoveData_ = Instances.newDamagingMoveData();
m808damagingMoveData_.setCategory(I_PHYSIQUE);
m808damagingMoveData_.setDirect(true);
m808damagingMoveData_.setStoppableMoveKoSingle(true);
m808damagingMoveData_.setPp(15);
StringList m808stringList_=new StringList(new CollCapacity(1));
m808stringList_.add(I_ELECTRIQUE);
m808damagingMoveData_.setTypes(m808stringList_);
m808stringList_=new StringList(new CollCapacity(1));
m808stringList_.add(I_ELECTRIQUE);
m808damagingMoveData_.setBoostedTypes(m808stringList_);
m808damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m808custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m808effectDamage_=newEffectDamage();
m808effectDamage_.setPower(R_75);
m808effectDamage_.setUserAttack(true);
m808effectDamage_.setStatisAtt(Statistic.ATTACK);
m808effectDamage_.setTargetDefense(true);
m808effectDamage_.setStatisDef(Statistic.DEFENSE);
m808effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m808custListEffect_.add(m808effectDamage_);
EffectStatus m808effectStatus_=Instances.newEffectStatus();
MonteCarloString m808monteCarloString_=new MonteCarloString(new CollCapacity(2));
m808monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m808monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m808effectStatus_.setLawStatus(m808monteCarloString_);
StringMap<String> m808stringMapString_=new StringMap<String>(new CollCapacity(1));
m808stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m808effectStatus_.setLocalFailStatus(m808stringMapString_);
m808effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m808ints_=new Ints(new CollCapacity(1));
m808ints_.add(0);
m808effectStatus_.setRequiredSuccessfulEffects(m808ints_);
m808custListEffect_.add(m808effectStatus_);
m808damagingMoveData_.setEffects(m808custListEffect_);
m808damagingMoveData_.setStoppableMoveSolo(true);
m808damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m808damagingMoveData_;
}
static MoveData m443(){
DamagingMoveData m809damagingMoveData_ = Instances.newDamagingMoveData();
m809damagingMoveData_.setCategory(I_PHYSIQUE);
m809damagingMoveData_.setDirect(true);
m809damagingMoveData_.setStoppableMoveKoSingle(true);
m809damagingMoveData_.setPp(25);
StringList m809stringList_=new StringList(new CollCapacity(1));
m809stringList_.add(I_COMBAT);
m809damagingMoveData_.setTypes(m809stringList_);
m809stringList_=new StringList(new CollCapacity(1));
m809stringList_.add(I_COMBAT);
m809damagingMoveData_.setBoostedTypes(m809stringList_);
m809damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m809custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m809effectDamage_=newEffectDamage();
m809effectDamage_.setChRate(1);
m809effectDamage_.setPower(R_50);
m809effectDamage_.setUserAttack(true);
m809effectDamage_.setStatisAtt(Statistic.ATTACK);
m809effectDamage_.setTargetDefense(true);
m809effectDamage_.setStatisDef(Statistic.DEFENSE);
m809effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m809custListEffect_.add(m809effectDamage_);
m809damagingMoveData_.setEffects(m809custListEffect_);
m809damagingMoveData_.setStoppableMoveSolo(true);
m809damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m809damagingMoveData_;
}
static MoveData m444(){
DamagingMoveData m810damagingMoveData_ = Instances.newDamagingMoveData();
m810damagingMoveData_.setCategory(I_PHYSIQUE);
m810damagingMoveData_.setDirect(true);
m810damagingMoveData_.setStoppableMoveKoSingle(true);
m810damagingMoveData_.setPp(10);
StringList m810stringList_=new StringList(new CollCapacity(1));
m810stringList_.add(I_ACIER);
m810damagingMoveData_.setTypes(m810stringList_);
m810stringList_=new StringList(new CollCapacity(1));
m810stringList_.add(I_ACIER);
m810damagingMoveData_.setBoostedTypes(m810stringList_);
m810damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m810custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m810effectDamage_=newEffectDamage();
m810effectDamage_.setPower(R_100);
m810effectDamage_.setUserAttack(true);
m810effectDamage_.setStatisAtt(Statistic.ATTACK);
m810effectDamage_.setTargetDefense(true);
m810effectDamage_.setStatisDef(Statistic.DEFENSE);
m810effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m810custListEffect_.add(m810effectDamage_);
EffectStatistic m810effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m810enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m810enumMapStatisticByte_.addEntry(Statistic.ATTACK,1L);
m810effectStatistic_.setStatisVarRank(m810enumMapStatisticByte_);
m810effectStatistic_.setEvtRate(Rate.newRate(R_1_5));
m810effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m810ints_=new Ints(new CollCapacity(1));
m810ints_.add(0);
m810effectStatistic_.setRequiredSuccessfulEffects(m810ints_);
m810custListEffect_.add(m810effectStatistic_);
m810damagingMoveData_.setEffects(m810custListEffect_);
m810damagingMoveData_.setStoppableMoveSolo(true);
m810damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m810damagingMoveData_;
}
static MoveData m445(){
DamagingMoveData m811damagingMoveData_ = Instances.newDamagingMoveData();
m811damagingMoveData_.setCategory(I_PHYSIQUE);
m811damagingMoveData_.setDirect(true);
m811damagingMoveData_.setStoppableMoveKoSingle(true);
m811damagingMoveData_.setPp(20);
StringList m811stringList_=new StringList(new CollCapacity(1));
m811stringList_.add(I_SPECTRE);
m811damagingMoveData_.setTypes(m811stringList_);
m811stringList_=new StringList(new CollCapacity(1));
m811stringList_.add(I_SPECTRE);
m811damagingMoveData_.setBoostedTypes(m811stringList_);
m811damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m811custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m811effectDamage_=newEffectDamage();
m811effectDamage_.setPower(R_60);
m811effectDamage_.setUserAttack(true);
m811effectDamage_.setStatisAtt(Statistic.ATTACK);
m811effectDamage_.setTargetDefense(true);
m811effectDamage_.setStatisDef(Statistic.DEFENSE);
m811effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m811custListEffect_.add(m811effectDamage_);
m811damagingMoveData_.setEffects(m811custListEffect_);
m811damagingMoveData_.setStoppableMoveSolo(true);
m811damagingMoveData_.setIgnVarAccurUserNeg(true);
m811damagingMoveData_.setIgnVarEvasTargetPos(true);
m811damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m811damagingMoveData_;
}
static MoveData m446(){
DamagingMoveData m812damagingMoveData_ = Instances.newDamagingMoveData();
m812damagingMoveData_.setCategory(I_PHYSIQUE);
m812damagingMoveData_.setDirect(true);
m812damagingMoveData_.setStoppableMoveKoSingle(true);
m812damagingMoveData_.setPp(20);
StringList m812stringList_=new StringList(new CollCapacity(1));
m812stringList_.add(I_POISON);
m812damagingMoveData_.setTypes(m812stringList_);
m812stringList_=new StringList(new CollCapacity(1));
m812stringList_.add(I_POISON);
m812damagingMoveData_.setBoostedTypes(m812stringList_);
m812damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m812custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m812effectDamage_=newEffectDamage();
m812effectDamage_.setChRate(1);
m812effectDamage_.setPower(R_70);
m812effectDamage_.setUserAttack(true);
m812effectDamage_.setStatisAtt(Statistic.ATTACK);
m812effectDamage_.setTargetDefense(true);
m812effectDamage_.setStatisDef(Statistic.DEFENSE);
m812effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m812custListEffect_.add(m812effectDamage_);
EffectStatus m812effectStatus_=Instances.newEffectStatus();
MonteCarloString m812monteCarloString_=new MonteCarloString(new CollCapacity(2));
m812monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m812monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m812effectStatus_.setLawStatus(m812monteCarloString_);
StringMap<String> m812stringMapString_=new StringMap<String>(new CollCapacity(1));
m812stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m812effectStatus_.setLocalFailStatus(m812stringMapString_);
m812effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m812ints_=new Ints(new CollCapacity(1));
m812ints_.add(0);
m812effectStatus_.setRequiredSuccessfulEffects(m812ints_);
m812custListEffect_.add(m812effectStatus_);
m812damagingMoveData_.setEffects(m812custListEffect_);
m812damagingMoveData_.setStoppableMoveSolo(true);
m812damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m812damagingMoveData_;
}
static MoveData m447(){
StatusMoveData m813statusMoveData_ = Instances.newStatusMoveData();
m813statusMoveData_.setThievableMove(true);
m813statusMoveData_.setPp(20);
StringList m813stringList_=new StringList(new CollCapacity(1));
m813stringList_.add(I_ROCHE);
m813statusMoveData_.setTypes(m813stringList_);
m813stringList_=new StringList(new CollCapacity(1));
m813stringList_.add(I_ROCHE);
m813statusMoveData_.setBoostedTypes(m813stringList_);
m813statusMoveData_.setAccuracy(R_1);
CustList<Effect> m813custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m813effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m813enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m813enumMapStatisticByte_.addEntry(Statistic.SPEED,2L);
m813effectStatistic_.setStatisVarRank(m813enumMapStatisticByte_);
m813effectStatistic_.setEvtRate(Rate.newRate(R_1));
m813effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m813custListEffect_.add(m813effectStatistic_);
m813statusMoveData_.setEffects(m813custListEffect_);
m813statusMoveData_.setStoppableMoveMulti(true);
m813statusMoveData_.setIgnVarAccurUserNeg(true);
m813statusMoveData_.setIgnVarEvasTargetPos(true);
m813statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m813statusMoveData_;
}
static MoveData m448(){
StatusMoveData m814statusMoveData_ = Instances.newStatusMoveData();
m814statusMoveData_.setThievableMove(true);
m814statusMoveData_.setPp(10);
StringList m814stringList_=new StringList(new CollCapacity(1));
m814stringList_.add(I_PSY);
m814statusMoveData_.setTypes(m814stringList_);
m814stringList_=new StringList(new CollCapacity(1));
m814stringList_.add(I_PSY);
m814statusMoveData_.setBoostedTypes(m814stringList_);
m814statusMoveData_.setAccuracy(R_1);
CustList<Effect> m814custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectRestriction m814effectRestriction_=Instances.newEffectRestriction();
m814effectRestriction_.setForbidTargetUsingItem(false);
m814effectRestriction_.setChoiceRestriction(MoveChoiceRestrictionType.LANCEUR_ATTAQUES);
m814effectRestriction_.setTargetChoice(TargetChoice.TOUS_ADV);
m814effectRestriction_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_ATTAQUES+RB+OC+LB+V_CIBLE_ATTAQUES+RB+RP+RP+OE+R_0);
m814custListEffect_.add(m814effectRestriction_);
m814statusMoveData_.setEffects(m814custListEffect_);
m814statusMoveData_.setStoppableMoveSolo(true);
m814statusMoveData_.setStoppableMoveMulti(true);
m814statusMoveData_.setTargetChoice(TargetChoice.TOUS_ADV);
return m814statusMoveData_;
}
static MoveData m449(){
StatusMoveData m815statusMoveData_ = Instances.newStatusMoveData();
m815statusMoveData_.setPp(20);
StringList m815stringList_=new StringList(new CollCapacity(1));
m815stringList_.add(I_INSECTE);
m815statusMoveData_.setTypes(m815stringList_);
m815stringList_=new StringList(new CollCapacity(1));
m815stringList_.add(I_INSECTE);
m815statusMoveData_.setBoostedTypes(m815stringList_);
m815statusMoveData_.setPriority(3);
m815statusMoveData_.setAccuracy(R_1);
CustList<Effect> m815custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchPointView m815effectSwitchPointView_=Instances.newEffectSwitchPointView();
m815effectSwitchPointView_.setPointViewChangement(PointViewChangementType.ATTRACT_DAMAGES_MOVES);
m815effectSwitchPointView_.setTargetChoice(TargetChoice.LANCEUR);
m815custListEffect_.add(m815effectSwitchPointView_);
m815statusMoveData_.setEffects(m815custListEffect_);
m815statusMoveData_.setStoppableMoveMulti(true);
m815statusMoveData_.setStoppableMovePrio(true);
m815statusMoveData_.setIgnVarAccurUserNeg(true);
m815statusMoveData_.setIgnVarEvasTargetPos(true);
m815statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m815statusMoveData_;
}
}
