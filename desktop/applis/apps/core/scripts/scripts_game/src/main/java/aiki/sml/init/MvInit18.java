package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit18 extends CstIgame{
private MvInit18(){}
static MoveData m450(){
DamagingMoveData m818damagingMoveData_ = Instances.newDamagingMoveData();
m818damagingMoveData_.setCategory(I_SPECIALE);
m818damagingMoveData_.setStoppableMoveKoSingle(true);
m818damagingMoveData_.setPp(25);
StringList m818stringList_=new StringList(new CollCapacity(1));
m818stringList_.add(I_GLACE);
m818damagingMoveData_.setTypes(m818stringList_);
m818stringList_=new StringList(new CollCapacity(1));
m818stringList_.add(I_GLACE);
m818damagingMoveData_.setBoostedTypes(m818stringList_);
m818damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m818custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m818effectDamage_=newEffectDamage();
m818effectDamage_.setPower(R_40);
m818effectDamage_.setUserAttack(true);
m818effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m818effectDamage_.setTargetDefense(true);
m818effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m818effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m818custListEffect_.add(m818effectDamage_);
EffectStatus m818effectStatus_=Instances.newEffectStatus();
MonteCarloString m818monteCarloString_=new MonteCarloString(new CollCapacity(2));
m818monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m818monteCarloString_.addQuickEvent(I_GEL,LgInt.newLgInt(R_1));
m818effectStatus_.setLawStatus(m818monteCarloString_);
StringMap<String> m818stringMapString_=new StringMap<String>(new CollCapacity(1));
m818stringMapString_.addEntry(I_GEL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_GEL+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_GLACE+RB+RP+RP+GT+R_0);
m818effectStatus_.setLocalFailStatus(m818stringMapString_);
m818effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
Ints m818ints_=new Ints(new CollCapacity(1));
m818ints_.add(0);
m818effectStatus_.setRequiredSuccessfulEffects(m818ints_);
m818custListEffect_.add(m818effectStatus_);
m818damagingMoveData_.setEffects(m818custListEffect_);
m818damagingMoveData_.setStoppableMoveSolo(true);
m818damagingMoveData_.setStoppableMoveMulti(true);
m818damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m818damagingMoveData_;
}
static MoveData m451(){
StatusMoveData m819statusMoveData_ = Instances.newStatusMoveData();
m819statusMoveData_.setCounterableMove(true);
m819statusMoveData_.setPp(15);
StringList m819stringList_=new StringList(new CollCapacity(1));
m819stringList_.add(I_PLANTE);
m819statusMoveData_.setTypes(m819stringList_);
m819stringList_=new StringList(new CollCapacity(1));
m819stringList_.add(I_PLANTE);
m819statusMoveData_.setBoostedTypes(m819stringList_);
m819statusMoveData_.setAccuracy(R_3_4);
CustList<Effect> m819custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m819effectStatus_=Instances.newEffectStatus();
MonteCarloString m819monteCarloString_=new MonteCarloString(new CollCapacity(1));
m819monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m819effectStatus_.setLawStatus(m819monteCarloString_);
StringMap<String> m819stringMapString_=new StringMap<String>(new CollCapacity(1));
m819stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m819effectStatus_.setLocalFailStatus(m819stringMapString_);
m819effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m819custListEffect_.add(m819effectStatus_);
m819statusMoveData_.setEffects(m819custListEffect_);
m819statusMoveData_.setStoppableMoveSolo(true);
m819statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m819statusMoveData_;
}
static MoveData m452(){
StatusMoveData m820statusMoveData_ = Instances.newStatusMoveData();
m820statusMoveData_.setPp(20);
StringList m820stringList_=new StringList(new CollCapacity(1));
m820stringList_.add(I_INSECTE);
m820statusMoveData_.setTypes(m820stringList_);
m820stringList_=new StringList(new CollCapacity(1));
m820stringList_.add(I_INSECTE);
m820statusMoveData_.setBoostedTypes(m820stringList_);
m820statusMoveData_.setPriority(3);
m820statusMoveData_.setAccuracy(R_1);
CustList<Effect> m820custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchPointView m820effectSwitchPointView_=Instances.newEffectSwitchPointView();
m820effectSwitchPointView_.setPointViewChangement(PointViewChangementType.ATTRACT_DAMAGES_MOVES);
m820effectSwitchPointView_.setTargetChoice(TargetChoice.LANCEUR);
m820custListEffect_.add(m820effectSwitchPointView_);
m820statusMoveData_.setEffects(m820custListEffect_);
m820statusMoveData_.setStoppableMoveMulti(true);
m820statusMoveData_.setStoppableMovePrio(true);
m820statusMoveData_.setIgnVarAccurUserNeg(true);
m820statusMoveData_.setIgnVarEvasTargetPos(true);
m820statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m820statusMoveData_;
}
static MoveData m453(){
StatusMoveData m821statusMoveData_ = Instances.newStatusMoveData();
m821statusMoveData_.setCounterableMove(true);
m821statusMoveData_.setPp(35);
StringList m821stringList_=new StringList(new CollCapacity(1));
m821stringList_.add(I_POISON);
m821statusMoveData_.setTypes(m821stringList_);
m821stringList_=new StringList(new CollCapacity(1));
m821stringList_.add(I_POISON);
m821statusMoveData_.setBoostedTypes(m821stringList_);
m821statusMoveData_.setAccuracy(R_3_4);
CustList<Effect> m821custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m821effectStatus_=Instances.newEffectStatus();
MonteCarloString m821monteCarloString_=new MonteCarloString(new CollCapacity(1));
m821monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m821effectStatus_.setLawStatus(m821monteCarloString_);
StringMap<String> m821stringMapString_=new StringMap<String>(new CollCapacity(1));
m821stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m821effectStatus_.setLocalFailStatus(m821stringMapString_);
m821effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m821custListEffect_.add(m821effectStatus_);
m821statusMoveData_.setEffects(m821custListEffect_);
m821statusMoveData_.setStoppableMoveSolo(true);
m821statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m821statusMoveData_;
}
static MoveData m454(){
DamagingMoveData m822damagingMoveData_ = Instances.newDamagingMoveData();
m822damagingMoveData_.setCategory(I_PHYSIQUE);
m822damagingMoveData_.setDirect(true);
m822damagingMoveData_.setStoppableMoveKoSingle(true);
m822damagingMoveData_.setPp(20);
StringList m822stringList_=new StringList(new CollCapacity(1));
m822stringList_.add(I_TENEBRE);
m822damagingMoveData_.setTypes(m822stringList_);
m822stringList_=new StringList(new CollCapacity(1));
m822stringList_.add(I_TENEBRE);
m822damagingMoveData_.setBoostedTypes(m822stringList_);
m822damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m822custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m822effectDamage_=newEffectDamage();
m822effectDamage_.setPower(R_40);
m822effectDamage_.setUserAttack(true);
m822effectDamage_.setStatisAtt(Statistic.ATTACK);
m822effectDamage_.setTargetDefense(true);
m822effectDamage_.setStatisDef(Statistic.DEFENSE);
m822effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m822custListEffect_.add(m822effectDamage_);
m822damagingMoveData_.setEffects(m822custListEffect_);
m822damagingMoveData_.setStoppableMoveSolo(true);
m822damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m822damagingMoveData_;
}
static MoveData m455(){
DamagingMoveData m823damagingMoveData_ = Instances.newDamagingMoveData();
m823damagingMoveData_.setCategory(I_SPECIALE);
m823damagingMoveData_.setStoppableMoveKoSingle(true);
m823damagingMoveData_.setPp(15);
StringList m823stringList_=new StringList(new CollCapacity(1));
m823stringList_.add(I_FEE);
m823damagingMoveData_.setTypes(m823stringList_);
m823stringList_=new StringList(new CollCapacity(1));
m823stringList_.add(I_FEE);
m823damagingMoveData_.setBoostedTypes(m823stringList_);
m823damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m823custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m823effectDamage_=newEffectDamage();
m823effectDamage_.setPower(R_95);
m823effectDamage_.setUserAttack(true);
m823effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m823effectDamage_.setTargetDefense(true);
m823effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m823effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m823custListEffect_.add(m823effectDamage_);
EffectStatistic m823effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m823enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m823enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1L);
m823effectStatistic_.setStatisVarRank(m823enumMapStatisticByte_);
IdMap<Statistic,String> m823enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m823enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m823effectStatistic_.setLocalFailStatis(m823enumMapStatisticString_);
m823effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m823effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m823ints_=new Ints(new CollCapacity(1));
m823ints_.add(0);
m823effectStatistic_.setRequiredSuccessfulEffects(m823ints_);
m823custListEffect_.add(m823effectStatistic_);
m823damagingMoveData_.setEffects(m823custListEffect_);
m823damagingMoveData_.setStoppableMoveSolo(true);
m823damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m823damagingMoveData_;
}
static MoveData m456(){
DamagingMoveData m824damagingMoveData_ = Instances.newDamagingMoveData();
m824damagingMoveData_.setCategory(I_SPECIALE);
m824damagingMoveData_.setStoppableMoveKoSingle(true);
m824damagingMoveData_.setPp(5);
StringList m824stringList_=new StringList(new CollCapacity(1));
m824stringList_.add(I_ROCHE);
m824damagingMoveData_.setTypes(m824stringList_);
m824stringList_=new StringList(new CollCapacity(1));
m824stringList_.add(I_ROCHE);
m824damagingMoveData_.setBoostedTypes(m824stringList_);
m824damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m824custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m824effectDamage_=newEffectDamage();
m824effectDamage_.setPower(R_60);
m824effectDamage_.setUserAttack(true);
m824effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m824effectDamage_.setTargetDefense(true);
m824effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m824effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m824custListEffect_.add(m824effectDamage_);
EffectStatistic m824effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m824enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(5));
m824enumMapStatisticByte_.addEntry(Statistic.ATTACK,1L);
m824enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1L);
m824enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1L);
m824enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1L);
m824enumMapStatisticByte_.addEntry(Statistic.SPEED,1L);
m824effectStatistic_.setStatisVarRank(m824enumMapStatisticByte_);
m824effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m824effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m824ints_=new Ints(new CollCapacity(1));
m824ints_.add(0);
m824effectStatistic_.setRequiredSuccessfulEffects(m824ints_);
m824custListEffect_.add(m824effectStatistic_);
m824damagingMoveData_.setEffects(m824custListEffect_);
m824damagingMoveData_.setStoppableMoveSolo(true);
m824damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m824damagingMoveData_;
}
static MoveData m457(){
DamagingMoveData m825damagingMoveData_ = Instances.newDamagingMoveData();
m825damagingMoveData_.setCategory(I_PHYSIQUE);
m825damagingMoveData_.setStoppableMoveKoSingle(true);
m825damagingMoveData_.setPp(10);
StringList m825stringList_=new StringList(new CollCapacity(1));
m825stringList_.add(I_SOL);
m825damagingMoveData_.setTypes(m825stringList_);
m825stringList_=new StringList(new CollCapacity(1));
m825stringList_.add(I_SOL);
m825damagingMoveData_.setBoostedTypes(m825stringList_);
m825damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m825custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m825effectDamage_=newEffectDamage();
m825effectDamage_.setPower(R_120);
m825effectDamage_.setUserAttack(true);
m825effectDamage_.setStatisAtt(Statistic.ATTACK);
m825effectDamage_.setTargetDefense(true);
m825effectDamage_.setStatisDef(Statistic.DEFENSE);
m825effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m825custListEffect_.add(m825effectDamage_);
m825damagingMoveData_.setEffects(m825custListEffect_);
m825damagingMoveData_.setStoppableMoveSolo(true);
m825damagingMoveData_.setStoppableMoveMulti(true);
m825damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m825damagingMoveData_;
}
static MoveData m458(){
DamagingMoveData m826damagingMoveData_ = Instances.newDamagingMoveData();
m826damagingMoveData_.setCategory(I_SPECIALE);
m826damagingMoveData_.setStoppableMoveKoSingle(true);
m826damagingMoveData_.setPp(15);
StringList m826stringList_=new StringList(new CollCapacity(1));
m826stringList_.add(I_PSY);
m826damagingMoveData_.setTypes(m826stringList_);
m826stringList_=new StringList(new CollCapacity(1));
m826stringList_.add(I_PSY);
m826damagingMoveData_.setBoostedTypes(m826stringList_);
m826damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m826custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m826effectDamage_=newEffectDamage();
m826effectDamage_.setPower(R_100);
m826effectDamage_.setUserAttack(true);
m826effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m826effectDamage_.setTargetDefense(true);
m826effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m826effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m826custListEffect_.add(m826effectDamage_);
EffectEndRoundPositionTargetRelation m826effectEndRoundPositionTargetRelation_=Instances.newEffectEndRoundPositionTargetRelation();
m826effectEndRoundPositionTargetRelation_.setEndRoundRank(3);
m826effectEndRoundPositionTargetRelation_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m826ints_=new Ints(new CollCapacity(1));
m826ints_.add(0);
m826effectEndRoundPositionTargetRelation_.setRequiredSuccessfulEffects(m826ints_);
m826custListEffect_.add(m826effectEndRoundPositionTargetRelation_);
m826damagingMoveData_.setEffects(m826custListEffect_);
m826damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m826damagingMoveData_;
}
static MoveData m459(){
DamagingMoveData m827damagingMoveData_ = Instances.newDamagingMoveData();
m827damagingMoveData_.setCategory(I_PHYSIQUE);
m827damagingMoveData_.setDirect(true);
m827damagingMoveData_.setStoppableMoveKoSingle(true);
m827damagingMoveData_.setPp(5);
StringList m827stringList_=new StringList(new CollCapacity(1));
m827stringList_.add(I_NORMAL);
m827damagingMoveData_.setTypes(m827stringList_);
m827stringList_=new StringList(new CollCapacity(1));
m827stringList_.add(I_NORMAL);
m827damagingMoveData_.setBoostedTypes(m827stringList_);
m827damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m827custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m827effectDamage_=newEffectDamage();
m827effectDamage_.setPower(R_1+OP+R_120+OM+A_DIV+LP+V_CIBLE_PV_RESTANTS+OC+V_CIBLE_PV_MAX+RP);
m827effectDamage_.setUserAttack(true);
m827effectDamage_.setStatisAtt(Statistic.ATTACK);
m827effectDamage_.setTargetDefense(true);
m827effectDamage_.setStatisDef(Statistic.DEFENSE);
m827effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m827custListEffect_.add(m827effectDamage_);
m827damagingMoveData_.setEffects(m827custListEffect_);
m827damagingMoveData_.setStoppableMoveSolo(true);
m827damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m827damagingMoveData_;
}
static MoveData m460(){
StatusMoveData m828statusMoveData_ = Instances.newStatusMoveData();
m828statusMoveData_.setPp(15);
StringList m828stringList_=new StringList(new CollCapacity(1));
m828stringList_.add(I_COMBAT);
m828statusMoveData_.setTypes(m828stringList_);
m828stringList_=new StringList(new CollCapacity(1));
m828stringList_.add(I_COMBAT);
m828statusMoveData_.setBoostedTypes(m828stringList_);
m828statusMoveData_.setPriority(3);
m828statusMoveData_.setAccuracy(A_PUIS+LP+R_2+OC+OD+V_LANCEUR_NB_UTILISATION+SE+I_GARDE_LARGE+OD+V_LANCEUR_NB_UTILISATION+SE+I_PREVENTION+RP);
CustList<Effect> m828custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectProtection m828effectProtection_=Instances.newEffectProtection();
m828effectProtection_.setProtTeamAgainstPrio(true);
m828effectProtection_.setTargetChoice(TargetChoice.LANCEUR);
m828custListEffect_.add(m828effectProtection_);
m828statusMoveData_.setEffects(m828custListEffect_);
m828statusMoveData_.setStoppableMoveMulti(true);
m828statusMoveData_.setStoppableMovePrio(true);
m828statusMoveData_.setIgnVarEvasTargetPos(true);
m828statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m828statusMoveData_;
}
static MoveData m461(){
DamagingMoveData m829damagingMoveData_ = Instances.newDamagingMoveData();
m829damagingMoveData_.setCategory(I_SPECIALE);
m829damagingMoveData_.setStoppableMoveKoSingle(true);
m829damagingMoveData_.setPp(25);
StringList m829stringList_=new StringList(new CollCapacity(1));
m829stringList_.add(I_TENEBRE);
m829damagingMoveData_.setTypes(m829stringList_);
m829stringList_=new StringList(new CollCapacity(1));
m829stringList_.add(I_TENEBRE);
m829damagingMoveData_.setBoostedTypes(m829stringList_);
m829damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m829custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m829effectDamage_=newEffectDamage();
m829effectDamage_.setPower(R_65);
m829effectDamage_.setUserAttack(true);
m829effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m829effectDamage_.setTargetDefense(true);
m829effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m829effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m829custListEffect_.add(m829effectDamage_);
m829damagingMoveData_.setEffects(m829custListEffect_);
m829damagingMoveData_.setStoppableMoveSolo(true);
m829damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m829damagingMoveData_;
}
static MoveData m462(){
DamagingMoveData m830damagingMoveData_ = Instances.newDamagingMoveData();
m830damagingMoveData_.setCategory(I_PHYSIQUE);
m830damagingMoveData_.setDirect(true);
m830damagingMoveData_.setStoppableMoveKoSingle(true);
m830damagingMoveData_.setPp(10);
StringList m830stringList_=new StringList(new CollCapacity(1));
m830stringList_.add(I_COMBAT);
m830damagingMoveData_.setTypes(m830stringList_);
m830stringList_=new StringList(new CollCapacity(1));
m830stringList_.add(I_COMBAT);
m830damagingMoveData_.setBoostedTypes(m830stringList_);
m830damagingMoveData_.setPriority(-6);
m830damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m830custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m830effectDamage_=newEffectDamage();
m830effectDamage_.setPower(R_60);
m830effectDamage_.setUserAttack(true);
m830effectDamage_.setStatisAtt(Statistic.ATTACK);
m830effectDamage_.setTargetDefense(true);
m830effectDamage_.setStatisDef(Statistic.DEFENSE);
m830effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m830effectDamage_.setFail(V_CIBLE_CLONE+GT+R_0+OO+V_CIBLE_EFFET+SE+I_RACINES);
m830custListEffect_.add(m830effectDamage_);
m830damagingMoveData_.setEffects(m830custListEffect_);
m830damagingMoveData_.setStoppableMoveSolo(true);
m830damagingMoveData_.setStoppableMovePrio(true);
m830damagingMoveData_.setSwitchType(SwitchType.CIBLE);
m830damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m830damagingMoveData_;
}
static MoveData m463(){
StatusMoveData m831statusMoveData_ = Instances.newStatusMoveData();
m831statusMoveData_.setThievableMove(true);
m831statusMoveData_.setPp(20);
StringList m831stringList_=new StringList(new CollCapacity(1));
m831stringList_.add(I_PSY);
m831statusMoveData_.setTypes(m831stringList_);
m831stringList_=new StringList(new CollCapacity(1));
m831stringList_.add(I_PSY);
m831statusMoveData_.setBoostedTypes(m831stringList_);
m831statusMoveData_.setAccuracy(R_1);
CustList<Effect> m831custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeam m831effectTeam_=Instances.newEffectTeam();
CategoryMults m831objectMapCategoryMultRate_=new CategoryMults(new CollCapacity(4));
m831objectMapCategoryMultRate_.addEntry(new CategoryMult(I_PHYSIQUE,4),Rate.newRate(R_4_5));
m831objectMapCategoryMultRate_.addEntry(new CategoryMult(I_PHYSIQUE,3),Rate.newRate(R_3_4));
m831objectMapCategoryMultRate_.addEntry(new CategoryMult(I_PHYSIQUE,2),Rate.newRate(R_2_3));
m831objectMapCategoryMultRate_.addEntry(new CategoryMult(I_PHYSIQUE,1),Rate.newRate(R_1_2));
m831effectTeam_.setMultDamage(m831objectMapCategoryMultRate_);
m831effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m831custListEffect_.add(m831effectTeam_);
m831statusMoveData_.setEffects(m831custListEffect_);
m831statusMoveData_.setRankIncrementNbRound(11);
m831statusMoveData_.setStoppableMoveMulti(true);
m831statusMoveData_.setIgnVarAccurUserNeg(true);
m831statusMoveData_.setIgnVarEvasTargetPos(true);
m831statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m831statusMoveData_;
}
static MoveData m464(){
StatusMoveData m832statusMoveData_ = Instances.newStatusMoveData();
m832statusMoveData_.setCounterableMove(true);
m832statusMoveData_.setPp(20);
StringList m832stringList_=new StringList(new CollCapacity(1));
m832stringList_.add(I_TENEBRE);
m832statusMoveData_.setTypes(m832stringList_);
m832stringList_=new StringList(new CollCapacity(1));
m832stringList_.add(I_TENEBRE);
m832statusMoveData_.setBoostedTypes(m832stringList_);
m832statusMoveData_.setAccuracy(R_1);
CustList<Effect> m832custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectRestriction m832effectRestriction_=Instances.newEffectRestriction();
m832effectRestriction_.setForbidTargetUsingItem(false);
m832effectRestriction_.setChoiceRestriction(MoveChoiceRestrictionType.CATEGORIE_AUTRE);
m832effectRestriction_.setTargetChoice(TargetChoice.ADJ_MULT);
m832effectRestriction_.setFail(V_CIBLE_CLONE+GT+R_0);
m832custListEffect_.add(m832effectRestriction_);
m832statusMoveData_.setEffects(m832custListEffect_);
m832statusMoveData_.setRankIncrementNbRound(62);
m832statusMoveData_.setStoppableMoveSolo(true);
m832statusMoveData_.setStoppableMoveMulti(true);
m832statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m832statusMoveData_;
}
static MoveData m465(){
DamagingMoveData m833damagingMoveData_ = Instances.newDamagingMoveData();
m833damagingMoveData_.setCategory(I_SPECIALE);
m833damagingMoveData_.setStoppableMoveKoSingle(true);
m833damagingMoveData_.setPp(5);
StringList m833stringList_=new StringList(new CollCapacity(1));
m833stringList_.add(I_PSY);
m833damagingMoveData_.setTypes(m833stringList_);
m833stringList_=new StringList(new CollCapacity(1));
m833stringList_.add(I_PSY);
m833damagingMoveData_.setBoostedTypes(m833stringList_);
m833damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m833custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m833effectDamage_=newEffectDamage();
m833effectDamage_.setPower(R_140);
m833effectDamage_.setUserAttack(true);
m833effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m833effectDamage_.setTargetDefense(true);
m833effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m833effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m833custListEffect_.add(m833effectDamage_);
EffectStatistic m833effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m833enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m833enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-2L);
m833effectStatistic_.setStatisVarRank(m833enumMapStatisticByte_);
IdMap<Statistic,String> m833enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m833enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_LANCEUR_CLONE+GT+R_0);
m833effectStatistic_.setLocalFailStatis(m833enumMapStatisticString_);
m833effectStatistic_.setEvtRate(Rate.newRate(R_1));
m833effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m833ints_=new Ints(new CollCapacity(1));
m833ints_.add(0);
m833effectStatistic_.setRequiredSuccessfulEffects(m833ints_);
m833custListEffect_.add(m833effectStatistic_);
m833damagingMoveData_.setEffects(m833custListEffect_);
m833damagingMoveData_.setStoppableMoveSolo(true);
m833damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m833damagingMoveData_;
}
static MoveData m466(){
DamagingMoveData m834damagingMoveData_ = Instances.newDamagingMoveData();
m834damagingMoveData_.setCategory(I_SPECIALE);
m834damagingMoveData_.setStoppableMoveKoSingle(true);
m834damagingMoveData_.setPp(10);
StringList m834stringList_=new StringList(new CollCapacity(1));
m834stringList_.add(I_PSY);
m834damagingMoveData_.setTypes(m834stringList_);
m834stringList_=new StringList(new CollCapacity(1));
m834stringList_.add(I_PSY);
m834damagingMoveData_.setBoostedTypes(m834stringList_);
m834damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m834custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m834effectDamage_=newEffectDamage();
m834effectDamage_.setPower(R_90);
m834effectDamage_.setUserAttack(true);
m834effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m834effectDamage_.setTargetDefense(true);
m834effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m834effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m834custListEffect_.add(m834effectDamage_);
EffectStatistic m834effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m834enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m834enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-1L);
m834effectStatistic_.setStatisVarRank(m834enumMapStatisticByte_);
IdMap<Statistic,String> m834enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m834enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m834effectStatistic_.setLocalFailStatis(m834enumMapStatisticString_);
m834effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m834effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m834ints_=new Ints(new CollCapacity(1));
m834ints_.add(0);
m834effectStatistic_.setRequiredSuccessfulEffects(m834ints_);
m834custListEffect_.add(m834effectStatistic_);
m834damagingMoveData_.setEffects(m834custListEffect_);
m834damagingMoveData_.setStoppableMoveSolo(true);
m834damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m834damagingMoveData_;
}
static MoveData m467(){
DamagingMoveData m835damagingMoveData_ = Instances.newDamagingMoveData();
m835damagingMoveData_.setCategory(I_PHYSIQUE);
m835damagingMoveData_.setDirect(true);
m835damagingMoveData_.setStoppableMoveKoSingle(true);
m835damagingMoveData_.setPp(5);
StringList m835stringList_=new StringList(new CollCapacity(1));
m835stringList_.add(I_PSY);
m835damagingMoveData_.setTypes(m835stringList_);
m835stringList_=new StringList(new CollCapacity(1));
m835stringList_.add(I_PSY);
m835damagingMoveData_.setBoostedTypes(m835stringList_);
m835damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m835custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m835effectDamage_=newEffectDamage();
m835effectDamage_.setPower(R_90);
m835effectDamage_.setUserAttack(true);
m835effectDamage_.setStatisAtt(Statistic.ATTACK);
m835effectDamage_.setTargetDefense(true);
m835effectDamage_.setStatisDef(Statistic.DEFENSE);
m835effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m835custListEffect_.add(m835effectDamage_);
EffectStatus m835effectStatus_=Instances.newEffectStatus();
MonteCarloString m835monteCarloString_=new MonteCarloString(new CollCapacity(2));
m835monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m835monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m835effectStatus_.setLawStatus(m835monteCarloString_);
StringMap<String> m835stringMapString_=new StringMap<String>(new CollCapacity(1));
m835stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m835effectStatus_.setLocalFailStatus(m835stringMapString_);
m835effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m835ints_=new Ints(new CollCapacity(1));
m835ints_.add(0);
m835effectStatus_.setRequiredSuccessfulEffects(m835ints_);
m835custListEffect_.add(m835effectStatus_);
m835damagingMoveData_.setEffects(m835custListEffect_);
m835damagingMoveData_.setStoppableMoveSolo(true);
m835damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m835damagingMoveData_;
}
static MoveData m468(){
StatusMoveData m836statusMoveData_ = Instances.newStatusMoveData();
m836statusMoveData_.setThievableMove(true);
m836statusMoveData_.setPp(30);
StringList m836stringList_=new StringList(new CollCapacity(1));
m836stringList_.add(I_NORMAL);
m836statusMoveData_.setTypes(m836stringList_);
m836stringList_=new StringList(new CollCapacity(1));
m836stringList_.add(I_NORMAL);
m836statusMoveData_.setBoostedTypes(m836stringList_);
m836statusMoveData_.setAccuracy(R_1);
CustList<Effect> m836custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m836effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m836enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m836enumMapStatisticByte_.addEntry(Statistic.CRITICAL_HIT,2L);
m836effectStatistic_.setStatisVarRank(m836enumMapStatisticByte_);
m836effectStatistic_.setEvtRate(Rate.newRate(R_1));
m836effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m836custListEffect_.add(m836effectStatistic_);
m836statusMoveData_.setEffects(m836custListEffect_);
m836statusMoveData_.setStoppableMoveMulti(true);
m836statusMoveData_.setIgnVarAccurUserNeg(true);
m836statusMoveData_.setIgnVarEvasTargetPos(true);
m836statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m836statusMoveData_;
}
static MoveData m469(){
DamagingMoveData m837damagingMoveData_ = Instances.newDamagingMoveData();
m837damagingMoveData_.setCategory(I_SPECIALE);
m837damagingMoveData_.setStoppableMoveKoSingle(true);
m837damagingMoveData_.setPp(15);
StringList m837stringList_=new StringList(new CollCapacity(1));
m837stringList_.add(I_NORMAL);
m837damagingMoveData_.setTypes(m837stringList_);
m837stringList_=new StringList(new CollCapacity(1));
m837stringList_.add(I_NORMAL);
m837damagingMoveData_.setBoostedTypes(m837stringList_);
m837damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m837custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m837effectDamage_=newEffectDamage();
m837effectDamage_.setPower(R_90);
m837effectDamage_.setUserAttack(true);
m837effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m837effectDamage_.setTargetDefense(true);
m837effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m837effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m837custListEffect_.add(m837effectDamage_);
m837damagingMoveData_.setEffects(m837custListEffect_);
m837damagingMoveData_.setStoppableMoveSolo(true);
m837damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m837damagingMoveData_;
}
static MoveData m470(){
DamagingMoveData m838damagingMoveData_ = Instances.newDamagingMoveData();
m838damagingMoveData_.setCategory(I_PHYSIQUE);
m838damagingMoveData_.setDirect(true);
m838damagingMoveData_.setStoppableMoveKoSingle(true);
m838damagingMoveData_.setPp(5);
StringList m838stringList_=new StringList(new CollCapacity(1));
m838stringList_.add(I_TENEBRE);
m838damagingMoveData_.setTypes(m838stringList_);
m838stringList_=new StringList(new CollCapacity(1));
m838stringList_.add(I_TENEBRE);
m838damagingMoveData_.setBoostedTypes(m838stringList_);
m838damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m838custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m838effectDamage_=newEffectDamage();
m838effectDamage_.setPower(A_MIN+LP+R_20+OM+V_SOMME_BOOST_POS_CIBLE+OP+R_60+OC+R_200+RP);
m838effectDamage_.setUserAttack(true);
m838effectDamage_.setStatisAtt(Statistic.ATTACK);
m838effectDamage_.setTargetDefense(true);
m838effectDamage_.setStatisDef(Statistic.DEFENSE);
m838effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m838custListEffect_.add(m838effectDamage_);
m838damagingMoveData_.setEffects(m838custListEffect_);
m838damagingMoveData_.setStoppableMoveSolo(true);
m838damagingMoveData_.setStoppableMoveMulti(true);
m838damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m838damagingMoveData_;
}
static MoveData m471(){
DamagingMoveData m839damagingMoveData_ = Instances.newDamagingMoveData();
m839damagingMoveData_.setCategory(I_SPECIALE);
m839damagingMoveData_.setStoppableMoveKoSingle(true);
m839damagingMoveData_.setPp(20);
StringList m839stringList_=new StringList(new CollCapacity(1));
m839stringList_.add(I_POISON);
m839damagingMoveData_.setTypes(m839stringList_);
m839stringList_=new StringList(new CollCapacity(1));
m839stringList_.add(I_POISON);
m839damagingMoveData_.setBoostedTypes(m839stringList_);
m839damagingMoveData_.setAccuracy(R_7_10);
CustList<Effect> m839custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m839effectDamage_=newEffectDamage();
m839effectDamage_.setPower(R_20);
m839effectDamage_.setUserAttack(true);
m839effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m839effectDamage_.setTargetDefense(true);
m839effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m839effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m839custListEffect_.add(m839effectDamage_);
EffectStatus m839effectStatus_=Instances.newEffectStatus();
MonteCarloString m839monteCarloString_=new MonteCarloString(new CollCapacity(2));
m839monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_3));
m839monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_2));
m839effectStatus_.setLawStatus(m839monteCarloString_);
StringMap<String> m839stringMapString_=new StringMap<String>(new CollCapacity(1));
m839stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m839effectStatus_.setLocalFailStatus(m839stringMapString_);
m839effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m839ints_=new Ints(new CollCapacity(1));
m839ints_.add(0);
m839effectStatus_.setRequiredSuccessfulEffects(m839ints_);
m839custListEffect_.add(m839effectStatus_);
m839damagingMoveData_.setEffects(m839custListEffect_);
m839damagingMoveData_.setStoppableMoveSolo(true);
m839damagingMoveData_.setStoppableMoveMulti(true);
m839damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m839damagingMoveData_;
}
static MoveData m472(){
DamagingMoveData m840damagingMoveData_ = Instances.newDamagingMoveData();
m840damagingMoveData_.setCategory(I_PHYSIQUE);
m840damagingMoveData_.setDirect(true);
m840damagingMoveData_.setStoppableMoveKoSingle(true);
m840damagingMoveData_.setPp(15);
StringList m840stringList_=new StringList(new CollCapacity(1));
m840stringList_.add(I_ACIER);
m840damagingMoveData_.setTypes(m840stringList_);
m840stringList_=new StringList(new CollCapacity(1));
m840stringList_.add(I_ACIER);
m840damagingMoveData_.setBoostedTypes(m840stringList_);
m840damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m840custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m840effectDamage_=newEffectDamage();
m840effectDamage_.setPower(R_100);
m840effectDamage_.setUserAttack(true);
m840effectDamage_.setStatisAtt(Statistic.ATTACK);
m840effectDamage_.setTargetDefense(true);
m840effectDamage_.setStatisDef(Statistic.DEFENSE);
m840effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m840custListEffect_.add(m840effectDamage_);
EffectStatistic m840effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m840enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m840enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m840effectStatistic_.setStatisVarRank(m840enumMapStatisticByte_);
IdMap<Statistic,String> m840enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m840enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m840effectStatistic_.setLocalFailStatis(m840enumMapStatisticString_);
m840effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m840effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m840ints_=new Ints(new CollCapacity(1));
m840ints_.add(0);
m840effectStatistic_.setRequiredSuccessfulEffects(m840ints_);
m840custListEffect_.add(m840effectStatistic_);
m840damagingMoveData_.setEffects(m840custListEffect_);
m840damagingMoveData_.setStoppableMoveSolo(true);
m840damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m840damagingMoveData_;
}
static MoveData m473(){
DamagingMoveData m841damagingMoveData_ = Instances.newDamagingMoveData();
m841damagingMoveData_.setCategory(I_PHYSIQUE);
m841damagingMoveData_.setDirect(true);
m841damagingMoveData_.setStoppableMoveKoSingle(true);
m841damagingMoveData_.setPp(25);
StringList m841stringList_=new StringList(new CollCapacity(1));
m841stringList_.add(I_POISON);
m841damagingMoveData_.setTypes(m841stringList_);
m841stringList_=new StringList(new CollCapacity(1));
m841stringList_.add(I_POISON);
m841damagingMoveData_.setBoostedTypes(m841stringList_);
m841damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m841custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m841effectDamage_=newEffectDamage();
m841effectDamage_.setChRate(1);
m841effectDamage_.setPower(R_50);
m841effectDamage_.setUserAttack(true);
m841effectDamage_.setStatisAtt(Statistic.ATTACK);
m841effectDamage_.setTargetDefense(true);
m841effectDamage_.setStatisDef(Statistic.DEFENSE);
m841effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m841custListEffect_.add(m841effectDamage_);
EffectStatus m841effectStatus_=Instances.newEffectStatus();
MonteCarloString m841monteCarloString_=new MonteCarloString(new CollCapacity(2));
m841monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m841monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m841effectStatus_.setLawStatus(m841monteCarloString_);
StringMap<String> m841stringMapString_=new StringMap<String>(new CollCapacity(1));
m841stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m841effectStatus_.setLocalFailStatus(m841stringMapString_);
m841effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m841ints_=new Ints(new CollCapacity(1));
m841ints_.add(0);
m841effectStatus_.setRequiredSuccessfulEffects(m841ints_);
m841custListEffect_.add(m841effectStatus_);
m841damagingMoveData_.setEffects(m841custListEffect_);
m841damagingMoveData_.setStoppableMoveSolo(true);
m841damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m841damagingMoveData_;
}
static MoveData m474(){
StatusMoveData m842statusMoveData_ = Instances.newStatusMoveData();
m842statusMoveData_.setThievableMove(true);
m842statusMoveData_.setPp(20);
StringList m842stringList_=new StringList(new CollCapacity(1));
m842stringList_.add(I_PLANTE);
m842statusMoveData_.setTypes(m842stringList_);
m842stringList_=new StringList(new CollCapacity(1));
m842stringList_.add(I_PLANTE);
m842statusMoveData_.setBoostedTypes(m842stringList_);
m842statusMoveData_.setAccuracy(R_1);
CustList<Effect> m842custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectEndRoundIndividual m842effectEndRoundIndividual_=Instances.newEffectEndRoundIndividual();
m842effectEndRoundIndividual_.setHealHp(Rate.newRate(R_1_8));
m842effectEndRoundIndividual_.setEndRoundRank(61);
m842effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
m842custListEffect_.add(m842effectEndRoundIndividual_);
EffectUnprotectFromTypes m842effectUnprotectFromTypes_=Instances.newEffectUnprotectFromTypes();
m842stringList_=new StringList(new CollCapacity(1));
m842stringList_.add(I_SOL);
m842effectUnprotectFromTypes_.setAttackTargetWithTypes(m842stringList_);
m842effectUnprotectFromTypes_.setTargetChoice(TargetChoice.LANCEUR);
Ints m842ints_=new Ints(new CollCapacity(1));
m842ints_.add(0);
m842effectUnprotectFromTypes_.setRequiredSuccessfulEffects(m842ints_);
m842custListEffect_.add(m842effectUnprotectFromTypes_);
m842statusMoveData_.setEffects(m842custListEffect_);
m842statusMoveData_.setStoppableMoveMulti(true);
m842statusMoveData_.setIgnVarAccurUserNeg(true);
m842statusMoveData_.setIgnVarEvasTargetPos(true);
m842statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m842statusMoveData_;
}
}
