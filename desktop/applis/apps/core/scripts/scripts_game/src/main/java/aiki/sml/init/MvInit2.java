package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit2 extends CstIgame{
private MvInit2(){}
static MoveData m50(){
DamagingMoveData m872damagingMoveData_ = Instances.newDamagingMoveData();
m872damagingMoveData_.setCategory(I_PHYSIQUE);
m872damagingMoveData_.setStoppableMoveKoSingle(true);
m872damagingMoveData_.setPp((short)30);
StringList m872stringList_=new StringList(new CollCapacity(1));
m872stringList_.add(I_PLANTE);
m872damagingMoveData_.setTypes(m872stringList_);
m872stringList_=new StringList(new CollCapacity(1));
m872stringList_.add(I_PLANTE);
m872damagingMoveData_.setBoostedTypes(m872stringList_);
m872damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m872custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m872effectDamage_=Instances.newEffectDamage();
m872effectDamage_.setPower(R_25);
m872effectDamage_.setUserAttack(true);
m872effectDamage_.setStatisAtt(Statistic.ATTACK);
m872effectDamage_.setTargetDefense(true);
m872effectDamage_.setStatisDef(Statistic.DEFENSE);
m872effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m872effectDamage_.setFail(ES);
m872custListEffect_.add(m872effectDamage_);
m872damagingMoveData_.setEffects(m872custListEffect_);
m872damagingMoveData_.setStoppableMoveSolo(true);
m872damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m872damagingMoveData_;
}
static MoveData m51(){
DamagingMoveData m873damagingMoveData_ = Instances.newDamagingMoveData();
m873damagingMoveData_.setCategory(I_SPECIALE);
m873damagingMoveData_.setStoppableMoveKoSingle(true);
m873damagingMoveData_.setPp((short)5);
StringList m873stringList_=new StringList(new CollCapacity(1));
m873stringList_.add(I_PSY);
m873damagingMoveData_.setTypes(m873stringList_);
m873stringList_=new StringList(new CollCapacity(1));
m873stringList_.add(I_PSY);
m873damagingMoveData_.setBoostedTypes(m873stringList_);
m873damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m873custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m873effectDamage_=Instances.newEffectDamage();
m873effectDamage_.setPower(R_70);
m873effectDamage_.setUserAttack(true);
m873effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m873effectDamage_.setTargetDefense(true);
m873effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m873effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m873effectDamage_.setFail(ES);
m873custListEffect_.add(m873effectDamage_);
EffectStatistic m873effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m873enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m873enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)-1);
m873effectStatistic_.setStatisVarRank(m873enumMapStatisticByte_);
EnumMap<Statistic,String> m873enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m873enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m873effectStatistic_.setLocalFailStatis(m873enumMapStatisticString_);
m873effectStatistic_.setEvtRate(Rate.newRate(R_1_2));
m873effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m873effectStatistic_.setFail(ES);
Ints m873ints_=new Ints(new CollCapacity(1));
m873ints_.add(0);
m873effectStatistic_.setRequiredSuccessfulEffects(m873ints_);
m873custListEffect_.add(m873effectStatistic_);
m873damagingMoveData_.setEffects(m873custListEffect_);
m873damagingMoveData_.setStoppableMoveSolo(true);
m873damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m873damagingMoveData_;
}
static MoveData m52(){
DamagingMoveData m874damagingMoveData_ = Instances.newDamagingMoveData();
m874damagingMoveData_.setCategory(I_PHYSIQUE);
m874damagingMoveData_.setDirect(true);
m874damagingMoveData_.setStoppableMoveKoSingle(true);
m874damagingMoveData_.setPp((short)20);
StringList m874stringList_=new StringList(new CollCapacity(1));
m874stringList_.add(I_GLACE);
m874damagingMoveData_.setTypes(m874stringList_);
m874stringList_=new StringList(new CollCapacity(1));
m874stringList_.add(I_GLACE);
m874damagingMoveData_.setBoostedTypes(m874stringList_);
m874damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m874custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m874effectDamage_=Instances.newEffectDamage();
m874effectDamage_.setPower(R_30+OM+LP+A_MIN+LP+R_1+OC+V_LANCEUR_NB_UTILISATION+SE+I_BOUL_ARMURE+RP+OP+R_1+RP+OM+A_PUIS+LP+R_2+OC+V_NB_TOUR+SE+I_BALL_GLACE+RP);
m874effectDamage_.setUserAttack(true);
m874effectDamage_.setStatisAtt(Statistic.ATTACK);
m874effectDamage_.setTargetDefense(true);
m874effectDamage_.setStatisDef(Statistic.DEFENSE);
m874effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m874effectDamage_.setFail(ES);
m874custListEffect_.add(m874effectDamage_);
m874damagingMoveData_.setEffects(m874custListEffect_);
MonteCarloNumber m874monteCarloNumber_=new MonteCarloNumber(new CollCapacity(1));
m874monteCarloNumber_.addQuickEvent(Rate.newRate(R_5),LgInt.newLgInt(R_1));
m874damagingMoveData_.setRepeatRoundLaw(m874monteCarloNumber_);
m874damagingMoveData_.setRankIncrementNbRound((short)18);
m874damagingMoveData_.setConstUserChoice(true);
m874damagingMoveData_.setStoppableMoveSolo(true);
m874damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m874damagingMoveData_;
}
static MoveData m53(){
DamagingMoveData m875damagingMoveData_ = Instances.newDamagingMoveData();
m875damagingMoveData_.setCategory(I_SPECIALE);
m875damagingMoveData_.setStoppableMoveKoSingle(true);
m875damagingMoveData_.setPp((short)10);
StringList m875stringList_=new StringList(new CollCapacity(1));
m875stringList_.add(I_NORMAL);
m875damagingMoveData_.setTypes(m875stringList_);
m875stringList_=new StringList(new CollCapacity(1));
m875stringList_.add(I_NORMAL);
m875damagingMoveData_.setBoostedTypes(m875stringList_);
m875damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m875custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m875effectDamage_=Instances.newEffectDamage();
m875effectDamage_.setPower(R_100+OM+LP+A_CARDINAL+LP+LB+V_CLIMATS+RB+RP+OP+R_1+RP);
m875effectDamage_.setUserAttack(true);
m875effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m875effectDamage_.setTargetDefense(true);
m875effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m875effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m875effectDamage_.setFail(ES);
m875custListEffect_.add(m875effectDamage_);
m875damagingMoveData_.setEffects(m875custListEffect_);
m875damagingMoveData_.setStoppableMoveSolo(true);
m875damagingMoveData_.setStoppableMoveMulti(true);
StringMap<String> m875stringMapString_=new StringMap<String>(new CollCapacity(6));
m875stringMapString_.addEntry(ES,I_NORMAL);
m875stringMapString_.addEntry(I_GRELE,I_GLACE);
m875stringMapString_.addEntry(I_ZENITH,I_FEU);
m875stringMapString_.addEntry(I_DANSE_PLUIE,I_EAU);
m875stringMapString_.addEntry(I_ORAGE,I_ELECTRIQUE);
m875stringMapString_.addEntry(I_TEMPETESABLE,I_ROCHE);
m875damagingMoveData_.setTypesByWeather(m875stringMapString_);
m875damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m875damagingMoveData_;
}
static MoveData m54(){
DamagingMoveData m876damagingMoveData_ = Instances.newDamagingMoveData();
m876damagingMoveData_.setCategory(I_SPECIALE);
m876damagingMoveData_.setStoppableMoveKoSingle(true);
m876damagingMoveData_.setPp((short)15);
StringList m876stringList_=new StringList(new CollCapacity(1));
m876stringList_.add(I_SPECTRE);
m876damagingMoveData_.setTypes(m876stringList_);
m876stringList_=new StringList(new CollCapacity(1));
m876stringList_.add(I_SPECTRE);
m876damagingMoveData_.setBoostedTypes(m876stringList_);
m876damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m876custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m876effectDamage_=Instances.newEffectDamage();
m876effectDamage_.setPower(R_90);
m876effectDamage_.setUserAttack(true);
m876effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m876effectDamage_.setTargetDefense(true);
m876effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m876effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m876effectDamage_.setFail(ES);
m876custListEffect_.add(m876effectDamage_);
EffectStatistic m876effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m876enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m876enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-1);
m876effectStatistic_.setStatisVarRank(m876enumMapStatisticByte_);
EnumMap<Statistic,String> m876enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m876enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m876effectStatistic_.setLocalFailStatis(m876enumMapStatisticString_);
m876effectStatistic_.setEvtRate(Rate.newRate(R_1_5));
m876effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m876effectStatistic_.setFail(ES);
Ints m876ints_=new Ints(new CollCapacity(1));
m876ints_.add(0);
m876effectStatistic_.setRequiredSuccessfulEffects(m876ints_);
m876custListEffect_.add(m876effectStatistic_);
m876damagingMoveData_.setEffects(m876custListEffect_);
m876damagingMoveData_.setStoppableMoveSolo(true);
m876damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m876damagingMoveData_;
}
static MoveData m55(){
DamagingMoveData m877damagingMoveData_ = Instances.newDamagingMoveData();
m877damagingMoveData_.setCategory(I_SPECIALE);
m877damagingMoveData_.setStoppableMoveKoSingle(true);
m877damagingMoveData_.setPp((short)10);
StringList m877stringList_=new StringList(new CollCapacity(1));
m877stringList_.add(I_NORMAL);
m877damagingMoveData_.setTypes(m877stringList_);
m877stringList_=new StringList(new CollCapacity(1));
m877stringList_.add(I_NORMAL);
m877damagingMoveData_.setBoostedTypes(m877stringList_);
m877damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m877custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m877effectDamage_=Instances.newEffectDamage();
m877effectDamage_.setPower(R_140);
m877effectDamage_.setUserAttack(true);
m877effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m877effectDamage_.setTargetDefense(true);
m877effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m877effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m877effectDamage_.setFail(ES);
m877custListEffect_.add(m877effectDamage_);
m877damagingMoveData_.setEffects(m877custListEffect_);
m877damagingMoveData_.setStoppableMoveSolo(true);
m877damagingMoveData_.setStoppableMoveMulti(true);
m877damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m877damagingMoveData_;
}
static MoveData m56(){
StatusMoveData m878statusMoveData_ = Instances.newStatusMoveData();
m878statusMoveData_.setCounterableMove(true);
m878statusMoveData_.setPp((short)5);
StringList m878stringList_=new StringList(new CollCapacity(1));
m878stringList_.add(I_NORMAL);
m878statusMoveData_.setTypes(m878stringList_);
m878stringList_=new StringList(new CollCapacity(1));
m878stringList_.add(I_NORMAL);
m878statusMoveData_.setBoostedTypes(m878stringList_);
m878statusMoveData_.setAccuracy(R_1);
CustList<Effect> m878custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeam m878effectTeam_=Instances.newEffectTeam();
EnumMap<Statistic,Rate> m878enumMapStatisticRate_=new EnumMap<Statistic,Rate>(new CollCapacity(1));
m878enumMapStatisticRate_.addEntry(Statistic.ACCURACY,Rate.newRate(R_2));
m878effectTeam_.setMultStatistic(m878enumMapStatisticRate_);
m878enumMapStatisticRate_=new EnumMap<Statistic,Rate>(new CollCapacity(1));
m878enumMapStatisticRate_.addEntry(Statistic.EVASINESS,Rate.newRate(R_1_2));
m878effectTeam_.setMultStatisticFoe(m878enumMapStatisticRate_);
m878effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m878effectTeam_.setFail(ES);
m878custListEffect_.add(m878effectTeam_);
m878statusMoveData_.setEffects(m878custListEffect_);
m878statusMoveData_.setRankIncrementNbRound((short)12);
m878statusMoveData_.setStoppableMoveMulti(true);
m878statusMoveData_.setIgnVarAccurUserNeg(true);
m878statusMoveData_.setIgnVarEvasTargetPos(true);
m878statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m878statusMoveData_;
}
static MoveData m57(){
DamagingMoveData m879damagingMoveData_ = Instances.newDamagingMoveData();
m879damagingMoveData_.setCategory(I_PHYSIQUE);
m879damagingMoveData_.setDirect(true);
m879damagingMoveData_.setStoppableMoveKoSingle(true);
m879damagingMoveData_.setPp((short)10);
StringList m879stringList_=new StringList(new CollCapacity(1));
m879stringList_.add(I_TENEBRE);
m879damagingMoveData_.setTypes(m879stringList_);
m879stringList_=new StringList(new CollCapacity(1));
m879stringList_.add(I_TENEBRE);
m879damagingMoveData_.setBoostedTypes(m879stringList_);
m879damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m879custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m879effectDamage_=Instances.newEffectDamage();
m879effectDamage_.setPower(R_10);
m879effectDamage_.setSummingUserTeamOkFighter(true);
m879effectDamage_.setUserAttack(true);
m879effectDamage_.setStatisAtt(Statistic.ATTACK);
m879effectDamage_.setTargetDefense(true);
m879effectDamage_.setStatisDef(Statistic.DEFENSE);
m879effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m879effectDamage_.setFail(ES);
m879custListEffect_.add(m879effectDamage_);
m879damagingMoveData_.setEffects(m879custListEffect_);
m879damagingMoveData_.setStoppableMoveSolo(true);
m879damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m879damagingMoveData_;
}
static MoveData m58(){
DamagingMoveData m880damagingMoveData_ = Instances.newDamagingMoveData();
m880damagingMoveData_.setCategory(I_PHYSIQUE);
m880damagingMoveData_.setDirect(true);
m880damagingMoveData_.setStoppableMoveKoSingle(true);
m880damagingMoveData_.setPp((short)20);
StringList m880stringList_=new StringList(new CollCapacity(1));
m880stringList_.add(I_VOL);
m880damagingMoveData_.setTypes(m880stringList_);
m880stringList_=new StringList(new CollCapacity(1));
m880stringList_.add(I_VOL);
m880damagingMoveData_.setBoostedTypes(m880stringList_);
m880damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m880custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m880effectDamage_=Instances.newEffectDamage();
m880effectDamage_.setPower(R_80);
m880effectDamage_.setUserAttack(true);
m880effectDamage_.setStatisAtt(Statistic.ATTACK);
m880effectDamage_.setTargetDefense(true);
m880effectDamage_.setStatisDef(Statistic.DEFENSE);
m880effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m880effectDamage_.setFail(ES);
m880custListEffect_.add(m880effectDamage_);
m880damagingMoveData_.setEffects(m880custListEffect_);
m880damagingMoveData_.setStoppableMoveSolo(true);
m880damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m880damagingMoveData_;
}
static MoveData m59(){
DamagingMoveData m881damagingMoveData_ = Instances.newDamagingMoveData();
m881damagingMoveData_.setCategory(I_PHYSIQUE);
m881damagingMoveData_.setDirect(true);
m881damagingMoveData_.setStoppableMoveKoSingle(true);
m881damagingMoveData_.setPp((short)20);
StringList m881stringList_=new StringList(new CollCapacity(1));
m881stringList_.add(I_NORMAL);
m881damagingMoveData_.setTypes(m881stringList_);
m881stringList_=new StringList(new CollCapacity(1));
m881stringList_.add(I_NORMAL);
m881damagingMoveData_.setBoostedTypes(m881stringList_);
m881damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m881custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m881effectDamage_=Instances.newEffectDamage();
m881effectDamage_.setPower(R_90);
m881effectDamage_.setUserAttack(true);
m881effectDamage_.setStatisAtt(Statistic.ATTACK);
m881effectDamage_.setTargetDefense(true);
m881effectDamage_.setStatisDef(Statistic.DEFENSE);
m881effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m881effectDamage_.setFail(ES);
m881custListEffect_.add(m881effectDamage_);
EffectDamageRate m881effectDamageRate_=Instances.newEffectDamageRate();
m881effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_4));
m881effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m881effectDamageRate_.setFail(ES);
Ints m881ints_=new Ints(new CollCapacity(1));
m881ints_.add(0);
m881effectDamageRate_.setRequiredSuccessfulEffects(m881ints_);
m881custListEffect_.add(m881effectDamageRate_);
m881damagingMoveData_.setEffects(m881custListEffect_);
m881damagingMoveData_.setStoppableMoveSolo(true);
m881damagingMoveData_.setStoppableMoveMulti(true);
m881damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m881damagingMoveData_;
}
static MoveData m60(){
StatusMoveData m882statusMoveData_ = Instances.newStatusMoveData();
m882statusMoveData_.setCounterableMove(true);
m882statusMoveData_.setPp((short)15);
StringList m882stringList_=new StringList(new CollCapacity(1));
m882stringList_.add(I_NORMAL);
m882statusMoveData_.setTypes(m882stringList_);
m882stringList_=new StringList(new CollCapacity(1));
m882stringList_.add(I_NORMAL);
m882statusMoveData_.setBoostedTypes(m882stringList_);
m882statusMoveData_.setAccuracy(R_11_20);
CustList<Effect> m882custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m882effectStatus_=Instances.newEffectStatus();
MonteCarloString m882monteCarloString_=new MonteCarloString(new CollCapacity(1));
m882monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m882effectStatus_.setLawStatus(m882monteCarloString_);
StringMap<String> m882stringMapString_=new StringMap<String>(new CollCapacity(1));
m882stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m882effectStatus_.setLocalFailStatus(m882stringMapString_);
m882effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m882effectStatus_.setFail(ES);
m882custListEffect_.add(m882effectStatus_);
m882statusMoveData_.setEffects(m882custListEffect_);
m882statusMoveData_.setStoppableMoveSolo(true);
m882statusMoveData_.setStoppableMoveMulti(true);
m882statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m882statusMoveData_;
}
static MoveData m61(){
StatusMoveData m883statusMoveData_ = Instances.newStatusMoveData();
m883statusMoveData_.setPp((short)10);
StringList m883stringList_=new StringList(new CollCapacity(1));
m883stringList_.add(I_NORMAL);
m883statusMoveData_.setTypes(m883stringList_);
m883stringList_=new StringList(new CollCapacity(1));
m883stringList_.add(I_NORMAL);
m883statusMoveData_.setBoostedTypes(m883stringList_);
m883statusMoveData_.setAccuracy(R_1);
CustList<Effect> m883custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectInvoke m883effectInvoke_=Instances.newEffectInvoke();
m883effectInvoke_.setInvokingUserMoveWhileSleep(true);
m883stringList_=new StringList(new CollCapacity(24));
m883stringList_.add(I_ASSISTANCE);
m883stringList_.add(I_BABIL);
m883stringList_.add(I_BLABLA_DODO);
m883stringList_.add(I_BROUHAHA);
m883stringList_.add(I_CHUTE_LIBRE);
m883stringList_.add(I_COUD_KRANE);
m883stringList_.add(I_COUPE_VENT);
m883stringList_.add(I_ECLAIR_GELE);
m883stringList_.add(I_FEU_GLACE);
m883stringList_.add(I_INCENDIE);
m883stringList_.add(I_LANCE_SOLEIL);
m883stringList_.add(I_METRONOME);
m883stringList_.add(I_MIMIQUE);
m883stringList_.add(I_MITRA_POING);
m883stringList_.add(I_MOI_D_ABORD);
m883stringList_.add(I_PATIENCE);
m883stringList_.add(I_PHOTOCOPIE);
m883stringList_.add(I_PIQUE);
m883stringList_.add(I_PLONGEE);
m883stringList_.add(I_REBOND);
m883stringList_.add(I_REPOS);
m883stringList_.add(I_REVENANT);
m883stringList_.add(I_TUNNEL);
m883stringList_.add(I_ENVOL);
m883effectInvoke_.setMovesNotToBeInvoked(m883stringList_);
m883effectInvoke_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m883effectInvoke_.setFail(V_PAS_ATTAQUE_INVOC+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OE+R_0);
m883custListEffect_.add(m883effectInvoke_);
m883statusMoveData_.setEffects(m883custListEffect_);
m883statusMoveData_.setStoppableMoveSolo(true);
m883statusMoveData_.setIgnVarAccurUserNeg(true);
m883statusMoveData_.setIgnVarEvasTargetPos(true);
m883statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m883stringList_=new StringList(new CollCapacity(2));
m883stringList_.add(I_SOMMEIL);
m883stringList_.add(I_SOMMEIL_REPOS);
m883statusMoveData_.setRequiredStatus(m883stringList_);
return m883statusMoveData_;
}
static MoveData m62(){
DamagingMoveData m884damagingMoveData_ = Instances.newDamagingMoveData();
m884damagingMoveData_.setCategory(I_SPECIALE);
m884damagingMoveData_.setStoppableMoveKoSingle(true);
m884damagingMoveData_.setPp((short)5);
StringList m884stringList_=new StringList(new CollCapacity(1));
m884stringList_.add(I_GLACE);
m884damagingMoveData_.setTypes(m884stringList_);
m884stringList_=new StringList(new CollCapacity(1));
m884stringList_.add(I_GLACE);
m884damagingMoveData_.setBoostedTypes(m884stringList_);
m884damagingMoveData_.setAccuracy(A_DIV+LP+R_70+OP+R_30+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_GRELE+RB+RP+RP+OD+R_15+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ZENITH+RB+RP+RP+OP+R_10+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ORAGE+OS+I_DANSE_PLUIE+RB+RP+RP+OC+R_100+RP);
CustList<Effect> m884custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m884effectDamage_=Instances.newEffectDamage();
m884effectDamage_.setPower(R_120);
m884effectDamage_.setUserAttack(true);
m884effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m884effectDamage_.setTargetDefense(true);
m884effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m884effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m884effectDamage_.setFail(ES);
m884custListEffect_.add(m884effectDamage_);
EffectStatus m884effectStatus_=Instances.newEffectStatus();
MonteCarloString m884monteCarloString_=new MonteCarloString(new CollCapacity(2));
m884monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m884monteCarloString_.addQuickEvent(I_GEL,LgInt.newLgInt(R_1));
m884effectStatus_.setLawStatus(m884monteCarloString_);
StringMap<String> m884stringMapString_=new StringMap<String>(new CollCapacity(1));
m884stringMapString_.addEntry(I_GEL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_GEL+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_GLACE+RB+RP+RP+GT+R_0);
m884effectStatus_.setLocalFailStatus(m884stringMapString_);
m884effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
m884effectStatus_.setFail(ES);
Ints m884ints_=new Ints(new CollCapacity(1));
m884ints_.add(0);
m884effectStatus_.setRequiredSuccessfulEffects(m884ints_);
m884custListEffect_.add(m884effectStatus_);
m884damagingMoveData_.setEffects(m884custListEffect_);
m884damagingMoveData_.setStoppableMoveSolo(true);
m884damagingMoveData_.setStoppableMoveMulti(true);
m884damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m884damagingMoveData_;
}
static MoveData m63(){
DamagingMoveData m885damagingMoveData_ = Instances.newDamagingMoveData();
m885damagingMoveData_.setCategory(I_PHYSIQUE);
m885damagingMoveData_.setDirect(true);
m885damagingMoveData_.setStoppableMoveKoSingle(true);
m885damagingMoveData_.setPp((short)10);
StringList m885stringList_=new StringList(new CollCapacity(1));
m885stringList_.add(I_NORMAL);
m885damagingMoveData_.setTypes(m885stringList_);
m885stringList_=new StringList(new CollCapacity(1));
m885stringList_.add(I_NORMAL);
m885damagingMoveData_.setBoostedTypes(m885stringList_);
m885damagingMoveData_.setPriority((byte)3);
m885damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m885custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m885effectDamage_=Instances.newEffectDamage();
m885effectDamage_.setPower(R_40);
m885effectDamage_.setUserAttack(true);
m885effectDamage_.setStatisAtt(Statistic.ATTACK);
m885effectDamage_.setTargetDefense(true);
m885effectDamage_.setStatisDef(Statistic.DEFENSE);
m885effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m885effectDamage_.setFail(ES);
m885custListEffect_.add(m885effectDamage_);
EffectStatus m885effectStatus_=Instances.newEffectStatus();
MonteCarloString m885monteCarloString_=new MonteCarloString(new CollCapacity(1));
m885monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m885effectStatus_.setLawStatus(m885monteCarloString_);
StringMap<String> m885stringMapString_=new StringMap<String>(new CollCapacity(1));
m885stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m885effectStatus_.setLocalFailStatus(m885stringMapString_);
m885effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m885effectStatus_.setFail(ES);
Ints m885ints_=new Ints(new CollCapacity(1));
m885ints_.add(0);
m885effectStatus_.setRequiredSuccessfulEffects(m885ints_);
m885custListEffect_.add(m885effectStatus_);
m885damagingMoveData_.setEffects(m885custListEffect_);
m885damagingMoveData_.setStoppableMoveSolo(true);
m885damagingMoveData_.setStoppableMoveMulti(true);
m885damagingMoveData_.setStoppableMovePrio(true);
m885damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m885damagingMoveData_;
}
static MoveData m64(){
DamagingMoveData m886damagingMoveData_ = Instances.newDamagingMoveData();
m886damagingMoveData_.setCategory(I_PHYSIQUE);
m886damagingMoveData_.setStoppableMoveKoSingle(true);
m886damagingMoveData_.setPp((short)20);
StringList m886stringList_=new StringList(new CollCapacity(1));
m886stringList_.add(I_ACIER);
m886damagingMoveData_.setTypes(m886stringList_);
m886stringList_=new StringList(new CollCapacity(1));
m886stringList_.add(I_ACIER);
m886damagingMoveData_.setBoostedTypes(m886stringList_);
m886damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m886custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m886effectDamage_=Instances.newEffectDamage();
m886effectDamage_.setPower(R_60);
m886effectDamage_.setUserAttack(true);
m886effectDamage_.setStatisAtt(Statistic.ATTACK);
m886effectDamage_.setTargetDefense(true);
m886effectDamage_.setStatisDef(Statistic.DEFENSE);
m886effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m886effectDamage_.setFail(ES);
m886custListEffect_.add(m886effectDamage_);
m886damagingMoveData_.setEffects(m886custListEffect_);
m886damagingMoveData_.setStoppableMoveSolo(true);
m886damagingMoveData_.setIgnVarAccurUserNeg(true);
m886damagingMoveData_.setIgnVarEvasTargetPos(true);
m886damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m886damagingMoveData_;
}
static MoveData m65(){
DamagingMoveData m887damagingMoveData_ = Instances.newDamagingMoveData();
m887damagingMoveData_.setCategory(I_SPECIALE);
m887damagingMoveData_.setStoppableMoveKoSingle(true);
m887damagingMoveData_.setPp((short)20);
StringList m887stringList_=new StringList(new CollCapacity(1));
m887stringList_.add(I_POISON);
m887damagingMoveData_.setTypes(m887stringList_);
m887stringList_=new StringList(new CollCapacity(1));
m887stringList_.add(I_POISON);
m887damagingMoveData_.setBoostedTypes(m887stringList_);
m887damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m887custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m887effectDamage_=Instances.newEffectDamage();
m887effectDamage_.setPower(R_40);
m887effectDamage_.setUserAttack(true);
m887effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m887effectDamage_.setTargetDefense(true);
m887effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m887effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m887effectDamage_.setFail(ES);
m887custListEffect_.add(m887effectDamage_);
EffectStatistic m887effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m887enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m887enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-2);
m887effectStatistic_.setStatisVarRank(m887enumMapStatisticByte_);
EnumMap<Statistic,String> m887enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m887enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m887effectStatistic_.setLocalFailStatis(m887enumMapStatisticString_);
m887effectStatistic_.setEvtRate(Rate.newRate(R_1));
m887effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m887effectStatistic_.setFail(ES);
Ints m887ints_=new Ints(new CollCapacity(1));
m887ints_.add(0);
m887effectStatistic_.setRequiredSuccessfulEffects(m887ints_);
m887custListEffect_.add(m887effectStatistic_);
m887damagingMoveData_.setEffects(m887custListEffect_);
m887damagingMoveData_.setStoppableMoveSolo(true);
m887damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m887damagingMoveData_;
}
static MoveData m66(){
DamagingMoveData m888damagingMoveData_ = Instances.newDamagingMoveData();
m888damagingMoveData_.setCategory(I_SPECIALE);
m888damagingMoveData_.setStoppableMoveKoSingle(true);
m888damagingMoveData_.setPp((short)10);
StringList m888stringList_=new StringList(new CollCapacity(1));
m888stringList_.add(I_POISON);
m888damagingMoveData_.setTypes(m888stringList_);
m888stringList_=new StringList(new CollCapacity(1));
m888stringList_.add(I_POISON);
m888damagingMoveData_.setBoostedTypes(m888stringList_);
m888damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m888custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m888effectDamage_=Instances.newEffectDamage();
m888effectDamage_.setPower(R_90);
m888effectDamage_.setUserAttack(true);
m888effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m888effectDamage_.setTargetDefense(true);
m888effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m888effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m888effectDamage_.setFail(ES);
m888custListEffect_.add(m888effectDamage_);
EffectStatus m888effectStatus_=Instances.newEffectStatus();
MonteCarloString m888monteCarloString_=new MonteCarloString(new CollCapacity(2));
m888monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m888monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_3));
m888effectStatus_.setLawStatus(m888monteCarloString_);
StringMap<String> m888stringMapString_=new StringMap<String>(new CollCapacity(1));
m888stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m888effectStatus_.setLocalFailStatus(m888stringMapString_);
m888effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m888effectStatus_.setFail(ES);
Ints m888ints_=new Ints(new CollCapacity(1));
m888ints_.add(0);
m888effectStatus_.setRequiredSuccessfulEffects(m888ints_);
m888custListEffect_.add(m888effectStatus_);
m888damagingMoveData_.setEffects(m888custListEffect_);
m888damagingMoveData_.setStoppableMoveSolo(true);
m888damagingMoveData_.setStoppableMoveMulti(true);
m888damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m888damagingMoveData_;
}
static MoveData m67(){
DamagingMoveData m889damagingMoveData_ = Instances.newDamagingMoveData();
m889damagingMoveData_.setCategory(I_PHYSIQUE);
m889damagingMoveData_.setStoppableMoveKoSingle(true);
m889damagingMoveData_.setPp((short)10);
StringList m889stringList_=new StringList(new CollCapacity(1));
m889stringList_.add(I_NORMAL);
m889damagingMoveData_.setTypes(m889stringList_);
m889stringList_=new StringList(new CollCapacity(1));
m889stringList_.add(I_NORMAL);
m889damagingMoveData_.setBoostedTypes(m889stringList_);
m889damagingMoveData_.setAccuracy(R_3_4);
CustList<Effect> m889custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m889effectDamage_=Instances.newEffectDamage();
m889effectDamage_.setPower(R_100);
m889effectDamage_.setUserAttack(true);
m889effectDamage_.setStatisAtt(Statistic.ATTACK);
m889effectDamage_.setTargetDefense(true);
m889effectDamage_.setStatisDef(Statistic.DEFENSE);
m889effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m889effectDamage_.setFail(ES);
m889custListEffect_.add(m889effectDamage_);
m889damagingMoveData_.setEffects(m889custListEffect_);
m889damagingMoveData_.setStoppableMoveSolo(true);
m889damagingMoveData_.setStoppableMoveMulti(true);
m889damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m889damagingMoveData_;
}
static MoveData m68(){
StatusMoveData m890statusMoveData_ = Instances.newStatusMoveData();
m890statusMoveData_.setPp((short)10);
StringList m890stringList_=new StringList(new CollCapacity(1));
m890stringList_.add(I_NORMAL);
m890statusMoveData_.setTypes(m890stringList_);
m890stringList_=new StringList(new CollCapacity(1));
m890stringList_.add(I_NORMAL);
m890statusMoveData_.setBoostedTypes(m890stringList_);
m890statusMoveData_.setAccuracy(R_1);
CustList<Effect> m890custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m890effectStatistic_=Instances.newEffectStatistic();
m890effectStatistic_.setEvtRate(Rate.newRate(R_1));
EnumList<Statistic> m890enumListStatistic_=new EnumList<Statistic>(new CollCapacity(7));
m890enumListStatistic_.add(Statistic.ATTACK);
m890enumListStatistic_.add(Statistic.DEFENSE);
m890enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m890enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m890enumListStatistic_.add(Statistic.SPEED);
m890enumListStatistic_.add(Statistic.ACCURACY);
m890enumListStatistic_.add(Statistic.EVASINESS);
m890effectStatistic_.setCopyBoost(m890enumListStatistic_);
m890effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m890effectStatistic_.setFail(ES);
m890custListEffect_.add(m890effectStatistic_);
m890statusMoveData_.setEffects(m890custListEffect_);
m890statusMoveData_.setStoppableMoveMulti(true);
m890statusMoveData_.setIgnVarAccurUserNeg(true);
m890statusMoveData_.setIgnVarEvasTargetPos(true);
m890statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m890statusMoveData_;
}
static MoveData m69(){
StatusMoveData m891statusMoveData_ = Instances.newStatusMoveData();
m891statusMoveData_.setThievableMove(true);
m891statusMoveData_.setPp((short)30);
StringList m891stringList_=new StringList(new CollCapacity(1));
m891stringList_.add(I_PSY);
m891statusMoveData_.setTypes(m891stringList_);
m891stringList_=new StringList(new CollCapacity(1));
m891stringList_.add(I_PSY);
m891statusMoveData_.setBoostedTypes(m891stringList_);
m891statusMoveData_.setAccuracy(R_1);
CustList<Effect> m891custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m891effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m891enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m891enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)2);
m891effectStatistic_.setStatisVarRank(m891enumMapStatisticByte_);
m891effectStatistic_.setEvtRate(Rate.newRate(R_1));
m891effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m891effectStatistic_.setFail(ES);
m891custListEffect_.add(m891effectStatistic_);
m891statusMoveData_.setEffects(m891custListEffect_);
m891statusMoveData_.setStoppableMoveMulti(true);
m891statusMoveData_.setIgnVarAccurUserNeg(true);
m891statusMoveData_.setIgnVarEvasTargetPos(true);
m891statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m891statusMoveData_;
}
static MoveData m70(){
StatusMoveData m892statusMoveData_ = Instances.newStatusMoveData();
m892statusMoveData_.setThievableMove(true);
m892statusMoveData_.setPp((short)10);
StringList m892stringList_=new StringList(new CollCapacity(1));
m892stringList_.add(I_ACIER);
m892statusMoveData_.setTypes(m892stringList_);
m892stringList_=new StringList(new CollCapacity(1));
m892stringList_.add(I_ACIER);
m892statusMoveData_.setBoostedTypes(m892stringList_);
m892statusMoveData_.setPriority((byte)4);
m892statusMoveData_.setAccuracy(R_1);
CustList<Effect> m892custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCounterAttack m892effectCounterAttack_=Instances.newEffectCounterAttack();
EnumMap<Statistic,Byte> m892enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m892enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-2);
m892effectCounterAttack_.setDroppedStatDirectMove(m892enumMapStatisticByte_);
m892effectCounterAttack_.setSufferingDamageDirectMove(Rate.newRate(R_0));
m892effectCounterAttack_.setProtectFail(ES);
m892effectCounterAttack_.setCounterFail(ES);
m892effectCounterAttack_.setTargetChoice(TargetChoice.LANCEUR);
m892effectCounterAttack_.setFail(ES);
m892custListEffect_.add(m892effectCounterAttack_);
m892statusMoveData_.setEffects(m892custListEffect_);
m892statusMoveData_.setStoppableMovePrio(true);
m892statusMoveData_.setIgnVarAccurUserNeg(true);
m892statusMoveData_.setIgnVarEvasTargetPos(true);
m892statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m892statusMoveData_;
}
static MoveData m71(){
DamagingMoveData m893damagingMoveData_ = Instances.newDamagingMoveData();
m893damagingMoveData_.setCategory(I_SPECIALE);
m893damagingMoveData_.setStoppableMoveKoSingle(true);
m893damagingMoveData_.setPp((short)10);
StringList m893stringList_=new StringList(new CollCapacity(1));
m893stringList_.add(I_SOL);
m893damagingMoveData_.setTypes(m893stringList_);
m893stringList_=new StringList(new CollCapacity(1));
m893stringList_.add(I_SOL);
m893damagingMoveData_.setBoostedTypes(m893stringList_);
m893damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m893custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m893effectDamage_=Instances.newEffectDamage();
m893effectDamage_.setPower(R_65);
m893effectDamage_.setUserAttack(true);
m893effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m893effectDamage_.setTargetDefense(true);
m893effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m893effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m893effectDamage_.setFail(ES);
m893custListEffect_.add(m893effectDamage_);
EffectStatistic m893effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m893enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m893enumMapStatisticByte_.addEntry(Statistic.ACCURACY,(byte)-1);
m893effectStatistic_.setStatisVarRank(m893enumMapStatisticByte_);
EnumMap<Statistic,String> m893enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m893enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m893effectStatistic_.setLocalFailStatis(m893enumMapStatisticString_);
m893effectStatistic_.setEvtRate(Rate.newRate(R_3_10));
m893effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m893effectStatistic_.setFail(ES);
Ints m893ints_=new Ints(new CollCapacity(1));
m893ints_.add(0);
m893effectStatistic_.setRequiredSuccessfulEffects(m893ints_);
m893custListEffect_.add(m893effectStatistic_);
m893damagingMoveData_.setEffects(m893custListEffect_);
m893damagingMoveData_.setStoppableMoveSolo(true);
m893damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m893damagingMoveData_;
}
static MoveData m72(){
DamagingMoveData m894damagingMoveData_ = Instances.newDamagingMoveData();
m894damagingMoveData_.setCategory(I_SPECIALE);
m894damagingMoveData_.setStoppableMoveKoSingle(true);
m894damagingMoveData_.setPp((short)10);
StringList m894stringList_=new StringList(new CollCapacity(1));
m894stringList_.add(I_ELECTRIQUE);
m894damagingMoveData_.setTypes(m894stringList_);
m894stringList_=new StringList(new CollCapacity(1));
m894stringList_.add(I_ELECTRIQUE);
m894damagingMoveData_.setBoostedTypes(m894stringList_);
m894damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m894custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m894effectDamage_=Instances.newEffectDamage();
m894effectDamage_.setPower(A_CARACSEMIOUVERTD+LP+A_DIV+LP+V_LANCEUR_STATIS+SE+I_SPEED+OC+V_CIBLE_STATIS+SE+I_SPEED+RP+OC+R_0+OC+R_2+RP+OM+R_60+OP+A_CARACSEMIOUVERTD+LP+A_DIV+LP+V_LANCEUR_STATIS+SE+I_SPEED+OC+V_CIBLE_STATIS+SE+I_SPEED+RP+OC+R_2+OC+R_3+RP+OM+R_80+OP+A_CARACSEMIOUVERTD+LP+A_DIV+LP+V_LANCEUR_STATIS+SE+I_SPEED+OC+V_CIBLE_STATIS+SE+I_SPEED+RP+OC+R_3+OC+R_4+RP+OM+R_120+OP+A_CARACDROITEFERME+LP+A_DIV+LP+V_LANCEUR_STATIS+SE+I_SPEED+OC+V_CIBLE_STATIS+SE+I_SPEED+RP+OC+R_4+RP+OM+R_150);
m894effectDamage_.setUserAttack(true);
m894effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m894effectDamage_.setTargetDefense(true);
m894effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m894effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m894effectDamage_.setFail(ES);
m894custListEffect_.add(m894effectDamage_);
m894damagingMoveData_.setEffects(m894custListEffect_);
m894damagingMoveData_.setStoppableMoveSolo(true);
m894damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m894damagingMoveData_;
}
static MoveData m73(){
DamagingMoveData m895damagingMoveData_ = Instances.newDamagingMoveData();
m895damagingMoveData_.setCategory(I_PHYSIQUE);
m895damagingMoveData_.setStoppableMoveKoSingle(true);
m895damagingMoveData_.setPp((short)25);
StringList m895stringList_=new StringList(new CollCapacity(1));
m895stringList_.add(I_ROCHE);
m895damagingMoveData_.setTypes(m895stringList_);
m895stringList_=new StringList(new CollCapacity(1));
m895stringList_.add(I_ROCHE);
m895damagingMoveData_.setBoostedTypes(m895stringList_);
m895damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m895custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m895effectDamage_=Instances.newEffectDamage();
m895effectDamage_.setPower(R_25);
m895effectDamage_.setUserAttack(true);
m895effectDamage_.setStatisAtt(Statistic.ATTACK);
m895effectDamage_.setTargetDefense(true);
m895effectDamage_.setStatisDef(Statistic.DEFENSE);
m895effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m895effectDamage_.setFail(ES);
m895custListEffect_.add(m895effectDamage_);
m895damagingMoveData_.setEffects(m895custListEffect_);
m895damagingMoveData_.setStoppableMoveSolo(true);
m895damagingMoveData_.setStoppableMoveMulti(true);
m895damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m895damagingMoveData_;
}
static MoveData m74(){
StatusMoveData m896statusMoveData_ = Instances.newStatusMoveData();
m896statusMoveData_.setThievableMove(true);
m896statusMoveData_.setPp((short)40);
StringList m896stringList_=new StringList(new CollCapacity(1));
m896stringList_.add(I_NORMAL);
m896statusMoveData_.setTypes(m896stringList_);
m896stringList_=new StringList(new CollCapacity(1));
m896stringList_.add(I_NORMAL);
m896statusMoveData_.setBoostedTypes(m896stringList_);
m896statusMoveData_.setAccuracy(R_1);
CustList<Effect> m896custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m896effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m896enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m896enumMapStatisticByte_.addEntry(Statistic.DEFENSE,(byte)1);
m896effectStatistic_.setStatisVarRank(m896enumMapStatisticByte_);
m896effectStatistic_.setEvtRate(Rate.newRate(R_1));
m896effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m896effectStatistic_.setFail(ES);
m896custListEffect_.add(m896effectStatistic_);
m896statusMoveData_.setEffects(m896custListEffect_);
m896statusMoveData_.setStoppableMoveMulti(true);
m896statusMoveData_.setIgnVarAccurUserNeg(true);
m896statusMoveData_.setIgnVarEvasTargetPos(true);
m896statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m896statusMoveData_;
}
}
