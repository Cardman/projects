package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit20 extends CstIgame{
private MvInit20(){}
static MoveData m500(){
StatusMoveData m899statusMoveData_ = Instances.newStatusMoveData();
m899statusMoveData_.setPp((short)5);
StringList m899stringList_=new StringList(new CollCapacity(1));
m899stringList_.add(I_NORMAL);
m899statusMoveData_.setTypes(m899stringList_);
m899stringList_=new StringList(new CollCapacity(1));
m899stringList_.add(I_NORMAL);
m899statusMoveData_.setBoostedTypes(m899stringList_);
m899statusMoveData_.setAccuracy(R_1);
CustList<Effect> m899custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m899effectGlobal_=Instances.newEffectGlobal();
m899effectGlobal_.setPuttingKo(true);
m899effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m899effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m899effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m899effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m899effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m899effectGlobal_.setInvokedMoveTerrain(ES);
m899effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m899effectGlobal_.setFail(ES);
m899custListEffect_.add(m899effectGlobal_);
EffectEndRoundGlobal m899effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m899effectEndRoundGlobal_.setFailEndRound(ES);
m899effectEndRoundGlobal_.setEndRoundRank(30);
m899effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m899effectEndRoundGlobal_.setFail(ES);
Ints m899ints_=new Ints(new CollCapacity(1));
m899ints_.add(0);
m899effectEndRoundGlobal_.setRequiredSuccessfulEffects(m899ints_);
m899custListEffect_.add(m899effectEndRoundGlobal_);
m899statusMoveData_.setEffects(m899custListEffect_);
m899statusMoveData_.setRankIncrementNbRound((short)5);
m899statusMoveData_.setStoppableMoveMulti(true);
m899statusMoveData_.setIgnVarAccurUserNeg(true);
m899statusMoveData_.setIgnVarEvasTargetPos(true);
m899statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m899statusMoveData_;
}
static MoveData m501(){
DamagingMoveData m900damagingMoveData_ = Instances.newDamagingMoveData();
m900damagingMoveData_.setCategory(I_PHYSIQUE);
m900damagingMoveData_.setDirect(true);
m900damagingMoveData_.setStoppableMoveKoSingle(true);
m900damagingMoveData_.setPp((short)20);
StringList m900stringList_=new StringList(new CollCapacity(1));
m900stringList_.add(I_NORMAL);
m900damagingMoveData_.setTypes(m900stringList_);
m900stringList_=new StringList(new CollCapacity(1));
m900stringList_.add(I_NORMAL);
m900damagingMoveData_.setBoostedTypes(m900stringList_);
m900damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m900custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m900effectDamage_=Instances.newEffectDamage();
m900effectDamage_.setPower(V_LANCEUR_BONHEUR+OM+R_2_5+OP+R_1);
m900effectDamage_.setUserAttack(true);
m900effectDamage_.setStatisAtt(Statistic.ATTACK);
m900effectDamage_.setTargetDefense(true);
m900effectDamage_.setStatisDef(Statistic.DEFENSE);
m900effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m900effectDamage_.setFail(ES);
m900custListEffect_.add(m900effectDamage_);
m900damagingMoveData_.setEffects(m900custListEffect_);
m900damagingMoveData_.setStoppableMoveSolo(true);
m900damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m900damagingMoveData_;
}
static MoveData m502(){
DamagingMoveData m901damagingMoveData_ = Instances.newDamagingMoveData();
m901damagingMoveData_.setCategory(I_PHYSIQUE);
m901damagingMoveData_.setDirect(true);
m901damagingMoveData_.setStoppableMoveKoSingle(true);
m901damagingMoveData_.setPp((short)10);
StringList m901stringList_=new StringList(new CollCapacity(1));
m901stringList_.add(I_COMBAT);
m901damagingMoveData_.setTypes(m901stringList_);
m901stringList_=new StringList(new CollCapacity(1));
m901stringList_.add(I_COMBAT);
m901damagingMoveData_.setBoostedTypes(m901stringList_);
m901damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m901custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m901effectDamage_=Instances.newEffectDamage();
m901effectDamage_.setPower(R_60+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OM+A_CARACFERME+LP+V_CIBLE_CLONE+OC+R_0+OC+R_0+RP+OP+R_1+RP);
m901effectDamage_.setUserAttack(true);
m901effectDamage_.setStatisAtt(Statistic.ATTACK);
m901effectDamage_.setTargetDefense(true);
m901effectDamage_.setStatisDef(Statistic.DEFENSE);
m901effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m901effectDamage_.setFail(ES);
m901custListEffect_.add(m901effectDamage_);
EffectStatus m901effectStatus_=Instances.newEffectStatus();
m901stringList_=new StringList(new CollCapacity(2));
m901stringList_.add(I_SOMMEIL);
m901stringList_.add(I_SOMMEIL_REPOS);
m901effectStatus_.setDeletedStatus(m901stringList_);
m901effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m901effectStatus_.setFail(ES);
Ints m901ints_=new Ints(new CollCapacity(1));
m901ints_.add(0);
m901effectStatus_.setRequiredSuccessfulEffects(m901ints_);
m901custListEffect_.add(m901effectStatus_);
m901damagingMoveData_.setEffects(m901custListEffect_);
m901damagingMoveData_.setStoppableMoveSolo(true);
m901damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m901damagingMoveData_;
}
static MoveData m503(){
DamagingMoveData m902damagingMoveData_ = Instances.newDamagingMoveData();
m902damagingMoveData_.setCategory(I_PHYSIQUE);
m902damagingMoveData_.setDirect(true);
m902damagingMoveData_.setStoppableMoveKoSingle(true);
m902damagingMoveData_.setPp((short)5);
StringList m902stringList_=new StringList(new CollCapacity(1));
m902stringList_.add(I_SPECTRE);
m902damagingMoveData_.setTypes(m902stringList_);
m902stringList_=new StringList(new CollCapacity(1));
m902stringList_.add(I_SPECTRE);
m902damagingMoveData_.setBoostedTypes(m902stringList_);
m902damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m902custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m902effectDamage_=Instances.newEffectDamage();
m902effectDamage_.setPower(R_120);
m902effectDamage_.setUserAttack(true);
m902effectDamage_.setStatisAtt(Statistic.ATTACK);
m902effectDamage_.setTargetDefense(true);
m902effectDamage_.setStatisDef(Statistic.DEFENSE);
m902effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m902effectDamage_.setFail(ES);
m902custListEffect_.add(m902effectDamage_);
m902damagingMoveData_.setEffects(m902custListEffect_);
m902damagingMoveData_.setNbPrepaRound((short)1);
m902damagingMoveData_.setDisappearBeforeUse(true);
m902damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m902damagingMoveData_;
}
static MoveData m504(){
DamagingMoveData m903damagingMoveData_ = Instances.newDamagingMoveData();
m903damagingMoveData_.setCategory(I_PHYSIQUE);
m903damagingMoveData_.setDirect(true);
m903damagingMoveData_.setStoppableMoveKoSingle(true);
m903damagingMoveData_.setPp((short)20);
StringList m903stringList_=new StringList(new CollCapacity(1));
m903stringList_.add(I_COMBAT);
m903damagingMoveData_.setTypes(m903stringList_);
m903stringList_=new StringList(new CollCapacity(1));
m903stringList_.add(I_COMBAT);
m903damagingMoveData_.setBoostedTypes(m903stringList_);
m903damagingMoveData_.setPriority((byte)-5);
m903damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m903custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m903effectDamage_=Instances.newEffectDamage();
StringMap<Rate> m903stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m903stringMapRate_.addEntry(I_PHYSIQUE,Rate.newRate(R_2));
m903effectDamage_.setMultDamageAgainst(m903stringMapRate_);
m903effectDamage_.setPower(ES);
m903effectDamage_.setUserAttack(true);
m903effectDamage_.setStatisAtt(Statistic.ATTACK);
m903effectDamage_.setTargetDefense(true);
m903effectDamage_.setStatisDef(Statistic.DEFENSE);
m903effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m903effectDamage_.setFail(A_CARACDROITEOUVERT+LP+V_LANCEUR_DEGATS_RECUS_TOUR+SE+I_PHYSIQUE+OC+R_0+RP+OE+R_0);
m903custListEffect_.add(m903effectDamage_);
m903damagingMoveData_.setEffects(m903custListEffect_);
m903damagingMoveData_.setStoppableMoveSolo(true);
m903damagingMoveData_.setStoppableMovePrio(true);
m903damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m903damagingMoveData_;
}
static MoveData m505(){
DamagingMoveData m904damagingMoveData_ = Instances.newDamagingMoveData();
m904damagingMoveData_.setCategory(I_PHYSIQUE);
m904damagingMoveData_.setStoppableMoveKoSingle(true);
m904damagingMoveData_.setPp((short)5);
StringList m904stringList_=new StringList(new CollCapacity(1));
m904stringList_.add(I_ROCHE);
m904damagingMoveData_.setTypes(m904stringList_);
m904stringList_=new StringList(new CollCapacity(1));
m904stringList_.add(I_ROCHE);
m904damagingMoveData_.setBoostedTypes(m904stringList_);
m904damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m904custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m904effectDamage_=Instances.newEffectDamage();
m904effectDamage_.setPower(R_150);
m904effectDamage_.setUserAttack(true);
m904effectDamage_.setStatisAtt(Statistic.ATTACK);
m904effectDamage_.setTargetDefense(true);
m904effectDamage_.setStatisDef(Statistic.DEFENSE);
m904effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m904effectDamage_.setFail(ES);
m904custListEffect_.add(m904effectDamage_);
m904damagingMoveData_.setEffects(m904custListEffect_);
m904damagingMoveData_.setRechargeRound(true);
m904damagingMoveData_.setConstUserChoice(true);
m904damagingMoveData_.setStoppableMoveSolo(true);
m904damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m904damagingMoveData_;
}
static MoveData m506(){
DamagingMoveData m905damagingMoveData_ = Instances.newDamagingMoveData();
m905damagingMoveData_.setCategory(I_SPECIALE);
m905damagingMoveData_.setStoppableMoveKoSingle(true);
m905damagingMoveData_.setPp((short)15);
StringList m905stringList_=new StringList(new CollCapacity(1));
m905stringList_.add(I_NORMAL);
m905damagingMoveData_.setTypes(m905stringList_);
m905stringList_=new StringList(new CollCapacity(1));
m905stringList_.add(I_NORMAL);
m905damagingMoveData_.setBoostedTypes(m905stringList_);
m905damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m905custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m905effectDamage_=Instances.newEffectDamage();
m905effectDamage_.setPower(R_40);
m905effectDamage_.setUserAttack(true);
m905effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m905effectDamage_.setTargetDefense(true);
m905effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m905effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m905effectDamage_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OE+R_0);
m905custListEffect_.add(m905effectDamage_);
EffectStatus m905effectStatus_=Instances.newEffectStatus();
MonteCarloString m905monteCarloString_=new MonteCarloString(new CollCapacity(2));
m905monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m905monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m905effectStatus_.setLawStatus(m905monteCarloString_);
StringMap<String> m905stringMapString_=new StringMap<String>(new CollCapacity(1));
m905stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m905effectStatus_.setLocalFailStatus(m905stringMapString_);
m905effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m905effectStatus_.setFail(ES);
Ints m905ints_=new Ints(new CollCapacity(1));
m905ints_.add(0);
m905effectStatus_.setRequiredSuccessfulEffects(m905ints_);
m905custListEffect_.add(m905effectStatus_);
m905damagingMoveData_.setEffects(m905custListEffect_);
m905damagingMoveData_.setStoppableMoveSolo(true);
m905damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m905stringList_=new StringList(new CollCapacity(2));
m905stringList_.add(I_SOMMEIL);
m905stringList_.add(I_SOMMEIL_REPOS);
m905damagingMoveData_.setRequiredStatus(m905stringList_);
return m905damagingMoveData_;
}
static MoveData m507(){
DamagingMoveData m906damagingMoveData_ = Instances.newDamagingMoveData();
m906damagingMoveData_.setCategory(I_PHYSIQUE);
m906damagingMoveData_.setDirect(true);
m906damagingMoveData_.setStoppableMoveKoSingle(true);
m906damagingMoveData_.setPp((short)25);
StringList m906stringList_=new StringList(new CollCapacity(1));
m906stringList_.add(I_FEU);
m906damagingMoveData_.setTypes(m906stringList_);
m906stringList_=new StringList(new CollCapacity(1));
m906stringList_.add(I_FEU);
m906damagingMoveData_.setBoostedTypes(m906stringList_);
m906damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m906custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m906effectDamage_=Instances.newEffectDamage();
m906effectDamage_.setPower(R_60);
m906effectDamage_.setUserAttack(true);
m906effectDamage_.setStatisAtt(Statistic.ATTACK);
m906effectDamage_.setTargetDefense(true);
m906effectDamage_.setStatisDef(Statistic.DEFENSE);
m906effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m906effectDamage_.setFail(ES);
m906custListEffect_.add(m906effectDamage_);
EffectStatus m906effectStatus_=Instances.newEffectStatus();
MonteCarloString m906monteCarloString_=new MonteCarloString(new CollCapacity(2));
m906monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m906monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m906effectStatus_.setLawStatus(m906monteCarloString_);
StringMap<String> m906stringMapString_=new StringMap<String>(new CollCapacity(1));
m906stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m906effectStatus_.setLocalFailStatus(m906stringMapString_);
m906effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m906effectStatus_.setFail(ES);
Ints m906ints_=new Ints(new CollCapacity(1));
m906ints_.add(0);
m906effectStatus_.setRequiredSuccessfulEffects(m906ints_);
m906custListEffect_.add(m906effectStatus_);
m906damagingMoveData_.setEffects(m906custListEffect_);
m906damagingMoveData_.setStoppableMoveSolo(true);
m906damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m906stringList_=new StringList(new CollCapacity(1));
m906stringList_.add(I_GEL);
m906damagingMoveData_.setDeletedStatus(m906stringList_);
return m906damagingMoveData_;
}
static MoveData m508(){
DamagingMoveData m907damagingMoveData_ = Instances.newDamagingMoveData();
m907damagingMoveData_.setCategory(I_PHYSIQUE);
m907damagingMoveData_.setDirect(true);
m907damagingMoveData_.setStoppableMoveKoSingle(true);
m907damagingMoveData_.setPp((short)20);
StringList m907stringList_=new StringList(new CollCapacity(1));
m907stringList_.add(I_ROCHE);
m907damagingMoveData_.setTypes(m907stringList_);
m907stringList_=new StringList(new CollCapacity(1));
m907stringList_.add(I_ROCHE);
m907damagingMoveData_.setBoostedTypes(m907stringList_);
m907damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m907custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m907effectDamage_=Instances.newEffectDamage();
m907effectDamage_.setPower(R_30+OM+LP+A_MIN+LP+R_1+OC+V_LANCEUR_NB_UTILISATION+SE+I_BOUL_ARMURE+RP+OP+R_1+RP+OM+A_PUIS+LP+R_2+OC+V_NB_TOUR+SE+I_ROULADE+RP);
m907effectDamage_.setUserAttack(true);
m907effectDamage_.setStatisAtt(Statistic.ATTACK);
m907effectDamage_.setTargetDefense(true);
m907effectDamage_.setStatisDef(Statistic.DEFENSE);
m907effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m907effectDamage_.setFail(ES);
m907custListEffect_.add(m907effectDamage_);
m907damagingMoveData_.setEffects(m907custListEffect_);
MonteCarloNumber m907monteCarloNumber_=new MonteCarloNumber(new CollCapacity(1));
m907monteCarloNumber_.addQuickEvent(Rate.newRate(R_5),LgInt.newLgInt(R_1));
m907damagingMoveData_.setRepeatRoundLaw(m907monteCarloNumber_);
m907damagingMoveData_.setRankIncrementNbRound((short)18);
m907damagingMoveData_.setConstUserChoice(true);
m907damagingMoveData_.setStoppableMoveSolo(true);
m907damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m907damagingMoveData_;
}
static MoveData m509(){
StatusMoveData m908statusMoveData_ = Instances.newStatusMoveData();
m908statusMoveData_.setCounterableMove(true);
m908statusMoveData_.setPp((short)40);
StringList m908stringList_=new StringList(new CollCapacity(1));
m908stringList_.add(I_NORMAL);
m908statusMoveData_.setTypes(m908stringList_);
m908stringList_=new StringList(new CollCapacity(1));
m908stringList_.add(I_NORMAL);
m908statusMoveData_.setBoostedTypes(m908stringList_);
m908statusMoveData_.setAccuracy(R_1);
CustList<Effect> m908custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m908effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m908enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m908enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-1);
m908effectStatistic_.setStatisVarRank(m908enumMapStatisticByte_);
IdMap<Statistic,String> m908enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m908enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m908effectStatistic_.setLocalFailStatis(m908enumMapStatisticString_);
m908effectStatistic_.setEvtRate(Rate.newRate(R_1));
m908effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m908effectStatistic_.setFail(ES);
m908custListEffect_.add(m908effectStatistic_);
m908statusMoveData_.setEffects(m908custListEffect_);
m908statusMoveData_.setStoppableMoveSolo(true);
m908statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m908statusMoveData_;
}
static MoveData m510(){
StatusMoveData m909statusMoveData_ = Instances.newStatusMoveData();
m909statusMoveData_.setThievableMove(true);
m909statusMoveData_.setPp((short)25);
StringList m909stringList_=new StringList(new CollCapacity(1));
m909stringList_.add(I_NORMAL);
m909statusMoveData_.setTypes(m909stringList_);
m909stringList_=new StringList(new CollCapacity(1));
m909stringList_.add(I_NORMAL);
m909statusMoveData_.setBoostedTypes(m909stringList_);
m909statusMoveData_.setAccuracy(R_1);
CustList<Effect> m909custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeam m909effectTeam_=Instances.newEffectTeam();
m909stringList_=new StringList(new CollCapacity(9));
m909stringList_.add(I_SOMMEIL);
m909stringList_.add(I_PARALYSIE);
m909stringList_.add(I_SIMPLE_POISON);
m909stringList_.add(I_POISON_GRAVE);
m909stringList_.add(I_GEL);
m909stringList_.add(I_BRULURE);
m909stringList_.add(I_AMOUR);
m909stringList_.add(I_CONFUSION);
m909stringList_.add(I_PEUR);
m909effectTeam_.setProtectAgainstStatus(m909stringList_);
m909effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m909effectTeam_.setFail(ES);
m909custListEffect_.add(m909effectTeam_);
m909statusMoveData_.setEffects(m909custListEffect_);
m909statusMoveData_.setRankIncrementNbRound((short)10);
m909statusMoveData_.setStoppableMoveMulti(true);
m909statusMoveData_.setIgnVarAccurUserNeg(true);
m909statusMoveData_.setIgnVarEvasTargetPos(true);
m909statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m909statusMoveData_;
}
static MoveData m511(){
DamagingMoveData m910damagingMoveData_ = Instances.newDamagingMoveData();
m910damagingMoveData_.setCategory(I_PHYSIQUE);
m910damagingMoveData_.setStoppableMoveKoSingle(true);
m910damagingMoveData_.setPp((short)10);
StringList m910stringList_=new StringList(new CollCapacity(1));
m910stringList_.add(I_NORMAL);
m910damagingMoveData_.setTypes(m910stringList_);
m910stringList_=new StringList(new CollCapacity(1));
m910stringList_.add(I_NORMAL);
m910damagingMoveData_.setBoostedTypes(m910stringList_);
m910damagingMoveData_.setPriority((byte)2);
m910damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m910custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m910effectDamage_=Instances.newEffectDamage();
m910effectDamage_.setPower(R_50);
m910effectDamage_.setUserAttack(true);
m910effectDamage_.setStatisAtt(Statistic.ATTACK);
m910effectDamage_.setTargetDefense(true);
m910effectDamage_.setStatisDef(Statistic.DEFENSE);
m910effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m910effectDamage_.setFail(ES);
m910custListEffect_.add(m910effectDamage_);
m910damagingMoveData_.setEffects(m910custListEffect_);
m910damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m910damagingMoveData_;
}
static MoveData m512(){
DamagingMoveData m911damagingMoveData_ = Instances.newDamagingMoveData();
m911damagingMoveData_.setCategory(I_PHYSIQUE);
m911damagingMoveData_.setDirect(true);
m911damagingMoveData_.setStoppableMoveKoSingle(true);
m911damagingMoveData_.setPp((short)20);
StringList m911stringList_=new StringList(new CollCapacity(1));
m911stringList_.add(I_TENEBRE);
m911damagingMoveData_.setTypes(m911stringList_);
m911stringList_=new StringList(new CollCapacity(1));
m911stringList_.add(I_TENEBRE);
m911damagingMoveData_.setBoostedTypes(m911stringList_);
m911damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m911custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m911effectDamage_=Instances.newEffectDamage();
m911effectDamage_.setPower(R_20);
m911effectDamage_.setUserAttack(true);
m911effectDamage_.setStatisAtt(Statistic.ATTACK);
m911effectDamage_.setTargetDefense(true);
m911effectDamage_.setStatisDef(Statistic.DEFENSE);
m911effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m911effectDamage_.setFail(ES);
m911custListEffect_.add(m911effectDamage_);
EffectSwitchItems m911effectSwitchItems_=Instances.newEffectSwitchItems();
m911effectSwitchItems_.setMoveObject(MoveItemType.REMOVE_TARGET_OBJECT);
m911effectSwitchItems_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m911effectSwitchItems_.setFail(ES);
Ints m911ints_=new Ints(new CollCapacity(1));
m911ints_.add(0);
m911effectSwitchItems_.setRequiredSuccessfulEffects(m911ints_);
m911custListEffect_.add(m911effectSwitchItems_);
m911damagingMoveData_.setEffects(m911custListEffect_);
m911damagingMoveData_.setStoppableMoveSolo(true);
m911damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m911damagingMoveData_;
}
static MoveData m513(){
DamagingMoveData m912damagingMoveData_ = Instances.newDamagingMoveData();
m912damagingMoveData_.setCategory(I_PHYSIQUE);
m912damagingMoveData_.setDirect(true);
m912damagingMoveData_.setStoppableMoveKoSingle(true);
m912damagingMoveData_.setPp((short)25);
StringList m912stringList_=new StringList(new CollCapacity(1));
m912stringList_.add(I_COMBAT);
m912damagingMoveData_.setTypes(m912stringList_);
m912stringList_=new StringList(new CollCapacity(1));
m912stringList_.add(I_COMBAT);
m912damagingMoveData_.setBoostedTypes(m912stringList_);
m912damagingMoveData_.setAccuracy(R_4_5);
CustList<Effect> m912custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m912effectDamage_=Instances.newEffectDamage();
m912effectDamage_.setPower(R_80);
m912effectDamage_.setUserAttack(true);
m912effectDamage_.setStatisAtt(Statistic.ATTACK);
m912effectDamage_.setTargetDefense(true);
m912effectDamage_.setStatisDef(Statistic.DEFENSE);
m912effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m912effectDamage_.setFail(ES);
m912custListEffect_.add(m912effectDamage_);
EffectDamageRate m912effectDamageRate_=Instances.newEffectDamageRate();
m912effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_4));
m912effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m912effectDamageRate_.setFail(ES);
Ints m912ints_=new Ints(new CollCapacity(1));
m912ints_.add(0);
m912effectDamageRate_.setRequiredSuccessfulEffects(m912ints_);
m912custListEffect_.add(m912effectDamageRate_);
m912damagingMoveData_.setEffects(m912custListEffect_);
m912damagingMoveData_.setStoppableMoveSolo(true);
m912damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m912damagingMoveData_;
}
static MoveData m514(){
StatusMoveData m913statusMoveData_ = Instances.newStatusMoveData();
m913statusMoveData_.setPp((short)10);
StringList m913stringList_=new StringList(new CollCapacity(1));
m913stringList_.add(I_TENEBRE);
m913statusMoveData_.setTypes(m913stringList_);
m913stringList_=new StringList(new CollCapacity(1));
m913stringList_.add(I_TENEBRE);
m913statusMoveData_.setBoostedTypes(m913stringList_);
m913statusMoveData_.setPriority((byte)4);
m913statusMoveData_.setAccuracy(R_1);
CustList<Effect> m913custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchPointView m913effectSwitchPointView_=Instances.newEffectSwitchPointView();
m913effectSwitchPointView_.setPointViewChangement(PointViewChangementType.THIEF_BONUSES);
m913effectSwitchPointView_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m913effectSwitchPointView_.setFail(ES);
m913custListEffect_.add(m913effectSwitchPointView_);
m913statusMoveData_.setEffects(m913custListEffect_);
m913statusMoveData_.setStoppableMoveSolo(true);
m913statusMoveData_.setStoppableMovePrio(true);
m913statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m913statusMoveData_;
}
static MoveData m515(){
DamagingMoveData m914damagingMoveData_ = Instances.newDamagingMoveData();
m914damagingMoveData_.setCategory(I_SPECIALE);
m914damagingMoveData_.setStoppableMoveKoSingle(true);
m914damagingMoveData_.setPp((short)10);
StringList m914stringList_=new StringList(new CollCapacity(1));
m914stringList_.add(I_EAU);
m914damagingMoveData_.setTypes(m914stringList_);
m914stringList_=new StringList(new CollCapacity(1));
m914stringList_.add(I_EAU);
m914damagingMoveData_.setBoostedTypes(m914stringList_);
m914damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m914custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m914effectDamage_=Instances.newEffectDamage();
m914effectDamage_.setPower(R_65+OM+A_MIN+LP+A_ENT+LP+A_DIV+LP+V_CIBLE_PV_MAX+OC+V_CIBLE_PV_RESTANTS+RP+RP+OC+R_2+RP);
m914effectDamage_.setUserAttack(true);
m914effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m914effectDamage_.setTargetDefense(true);
m914effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m914effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m914effectDamage_.setFail(ES);
m914custListEffect_.add(m914effectDamage_);
m914damagingMoveData_.setEffects(m914custListEffect_);
m914damagingMoveData_.setStoppableMoveSolo(true);
m914damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m914damagingMoveData_;
}
static MoveData m516(){
StatusMoveData m915statusMoveData_ = Instances.newStatusMoveData();
m915statusMoveData_.setCounterableMove(true);
m915statusMoveData_.setPp((short)40);
StringList m915stringList_=new StringList(new CollCapacity(1));
m915stringList_.add(I_INSECTE);
m915statusMoveData_.setTypes(m915stringList_);
m915stringList_=new StringList(new CollCapacity(1));
m915stringList_.add(I_INSECTE);
m915statusMoveData_.setBoostedTypes(m915stringList_);
m915statusMoveData_.setAccuracy(R_19_20);
CustList<Effect> m915custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m915effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m915enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m915enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-1);
m915effectStatistic_.setStatisVarRank(m915enumMapStatisticByte_);
IdMap<Statistic,String> m915enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m915enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m915effectStatistic_.setLocalFailStatis(m915enumMapStatisticString_);
m915effectStatistic_.setEvtRate(Rate.newRate(R_1));
m915effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m915effectStatistic_.setFail(ES);
m915custListEffect_.add(m915effectStatistic_);
m915statusMoveData_.setEffects(m915custListEffect_);
m915statusMoveData_.setStoppableMoveSolo(true);
m915statusMoveData_.setStoppableMoveMulti(true);
m915statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m915statusMoveData_;
}
static MoveData m517(){
StatusMoveData m916statusMoveData_ = Instances.newStatusMoveData();
m916statusMoveData_.setCounterableMove(true);
m916statusMoveData_.setPp((short)20);
StringList m916stringList_=new StringList(new CollCapacity(1));
m916stringList_.add(I_NORMAL);
m916statusMoveData_.setTypes(m916stringList_);
m916stringList_=new StringList(new CollCapacity(1));
m916stringList_.add(I_NORMAL);
m916statusMoveData_.setBoostedTypes(m916stringList_);
m916statusMoveData_.setAccuracy(R_1);
CustList<Effect> m916custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m916effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Byte> m916enumMapStatisticByte_=new IdMap<Statistic,Byte>(new CollCapacity(1));
m916enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,(byte)-2);
m916effectStatistic_.setStatisVarRank(m916enumMapStatisticByte_);
IdMap<Statistic,String> m916enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m916enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m916effectStatistic_.setLocalFailStatis(m916enumMapStatisticString_);
m916effectStatistic_.setEvtRate(Rate.newRate(R_1));
m916effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m916effectStatistic_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_AMOUR+RB+RP+RP+GT+R_0+OO+V_EXISTE_GENRE_ASSEXUE+OO+V_GENRES_EGAUX);
m916custListEffect_.add(m916effectStatistic_);
m916statusMoveData_.setEffects(m916custListEffect_);
m916statusMoveData_.setStoppableMoveSolo(true);
m916statusMoveData_.setStoppableMoveMulti(true);
m916statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m916statusMoveData_;
}
static MoveData m518(){
DamagingMoveData m917damagingMoveData_ = Instances.newDamagingMoveData();
m917damagingMoveData_.setCategory(I_PHYSIQUE);
m917damagingMoveData_.setStoppableMoveKoSingle(true);
m917damagingMoveData_.setPp((short)10);
StringList m917stringList_=new StringList(new CollCapacity(1));
m917stringList_.add(I_SOL);
m917damagingMoveData_.setTypes(m917stringList_);
m917stringList_=new StringList(new CollCapacity(1));
m917stringList_.add(I_SOL);
m917damagingMoveData_.setBoostedTypes(m917stringList_);
m917damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m917custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m917effectDamage_=Instances.newEffectDamage();
m917effectDamage_.setPower(R_100+OM+LP+R_2+OM+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_TUNNEL+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m917effectDamage_.setUserAttack(true);
m917effectDamage_.setStatisAtt(Statistic.ATTACK);
m917effectDamage_.setTargetDefense(true);
m917effectDamage_.setStatisDef(Statistic.DEFENSE);
m917effectDamage_.setTargetChoice(TargetChoice.PSEUDO_GLOBALE);
m917effectDamage_.setFail(ES);
m917custListEffect_.add(m917effectDamage_);
m917damagingMoveData_.setEffects(m917custListEffect_);
m917damagingMoveData_.setStoppableMoveSolo(true);
m917damagingMoveData_.setStoppableMoveMulti(true);
m917stringList_=new StringList(new CollCapacity(1));
m917stringList_.add(I_TUNNEL);
m917damagingMoveData_.setAchieveDisappearedPkUsingMove(m917stringList_);
m917damagingMoveData_.setTargetChoice(TargetChoice.PSEUDO_GLOBALE);
return m917damagingMoveData_;
}
static MoveData m519(){
DamagingMoveData m918damagingMoveData_ = Instances.newDamagingMoveData();
m918damagingMoveData_.setCategory(I_PHYSIQUE);
m918damagingMoveData_.setStoppableMoveKoSingle(true);
m918damagingMoveData_.setPp((short)20);
StringList m918stringList_=new StringList(new CollCapacity(1));
m918stringList_.add(I_EAU);
m918damagingMoveData_.setTypes(m918stringList_);
m918stringList_=new StringList(new CollCapacity(1));
m918stringList_.add(I_EAU);
m918damagingMoveData_.setBoostedTypes(m918stringList_);
m918damagingMoveData_.setPriority((byte)1);
m918damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m918custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m918effectDamage_=Instances.newEffectDamage();
m918effectDamage_.setPower(R_15);
m918effectDamage_.setUserAttack(true);
m918effectDamage_.setStatisAtt(Statistic.ATTACK);
m918effectDamage_.setTargetDefense(true);
m918effectDamage_.setStatisDef(Statistic.DEFENSE);
m918effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m918effectDamage_.setFail(ES);
m918custListEffect_.add(m918effectDamage_);
m918damagingMoveData_.setEffects(m918custListEffect_);
m918damagingMoveData_.setStoppableMovePrio(true);
m918damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m918damagingMoveData_;
}
static MoveData m520(){
StatusMoveData m919statusMoveData_ = Instances.newStatusMoveData();
m919statusMoveData_.setCounterableMove(true);
m919statusMoveData_.setPp((short)15);
StringList m919stringList_=new StringList(new CollCapacity(1));
m919stringList_.add(I_PLANTE);
m919statusMoveData_.setTypes(m919stringList_);
m919stringList_=new StringList(new CollCapacity(1));
m919stringList_.add(I_PLANTE);
m919statusMoveData_.setBoostedTypes(m919stringList_);
m919statusMoveData_.setAccuracy(R_11_20);
CustList<Effect> m919custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m919effectStatus_=Instances.newEffectStatus();
MonteCarloString m919monteCarloString_=new MonteCarloString(new CollCapacity(1));
m919monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m919effectStatus_.setLawStatus(m919monteCarloString_);
StringMap<String> m919stringMapString_=new StringMap<String>(new CollCapacity(1));
m919stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m919effectStatus_.setLocalFailStatus(m919stringMapString_);
m919effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m919effectStatus_.setFail(ES);
m919custListEffect_.add(m919effectStatus_);
m919statusMoveData_.setEffects(m919custListEffect_);
m919statusMoveData_.setStoppableMoveSolo(true);
m919statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m919statusMoveData_;
}
static MoveData m521(){
DamagingMoveData m920damagingMoveData_ = Instances.newDamagingMoveData();
m920damagingMoveData_.setCategory(I_SPECIALE);
m920damagingMoveData_.setStoppableMoveKoSingle(true);
m920damagingMoveData_.setPp((short)15);
StringList m920stringList_=new StringList(new CollCapacity(1));
m920stringList_.add(I_EAU);
m920damagingMoveData_.setTypes(m920stringList_);
m920stringList_=new StringList(new CollCapacity(1));
m920stringList_.add(I_EAU);
m920damagingMoveData_.setBoostedTypes(m920stringList_);
m920damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m920custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m920effectDamage_=Instances.newEffectDamage();
m920effectDamage_.setPower(R_35);
m920effectDamage_.setUserAttack(true);
m920effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m920effectDamage_.setTargetDefense(true);
m920effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m920effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m920effectDamage_.setFail(ES);
m920custListEffect_.add(m920effectDamage_);
EffectEndRoundSingleRelation m920effectEndRoundSingleRelation_=Instances.newEffectEndRoundSingleRelation();
LongMap<Rate> m920longMapRate_=new LongMap<Rate>(new CollCapacity(5));
m920longMapRate_.addEntry(1L,Rate.newRate(R_1_16));
m920longMapRate_.addEntry(2L,Rate.newRate(R_1_16));
m920longMapRate_.addEntry(3L,Rate.newRate(R_1_16));
m920longMapRate_.addEntry(4L,Rate.newRate(R_1_16));
m920longMapRate_.addEntry(5L,Rate.newRate(R_1_16));
m920effectEndRoundSingleRelation_.setRateDamageFunctionOfNbRounds(m920longMapRate_);
MonteCarloNumber m920monteCarloNumber_=new MonteCarloNumber(new CollCapacity(4));
m920monteCarloNumber_.addQuickEvent(Rate.newRate(R_3),LgInt.newLgInt(R_3));
m920monteCarloNumber_.addQuickEvent(Rate.newRate(R_2),LgInt.newLgInt(R_3));
m920monteCarloNumber_.addQuickEvent(Rate.newRate(R_4),LgInt.newLgInt(R_1));
m920monteCarloNumber_.addQuickEvent(Rate.newRate(R_5),LgInt.newLgInt(R_1));
m920effectEndRoundSingleRelation_.setLawForEnablingEffect(m920monteCarloNumber_);
m920effectEndRoundSingleRelation_.setFailEndRound(V_CIBLE_CLONE+GT+R_0);
m920effectEndRoundSingleRelation_.setEndRoundRank(45);
m920effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m920effectEndRoundSingleRelation_.setFail(V_CIBLE_CLONE+GT+R_0);
Ints m920ints_=new Ints(new CollCapacity(1));
m920ints_.add(0);
m920effectEndRoundSingleRelation_.setRequiredSuccessfulEffects(m920ints_);
m920custListEffect_.add(m920effectEndRoundSingleRelation_);
m920damagingMoveData_.setEffects(m920custListEffect_);
m920damagingMoveData_.setStoppableMoveSolo(true);
m920damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m920damagingMoveData_;
}
static MoveData m522(){
StatusMoveData m921statusMoveData_ = Instances.newStatusMoveData();
m921statusMoveData_.setThievableMove(true);
m921statusMoveData_.setPp((short)10);
StringList m921stringList_=new StringList(new CollCapacity(1));
m921stringList_.add(I_NORMAL);
m921statusMoveData_.setTypes(m921stringList_);
m921stringList_=new StringList(new CollCapacity(1));
m921stringList_.add(I_NORMAL);
m921statusMoveData_.setBoostedTypes(m921stringList_);
m921statusMoveData_.setAccuracy(R_1);
CustList<Effect> m921custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m921effectFullHpRate_=Instances.newEffectFullHpRate();
m921effectFullHpRate_.setRestoredHp(R_1_2);
m921effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m921effectFullHpRate_.setFail(ES);
m921custListEffect_.add(m921effectFullHpRate_);
m921statusMoveData_.setEffects(m921custListEffect_);
m921statusMoveData_.setStoppableMoveMulti(true);
m921statusMoveData_.setIgnVarAccurUserNeg(true);
m921statusMoveData_.setIgnVarEvasTargetPos(true);
m921statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m921statusMoveData_;
}
static MoveData m523(){
DamagingMoveData m922damagingMoveData_ = Instances.newDamagingMoveData();
m922damagingMoveData_.setCategory(I_SPECIALE);
m922damagingMoveData_.setStoppableMoveKoSingle(true);
m922damagingMoveData_.setPp((short)20);
StringList m922stringList_=new StringList(new CollCapacity(1));
m922stringList_.add(I_NORMAL);
m922damagingMoveData_.setTypes(m922stringList_);
m922stringList_=new StringList(new CollCapacity(1));
m922stringList_.add(I_NORMAL);
m922damagingMoveData_.setBoostedTypes(m922stringList_);
m922damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m922custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m922effectDamage_=Instances.newEffectDamage();
m922effectDamage_.setConstDamage(true);
m922effectDamage_.setPower(R_20);
m922effectDamage_.setUserAttack(true);
m922effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m922effectDamage_.setTargetDefense(true);
m922effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m922effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m922effectDamage_.setFail(ES);
m922custListEffect_.add(m922effectDamage_);
m922damagingMoveData_.setEffects(m922custListEffect_);
m922damagingMoveData_.setStoppableMoveSolo(true);
m922damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m922damagingMoveData_;
}
static MoveData m524(){
StatusMoveData m923statusMoveData_ = Instances.newStatusMoveData();
m923statusMoveData_.setCounterableMove(true);
m923statusMoveData_.setPp((short)10);
StringList m923stringList_=new StringList(new CollCapacity(1));
m923stringList_.add(I_PLANTE);
m923statusMoveData_.setTypes(m923stringList_);
m923stringList_=new StringList(new CollCapacity(1));
m923stringList_.add(I_PLANTE);
m923statusMoveData_.setBoostedTypes(m923stringList_);
m923statusMoveData_.setAccuracy(R_1);
CustList<Effect> m923custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchAbilities m923effectSwitchAbilities_=Instances.newEffectSwitchAbilities();
m923effectSwitchAbilities_.setExchangeAbility(ExchangeType.GIVE_CONST);
m923effectSwitchAbilities_.setConstAbility(I_INSOMNIA);
m923effectSwitchAbilities_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m923effectSwitchAbilities_.setFail(ES);
m923custListEffect_.add(m923effectSwitchAbilities_);
m923statusMoveData_.setEffects(m923custListEffect_);
m923statusMoveData_.setStoppableMoveSolo(true);
m923statusMoveData_.setStoppableMoveMulti(true);
m923statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m923statusMoveData_;
}
}
