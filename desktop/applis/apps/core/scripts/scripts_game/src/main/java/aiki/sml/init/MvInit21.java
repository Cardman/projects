package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit21 extends CstIgame{
private MvInit21(){}
static MoveData m525(){
DamagingMoveData m926damagingMoveData_ = Instances.newDamagingMoveData();
m926damagingMoveData_.setCategory(I_SPECIALE);
m926damagingMoveData_.setStoppableMoveKoSingle(true);
m926damagingMoveData_.setPp(10);
StringList m926stringList_=new StringList(new CollCapacity(1));
m926stringList_.add(I_GLACE);
m926damagingMoveData_.setTypes(m926stringList_);
m926stringList_=new StringList(new CollCapacity(1));
m926stringList_.add(I_GLACE);
m926damagingMoveData_.setBoostedTypes(m926stringList_);
m926damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m926custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m926effectDamage_=Instances.newEffectDamage();
m926effectDamage_.setPower(R_40);
m926effectDamage_.setUserAttack(true);
m926effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m926effectDamage_.setTargetDefense(true);
m926effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m926effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m926effectDamage_.setFail(ES);
m926custListEffect_.add(m926effectDamage_);
m926damagingMoveData_.setEffects(m926custListEffect_);
m926damagingMoveData_.setStoppableMoveSolo(true);
m926damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m926damagingMoveData_;
}
static MoveData m526(){
DamagingMoveData m927damagingMoveData_ = Instances.newDamagingMoveData();
m927damagingMoveData_.setCategory(I_PHYSIQUE);
m927damagingMoveData_.setDirect(true);
m927damagingMoveData_.setStoppableMoveKoSingle(true);
m927damagingMoveData_.setPp(20);
StringList m927stringList_=new StringList(new CollCapacity(1));
m927stringList_.add(I_NORMAL);
m927damagingMoveData_.setTypes(m927stringList_);
m927stringList_=new StringList(new CollCapacity(1));
m927stringList_.add(I_NORMAL);
m927damagingMoveData_.setBoostedTypes(m927stringList_);
m927damagingMoveData_.setAccuracy(R_3_4);
CustList<Effect> m927custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m927effectDamage_=Instances.newEffectDamage();
m927effectDamage_.setPower(R_80);
m927effectDamage_.setUserAttack(true);
m927effectDamage_.setStatisAtt(Statistic.ATTACK);
m927effectDamage_.setTargetDefense(true);
m927effectDamage_.setStatisDef(Statistic.DEFENSE);
m927effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m927effectDamage_.setFail(ES);
m927custListEffect_.add(m927effectDamage_);
m927damagingMoveData_.setEffects(m927custListEffect_);
m927damagingMoveData_.setStoppableMoveSolo(true);
m927damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m927damagingMoveData_;
}
static MoveData m527(){
StatusMoveData m928statusMoveData_ = Instances.newStatusMoveData();
m928statusMoveData_.setPp(10);
StringList m928stringList_=new StringList(new CollCapacity(1));
m928stringList_.add(I_TENEBRE);
m928statusMoveData_.setTypes(m928stringList_);
m928stringList_=new StringList(new CollCapacity(1));
m928stringList_.add(I_TENEBRE);
m928statusMoveData_.setBoostedTypes(m928stringList_);
m928statusMoveData_.setAccuracy(R_1);
CustList<Effect> m928custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m928effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m928enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m928enumMapStatisticByte_.addEntry(Statistic.ATTACK,-1L);
m928enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1L);
m928effectStatistic_.setStatisVarRank(m928enumMapStatisticByte_);
IdMap<Statistic,String> m928enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m928enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m928enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m928effectStatistic_.setLocalFailStatis(m928enumMapStatisticString_);
m928effectStatistic_.setEvtRate(Rate.newRate(R_1));
m928effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m928effectStatistic_.setFail(ES);
m928custListEffect_.add(m928effectStatistic_);
m928statusMoveData_.setEffects(m928custListEffect_);
m928statusMoveData_.setStoppableMoveMulti(true);
m928statusMoveData_.setIgnVarAccurUserNeg(true);
m928statusMoveData_.setIgnVarEvasTargetPos(true);
m928statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m928statusMoveData_;
}
static MoveData m528(){
DamagingMoveData m929damagingMoveData_ = Instances.newDamagingMoveData();
m929damagingMoveData_.setCategory(I_SPECIALE);
m929damagingMoveData_.setStoppableMoveKoSingle(true);
m929damagingMoveData_.setPp(5);
StringList m929stringList_=new StringList(new CollCapacity(1));
m929stringList_.add(I_DRAGON);
m929damagingMoveData_.setTypes(m929stringList_);
m929stringList_=new StringList(new CollCapacity(1));
m929stringList_.add(I_DRAGON);
m929damagingMoveData_.setBoostedTypes(m929stringList_);
m929damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m929custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m929effectDamage_=Instances.newEffectDamage();
m929effectDamage_.setChRate(1);
m929effectDamage_.setPower(R_100);
m929effectDamage_.setUserAttack(true);
m929effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m929effectDamage_.setTargetDefense(true);
m929effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m929effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m929effectDamage_.setFail(ES);
m929custListEffect_.add(m929effectDamage_);
m929damagingMoveData_.setEffects(m929custListEffect_);
m929damagingMoveData_.setStoppableMoveSolo(true);
m929damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m929damagingMoveData_;
}
static MoveData m529(){
StatusMoveData m930statusMoveData_ = Instances.newStatusMoveData();
m930statusMoveData_.setCounterableMove(true);
m930statusMoveData_.setPp(15);
StringList m930stringList_=new StringList(new CollCapacity(1));
m930stringList_.add(I_PLANTE);
m930statusMoveData_.setTypes(m930stringList_);
m930stringList_=new StringList(new CollCapacity(1));
m930stringList_.add(I_PLANTE);
m930statusMoveData_.setBoostedTypes(m930stringList_);
m930statusMoveData_.setAccuracy(R_1);
CustList<Effect> m930custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m930effectStatus_=Instances.newEffectStatus();
MonteCarloString m930monteCarloString_=new MonteCarloString(new CollCapacity(1));
m930monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m930effectStatus_.setLawStatus(m930monteCarloString_);
StringMap<String> m930stringMapString_=new StringMap<String>(new CollCapacity(1));
m930stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m930effectStatus_.setLocalFailStatus(m930stringMapString_);
m930effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m930effectStatus_.setFail(ES);
m930custListEffect_.add(m930effectStatus_);
m930statusMoveData_.setEffects(m930custListEffect_);
m930statusMoveData_.setStoppableMoveSolo(true);
m930statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m930statusMoveData_;
}
static MoveData m530(){
StatusMoveData m931statusMoveData_ = Instances.newStatusMoveData();
m931statusMoveData_.setCounterableMove(true);
m931statusMoveData_.setPp(40);
StringList m931stringList_=new StringList(new CollCapacity(1));
m931stringList_.add(I_PLANTE);
m931statusMoveData_.setTypes(m931stringList_);
m931stringList_=new StringList(new CollCapacity(1));
m931stringList_.add(I_PLANTE);
m931statusMoveData_.setBoostedTypes(m931stringList_);
m931statusMoveData_.setAccuracy(R_1);
CustList<Effect> m931custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m931effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m931enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m931enumMapStatisticByte_.addEntry(Statistic.SPEED,-2L);
m931effectStatistic_.setStatisVarRank(m931enumMapStatisticByte_);
IdMap<Statistic,String> m931enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m931enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m931effectStatistic_.setLocalFailStatis(m931enumMapStatisticString_);
m931effectStatistic_.setEvtRate(Rate.newRate(R_1));
m931effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m931effectStatistic_.setFail(ES);
m931custListEffect_.add(m931effectStatistic_);
m931statusMoveData_.setEffects(m931custListEffect_);
m931statusMoveData_.setStoppableMoveSolo(true);
m931statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m931statusMoveData_;
}
static MoveData m531(){
DamagingMoveData m932damagingMoveData_ = Instances.newDamagingMoveData();
m932damagingMoveData_.setCategory(I_PHYSIQUE);
m932damagingMoveData_.setStoppableMoveKoSingle(true);
m932damagingMoveData_.setPp(30);
StringList m932stringList_=new StringList(new CollCapacity(1));
m932stringList_.add(I_GLACE);
m932damagingMoveData_.setTypes(m932stringList_);
m932stringList_=new StringList(new CollCapacity(1));
m932stringList_.add(I_GLACE);
m932damagingMoveData_.setBoostedTypes(m932stringList_);
m932damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m932custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m932effectDamage_=Instances.newEffectDamage();
m932effectDamage_.setPower(R_25);
m932effectDamage_.setUserAttack(true);
m932effectDamage_.setStatisAtt(Statistic.ATTACK);
m932effectDamage_.setTargetDefense(true);
m932effectDamage_.setStatisDef(Statistic.DEFENSE);
m932effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m932effectDamage_.setFail(ES);
m932custListEffect_.add(m932effectDamage_);
m932damagingMoveData_.setEffects(m932custListEffect_);
m932damagingMoveData_.setStoppableMoveSolo(true);
m932damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m932damagingMoveData_;
}
static MoveData m532(){
DamagingMoveData m933damagingMoveData_ = Instances.newDamagingMoveData();
m933damagingMoveData_.setCategory(I_PHYSIQUE);
m933damagingMoveData_.setDirect(true);
m933damagingMoveData_.setStoppableMoveKoSingle(true);
m933damagingMoveData_.setPp(10);
StringList m933stringList_=new StringList(new CollCapacity(1));
m933stringList_.add(I_NORMAL);
m933damagingMoveData_.setTypes(m933stringList_);
m933stringList_=new StringList(new CollCapacity(1));
m933stringList_.add(I_NORMAL);
m933damagingMoveData_.setBoostedTypes(m933stringList_);
m933damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m933custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m933effectDamage_=Instances.newEffectDamage();
m933effectDamage_.setPower(R_60+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+OM+A_CARACFERME+LP+V_CIBLE_CLONE+OC+R_0+OC+R_0+RP+OP+R_1+RP);
m933effectDamage_.setUserAttack(true);
m933effectDamage_.setStatisAtt(Statistic.ATTACK);
m933effectDamage_.setTargetDefense(true);
m933effectDamage_.setStatisDef(Statistic.DEFENSE);
m933effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m933effectDamage_.setFail(ES);
m933custListEffect_.add(m933effectDamage_);
EffectStatus m933effectStatus_=Instances.newEffectStatus();
m933stringList_=new StringList(new CollCapacity(1));
m933stringList_.add(I_PARALYSIE);
m933effectStatus_.setDeletedStatus(m933stringList_);
m933effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m933effectStatus_.setFail(ES);
Ints m933ints_=new Ints(new CollCapacity(1));
m933ints_.add(0);
m933effectStatus_.setRequiredSuccessfulEffects(m933ints_);
m933custListEffect_.add(m933effectStatus_);
m933damagingMoveData_.setEffects(m933custListEffect_);
m933damagingMoveData_.setStoppableMoveSolo(true);
m933damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m933damagingMoveData_;
}
static MoveData m533(){
StatusMoveData m934statusMoveData_ = Instances.newStatusMoveData();
m934statusMoveData_.setThievableMove(true);
m934statusMoveData_.setPp(10);
StringList m934stringList_=new StringList(new CollCapacity(1));
m934stringList_.add(I_NORMAL);
m934statusMoveData_.setTypes(m934stringList_);
m934stringList_=new StringList(new CollCapacity(1));
m934stringList_.add(I_NORMAL);
m934statusMoveData_.setBoostedTypes(m934stringList_);
m934statusMoveData_.setAccuracy(R_1);
CustList<Effect> m934custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m934effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m934enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m934enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1L);
m934enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1L);
m934effectStatistic_.setStatisVarRank(m934enumMapStatisticByte_);
m934effectStatistic_.setEvtRate(Rate.newRate(R_1));
m934effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m934effectStatistic_.setFail(V_LANCEUR_NB_UTILISATION+SE+I_STOCKAGE+GT+R_3);
m934custListEffect_.add(m934effectStatistic_);
m934statusMoveData_.setEffects(m934custListEffect_);
m934statusMoveData_.setStoppableMoveMulti(true);
m934statusMoveData_.setIgnVarAccurUserNeg(true);
m934statusMoveData_.setIgnVarEvasTargetPos(true);
m934statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m934statusMoveData_;
}
static MoveData m534(){
DamagingMoveData m935damagingMoveData_ = Instances.newDamagingMoveData();
m935damagingMoveData_.setCategory(I_PHYSIQUE);
m935damagingMoveData_.setDirect(true);
m935damagingMoveData_.setStoppableMoveKoSingle(true);
m935damagingMoveData_.setPp(15);
StringList m935stringList_=new StringList(new CollCapacity(1));
m935stringList_.add(I_COMBAT);
m935damagingMoveData_.setTypes(m935stringList_);
m935stringList_=new StringList(new CollCapacity(1));
m935stringList_.add(I_COMBAT);
m935damagingMoveData_.setBoostedTypes(m935stringList_);
m935damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m935custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m935effectDamage_=Instances.newEffectDamage();
m935effectDamage_.setPower(R_85+OM+LP+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_ENVOL+OS+I_REBOND+OS+I_CHUTE_LIBRE+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m935effectDamage_.setUserAttack(true);
m935effectDamage_.setStatisAtt(Statistic.ATTACK);
m935effectDamage_.setTargetDefense(true);
m935effectDamage_.setStatisDef(Statistic.DEFENSE);
m935effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m935effectDamage_.setFail(ES);
m935custListEffect_.add(m935effectDamage_);
m935damagingMoveData_.setEffects(m935custListEffect_);
m935damagingMoveData_.setStoppableMoveSolo(true);
m935stringList_=new StringList(new CollCapacity(3));
m935stringList_.add(I_ENVOL);
m935stringList_.add(I_REBOND);
m935stringList_.add(I_CHUTE_LIBRE);
m935damagingMoveData_.setAchieveDisappearedPkUsingMove(m935stringList_);
m935damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m935damagingMoveData_;
}
static MoveData m535(){
StatusMoveData m936statusMoveData_ = Instances.newStatusMoveData();
m936statusMoveData_.setCounterableMove(true);
m936statusMoveData_.setPp(35);
StringList m936stringList_=new StringList(new CollCapacity(1));
m936stringList_.add(I_ACIER);
m936statusMoveData_.setTypes(m936stringList_);
m936stringList_=new StringList(new CollCapacity(1));
m936stringList_.add(I_ACIER);
m936statusMoveData_.setBoostedTypes(m936stringList_);
m936statusMoveData_.setAccuracy(R_19_20);
CustList<Effect> m936custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m936effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m936enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m936enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-2L);
m936effectStatistic_.setStatisVarRank(m936enumMapStatisticByte_);
IdMap<Statistic,String> m936enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m936enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m936effectStatistic_.setLocalFailStatis(m936enumMapStatisticString_);
m936effectStatistic_.setEvtRate(Rate.newRate(R_1));
m936effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m936effectStatistic_.setFail(ES);
m936custListEffect_.add(m936effectStatistic_);
m936statusMoveData_.setEffects(m936custListEffect_);
m936statusMoveData_.setStoppableMoveSolo(true);
m936statusMoveData_.setStoppableMoveMulti(true);
m936statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m936statusMoveData_;
}
static MoveData m536(){
StatusMoveData m937statusMoveData_ = Instances.newStatusMoveData();
m937statusMoveData_.setCounterableMove(true);
m937statusMoveData_.setPp(10);
StringList m937stringList_=new StringList(new CollCapacity(1));
m937stringList_.add(I_POISON);
m937statusMoveData_.setTypes(m937stringList_);
m937stringList_=new StringList(new CollCapacity(1));
m937stringList_.add(I_POISON);
m937statusMoveData_.setBoostedTypes(m937stringList_);
m937statusMoveData_.setAccuracy(R_1);
CustList<Effect> m937custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchAbilities m937effectSwitchAbilities_=Instances.newEffectSwitchAbilities();
m937effectSwitchAbilities_.setExchangeAbility(ExchangeType.GIVE_CONST);
m937effectSwitchAbilities_.setConstAbility(ES);
m937effectSwitchAbilities_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m937effectSwitchAbilities_.setFail(ES);
m937custListEffect_.add(m937effectSwitchAbilities_);
m937statusMoveData_.setEffects(m937custListEffect_);
m937statusMoveData_.setStoppableMoveSolo(true);
m937statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m937statusMoveData_;
}
static MoveData m537(){
DamagingMoveData m938damagingMoveData_ = Instances.newDamagingMoveData();
m938damagingMoveData_.setCategory(I_SPECIALE);
m938damagingMoveData_.setStoppableMoveKoSingle(true);
m938damagingMoveData_.setPp(5);
StringList m938stringList_=new StringList(new CollCapacity(1));
m938stringList_.add(I_FEU);
m938damagingMoveData_.setTypes(m938stringList_);
m938stringList_=new StringList(new CollCapacity(1));
m938stringList_.add(I_FEU);
m938damagingMoveData_.setBoostedTypes(m938stringList_);
m938damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m938custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m938effectDamage_=Instances.newEffectDamage();
m938effectDamage_.setPower(R_140);
m938effectDamage_.setUserAttack(true);
m938effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m938effectDamage_.setTargetDefense(true);
m938effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m938effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m938effectDamage_.setFail(ES);
m938custListEffect_.add(m938effectDamage_);
EffectStatistic m938effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m938enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m938enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-2L);
m938effectStatistic_.setStatisVarRank(m938enumMapStatisticByte_);
IdMap<Statistic,String> m938enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m938enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_LANCEUR_CLONE+GT+R_0);
m938effectStatistic_.setLocalFailStatis(m938enumMapStatisticString_);
m938effectStatistic_.setEvtRate(Rate.newRate(R_1));
m938effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m938effectStatistic_.setFail(ES);
Ints m938ints_=new Ints(new CollCapacity(1));
m938ints_.add(0);
m938effectStatistic_.setRequiredSuccessfulEffects(m938ints_);
m938custListEffect_.add(m938effectStatistic_);
m938damagingMoveData_.setEffects(m938custListEffect_);
m938damagingMoveData_.setStoppableMoveSolo(true);
m938damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m938damagingMoveData_;
}
static MoveData m538(){
DamagingMoveData m939damagingMoveData_ = Instances.newDamagingMoveData();
m939damagingMoveData_.setCategory(I_SPECIALE);
m939damagingMoveData_.setStoppableMoveKoSingle(true);
m939damagingMoveData_.setPp(15);
StringList m939stringList_=new StringList(new CollCapacity(1));
m939stringList_.add(I_EAU);
m939damagingMoveData_.setTypes(m939stringList_);
m939stringList_=new StringList(new CollCapacity(1));
m939stringList_.add(I_EAU);
m939damagingMoveData_.setBoostedTypes(m939stringList_);
m939damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m939custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m939effectDamage_=Instances.newEffectDamage();
m939effectDamage_.setPower(R_95+OM+LP+R_2+OM+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_PLONGEE+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m939effectDamage_.setUserAttack(true);
m939effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m939effectDamage_.setTargetDefense(true);
m939effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m939effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m939effectDamage_.setFail(ES);
m939custListEffect_.add(m939effectDamage_);
m939damagingMoveData_.setEffects(m939custListEffect_);
m939damagingMoveData_.setStoppableMoveSolo(true);
m939damagingMoveData_.setStoppableMoveMulti(true);
m939stringList_=new StringList(new CollCapacity(1));
m939stringList_.add(I_PLONGEE);
m939damagingMoveData_.setAchieveDisappearedPkUsingMove(m939stringList_);
m939damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m939damagingMoveData_;
}
static MoveData m539(){
DamagingMoveData m940damagingMoveData_ = Instances.newDamagingMoveData();
m940damagingMoveData_.setCategory(I_PHYSIQUE);
m940damagingMoveData_.setDirect(true);
m940damagingMoveData_.setStoppableMoveKoSingle(true);
m940damagingMoveData_.setPp(5);
StringList m940stringList_=new StringList(new CollCapacity(1));
m940stringList_.add(I_COMBAT);
m940damagingMoveData_.setTypes(m940stringList_);
m940stringList_=new StringList(new CollCapacity(1));
m940stringList_.add(I_COMBAT);
m940damagingMoveData_.setBoostedTypes(m940stringList_);
m940damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m940custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m940effectDamage_=Instances.newEffectDamage();
m940effectDamage_.setPower(R_120);
m940effectDamage_.setUserAttack(true);
m940effectDamage_.setStatisAtt(Statistic.ATTACK);
m940effectDamage_.setTargetDefense(true);
m940effectDamage_.setStatisDef(Statistic.DEFENSE);
m940effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m940effectDamage_.setFail(ES);
m940custListEffect_.add(m940effectDamage_);
EffectStatistic m940effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m940enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m940enumMapStatisticByte_.addEntry(Statistic.ATTACK,-1L);
m940enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m940effectStatistic_.setStatisVarRank(m940enumMapStatisticByte_);
IdMap<Statistic,String> m940enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m940enumMapStatisticString_.addEntry(Statistic.ATTACK,V_LANCEUR_CLONE+GT+R_0);
m940enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_LANCEUR_CLONE+GT+R_0);
m940effectStatistic_.setLocalFailStatis(m940enumMapStatisticString_);
m940effectStatistic_.setEvtRate(Rate.newRate(R_1));
m940effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m940effectStatistic_.setFail(ES);
Ints m940ints_=new Ints(new CollCapacity(1));
m940ints_.add(0);
m940effectStatistic_.setRequiredSuccessfulEffects(m940ints_);
m940custListEffect_.add(m940effectStatistic_);
m940damagingMoveData_.setEffects(m940custListEffect_);
m940damagingMoveData_.setStoppableMoveSolo(true);
m940damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m940damagingMoveData_;
}
static MoveData m540(){
DamagingMoveData m941damagingMoveData_ = Instances.newDamagingMoveData();
m941damagingMoveData_.setCategory(I_SPECIALE);
m941damagingMoveData_.setStoppableMoveKoSingle(true);
m941damagingMoveData_.setPp(20);
StringList m941stringList_=new StringList(new CollCapacity(1));
m941stringList_.add(I_INSECTE);
m941damagingMoveData_.setTypes(m941stringList_);
m941stringList_=new StringList(new CollCapacity(1));
m941stringList_.add(I_INSECTE);
m941damagingMoveData_.setBoostedTypes(m941stringList_);
m941damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m941custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m941effectDamage_=Instances.newEffectDamage();
m941effectDamage_.setPower(R_30);
m941effectDamage_.setUserAttack(true);
m941effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m941effectDamage_.setTargetDefense(true);
m941effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m941effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m941effectDamage_.setFail(ES);
m941custListEffect_.add(m941effectDamage_);
EffectStatistic m941effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m941enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m941enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1L);
m941effectStatistic_.setStatisVarRank(m941enumMapStatisticByte_);
IdMap<Statistic,String> m941enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m941enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m941effectStatistic_.setLocalFailStatis(m941enumMapStatisticString_);
m941effectStatistic_.setEvtRate(Rate.newRate(R_1));
m941effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m941effectStatistic_.setFail(ES);
Ints m941ints_=new Ints(new CollCapacity(1));
m941ints_.add(0);
m941effectStatistic_.setRequiredSuccessfulEffects(m941ints_);
m941custListEffect_.add(m941effectStatistic_);
m941damagingMoveData_.setEffects(m941custListEffect_);
m941damagingMoveData_.setStoppableMoveSolo(true);
m941damagingMoveData_.setStoppableMoveMulti(true);
m941damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m941damagingMoveData_;
}
static MoveData m541(){
DamagingMoveData m942damagingMoveData_ = Instances.newDamagingMoveData();
m942damagingMoveData_.setCategory(I_SPECIALE);
m942damagingMoveData_.setStoppableMoveKoSingle(true);
m942damagingMoveData_.setPp(15);
StringList m942stringList_=new StringList(new CollCapacity(1));
m942stringList_.add(I_PSY);
m942damagingMoveData_.setTypes(m942stringList_);
m942stringList_=new StringList(new CollCapacity(1));
m942stringList_.add(I_PSY);
m942damagingMoveData_.setBoostedTypes(m942stringList_);
m942damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m942custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m942effectDamage_=Instances.newEffectDamage();
m942effectDamage_.setPower(R_70);
m942effectDamage_.setUserAttack(true);
m942effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m942effectDamage_.setTargetDefense(true);
m942effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m942effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m942effectDamage_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+V_LANCEUR_TYPES+RB+RP+RP+OE+R_0);
m942custListEffect_.add(m942effectDamage_);
m942damagingMoveData_.setEffects(m942custListEffect_);
m942damagingMoveData_.setStoppableMoveSolo(true);
m942damagingMoveData_.setStoppableMoveMulti(true);
m942damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m942damagingMoveData_;
}
static MoveData m542(){
StatusMoveData m943statusMoveData_ = Instances.newStatusMoveData();
m943statusMoveData_.setThievableMove(true);
m943statusMoveData_.setPp(5);
StringList m943stringList_=new StringList(new CollCapacity(1));
m943stringList_.add(I_PLANTE);
m943statusMoveData_.setTypes(m943stringList_);
m943stringList_=new StringList(new CollCapacity(1));
m943stringList_.add(I_PLANTE);
m943statusMoveData_.setBoostedTypes(m943stringList_);
m943statusMoveData_.setAccuracy(R_1);
CustList<Effect> m943custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectFullHpRate m943effectFullHpRate_=Instances.newEffectFullHpRate();
m943effectFullHpRate_.setRestoredHp(R_1_2+OM+A_CARACFERME+LP+A_CARDINAL+LP+LB+V_CLIMATS+RB+RP+OC+R_0+OC+R_0+RP+OP+A_CARACDROITEFERME+LP+A_CARDINAL+LP+LB+V_CLIMATS+RB+RP+OC+R_1+RP+OM+LP+R_2_3+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ZENITH+RB+RP+RP+OP+R_1_5+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_ORAGE+RB+RP+RP+OP+R_1_4+OM+A_CARDINAL+LP+A_INTER+LP+LB+V_CLIMATS+RB+OC+LB+I_GRELE+OS+I_DANSE_PLUIE+OS+I_TEMPETESABLE+RB+RP+RP+RP);
m943effectFullHpRate_.setTargetChoice(TargetChoice.LANCEUR);
m943effectFullHpRate_.setFail(ES);
m943custListEffect_.add(m943effectFullHpRate_);
m943statusMoveData_.setEffects(m943custListEffect_);
m943statusMoveData_.setStoppableMoveMulti(true);
m943statusMoveData_.setIgnVarAccurUserNeg(true);
m943statusMoveData_.setIgnVarEvasTargetPos(true);
m943statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m943statusMoveData_;
}
static MoveData m543(){
DamagingMoveData m944damagingMoveData_ = Instances.newDamagingMoveData();
m944damagingMoveData_.setCategory(I_PHYSIQUE);
m944damagingMoveData_.setDirect(true);
m944damagingMoveData_.setStoppableMoveKoSingle(true);
m944damagingMoveData_.setPp(10);
StringList m944stringList_=new StringList(new CollCapacity(1));
m944stringList_.add(I_FEU);
m944damagingMoveData_.setTypes(m944stringList_);
m944stringList_=new StringList(new CollCapacity(1));
m944stringList_.add(I_FEU);
m944damagingMoveData_.setBoostedTypes(m944stringList_);
m944damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m944custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m944effectDamage_=Instances.newEffectDamage();
m944effectDamage_.setPower(LP+A_MIN+LP+A_MAX+LP+A_ENT+LP+A_DIV+LP+V_LANCEUR_MASSE+OC+V_CIBLE_MASSE+RP+RP+OC+R_1+RP+OC+R_5+RP+OP+R_1+RP+OM+R_20);
m944effectDamage_.setUserAttack(true);
m944effectDamage_.setStatisAtt(Statistic.ATTACK);
m944effectDamage_.setTargetDefense(true);
m944effectDamage_.setStatisDef(Statistic.DEFENSE);
m944effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m944effectDamage_.setFail(ES);
m944custListEffect_.add(m944effectDamage_);
m944damagingMoveData_.setEffects(m944custListEffect_);
m944damagingMoveData_.setStoppableMoveSolo(true);
m944damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m944damagingMoveData_;
}
static MoveData m544(){
DamagingMoveData m945damagingMoveData_ = Instances.newDamagingMoveData();
m945damagingMoveData_.setCategory(I_PHYSIQUE);
m945damagingMoveData_.setDirect(true);
m945damagingMoveData_.setStoppableMoveKoSingle(true);
m945damagingMoveData_.setPp(10);
StringList m945stringList_=new StringList(new CollCapacity(1));
m945stringList_.add(I_ACIER);
m945damagingMoveData_.setTypes(m945stringList_);
m945stringList_=new StringList(new CollCapacity(1));
m945stringList_.add(I_ACIER);
m945damagingMoveData_.setBoostedTypes(m945stringList_);
m945damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m945custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m945effectDamage_=Instances.newEffectDamage();
m945effectDamage_.setPower(LP+A_MIN+LP+A_MAX+LP+A_ENT+LP+A_DIV+LP+V_LANCEUR_MASSE+OC+V_CIBLE_MASSE+RP+RP+OC+R_1+RP+OC+R_5+RP+OP+R_1+RP+OM+R_20);
m945effectDamage_.setUserAttack(true);
m945effectDamage_.setStatisAtt(Statistic.ATTACK);
m945effectDamage_.setTargetDefense(true);
m945effectDamage_.setStatisDef(Statistic.DEFENSE);
m945effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m945effectDamage_.setFail(ES);
m945custListEffect_.add(m945effectDamage_);
m945damagingMoveData_.setEffects(m945custListEffect_);
m945damagingMoveData_.setStoppableMoveSolo(true);
m945damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m945damagingMoveData_;
}
static MoveData m545(){
DamagingMoveData m946damagingMoveData_ = Instances.newDamagingMoveData();
m946damagingMoveData_.setCategory(I_PHYSIQUE);
m946damagingMoveData_.setDirect(true);
m946damagingMoveData_.setStoppableMoveKoSingle(true);
m946damagingMoveData_.setPp(20);
StringList m946stringList_=new StringList(new CollCapacity(1));
m946stringList_.add(I_INSECTE);
m946damagingMoveData_.setTypes(m946stringList_);
m946stringList_=new StringList(new CollCapacity(1));
m946stringList_.add(I_INSECTE);
m946damagingMoveData_.setBoostedTypes(m946stringList_);
m946damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m946custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m946effectDamage_=Instances.newEffectDamage();
m946effectDamage_.setPower(A_PUIS+LP+R_2+OC+A_MIN+LP+V_LANCEUR_NB_UTILISATION+SE+I_TAILLADE+OC+R_3+RP+RP+OM+R_20);
m946effectDamage_.setUserAttack(true);
m946effectDamage_.setStatisAtt(Statistic.ATTACK);
m946effectDamage_.setTargetDefense(true);
m946effectDamage_.setStatisDef(Statistic.DEFENSE);
m946effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m946effectDamage_.setFail(ES);
m946custListEffect_.add(m946effectDamage_);
m946damagingMoveData_.setEffects(m946custListEffect_);
m946damagingMoveData_.setStoppableMoveSolo(true);
m946damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m946damagingMoveData_;
}
static MoveData m546(){
StatusMoveData m947statusMoveData_ = Instances.newStatusMoveData();
m947statusMoveData_.setPp(10);
StringList m947stringList_=new StringList(new CollCapacity(1));
m947stringList_.add(I_COMBAT);
m947statusMoveData_.setTypes(m947stringList_);
m947stringList_=new StringList(new CollCapacity(1));
m947stringList_.add(I_COMBAT);
m947statusMoveData_.setBoostedTypes(m947stringList_);
m947statusMoveData_.setAccuracy(R_1);
CustList<Effect> m947custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectProtection m947effectProtection_=Instances.newEffectProtection();
m947effectProtection_.setProtTeamAgainstDamageMoves(true);
m947effectProtection_.setTargetChoice(TargetChoice.LANCEUR);
m947effectProtection_.setFail(ES);
m947custListEffect_.add(m947effectProtection_);
m947statusMoveData_.setEffects(m947custListEffect_);
m947statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m947statusMoveData_;
}
static MoveData m547(){
DamagingMoveData m948damagingMoveData_ = Instances.newDamagingMoveData();
m948damagingMoveData_.setCategory(I_SPECIALE);
m948damagingMoveData_.setStoppableMoveKoSingle(true);
m948damagingMoveData_.setPp(5);
StringList m948stringList_=new StringList(new CollCapacity(1));
m948stringList_.add(I_NORMAL);
m948damagingMoveData_.setTypes(m948stringList_);
m948stringList_=new StringList(new CollCapacity(1));
m948stringList_.add(I_NORMAL);
m948damagingMoveData_.setBoostedTypes(m948stringList_);
m948damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m948custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m948effectDamage_=Instances.newEffectDamage();
m948effectDamage_.setPower(R_85);
m948effectDamage_.setUserAttack(true);
m948effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m948effectDamage_.setTargetDefense(true);
m948effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m948effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m948effectDamage_.setFail(ES);
m948custListEffect_.add(m948effectDamage_);
m948damagingMoveData_.setEffects(m948custListEffect_);
m948damagingMoveData_.setStoppableMoveSolo(true);
m948damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m948damagingMoveData_;
}
static MoveData m548(){
StatusMoveData m949statusMoveData_ = Instances.newStatusMoveData();
m949statusMoveData_.setCounterableMove(true);
m949statusMoveData_.setPp(15);
StringList m949stringList_=new StringList(new CollCapacity(1));
m949stringList_.add(I_PSY);
m949statusMoveData_.setTypes(m949stringList_);
m949stringList_=new StringList(new CollCapacity(1));
m949stringList_.add(I_PSY);
m949statusMoveData_.setBoostedTypes(m949stringList_);
m949statusMoveData_.setAccuracy(R_4_5);
CustList<Effect> m949custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m949effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m949enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m949enumMapStatisticByte_.addEntry(Statistic.ACCURACY,-1L);
m949effectStatistic_.setStatisVarRank(m949enumMapStatisticByte_);
IdMap<Statistic,String> m949enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m949enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m949effectStatistic_.setLocalFailStatis(m949enumMapStatisticString_);
m949effectStatistic_.setEvtRate(Rate.newRate(R_1));
m949effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m949effectStatistic_.setFail(ES);
m949custListEffect_.add(m949effectStatistic_);
m949statusMoveData_.setEffects(m949custListEffect_);
m949statusMoveData_.setStoppableMoveSolo(true);
m949statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m949statusMoveData_;
}
static MoveData m549(){
DamagingMoveData m950damagingMoveData_ = Instances.newDamagingMoveData();
m950damagingMoveData_.setCategory(I_SPECIALE);
m950damagingMoveData_.setDirect(true);
m950damagingMoveData_.setStoppableMoveKoSingle(true);
m950damagingMoveData_.setPp(20);
StringList m950stringList_=new StringList(new CollCapacity(1));
m950stringList_.add(I_PSY);
m950damagingMoveData_.setTypes(m950stringList_);
m950stringList_=new StringList(new CollCapacity(1));
m950stringList_.add(I_PSY);
m950damagingMoveData_.setBoostedTypes(m950stringList_);
m950damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m950custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m950effectDamage_=Instances.newEffectDamage();
m950effectDamage_.setPower(R_70);
m950effectDamage_.setUserAttack(true);
m950effectDamage_.setStatisAtt(Statistic.ATTACK);
m950effectDamage_.setTargetDefense(true);
m950effectDamage_.setStatisDef(Statistic.DEFENSE);
m950effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m950effectDamage_.setFail(ES);
m950custListEffect_.add(m950effectDamage_);
m950damagingMoveData_.setEffects(m950custListEffect_);
m950damagingMoveData_.setStoppableMoveMulti(true);
m950damagingMoveData_.setIgnVarAccurUserNeg(true);
m950damagingMoveData_.setIgnVarEvasTargetPos(true);
m950damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m950damagingMoveData_;
}
}
