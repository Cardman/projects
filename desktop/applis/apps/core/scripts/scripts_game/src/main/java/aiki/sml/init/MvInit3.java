package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit3 extends CstIgame{
private MvInit3(){}
static MoveData m75(){
DamagingMoveData m1034damagingMoveData_ = Instances.newDamagingMoveData();
m1034damagingMoveData_.setCategory(I_SPECIALE);
m1034damagingMoveData_.setStoppableMoveKoSingle(true);
m1034damagingMoveData_.setPp((short)10);
StringList m1034stringList_=new StringList(new CollCapacity(1));
m1034stringList_.add(I_INSECTE);
m1034damagingMoveData_.setTypes(m1034stringList_);
m1034stringList_=new StringList(new CollCapacity(1));
m1034stringList_.add(I_INSECTE);
m1034damagingMoveData_.setBoostedTypes(m1034stringList_);
m1034damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1034custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1034effectDamage_=Instances.newEffectDamage();
m1034effectDamage_.setPower(R_90);
m1034effectDamage_.setUserAttack(true);
m1034effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1034effectDamage_.setTargetDefense(true);
m1034effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1034effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1034effectDamage_.setFail(ES);
m1034custListEffect_.add(m1034effectDamage_);
EffectStatistic m1034effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1034enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1034enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)-1);
m1034effectStatistic_.setStatisVarRank(m1034enumMapStatisticByte_);
EnumMap<Statistic,String> m1034enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m1034enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1034effectStatistic_.setLocalFailStatis(m1034enumMapStatisticString_);
m1034effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m1034effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1034effectStatistic_.setFail(ES);
Ints m1034ints_=new Ints(new CollCapacity(1));
m1034ints_.add(0);
m1034effectStatistic_.setRequiredSuccessfulEffects(m1034ints_);
m1034custListEffect_.add(m1034effectStatistic_);
m1034damagingMoveData_.setEffects(m1034custListEffect_);
m1034damagingMoveData_.setStoppableMoveSolo(true);
m1034damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1034damagingMoveData_;
}
static MoveData m76(){
DamagingMoveData m1035damagingMoveData_ = Instances.newDamagingMoveData();
m1035damagingMoveData_.setCategory(I_PHYSIQUE);
m1035damagingMoveData_.setDirect(true);
m1035damagingMoveData_.setStoppableMoveKoSingle(true);
m1035damagingMoveData_.setPp((short)15);
StringList m1035stringList_=new StringList(new CollCapacity(1));
m1035stringList_.add(I_FEU);
m1035damagingMoveData_.setTypes(m1035stringList_);
m1035stringList_=new StringList(new CollCapacity(1));
m1035stringList_.add(I_FEU);
m1035damagingMoveData_.setBoostedTypes(m1035stringList_);
m1035damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1035custListEffect_ = new CustList<Effect>(new CollCapacity(3));
EffectDamage m1035effectDamage_=Instances.newEffectDamage();
m1035effectDamage_.setPower(R_120);
m1035effectDamage_.setUserAttack(true);
m1035effectDamage_.setStatisAtt(Statistic.ATTACK);
m1035effectDamage_.setTargetDefense(true);
m1035effectDamage_.setStatisDef(Statistic.DEFENSE);
m1035effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1035effectDamage_.setFail(ES);
m1035custListEffect_.add(m1035effectDamage_);
EffectStatus m1035effectStatus_=Instances.newEffectStatus();
MonteCarloString m1035monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1035monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1035monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m1035effectStatus_.setLawStatus(m1035monteCarloString_);
StringMap<String> m1035stringMapString_=new StringMap<String>(new CollCapacity(1));
m1035stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m1035effectStatus_.setLocalFailStatus(m1035stringMapString_);
m1035effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1035effectStatus_.setFail(ES);
Ints m1035ints_=new Ints(new CollCapacity(1));
m1035ints_.add(0);
m1035effectStatus_.setRequiredSuccessfulEffects(m1035ints_);
m1035custListEffect_.add(m1035effectStatus_);
EffectDamageRate m1035effectDamageRate_=Instances.newEffectDamageRate();
m1035effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_3));
m1035effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m1035effectDamageRate_.setFail(ES);
m1035ints_=new Ints(new CollCapacity(1));
m1035ints_.add(0);
m1035effectDamageRate_.setRequiredSuccessfulEffects(m1035ints_);
m1035custListEffect_.add(m1035effectDamageRate_);
m1035damagingMoveData_.setEffects(m1035custListEffect_);
m1035damagingMoveData_.setStoppableMoveSolo(true);
m1035damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1035stringList_=new StringList(new CollCapacity(1));
m1035stringList_.add(I_GEL);
m1035damagingMoveData_.setDeletedStatus(m1035stringList_);
return m1035damagingMoveData_;
}
static MoveData m77(){
DamagingMoveData m1036damagingMoveData_ = Instances.newDamagingMoveData();
m1036damagingMoveData_.setCategory(I_SPECIALE);
m1036damagingMoveData_.setStoppableMoveKoSingle(true);
m1036damagingMoveData_.setPp((short)10);
StringList m1036stringList_=new StringList(new CollCapacity(1));
m1036stringList_.add(I_NORMAL);
m1036damagingMoveData_.setTypes(m1036stringList_);
m1036stringList_=new StringList(new CollCapacity(1));
m1036stringList_.add(I_NORMAL);
m1036damagingMoveData_.setBoostedTypes(m1036stringList_);
m1036damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1036custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1036effectDamage_=Instances.newEffectDamage();
m1036effectDamage_.setPower(R_90);
m1036effectDamage_.setUserAttack(true);
m1036effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1036effectDamage_.setTargetDefense(true);
m1036effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1036effectDamage_.setTargetChoice(TargetChoice.TOUS_ADV);
m1036effectDamage_.setFail(ES);
m1036custListEffect_.add(m1036effectDamage_);
EffectGlobal m1036effectGlobal_=Instances.newEffectGlobal();
m1036effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m1036stringList_=new StringList(new CollCapacity(2));
m1036stringList_.add(I_SOMMEIL);
m1036stringList_.add(I_SOMMEIL_REPOS);
m1036effectGlobal_.setPreventStatus(m1036stringList_);
m1036effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m1036effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m1036effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m1036effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m1036effectGlobal_.setInvokedMoveTerrain(ES);
m1036effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1036effectGlobal_.setFail(ES);
Ints m1036ints_=new Ints(new CollCapacity(1));
m1036ints_.add(0);
m1036effectGlobal_.setRequiredSuccessfulEffects(m1036ints_);
m1036custListEffect_.add(m1036effectGlobal_);
m1036damagingMoveData_.setEffects(m1036custListEffect_);
m1036damagingMoveData_.setRankIncrementNbRound((short)16);
m1036damagingMoveData_.setStoppableMoveSolo(true);
m1036damagingMoveData_.setStoppableMoveMulti(true);
m1036damagingMoveData_.setTargetChoice(TargetChoice.TOUS_ADV);
return m1036damagingMoveData_;
}
static MoveData m78(){
StatusMoveData m1037statusMoveData_ = Instances.newStatusMoveData();
m1037statusMoveData_.setCounterableMove(true);
m1037statusMoveData_.setPp((short)20);
StringList m1037stringList_=new StringList(new CollCapacity(1));
m1037stringList_.add(I_NORMAL);
m1037statusMoveData_.setTypes(m1037stringList_);
m1037stringList_=new StringList(new CollCapacity(1));
m1037stringList_.add(I_NORMAL);
m1037statusMoveData_.setBoostedTypes(m1037stringList_);
m1037statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1037custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1037effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1037enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1037enumMapStatisticByte_.addEntry(Statistic.ACCURACY,(byte)-1);
m1037effectStatistic_.setStatisVarRank(m1037enumMapStatisticByte_);
EnumMap<Statistic,String> m1037enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m1037enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m1037effectStatistic_.setLocalFailStatis(m1037enumMapStatisticString_);
m1037effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1037effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1037effectStatistic_.setFail(ES);
m1037custListEffect_.add(m1037effectStatistic_);
m1037statusMoveData_.setEffects(m1037custListEffect_);
m1037statusMoveData_.setStoppableMoveSolo(true);
m1037statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1037statusMoveData_;
}
static MoveData m79(){
StatusMoveData m1038statusMoveData_ = Instances.newStatusMoveData();
m1038statusMoveData_.setThievableMove(true);
m1038statusMoveData_.setPp((short)30);
StringList m1038stringList_=new StringList(new CollCapacity(1));
m1038stringList_.add(I_GLACE);
m1038statusMoveData_.setTypes(m1038stringList_);
m1038stringList_=new StringList(new CollCapacity(1));
m1038stringList_.add(I_GLACE);
m1038statusMoveData_.setBoostedTypes(m1038stringList_);
m1038statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1038custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectTeam m1038effectTeam_=Instances.newEffectTeam();
EnumList<Statistic> m1038enumListStatistic_=new EnumList<Statistic>(new CollCapacity(8));
m1038enumListStatistic_.add(Statistic.ATTACK);
m1038enumListStatistic_.add(Statistic.DEFENSE);
m1038enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m1038enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m1038enumListStatistic_.add(Statistic.SPEED);
m1038enumListStatistic_.add(Statistic.ACCURACY);
m1038enumListStatistic_.add(Statistic.EVASINESS);
m1038enumListStatistic_.add(Statistic.CRITICAL_HIT);
m1038effectTeam_.setProtectAgainstLowStat(m1038enumListStatistic_);
m1038effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m1038effectTeam_.setFail(ES);
m1038custListEffect_.add(m1038effectTeam_);
m1038statusMoveData_.setEffects(m1038custListEffect_);
m1038statusMoveData_.setRankIncrementNbRound((short)10);
m1038statusMoveData_.setStoppableMoveMulti(true);
m1038statusMoveData_.setIgnVarAccurUserNeg(true);
m1038statusMoveData_.setIgnVarEvasTargetPos(true);
m1038statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1038statusMoveData_;
}
static MoveData m80(){
StatusMoveData m1039statusMoveData_ = Instances.newStatusMoveData();
m1039statusMoveData_.setPp((short)20);
StringList m1039stringList_=new StringList(new CollCapacity(1));
m1039stringList_.add(I_FEE);
m1039statusMoveData_.setTypes(m1039stringList_);
m1039stringList_=new StringList(new CollCapacity(1));
m1039stringList_.add(I_FEE);
m1039statusMoveData_.setBoostedTypes(m1039stringList_);
m1039statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1039custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1039effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1039enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1039enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,(byte)1);
m1039effectStatistic_.setStatisVarRank(m1039enumMapStatisticByte_);
m1039effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1039effectStatistic_.setTargetChoice(TargetChoice.ALLIE);
m1039effectStatistic_.setFail(V_PAS_PARTENAIRE_TERRAIN);
m1039custListEffect_.add(m1039effectStatistic_);
m1039statusMoveData_.setEffects(m1039custListEffect_);
m1039statusMoveData_.setIgnVarAccurUserNeg(true);
m1039statusMoveData_.setIgnVarEvasTargetPos(true);
m1039statusMoveData_.setTargetChoice(TargetChoice.ALLIE);
return m1039statusMoveData_;
}
static MoveData m81(){
StatusMoveData m1040statusMoveData_ = Instances.newStatusMoveData();
m1040statusMoveData_.setPp((short)30);
StringList m1040stringList_=new StringList(new CollCapacity(1));
m1040stringList_.add(I_GLACE);
m1040statusMoveData_.setTypes(m1040stringList_);
m1040stringList_=new StringList(new CollCapacity(1));
m1040stringList_.add(I_GLACE);
m1040statusMoveData_.setBoostedTypes(m1040stringList_);
m1040statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1040custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1040effectStatistic_=Instances.newEffectStatistic();
m1040effectStatistic_.setEvtRate(Rate.newRate(R_1));
EnumList<Statistic> m1040enumListStatistic_=new EnumList<Statistic>(new CollCapacity(7));
m1040enumListStatistic_.add(Statistic.ATTACK);
m1040enumListStatistic_.add(Statistic.DEFENSE);
m1040enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m1040enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m1040enumListStatistic_.add(Statistic.SPEED);
m1040enumListStatistic_.add(Statistic.ACCURACY);
m1040enumListStatistic_.add(Statistic.EVASINESS);
m1040effectStatistic_.setCancelChgtStat(m1040enumListStatistic_);
m1040effectStatistic_.setTargetChoice(TargetChoice.GLOBALE);
m1040effectStatistic_.setFail(ES);
m1040custListEffect_.add(m1040effectStatistic_);
m1040statusMoveData_.setEffects(m1040custListEffect_);
m1040statusMoveData_.setStoppableMoveSolo(true);
m1040statusMoveData_.setStoppableMoveMulti(true);
m1040statusMoveData_.setIgnVarAccurUserNeg(true);
m1040statusMoveData_.setIgnVarEvasTargetPos(true);
m1040statusMoveData_.setTargetChoice(TargetChoice.GLOBALE);
return m1040statusMoveData_;
}
static MoveData m82(){
DamagingMoveData m1041damagingMoveData_ = Instances.newDamagingMoveData();
m1041damagingMoveData_.setCategory(I_PHYSIQUE);
m1041damagingMoveData_.setDirect(true);
m1041damagingMoveData_.setStoppableMoveKoSingle(true);
m1041damagingMoveData_.setPp((short)20);
StringList m1041stringList_=new StringList(new CollCapacity(1));
m1041stringList_.add(I_INSECTE);
m1041damagingMoveData_.setTypes(m1041stringList_);
m1041stringList_=new StringList(new CollCapacity(1));
m1041stringList_.add(I_INSECTE);
m1041damagingMoveData_.setBoostedTypes(m1041stringList_);
m1041damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1041custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1041effectDamage_=Instances.newEffectDamage();
m1041effectDamage_.setPower(R_65+OM+LP+A_MIN+LP+R_1+OC+V_CIBLE_NB_UTILISATION+SE+I_LILLIPUT+RP+OP+R_1+RP);
m1041effectDamage_.setUserAttack(true);
m1041effectDamage_.setStatisAtt(Statistic.ATTACK);
m1041effectDamage_.setTargetDefense(true);
m1041effectDamage_.setStatisDef(Statistic.DEFENSE);
m1041effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1041effectDamage_.setFail(ES);
m1041custListEffect_.add(m1041effectDamage_);
EffectStatus m1041effectStatus_=Instances.newEffectStatus();
MonteCarloString m1041monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1041monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1041monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m1041effectStatus_.setLawStatus(m1041monteCarloString_);
StringMap<String> m1041stringMapString_=new StringMap<String>(new CollCapacity(1));
m1041stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1041effectStatus_.setLocalFailStatus(m1041stringMapString_);
m1041effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1041effectStatus_.setFail(ES);
Ints m1041ints_=new Ints(new CollCapacity(1));
m1041ints_.add(0);
m1041effectStatus_.setRequiredSuccessfulEffects(m1041ints_);
m1041custListEffect_.add(m1041effectStatus_);
m1041damagingMoveData_.setEffects(m1041custListEffect_);
m1041damagingMoveData_.setStoppableMoveSolo(true);
m1041damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1041damagingMoveData_;
}
static MoveData m83(){
DamagingMoveData m1042damagingMoveData_ = Instances.newDamagingMoveData();
m1042damagingMoveData_.setCategory(I_SPECIALE);
m1042damagingMoveData_.setStoppableMoveKoSingle(true);
m1042damagingMoveData_.setPp((short)20);
StringList m1042stringList_=new StringList(new CollCapacity(1));
m1042stringList_.add(I_EAU);
m1042damagingMoveData_.setTypes(m1042stringList_);
m1042stringList_=new StringList(new CollCapacity(1));
m1042stringList_.add(I_EAU);
m1042damagingMoveData_.setBoostedTypes(m1042stringList_);
m1042damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1042custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1042effectDamage_=Instances.newEffectDamage();
m1042effectDamage_.setPower(R_65);
m1042effectDamage_.setUserAttack(true);
m1042effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1042effectDamage_.setTargetDefense(true);
m1042effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1042effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1042effectDamage_.setFail(ES);
m1042custListEffect_.add(m1042effectDamage_);
EffectStatistic m1042effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1042enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1042enumMapStatisticByte_.addEntry(Statistic.SPEED,(byte)-1);
m1042effectStatistic_.setStatisVarRank(m1042enumMapStatisticByte_);
EnumMap<Statistic,String> m1042enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m1042enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m1042effectStatistic_.setLocalFailStatis(m1042enumMapStatisticString_);
m1042effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m1042effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m1042effectStatistic_.setFail(ES);
Ints m1042ints_=new Ints(new CollCapacity(1));
m1042ints_.add(0);
m1042effectStatistic_.setRequiredSuccessfulEffects(m1042ints_);
m1042custListEffect_.add(m1042effectStatistic_);
m1042damagingMoveData_.setEffects(m1042custListEffect_);
m1042damagingMoveData_.setStoppableMoveSolo(true);
m1042damagingMoveData_.setStoppableMoveMulti(true);
m1042damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1042damagingMoveData_;
}
static MoveData m84(){
DamagingMoveData m1043damagingMoveData_ = Instances.newDamagingMoveData();
m1043damagingMoveData_.setCategory(I_PHYSIQUE);
m1043damagingMoveData_.setDirect(true);
m1043damagingMoveData_.setStoppableMoveKoSingle(true);
m1043damagingMoveData_.setPp((short)15);
StringList m1043stringList_=new StringList(new CollCapacity(1));
m1043stringList_.add(I_NORMAL);
m1043damagingMoveData_.setTypes(m1043stringList_);
m1043stringList_=new StringList(new CollCapacity(1));
m1043stringList_.add(I_NORMAL);
m1043damagingMoveData_.setBoostedTypes(m1043stringList_);
m1043damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1043custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1043effectDamage_=Instances.newEffectDamage();
m1043effectDamage_.setPower(R_60);
m1043effectDamage_.setUserAttack(true);
m1043effectDamage_.setStatisAtt(Statistic.ATTACK);
m1043effectDamage_.setTargetDefense(true);
m1043effectDamage_.setStatisDef(Statistic.DEFENSE);
m1043effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1043effectDamage_.setFail(ES);
m1043custListEffect_.add(m1043effectDamage_);
m1043damagingMoveData_.setEffects(m1043custListEffect_);
m1043damagingMoveData_.setStoppableMoveSolo(true);
m1043damagingMoveData_.setStoppableMoveMulti(true);
m1043damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1043damagingMoveData_;
}
static MoveData m85(){
StatusMoveData m1044statusMoveData_ = Instances.newStatusMoveData();
m1044statusMoveData_.setCounterableMove(true);
m1044statusMoveData_.setPp((short)20);
StringList m1044stringList_=new StringList(new CollCapacity(1));
m1044stringList_.add(I_ELECTRIQUE);
m1044statusMoveData_.setTypes(m1044stringList_);
m1044stringList_=new StringList(new CollCapacity(1));
m1044stringList_.add(I_ELECTRIQUE);
m1044statusMoveData_.setBoostedTypes(m1044stringList_);
m1044statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1044custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m1044effectStatus_=Instances.newEffectStatus();
MonteCarloString m1044monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1044monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m1044effectStatus_.setLawStatus(m1044monteCarloString_);
StringMap<String> m1044stringMapString_=new StringMap<String>(new CollCapacity(1));
m1044stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1044effectStatus_.setLocalFailStatus(m1044stringMapString_);
m1044effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1044effectStatus_.setFail(ES);
m1044custListEffect_.add(m1044effectStatus_);
m1044statusMoveData_.setEffects(m1044custListEffect_);
m1044statusMoveData_.setStoppableMoveSolo(true);
m1044statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1044statusMoveData_;
}
static MoveData m86(){
DamagingMoveData m1045damagingMoveData_ = Instances.newDamagingMoveData();
m1045damagingMoveData_.setCategory(I_SPECIALE);
m1045damagingMoveData_.setStoppableMoveKoSingle(true);
m1045damagingMoveData_.setPp((short)15);
StringList m1045stringList_=new StringList(new CollCapacity(1));
m1045stringList_.add(I_FEU);
m1045damagingMoveData_.setTypes(m1045stringList_);
m1045stringList_=new StringList(new CollCapacity(1));
m1045stringList_.add(I_FEU);
m1045damagingMoveData_.setBoostedTypes(m1045stringList_);
m1045damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1045custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1045effectDamage_=Instances.newEffectDamage();
m1045effectDamage_.setPower(R_30);
m1045effectDamage_.setUserAttack(true);
m1045effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1045effectDamage_.setTargetDefense(true);
m1045effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1045effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m1045effectDamage_.setFail(ES);
m1045custListEffect_.add(m1045effectDamage_);
EffectSwitchItems m1045effectSwitchItems_=Instances.newEffectSwitchItems();
m1045effectSwitchItems_.setMoveObject(MoveItemType.DELETE_DEF_TARGET_BERRY);
m1045effectSwitchItems_.setTargetChoice(TargetChoice.ADJ_ADV);
m1045effectSwitchItems_.setFail(ES);
Ints m1045ints_=new Ints(new CollCapacity(1));
m1045ints_.add(0);
m1045effectSwitchItems_.setRequiredSuccessfulEffects(m1045ints_);
m1045custListEffect_.add(m1045effectSwitchItems_);
m1045damagingMoveData_.setEffects(m1045custListEffect_);
m1045damagingMoveData_.setStoppableMoveSolo(true);
m1045damagingMoveData_.setStoppableMoveMulti(true);
m1045damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1045damagingMoveData_;
}
static MoveData m87(){
DamagingMoveData m1046damagingMoveData_ = Instances.newDamagingMoveData();
m1046damagingMoveData_.setCategory(I_PHYSIQUE);
m1046damagingMoveData_.setDirect(true);
m1046damagingMoveData_.setStoppableMoveKoSingle(true);
m1046damagingMoveData_.setPp((short)10);
StringList m1046stringList_=new StringList(new CollCapacity(1));
m1046stringList_.add(I_FEE);
m1046damagingMoveData_.setTypes(m1046stringList_);
m1046stringList_=new StringList(new CollCapacity(1));
m1046stringList_.add(I_FEE);
m1046damagingMoveData_.setBoostedTypes(m1046stringList_);
m1046damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1046custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1046effectDamage_=Instances.newEffectDamage();
m1046effectDamage_.setPower(R_90);
m1046effectDamage_.setUserAttack(true);
m1046effectDamage_.setStatisAtt(Statistic.ATTACK);
m1046effectDamage_.setTargetDefense(true);
m1046effectDamage_.setStatisDef(Statistic.DEFENSE);
m1046effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1046effectDamage_.setFail(ES);
m1046custListEffect_.add(m1046effectDamage_);
EffectStatistic m1046effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1046enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1046enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-1);
m1046effectStatistic_.setStatisVarRank(m1046enumMapStatisticByte_);
EnumMap<Statistic,String> m1046enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m1046enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1046effectStatistic_.setLocalFailStatis(m1046enumMapStatisticString_);
m1046effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m1046effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1046effectStatistic_.setFail(ES);
Ints m1046ints_=new Ints(new CollCapacity(1));
m1046ints_.add(0);
m1046effectStatistic_.setRequiredSuccessfulEffects(m1046ints_);
m1046custListEffect_.add(m1046effectStatistic_);
m1046damagingMoveData_.setEffects(m1046custListEffect_);
m1046damagingMoveData_.setStoppableMoveSolo(true);
m1046damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1046damagingMoveData_;
}
static MoveData m88(){
StatusMoveData m1047statusMoveData_ = Instances.newStatusMoveData();
m1047statusMoveData_.setPp((short)20);
StringList m1047stringList_=new StringList(new CollCapacity(1));
m1047stringList_.add(I_NORMAL);
m1047statusMoveData_.setTypes(m1047stringList_);
m1047stringList_=new StringList(new CollCapacity(1));
m1047stringList_.add(I_NORMAL);
m1047statusMoveData_.setBoostedTypes(m1047stringList_);
m1047statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1047custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1047effectStatistic_=Instances.newEffectStatistic();
EnumMap<Statistic,Byte> m1047enumMapStatisticByte_=new EnumMap<Statistic,Byte>(new CollCapacity(1));
m1047enumMapStatisticByte_.addEntry(Statistic.ATTACK,(byte)-1);
m1047effectStatistic_.setStatisVarRank(m1047enumMapStatisticByte_);
EnumMap<Statistic,String> m1047enumMapStatisticString_=new EnumMap<Statistic,String>(new CollCapacity(1));
m1047enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1047effectStatistic_.setLocalFailStatis(m1047enumMapStatisticString_);
m1047effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1047effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1047effectStatistic_.setFail(ES);
m1047custListEffect_.add(m1047effectStatistic_);
m1047statusMoveData_.setEffects(m1047custListEffect_);
m1047statusMoveData_.setIgnVarAccurUserNeg(true);
m1047statusMoveData_.setIgnVarEvasTargetPos(true);
m1047statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1047statusMoveData_;
}
static MoveData m89(){
StatusMoveData m1048statusMoveData_ = Instances.newStatusMoveData();
m1048statusMoveData_.setThievableMove(true);
m1048statusMoveData_.setPp((short)20);
StringList m1048stringList_=new StringList(new CollCapacity(1));
m1048stringList_.add(I_NORMAL);
m1048statusMoveData_.setTypes(m1048stringList_);
m1048stringList_=new StringList(new CollCapacity(1));
m1048stringList_.add(I_NORMAL);
m1048statusMoveData_.setBoostedTypes(m1048stringList_);
m1048statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1048custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes m1048effectSwitchTypes_=Instances.newEffectSwitchTypes();
EnumMap<EnvironmentType,String> m1048enumMapEnvironmentTypeString_=new EnumMap<EnvironmentType,String>(new CollCapacity(7));
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.GRASS,I_PLANTE);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.ROCK,I_ROCHE);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.ROAD,I_SOL);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.WATER,I_EAU);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.SNOW,I_GLACE);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.DESERT,I_SOL);
m1048enumMapEnvironmentTypeString_.addEntry(EnvironmentType.BUILDING,I_NORMAL);
m1048effectSwitchTypes_.setChgtTypeByEnv(m1048enumMapEnvironmentTypeString_);
m1048effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
m1048effectSwitchTypes_.setExchangeTypes(ExchangeType.NOTHING);
m1048effectSwitchTypes_.setTargetChoice(TargetChoice.LANCEUR);
m1048effectSwitchTypes_.setFail(ES);
m1048custListEffect_.add(m1048effectSwitchTypes_);
m1048statusMoveData_.setEffects(m1048custListEffect_);
m1048statusMoveData_.setStoppableMoveMulti(true);
m1048statusMoveData_.setIgnVarAccurUserNeg(true);
m1048statusMoveData_.setIgnVarEvasTargetPos(true);
m1048statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1048statusMoveData_;
}
static MoveData m90(){
DamagingMoveData m1049damagingMoveData_ = Instances.newDamagingMoveData();
m1049damagingMoveData_.setCategory(I_SPECIALE);
m1049damagingMoveData_.setStoppableMoveKoSingle(true);
m1049damagingMoveData_.setPp((short)10);
StringList m1049stringList_=new StringList(new CollCapacity(1));
m1049stringList_.add(I_FEU);
m1049damagingMoveData_.setTypes(m1049stringList_);
m1049stringList_=new StringList(new CollCapacity(1));
m1049stringList_.add(I_FEU);
m1049damagingMoveData_.setBoostedTypes(m1049stringList_);
m1049damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1049custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1049effectDamage_=Instances.newEffectDamage();
m1049effectDamage_.setPower(R_100);
m1049effectDamage_.setUserAttack(true);
m1049effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1049effectDamage_.setTargetDefense(true);
m1049effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1049effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m1049effectDamage_.setFail(ES);
m1049custListEffect_.add(m1049effectDamage_);
EffectStatus m1049effectStatus_=Instances.newEffectStatus();
MonteCarloString m1049monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1049monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1049monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m1049effectStatus_.setLawStatus(m1049monteCarloString_);
StringMap<String> m1049stringMapString_=new StringMap<String>(new CollCapacity(1));
m1049stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m1049effectStatus_.setLocalFailStatus(m1049stringMapString_);
m1049effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
m1049effectStatus_.setFail(ES);
Ints m1049ints_=new Ints(new CollCapacity(1));
m1049ints_.add(0);
m1049effectStatus_.setRequiredSuccessfulEffects(m1049ints_);
m1049custListEffect_.add(m1049effectStatus_);
m1049damagingMoveData_.setEffects(m1049custListEffect_);
m1049damagingMoveData_.setStoppableMoveSolo(true);
m1049damagingMoveData_.setStoppableMoveMulti(true);
m1049damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1049damagingMoveData_;
}
static MoveData m91(){
DamagingMoveData m1050damagingMoveData_ = Instances.newDamagingMoveData();
m1050damagingMoveData_.setCategory(I_PHYSIQUE);
m1050damagingMoveData_.setStoppableMoveKoSingle(true);
m1050damagingMoveData_.setPp((short)15);
StringList m1050stringList_=new StringList(new CollCapacity(1));
m1050stringList_.add(I_PLANTE);
m1050damagingMoveData_.setTypes(m1050stringList_);
m1050stringList_=new StringList(new CollCapacity(1));
m1050stringList_.add(I_PLANTE);
m1050damagingMoveData_.setBoostedTypes(m1050stringList_);
m1050damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1050custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1050effectDamage_=Instances.newEffectDamage();
m1050effectDamage_.setPower(R_80);
m1050effectDamage_.setUserAttack(true);
m1050effectDamage_.setStatisAtt(Statistic.ATTACK);
m1050effectDamage_.setTargetDefense(true);
m1050effectDamage_.setStatisDef(Statistic.DEFENSE);
m1050effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1050effectDamage_.setFail(ES);
m1050custListEffect_.add(m1050effectDamage_);
m1050damagingMoveData_.setEffects(m1050custListEffect_);
m1050damagingMoveData_.setStoppableMoveSolo(true);
m1050damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1050damagingMoveData_;
}
static MoveData m92(){
DamagingMoveData m1051damagingMoveData_ = Instances.newDamagingMoveData();
m1051damagingMoveData_.setCategory(I_SPECIALE);
m1051damagingMoveData_.setStoppableMoveKoSingle(true);
m1051damagingMoveData_.setPp((short)5);
StringList m1051stringList_=new StringList(new CollCapacity(1));
m1051stringList_.add(I_ACIER);
m1051damagingMoveData_.setTypes(m1051stringList_);
m1051stringList_=new StringList(new CollCapacity(1));
m1051stringList_.add(I_ACIER);
m1051damagingMoveData_.setBoostedTypes(m1051stringList_);
m1051damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1051custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1051effectDamage_=Instances.newEffectDamage();
m1051effectDamage_.setPower(R_140);
m1051effectDamage_.setUserAttack(true);
m1051effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1051effectDamage_.setTargetDefense(true);
m1051effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1051effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1051effectDamage_.setFail(ES);
m1051custListEffect_.add(m1051effectDamage_);
EffectEndRoundPositionTargetRelation m1051effectEndRoundPositionTargetRelation_=Instances.newEffectEndRoundPositionTargetRelation();
m1051effectEndRoundPositionTargetRelation_.setFailEndRound(ES);
m1051effectEndRoundPositionTargetRelation_.setEndRoundRank(2);
m1051effectEndRoundPositionTargetRelation_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1051effectEndRoundPositionTargetRelation_.setFail(ES);
Ints m1051ints_=new Ints(new CollCapacity(1));
m1051ints_.add(0);
m1051effectEndRoundPositionTargetRelation_.setRequiredSuccessfulEffects(m1051ints_);
m1051custListEffect_.add(m1051effectEndRoundPositionTargetRelation_);
m1051damagingMoveData_.setEffects(m1051custListEffect_);
m1051damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1051damagingMoveData_;
}
static MoveData m93(){
DamagingMoveData m1052damagingMoveData_ = Instances.newDamagingMoveData();
m1052damagingMoveData_.setCategory(I_PHYSIQUE);
m1052damagingMoveData_.setDirect(true);
m1052damagingMoveData_.setStoppableMoveKoSingle(true);
m1052damagingMoveData_.setPp((short)15);
StringList m1052stringList_=new StringList(new CollCapacity(1));
m1052stringList_.add(I_EAU);
m1052damagingMoveData_.setTypes(m1052stringList_);
m1052stringList_=new StringList(new CollCapacity(1));
m1052stringList_.add(I_EAU);
m1052damagingMoveData_.setBoostedTypes(m1052stringList_);
m1052damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1052custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1052effectDamage_=Instances.newEffectDamage();
m1052effectDamage_.setPower(R_80);
m1052effectDamage_.setUserAttack(true);
m1052effectDamage_.setStatisAtt(Statistic.ATTACK);
m1052effectDamage_.setTargetDefense(true);
m1052effectDamage_.setStatisDef(Statistic.DEFENSE);
m1052effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1052effectDamage_.setFail(ES);
m1052custListEffect_.add(m1052effectDamage_);
EffectStatus m1052effectStatus_=Instances.newEffectStatus();
MonteCarloString m1052monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1052monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m1052monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1052effectStatus_.setLawStatus(m1052monteCarloString_);
StringMap<String> m1052stringMapString_=new StringMap<String>(new CollCapacity(1));
m1052stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1052effectStatus_.setLocalFailStatus(m1052stringMapString_);
m1052effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1052effectStatus_.setFail(ES);
Ints m1052ints_=new Ints(new CollCapacity(1));
m1052ints_.add(0);
m1052effectStatus_.setRequiredSuccessfulEffects(m1052ints_);
m1052custListEffect_.add(m1052effectStatus_);
m1052damagingMoveData_.setEffects(m1052custListEffect_);
m1052damagingMoveData_.setStoppableMoveSolo(true);
m1052damagingMoveData_.setStoppableMoveMulti(true);
m1052damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1052damagingMoveData_;
}
static MoveData m94(){
DamagingMoveData m1053damagingMoveData_ = Instances.newDamagingMoveData();
m1053damagingMoveData_.setCategory(I_PHYSIQUE);
m1053damagingMoveData_.setDirect(true);
m1053damagingMoveData_.setStoppableMoveKoSingle(true);
m1053damagingMoveData_.setPp((short)15);
StringList m1053stringList_=new StringList(new CollCapacity(1));
m1053stringList_.add(I_COMBAT);
m1053damagingMoveData_.setTypes(m1053stringList_);
m1053stringList_=new StringList(new CollCapacity(1));
m1053stringList_.add(I_COMBAT);
m1053damagingMoveData_.setBoostedTypes(m1053stringList_);
m1053damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1053custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1053effectDamage_=Instances.newEffectDamage();
m1053effectDamage_.setPower(R_75);
m1053effectDamage_.setUserAttack(true);
m1053effectDamage_.setStatisAtt(Statistic.ATTACK);
m1053effectDamage_.setTargetDefense(true);
m1053effectDamage_.setStatisDef(Statistic.DEFENSE);
m1053effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1053effectDamage_.setFail(ES);
m1053custListEffect_.add(m1053effectDamage_);
EffectTeam m1053effectTeam_=Instances.newEffectTeam();
m1053stringList_=new StringList(new CollCapacity(2));
m1053stringList_.add(I_MUR_LUMIERE);
m1053stringList_.add(I_PROTECTION);
m1053effectTeam_.setDisableFoeTeamEffects(m1053stringList_);
m1053effectTeam_.setTargetChoice(TargetChoice.LANCEUR);
m1053effectTeam_.setFail(ES);
Ints m1053ints_=new Ints(new CollCapacity(1));
m1053ints_.add(0);
m1053effectTeam_.setRequiredSuccessfulEffects(m1053ints_);
m1053custListEffect_.add(m1053effectTeam_);
m1053damagingMoveData_.setEffects(m1053custListEffect_);
m1053damagingMoveData_.setStoppableMoveSolo(true);
m1053damagingMoveData_.setStoppableMoveMulti(true);
m1053damagingMoveData_.setSecEffectIfNoDamage(true);
m1053damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1053damagingMoveData_;
}
static MoveData m95(){
StatusMoveData m1054statusMoveData_ = Instances.newStatusMoveData();
m1054statusMoveData_.setPp((short)15);
StringList m1054stringList_=new StringList(new CollCapacity(1));
m1054stringList_.add(I_SPECTRE);
m1054statusMoveData_.setTypes(m1054stringList_);
m1054stringList_=new StringList(new CollCapacity(1));
m1054stringList_.add(I_SPECTRE);
m1054statusMoveData_.setBoostedTypes(m1054stringList_);
m1054statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1054custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m1054effectStatus_=Instances.newEffectStatus();
MonteCarloString m1054monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1054monteCarloString_.addQuickEvent(I_CAUCHEMAR_ST,LgInt.newLgInt(R_1));
m1054effectStatus_.setLawStatus(m1054monteCarloString_);
StringMap<String> m1054stringMapString_=new StringMap<String>(new CollCapacity(1));
m1054stringMapString_.addEntry(I_CAUCHEMAR_ST,V_CIBLE_POSSEDE_STATUT_RELATION+SE+I_CAUCHEMAR_ST+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OE+R_0);
m1054effectStatus_.setLocalFailStatus(m1054stringMapString_);
m1054effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1054effectStatus_.setFail(ES);
m1054custListEffect_.add(m1054effectStatus_);
m1054statusMoveData_.setEffects(m1054custListEffect_);
m1054statusMoveData_.setStoppableMoveSolo(true);
m1054statusMoveData_.setStoppableMoveMulti(true);
m1054statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1054statusMoveData_;
}
static MoveData m96(){
StatusMoveData m1055statusMoveData_ = Instances.newStatusMoveData();
m1055statusMoveData_.setPp((short)5);
StringList m1055stringList_=new StringList(new CollCapacity(1));
m1055stringList_.add(I_EAU);
m1055statusMoveData_.setTypes(m1055stringList_);
m1055stringList_=new StringList(new CollCapacity(1));
m1055stringList_.add(I_EAU);
m1055statusMoveData_.setBoostedTypes(m1055stringList_);
m1055statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1055custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m1055effectGlobal_=Instances.newEffectGlobal();
m1055effectGlobal_.setWeather(true);
m1055effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m1055effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m1055effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m1055effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m1055effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m1055stringList_=new StringList(new CollCapacity(2));
m1055stringList_.add(I_GRELE);
m1055stringList_.add(I_TEMPETESABLE);
m1055effectGlobal_.setCancelEffects(m1055stringList_);
StringMap<Rate> m1055stringMapRate_=new StringMap<Rate>(new CollCapacity(2));
m1055stringMapRate_.addEntry(I_EAU,Rate.newRate(R_3_2));
m1055stringMapRate_.addEntry(I_FEU,Rate.newRate(R_1_2));
m1055effectGlobal_.setMultDamageTypesMoves(m1055stringMapRate_);
m1055effectGlobal_.setInvokedMoveTerrain(ES);
m1055effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1055effectGlobal_.setFail(ES);
m1055custListEffect_.add(m1055effectGlobal_);
EffectEndRoundGlobal m1055effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m1055effectEndRoundGlobal_.setFailEndRound(ES);
m1055effectEndRoundGlobal_.setEndRoundRank(36);
m1055effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1055effectEndRoundGlobal_.setFail(ES);
Ints m1055ints_=new Ints(new CollCapacity(1));
m1055ints_.add(0);
m1055effectEndRoundGlobal_.setRequiredSuccessfulEffects(m1055ints_);
m1055custListEffect_.add(m1055effectEndRoundGlobal_);
m1055statusMoveData_.setEffects(m1055custListEffect_);
m1055statusMoveData_.setRankIncrementNbRound((short)27);
m1055statusMoveData_.setStoppableMoveMulti(true);
m1055statusMoveData_.setIgnVarAccurUserNeg(true);
m1055statusMoveData_.setIgnVarEvasTargetPos(true);
m1055statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1055statusMoveData_;
}
static MoveData m97(){
StatusMoveData m1056statusMoveData_ = Instances.newStatusMoveData();
m1056statusMoveData_.setPp((short)10);
StringList m1056stringList_=new StringList(new CollCapacity(1));
m1056stringList_.add(I_ELECTRIQUE);
m1056statusMoveData_.setTypes(m1056stringList_);
m1056stringList_=new StringList(new CollCapacity(1));
m1056stringList_.add(I_ELECTRIQUE);
m1056statusMoveData_.setBoostedTypes(m1056stringList_);
m1056statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1056custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m1056effectGlobal_=Instances.newEffectGlobal();
m1056effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m1056stringList_=new StringList(new CollCapacity(1));
m1056stringList_.add(I_SOMMEIL);
m1056effectGlobal_.setPreventStatus(m1056stringList_);
m1056effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m1056effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m1056effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m1056effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
StringMap<Rate> m1056stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m1056stringMapRate_.addEntry(I_ELECTRIQUE,Rate.newRate(R_3_2));
m1056effectGlobal_.setMultDamageTypesMoves(m1056stringMapRate_);
m1056effectGlobal_.setInvokedMoveTerrain(I_TONNERRE);
m1056stringList_=new StringList(new CollCapacity(1));
m1056stringList_.add(I_ELECTRIQUE);
m1056effectGlobal_.setChangedTypesTerrain(m1056stringList_);
m1056effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1056effectGlobal_.setFail(ES);
m1056custListEffect_.add(m1056effectGlobal_);
EffectEndRoundGlobal m1056effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m1056effectEndRoundGlobal_.setFailEndRound(ES);
m1056effectEndRoundGlobal_.setEndRoundRank(31);
m1056effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1056effectEndRoundGlobal_.setFail(ES);
Ints m1056ints_=new Ints(new CollCapacity(1));
m1056ints_.add(0);
m1056effectEndRoundGlobal_.setRequiredSuccessfulEffects(m1056ints_);
m1056custListEffect_.add(m1056effectEndRoundGlobal_);
m1056statusMoveData_.setEffects(m1056custListEffect_);
m1056statusMoveData_.setRankIncrementNbRound((short)27);
m1056statusMoveData_.setIgnVarAccurUserNeg(true);
m1056statusMoveData_.setIgnVarEvasTargetPos(true);
m1056statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1056statusMoveData_;
}
static MoveData m98(){
StatusMoveData m1057statusMoveData_ = Instances.newStatusMoveData();
m1057statusMoveData_.setPp((short)10);
StringList m1057stringList_=new StringList(new CollCapacity(1));
m1057stringList_.add(I_PLANTE);
m1057statusMoveData_.setTypes(m1057stringList_);
m1057stringList_=new StringList(new CollCapacity(1));
m1057stringList_.add(I_PLANTE);
m1057statusMoveData_.setBoostedTypes(m1057stringList_);
m1057statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1057custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m1057effectGlobal_=Instances.newEffectGlobal();
m1057effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m1057effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m1057effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m1057effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_1_16));
m1057effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
StringMap<Rate> m1057stringMapRate_=new StringMap<Rate>(new CollCapacity(3));
m1057stringMapRate_.addEntry(I_AMPLEUR,Rate.newRate(R_1_2));
m1057stringMapRate_.addEntry(I_PIETISOL,Rate.newRate(R_1_2));
m1057stringMapRate_.addEntry(I_SEISME,Rate.newRate(R_1_2));
m1057effectGlobal_.setMultPowerMoves(m1057stringMapRate_);
m1057stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m1057stringMapRate_.addEntry(I_PLANTE,Rate.newRate(R_3_2));
m1057effectGlobal_.setMultDamageTypesMoves(m1057stringMapRate_);
m1057effectGlobal_.setInvokedMoveTerrain(I_ECO_SPHERE);
m1057stringList_=new StringList(new CollCapacity(1));
m1057stringList_.add(I_PLANTE);
m1057effectGlobal_.setChangedTypesTerrain(m1057stringList_);
m1057effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1057effectGlobal_.setFail(ES);
m1057custListEffect_.add(m1057effectGlobal_);
EffectEndRoundGlobal m1057effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m1057effectEndRoundGlobal_.setFailEndRound(ES);
m1057effectEndRoundGlobal_.setEndRoundRank(33);
m1057effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1057effectEndRoundGlobal_.setFail(ES);
Ints m1057ints_=new Ints(new CollCapacity(1));
m1057ints_.add(0);
m1057effectEndRoundGlobal_.setRequiredSuccessfulEffects(m1057ints_);
m1057custListEffect_.add(m1057effectEndRoundGlobal_);
m1057statusMoveData_.setEffects(m1057custListEffect_);
m1057statusMoveData_.setRankIncrementNbRound((short)27);
m1057statusMoveData_.setIgnVarAccurUserNeg(true);
m1057statusMoveData_.setIgnVarEvasTargetPos(true);
m1057statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1057statusMoveData_;
}
static MoveData m99(){
DamagingMoveData m1058damagingMoveData_ = Instances.newDamagingMoveData();
m1058damagingMoveData_.setCategory(I_SPECIALE);
m1058damagingMoveData_.setStoppableMoveKoSingle(true);
m1058damagingMoveData_.setPp((short)20);
StringList m1058stringList_=new StringList(new CollCapacity(1));
m1058stringList_.add(I_ELECTRIQUE);
m1058damagingMoveData_.setTypes(m1058stringList_);
m1058stringList_=new StringList(new CollCapacity(1));
m1058stringList_.add(I_ELECTRIQUE);
m1058damagingMoveData_.setBoostedTypes(m1058stringList_);
m1058damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1058custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1058effectDamage_=Instances.newEffectDamage();
m1058effectDamage_.setPower(R_70);
m1058effectDamage_.setUserAttack(true);
m1058effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1058effectDamage_.setTargetDefense(true);
m1058effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1058effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1058effectDamage_.setFail(ES);
m1058custListEffect_.add(m1058effectDamage_);
m1058damagingMoveData_.setEffects(m1058custListEffect_);
m1058damagingMoveData_.setStoppableMoveSolo(true);
m1058damagingMoveData_.setSwitchType(SwitchType.LANCEUR);
m1058damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1058damagingMoveData_;
}
}
