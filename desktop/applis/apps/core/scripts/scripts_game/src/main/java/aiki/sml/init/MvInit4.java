package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit4 extends CstIgame{
private MvInit4(){}
static MoveData m100(){
DamagingMoveData m1061damagingMoveData_ = Instances.newDamagingMoveData();
m1061damagingMoveData_.setCategory(I_SPECIALE);
m1061damagingMoveData_.setStoppableMoveKoSingle(true);
m1061damagingMoveData_.setPp(10);
StringList m1061stringList_=new StringList(new CollCapacity(1));
m1061stringList_.add(I_NORMAL);
m1061damagingMoveData_.setTypes(m1061stringList_);
m1061stringList_=new StringList(new CollCapacity(1));
m1061stringList_.add(I_NORMAL);
m1061damagingMoveData_.setBoostedTypes(m1061stringList_);
m1061damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1061custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1061effectDamage_=Instances.newEffectDamage();
m1061effectDamage_.setPower(R_75);
m1061effectDamage_.setUserAttack(true);
m1061effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1061effectDamage_.setTargetDefense(true);
m1061effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1061effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m1061effectDamage_.setFail(ES);
m1061custListEffect_.add(m1061effectDamage_);
EffectStatus m1061effectStatus_=Instances.newEffectStatus();
MonteCarloString m1061monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1061monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1061monteCarloString_.addQuickEvent(I_SOMMEIL,LgInt.newLgInt(R_1));
m1061effectStatus_.setLawStatus(m1061monteCarloString_);
StringMap<String> m1061stringMapString_=new StringMap<String>(new CollCapacity(1));
m1061stringMapString_.addEntry(I_SOMMEIL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1061effectStatus_.setLocalFailStatus(m1061stringMapString_);
m1061effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
m1061effectStatus_.setFail(ES);
Ints m1061ints_=new Ints(new CollCapacity(1));
m1061ints_.add(0);
m1061effectStatus_.setRequiredSuccessfulEffects(m1061ints_);
m1061custListEffect_.add(m1061effectStatus_);
m1061damagingMoveData_.setEffects(m1061custListEffect_);
m1061damagingMoveData_.setStoppableMoveSolo(true);
m1061damagingMoveData_.setStoppableMoveMulti(true);
m1061damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1061damagingMoveData_;
}
static MoveData m101(){
DamagingMoveData m1062damagingMoveData_ = Instances.newDamagingMoveData();
m1062damagingMoveData_.setCategory(I_SPECIALE);
m1062damagingMoveData_.setStoppableMoveKoSingle(true);
m1062damagingMoveData_.setPp(15);
StringList m1062stringList_=new StringList(new CollCapacity(1));
m1062stringList_.add(I_NORMAL);
m1062damagingMoveData_.setTypes(m1062stringList_);
m1062stringList_=new StringList(new CollCapacity(1));
m1062stringList_.add(I_NORMAL);
m1062damagingMoveData_.setBoostedTypes(m1062stringList_);
m1062damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1062custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1062effectDamage_=Instances.newEffectDamage();
m1062effectDamage_.setPower(R_60+OM+LP+V_NB_UTILI_ATT_EQ_TOUR+SE+I_CHANT_CANON+OP+R_1+RP);
m1062effectDamage_.setUserAttack(true);
m1062effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1062effectDamage_.setTargetDefense(true);
m1062effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1062effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1062effectDamage_.setFail(ES);
m1062custListEffect_.add(m1062effectDamage_);
m1062damagingMoveData_.setEffects(m1062custListEffect_);
m1062damagingMoveData_.setStoppableMoveSolo(true);
m1062damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1062damagingMoveData_;
}
static MoveData m102(){
DamagingMoveData m1063damagingMoveData_ = Instances.newDamagingMoveData();
m1063damagingMoveData_.setCategory(I_PHYSIQUE);
m1063damagingMoveData_.setDirect(true);
m1063damagingMoveData_.setStoppableMoveKoSingle(true);
m1063damagingMoveData_.setPp(35);
StringList m1063stringList_=new StringList(new CollCapacity(1));
m1063stringList_.add(I_NORMAL);
m1063damagingMoveData_.setTypes(m1063stringList_);
m1063stringList_=new StringList(new CollCapacity(1));
m1063stringList_.add(I_NORMAL);
m1063damagingMoveData_.setBoostedTypes(m1063stringList_);
m1063damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1063custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1063effectDamage_=Instances.newEffectDamage();
m1063effectDamage_.setPower(R_50);
m1063effectDamage_.setUserAttack(true);
m1063effectDamage_.setStatisAtt(Statistic.ATTACK);
m1063effectDamage_.setTargetDefense(true);
m1063effectDamage_.setStatisDef(Statistic.DEFENSE);
m1063effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1063effectDamage_.setFail(ES);
m1063custListEffect_.add(m1063effectDamage_);
m1063damagingMoveData_.setEffects(m1063custListEffect_);
m1063damagingMoveData_.setStoppableMoveSolo(true);
m1063damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1063damagingMoveData_;
}
static MoveData m103(){
StatusMoveData m1064statusMoveData_ = Instances.newStatusMoveData();
m1064statusMoveData_.setThievableMove(true);
m1064statusMoveData_.setPp(20);
StringList m1064stringList_=new StringList(new CollCapacity(1));
m1064stringList_.add(I_ELECTRIQUE);
m1064statusMoveData_.setTypes(m1064stringList_);
m1064stringList_=new StringList(new CollCapacity(1));
m1064stringList_.add(I_ELECTRIQUE);
m1064statusMoveData_.setBoostedTypes(m1064stringList_);
m1064statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1064custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectStatistic m1064effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1064enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1064enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,1);
m1064effectStatistic_.setStatisVarRank(m1064enumMapStatisticByte_);
m1064effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1064effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1064effectStatistic_.setFail(ES);
m1064custListEffect_.add(m1064effectStatistic_);
EffectMultUsedMovePower m1064effectMultUsedMovePower_=Instances.newEffectMultUsedMovePower();
StringMap<Rate> m1064stringMapRate_=new StringMap<Rate>(new CollCapacity(1));
m1064stringMapRate_.addEntry(I_ELECTRIQUE,Rate.newRate(R_2));
m1064effectMultUsedMovePower_.setMultMovePowerFctType(m1064stringMapRate_);
m1064effectMultUsedMovePower_.setTargetChoice(TargetChoice.LANCEUR);
m1064effectMultUsedMovePower_.setFail(ES);
Ints m1064ints_=new Ints(new CollCapacity(1));
m1064ints_.add(0);
m1064effectMultUsedMovePower_.setRequiredSuccessfulEffects(m1064ints_);
m1064custListEffect_.add(m1064effectMultUsedMovePower_);
m1064statusMoveData_.setEffects(m1064custListEffect_);
m1064statusMoveData_.setStoppableMoveMulti(true);
m1064statusMoveData_.setIgnVarAccurUserNeg(true);
m1064statusMoveData_.setIgnVarEvasTargetPos(true);
m1064statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1064statusMoveData_;
}
static MoveData m104(){
DamagingMoveData m1065damagingMoveData_ = Instances.newDamagingMoveData();
m1065damagingMoveData_.setCategory(I_PHYSIQUE);
m1065damagingMoveData_.setDirect(true);
m1065damagingMoveData_.setStoppableMoveKoSingle(true);
m1065damagingMoveData_.setPp(5);
StringList m1065stringList_=new StringList(new CollCapacity(1));
m1065stringList_.add(I_ELECTRIQUE);
m1065damagingMoveData_.setTypes(m1065stringList_);
m1065stringList_=new StringList(new CollCapacity(1));
m1065stringList_.add(I_ELECTRIQUE);
m1065damagingMoveData_.setBoostedTypes(m1065stringList_);
m1065damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1065custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1065effectDamage_=Instances.newEffectDamage();
m1065effectDamage_.setPower(R_130);
m1065effectDamage_.setUserAttack(true);
m1065effectDamage_.setStatisAtt(Statistic.ATTACK);
m1065effectDamage_.setTargetDefense(true);
m1065effectDamage_.setStatisDef(Statistic.DEFENSE);
m1065effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1065effectDamage_.setFail(ES);
m1065custListEffect_.add(m1065effectDamage_);
EffectStatus m1065effectStatus_=Instances.newEffectStatus();
MonteCarloString m1065monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1065monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m1065monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m1065effectStatus_.setLawStatus(m1065monteCarloString_);
StringMap<String> m1065stringMapString_=new StringMap<String>(new CollCapacity(1));
m1065stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1065effectStatus_.setLocalFailStatus(m1065stringMapString_);
m1065effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1065effectStatus_.setFail(ES);
Ints m1065ints_=new Ints(new CollCapacity(1));
m1065ints_.add(0);
m1065effectStatus_.setRequiredSuccessfulEffects(m1065ints_);
m1065custListEffect_.add(m1065effectStatus_);
m1065damagingMoveData_.setEffects(m1065custListEffect_);
m1065damagingMoveData_.setStoppableMoveSolo(true);
m1065damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1065damagingMoveData_;
}
static MoveData m105(){
DamagingMoveData m1066damagingMoveData_ = Instances.newDamagingMoveData();
m1066damagingMoveData_.setCategory(I_PHYSIQUE);
m1066damagingMoveData_.setStoppableMoveKoSingle(true);
m1066damagingMoveData_.setPp(10);
StringList m1066stringList_=new StringList(new CollCapacity(1));
m1066stringList_.add(I_SOL);
m1066damagingMoveData_.setTypes(m1066stringList_);
m1066stringList_=new StringList(new CollCapacity(1));
m1066stringList_.add(I_SOL);
m1066damagingMoveData_.setBoostedTypes(m1066stringList_);
m1066damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1066custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1066effectDamage_=Instances.newEffectDamage();
m1066effectDamage_.setPower(R_25);
m1066effectDamage_.setUserAttack(true);
m1066effectDamage_.setStatisAtt(Statistic.ATTACK);
m1066effectDamage_.setTargetDefense(true);
m1066effectDamage_.setStatisDef(Statistic.DEFENSE);
m1066effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1066effectDamage_.setFail(ES);
m1066custListEffect_.add(m1066effectDamage_);
m1066damagingMoveData_.setEffects(m1066custListEffect_);
m1066damagingMoveData_.setStoppableMoveSolo(true);
m1066damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1066damagingMoveData_;
}
static MoveData m106(){
StatusMoveData m1067statusMoveData_ = Instances.newStatusMoveData();
m1067statusMoveData_.setCounterableMove(true);
m1067statusMoveData_.setPp(20);
StringList m1067stringList_=new StringList(new CollCapacity(1));
m1067stringList_.add(I_NORMAL);
m1067statusMoveData_.setTypes(m1067stringList_);
m1067stringList_=new StringList(new CollCapacity(1));
m1067stringList_.add(I_NORMAL);
m1067statusMoveData_.setBoostedTypes(m1067stringList_);
m1067statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1067custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1067effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1067enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1067enumMapStatisticByte_.addEntry(Statistic.ATTACK,-2);
m1067effectStatistic_.setStatisVarRank(m1067enumMapStatisticByte_);
IdMap<Statistic,String> m1067enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1067enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1067effectStatistic_.setLocalFailStatis(m1067enumMapStatisticString_);
m1067effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1067effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m1067effectStatistic_.setFail(ES);
m1067custListEffect_.add(m1067effectStatistic_);
m1067statusMoveData_.setEffects(m1067custListEffect_);
m1067statusMoveData_.setStoppableMoveSolo(true);
m1067statusMoveData_.setStoppableMoveMulti(true);
m1067statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1067statusMoveData_;
}
static MoveData m107(){
DamagingMoveData m1068damagingMoveData_ = Instances.newDamagingMoveData();
m1068damagingMoveData_.setCategory(I_SPECIALE);
m1068damagingMoveData_.setStoppableMoveKoSingle(true);
m1068damagingMoveData_.setPp(10);
StringList m1068stringList_=new StringList(new CollCapacity(1));
m1068stringList_.add(I_SPECTRE);
m1068damagingMoveData_.setTypes(m1068stringList_);
m1068stringList_=new StringList(new CollCapacity(1));
m1068stringList_.add(I_SPECTRE);
m1068damagingMoveData_.setBoostedTypes(m1068stringList_);
m1068damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1068custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1068effectDamage_=Instances.newEffectDamage();
m1068effectDamage_.setPower(R_50+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_POISON_GRAVE+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_GEL+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+OP+R_1+RP);
m1068effectDamage_.setUserAttack(true);
m1068effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1068effectDamage_.setTargetDefense(true);
m1068effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1068effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1068effectDamage_.setFail(ES);
m1068custListEffect_.add(m1068effectDamage_);
m1068damagingMoveData_.setEffects(m1068custListEffect_);
m1068damagingMoveData_.setStoppableMoveSolo(true);
m1068damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1068damagingMoveData_;
}
static MoveData m108(){
StatusMoveData m1069statusMoveData_ = Instances.newStatusMoveData();
m1069statusMoveData_.setCounterableMove(true);
m1069statusMoveData_.setPp(20);
StringList m1069stringList_=new StringList(new CollCapacity(1));
m1069stringList_.add(I_NORMAL);
m1069statusMoveData_.setTypes(m1069stringList_);
m1069stringList_=new StringList(new CollCapacity(1));
m1069stringList_.add(I_NORMAL);
m1069statusMoveData_.setBoostedTypes(m1069stringList_);
m1069statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1069custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1069effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1069enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(2));
m1069enumMapStatisticByte_.addEntry(Statistic.ATTACK,-1);
m1069enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1);
m1069effectStatistic_.setStatisVarRank(m1069enumMapStatisticByte_);
IdMap<Statistic,String> m1069enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m1069enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1069enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1069effectStatistic_.setLocalFailStatis(m1069enumMapStatisticString_);
m1069effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1069effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m1069effectStatistic_.setFail(ES);
m1069custListEffect_.add(m1069effectStatistic_);
m1069statusMoveData_.setEffects(m1069custListEffect_);
m1069statusMoveData_.setStoppableMoveSolo(true);
m1069statusMoveData_.setStoppableMoveMulti(true);
m1069statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1069statusMoveData_;
}
static MoveData m109(){
StatusMoveData m1070statusMoveData_ = Instances.newStatusMoveData();
m1070statusMoveData_.setThievableMove(true);
m1070statusMoveData_.setPp(10);
StringList m1070stringList_=new StringList(new CollCapacity(1));
m1070stringList_.add(I_ACIER);
m1070statusMoveData_.setTypes(m1070stringList_);
m1070stringList_=new StringList(new CollCapacity(1));
m1070stringList_.add(I_ACIER);
m1070statusMoveData_.setBoostedTypes(m1070stringList_);
m1070statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1070custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1070effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1070enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(2));
m1070enumMapStatisticByte_.addEntry(Statistic.ATTACK,1);
m1070enumMapStatisticByte_.addEntry(Statistic.SPEED,2);
m1070effectStatistic_.setStatisVarRank(m1070enumMapStatisticByte_);
m1070effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1070effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1070effectStatistic_.setFail(ES);
m1070custListEffect_.add(m1070effectStatistic_);
m1070statusMoveData_.setEffects(m1070custListEffect_);
m1070statusMoveData_.setStoppableMoveMulti(true);
m1070statusMoveData_.setIgnVarAccurUserNeg(true);
m1070statusMoveData_.setIgnVarEvasTargetPos(true);
m1070statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1070statusMoveData_;
}
static MoveData m110(){
DamagingMoveData m1071damagingMoveData_ = Instances.newDamagingMoveData();
m1071damagingMoveData_.setCategory(I_SPECIALE);
m1071damagingMoveData_.setStoppableMoveKoSingle(true);
m1071damagingMoveData_.setPp(25);
StringList m1071stringList_=new StringList(new CollCapacity(1));
m1071stringList_.add(I_PSY);
m1071damagingMoveData_.setTypes(m1071stringList_);
m1071stringList_=new StringList(new CollCapacity(1));
m1071stringList_.add(I_PSY);
m1071damagingMoveData_.setBoostedTypes(m1071stringList_);
m1071damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1071custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1071effectDamage_=Instances.newEffectDamage();
m1071effectDamage_.setPower(R_50);
m1071effectDamage_.setUserAttack(true);
m1071effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1071effectDamage_.setTargetDefense(true);
m1071effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1071effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1071effectDamage_.setFail(ES);
m1071custListEffect_.add(m1071effectDamage_);
EffectStatus m1071effectStatus_=Instances.newEffectStatus();
MonteCarloString m1071monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1071monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1071monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m1071effectStatus_.setLawStatus(m1071monteCarloString_);
StringMap<String> m1071stringMapString_=new StringMap<String>(new CollCapacity(1));
m1071stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1071effectStatus_.setLocalFailStatus(m1071stringMapString_);
m1071effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1071effectStatus_.setFail(ES);
Ints m1071ints_=new Ints(new CollCapacity(1));
m1071ints_.add(0);
m1071effectStatus_.setRequiredSuccessfulEffects(m1071ints_);
m1071custListEffect_.add(m1071effectStatus_);
m1071damagingMoveData_.setEffects(m1071custListEffect_);
m1071damagingMoveData_.setStoppableMoveSolo(true);
m1071damagingMoveData_.setStoppableMoveMulti(true);
m1071damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1071damagingMoveData_;
}
static MoveData m111(){
DamagingMoveData m1072damagingMoveData_ = Instances.newDamagingMoveData();
m1072damagingMoveData_.setCategory(I_SPECIALE);
m1072damagingMoveData_.setStoppableMoveKoSingle(true);
m1072damagingMoveData_.setPp(10);
StringList m1072stringList_=new StringList(new CollCapacity(1));
m1072stringList_.add(I_PSY);
m1072damagingMoveData_.setTypes(m1072stringList_);
m1072stringList_=new StringList(new CollCapacity(1));
m1072stringList_.add(I_PSY);
m1072damagingMoveData_.setBoostedTypes(m1072stringList_);
m1072damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1072custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1072effectDamage_=Instances.newEffectDamage();
m1072effectDamage_.setPower(R_80);
m1072effectDamage_.setUserAttack(true);
m1072effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1072effectDamage_.setTargetDefense(true);
m1072effectDamage_.setStatisDef(Statistic.DEFENSE);
m1072effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1072effectDamage_.setFail(ES);
m1072custListEffect_.add(m1072effectDamage_);
m1072damagingMoveData_.setEffects(m1072custListEffect_);
m1072damagingMoveData_.setStoppableMoveSolo(true);
m1072damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1072damagingMoveData_;
}
static MoveData m112(){
DamagingMoveData m1073damagingMoveData_ = Instances.newDamagingMoveData();
m1073damagingMoveData_.setCategory(I_SPECIALE);
m1073damagingMoveData_.setStoppableMoveKoSingle(true);
m1073damagingMoveData_.setPp(10);
StringList m1073stringList_=new StringList(new CollCapacity(1));
m1073stringList_.add(I_POISON);
m1073damagingMoveData_.setTypes(m1073stringList_);
m1073stringList_=new StringList(new CollCapacity(1));
m1073stringList_.add(I_POISON);
m1073damagingMoveData_.setBoostedTypes(m1073stringList_);
m1073damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1073custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1073effectDamage_=Instances.newEffectDamage();
m1073effectDamage_.setPower(R_65+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+RB+RP+RP+OP+R_1+RP+OM+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_POISON_GRAVE+RB+RP+RP+OP+R_1+RP);
m1073effectDamage_.setUserAttack(true);
m1073effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1073effectDamage_.setTargetDefense(true);
m1073effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1073effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1073effectDamage_.setFail(ES);
m1073custListEffect_.add(m1073effectDamage_);
m1073damagingMoveData_.setEffects(m1073custListEffect_);
m1073damagingMoveData_.setStoppableMoveSolo(true);
m1073damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1073damagingMoveData_;
}
static MoveData m113(){
DamagingMoveData m1074damagingMoveData_ = Instances.newDamagingMoveData();
m1074damagingMoveData_.setCategory(I_PHYSIQUE);
m1074damagingMoveData_.setStoppableMoveKoSingle(true);
m1074damagingMoveData_.setPp(10);
StringList m1074stringList_=new StringList(new CollCapacity(1));
m1074stringList_.add(I_GLACE);
m1074damagingMoveData_.setTypes(m1074stringList_);
m1074stringList_=new StringList(new CollCapacity(1));
m1074stringList_.add(I_GLACE);
m1074damagingMoveData_.setBoostedTypes(m1074stringList_);
m1074damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1074custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1074effectDamage_=Instances.newEffectDamage();
m1074effectDamage_.setPower(R_85);
m1074effectDamage_.setUserAttack(true);
m1074effectDamage_.setStatisAtt(Statistic.ATTACK);
m1074effectDamage_.setTargetDefense(true);
m1074effectDamage_.setStatisDef(Statistic.DEFENSE);
m1074effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1074effectDamage_.setFail(ES);
m1074custListEffect_.add(m1074effectDamage_);
EffectStatus m1074effectStatus_=Instances.newEffectStatus();
MonteCarloString m1074monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1074monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1074monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m1074effectStatus_.setLawStatus(m1074monteCarloString_);
StringMap<String> m1074stringMapString_=new StringMap<String>(new CollCapacity(1));
m1074stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1074effectStatus_.setLocalFailStatus(m1074stringMapString_);
m1074effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1074effectStatus_.setFail(ES);
Ints m1074ints_=new Ints(new CollCapacity(1));
m1074ints_.add(0);
m1074effectStatus_.setRequiredSuccessfulEffects(m1074ints_);
m1074custListEffect_.add(m1074effectStatus_);
m1074damagingMoveData_.setEffects(m1074custListEffect_);
m1074damagingMoveData_.setStoppableMoveSolo(true);
m1074damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1074damagingMoveData_;
}
static MoveData m114(){
DamagingMoveData m1075damagingMoveData_ = Instances.newDamagingMoveData();
m1075damagingMoveData_.setCategory(I_PHYSIQUE);
m1075damagingMoveData_.setDirect(true);
m1075damagingMoveData_.setStoppableMoveKoSingle(true);
m1075damagingMoveData_.setPp(10);
StringList m1075stringList_=new StringList(new CollCapacity(1));
m1075stringList_.add(I_VOL);
m1075damagingMoveData_.setTypes(m1075stringList_);
m1075stringList_=new StringList(new CollCapacity(1));
m1075stringList_.add(I_VOL);
m1075damagingMoveData_.setBoostedTypes(m1075stringList_);
m1075damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1075custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1075effectDamage_=Instances.newEffectDamage();
m1075effectDamage_.setPower(R_60);
m1075effectDamage_.setUserAttack(true);
m1075effectDamage_.setStatisAtt(Statistic.ATTACK);
m1075effectDamage_.setTargetDefense(true);
m1075effectDamage_.setStatisDef(Statistic.DEFENSE);
m1075effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1075effectDamage_.setFail(V_CIBLE_CLONE+GT+R_0+OO+V_IMMU_TYPE_ATT_CIBLE+SE+I_SOL);
m1075custListEffect_.add(m1075effectDamage_);
m1075damagingMoveData_.setEffects(m1075custListEffect_);
m1075damagingMoveData_.setNbPrepaRound(1);
m1075damagingMoveData_.setDisappearBeforeUse(true);
m1075damagingMoveData_.setStoppableMoveSolo(true);
m1075damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1075damagingMoveData_;
}
static MoveData m115(){
StatusMoveData m1076statusMoveData_ = Instances.newStatusMoveData();
m1076statusMoveData_.setCounterableMove(true);
m1076statusMoveData_.setPp(40);
StringList m1076stringList_=new StringList(new CollCapacity(1));
m1076stringList_.add(I_NORMAL);
m1076statusMoveData_.setTypes(m1076stringList_);
m1076stringList_=new StringList(new CollCapacity(1));
m1076stringList_.add(I_NORMAL);
m1076statusMoveData_.setBoostedTypes(m1076stringList_);
m1076statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1076custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectUnprotectFromTypes m1076effectUnprotectFromTypes_=Instances.newEffectUnprotectFromTypes();
m1076effectUnprotectFromTypes_.setTypes(new CustList<TypesDuo>(new TypesDuo(I_NORMAL,I_SPECTRE),new TypesDuo(I_COMBAT,I_SPECTRE)));
m1076effectUnprotectFromTypes_.setTargetChoice(TargetChoice.ANY_FOE);
m1076effectUnprotectFromTypes_.setFail(ES);
m1076custListEffect_.add(m1076effectUnprotectFromTypes_);
m1076statusMoveData_.setEffects(m1076custListEffect_);
m1076statusMoveData_.setStoppableMoveMulti(true);
m1076statusMoveData_.setIgnVarAccurUserNeg(true);
m1076statusMoveData_.setIgnVarEvasTargetPos(true);
m1076statusMoveData_.setTargetChoice(TargetChoice.ANY_FOE);
return m1076statusMoveData_;
}
static MoveData m116(){
DamagingMoveData m1077damagingMoveData_ = Instances.newDamagingMoveData();
m1077damagingMoveData_.setCategory(I_PHYSIQUE);
m1077damagingMoveData_.setDirect(true);
m1077damagingMoveData_.setStoppableMoveKoSingle(true);
m1077damagingMoveData_.setPp(10);
StringList m1077stringList_=new StringList(new CollCapacity(1));
m1077stringList_.add(I_EAU);
m1077damagingMoveData_.setTypes(m1077stringList_);
m1077stringList_=new StringList(new CollCapacity(1));
m1077stringList_.add(I_EAU);
m1077damagingMoveData_.setBoostedTypes(m1077stringList_);
m1077damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m1077custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1077effectDamage_=Instances.newEffectDamage();
m1077effectDamage_.setPower(R_35);
m1077effectDamage_.setUserAttack(true);
m1077effectDamage_.setStatisAtt(Statistic.ATTACK);
m1077effectDamage_.setTargetDefense(true);
m1077effectDamage_.setStatisDef(Statistic.DEFENSE);
m1077effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1077effectDamage_.setFail(ES);
m1077custListEffect_.add(m1077effectDamage_);
EffectEndRoundSingleRelation m1077effectEndRoundSingleRelation_=Instances.newEffectEndRoundSingleRelation();
LongMap<Rate> m1077longMapRate_=new LongMap<Rate>(new CollCapacity(5));
m1077longMapRate_.addEntry(1L,Rate.newRate(R_1_16));
m1077longMapRate_.addEntry(2L,Rate.newRate(R_1_16));
m1077longMapRate_.addEntry(3L,Rate.newRate(R_1_16));
m1077longMapRate_.addEntry(4L,Rate.newRate(R_1_16));
m1077longMapRate_.addEntry(5L,Rate.newRate(R_1_16));
m1077effectEndRoundSingleRelation_.setRateDamageFunctionOfNbRounds(m1077longMapRate_);
MonteCarloNumber m1077monteCarloNumber_=new MonteCarloNumber(new CollCapacity(4));
m1077monteCarloNumber_.addQuickEvent(Rate.newRate(R_3),LgInt.newLgInt(R_3));
m1077monteCarloNumber_.addQuickEvent(Rate.newRate(R_2),LgInt.newLgInt(R_3));
m1077monteCarloNumber_.addQuickEvent(Rate.newRate(R_4),LgInt.newLgInt(R_1));
m1077monteCarloNumber_.addQuickEvent(Rate.newRate(R_5),LgInt.newLgInt(R_1));
m1077effectEndRoundSingleRelation_.setLawForEnablingEffect(m1077monteCarloNumber_);
m1077effectEndRoundSingleRelation_.setFailEndRound(V_CIBLE_CLONE+GT+R_0);
m1077effectEndRoundSingleRelation_.setEndRoundRank(47);
m1077effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1077effectEndRoundSingleRelation_.setFail(V_CIBLE_CLONE+GT+R_0);
Ints m1077ints_=new Ints(new CollCapacity(1));
m1077ints_.add(0);
m1077effectEndRoundSingleRelation_.setRequiredSuccessfulEffects(m1077ints_);
m1077custListEffect_.add(m1077effectEndRoundSingleRelation_);
m1077damagingMoveData_.setEffects(m1077custListEffect_);
m1077damagingMoveData_.setStoppableMoveSolo(true);
m1077damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1077damagingMoveData_;
}
static MoveData m117(){
StatusMoveData m1078statusMoveData_ = Instances.newStatusMoveData();
m1078statusMoveData_.setThievableMove(true);
m1078statusMoveData_.setPp(10);
StringList m1078stringList_=new StringList(new CollCapacity(1));
m1078stringList_.add(I_NORMAL);
m1078statusMoveData_.setTypes(m1078stringList_);
m1078stringList_=new StringList(new CollCapacity(1));
m1078stringList_.add(I_NORMAL);
m1078statusMoveData_.setBoostedTypes(m1078stringList_);
m1078statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1078custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectClone m1078effectClone_=Instances.newEffectClone();
m1078effectClone_.setHpRateClone(Rate.newRate(R_1_4));
m1078effectClone_.setTargetChoice(TargetChoice.LANCEUR);
m1078effectClone_.setFail(V_LANCEUR_CLONE+GT+R_0+OO+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+LT+R_1_4);
m1078custListEffect_.add(m1078effectClone_);
m1078statusMoveData_.setEffects(m1078custListEffect_);
m1078statusMoveData_.setStoppableMoveMulti(true);
m1078statusMoveData_.setIgnVarAccurUserNeg(true);
m1078statusMoveData_.setIgnVarEvasTargetPos(true);
m1078statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1078statusMoveData_;
}
static MoveData m118(){
DamagingMoveData m1079damagingMoveData_ = Instances.newDamagingMoveData();
m1079damagingMoveData_.setCategory(I_PHYSIQUE);
m1079damagingMoveData_.setDirect(true);
m1079damagingMoveData_.setStoppableMoveKoSingle(true);
m1079damagingMoveData_.setPp(5);
StringList m1079stringList_=new StringList(new CollCapacity(1));
m1079stringList_.add(I_COMBAT);
m1079damagingMoveData_.setTypes(m1079stringList_);
m1079stringList_=new StringList(new CollCapacity(1));
m1079stringList_.add(I_COMBAT);
m1079damagingMoveData_.setBoostedTypes(m1079stringList_);
m1079damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1079custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1079effectDamage_=Instances.newEffectDamage();
m1079effectDamage_.setPower(R_120);
m1079effectDamage_.setUserAttack(true);
m1079effectDamage_.setStatisAtt(Statistic.ATTACK);
m1079effectDamage_.setTargetDefense(true);
m1079effectDamage_.setStatisDef(Statistic.DEFENSE);
m1079effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1079effectDamage_.setFail(ES);
m1079custListEffect_.add(m1079effectDamage_);
EffectStatistic m1079effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1079enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(2));
m1079enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-1);
m1079enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1);
m1079effectStatistic_.setStatisVarRank(m1079enumMapStatisticByte_);
IdMap<Statistic,String> m1079enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m1079enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_LANCEUR_CLONE+GT+R_0);
m1079enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_LANCEUR_CLONE+GT+R_0);
m1079effectStatistic_.setLocalFailStatis(m1079enumMapStatisticString_);
m1079effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1079effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1079effectStatistic_.setFail(ES);
Ints m1079ints_=new Ints(new CollCapacity(1));
m1079ints_.add(0);
m1079effectStatistic_.setRequiredSuccessfulEffects(m1079ints_);
m1079custListEffect_.add(m1079effectStatistic_);
m1079damagingMoveData_.setEffects(m1079custListEffect_);
m1079damagingMoveData_.setStoppableMoveSolo(true);
m1079damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1079damagingMoveData_;
}
static MoveData m119(){
DamagingMoveData m1080damagingMoveData_ = Instances.newDamagingMoveData();
m1080damagingMoveData_.setCategory(I_PHYSIQUE);
m1080damagingMoveData_.setDirect(true);
m1080damagingMoveData_.setStoppableMoveKoSingle(true);
m1080damagingMoveData_.setPp(20);
StringList m1080stringList_=new StringList(new CollCapacity(1));
m1080stringList_.add(I_COMBAT);
m1080damagingMoveData_.setTypes(m1080stringList_);
m1080stringList_=new StringList(new CollCapacity(1));
m1080stringList_.add(I_COMBAT);
m1080damagingMoveData_.setBoostedTypes(m1080stringList_);
m1080damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1080custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1080effectDamage_=Instances.newEffectDamage();
m1080effectDamage_.setPower(R_15);
m1080effectDamage_.setUserAttack(true);
m1080effectDamage_.setStatisAtt(Statistic.ATTACK);
m1080effectDamage_.setTargetDefense(true);
m1080effectDamage_.setStatisDef(Statistic.DEFENSE);
m1080effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1080effectDamage_.setFail(ES);
m1080custListEffect_.add(m1080effectDamage_);
m1080damagingMoveData_.setEffects(m1080custListEffect_);
m1080damagingMoveData_.setStoppableMoveSolo(true);
m1080damagingMoveData_.setStoppableMoveMulti(true);
m1080damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1080damagingMoveData_;
}
static MoveData m120(){
StatusMoveData m1081statusMoveData_ = Instances.newStatusMoveData();
m1081statusMoveData_.setThievableMove(true);
m1081statusMoveData_.setPp(10);
StringList m1081stringList_=new StringList(new CollCapacity(1));
m1081stringList_.add(I_NORMAL);
m1081statusMoveData_.setTypes(m1081stringList_);
m1081stringList_=new StringList(new CollCapacity(1));
m1081stringList_.add(I_NORMAL);
m1081statusMoveData_.setBoostedTypes(m1081stringList_);
m1081statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1081custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1081effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1081enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1081enumMapStatisticByte_.addEntry(Statistic.ATTACK,6);
m1081effectStatistic_.setStatisVarRank(m1081enumMapStatisticByte_);
m1081effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1081effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1081effectStatistic_.setFail(ES);
m1081custListEffect_.add(m1081effectStatistic_);
m1081statusMoveData_.setEffects(m1081custListEffect_);
m1081statusMoveData_.setStoppableMoveMulti(true);
m1081statusMoveData_.setIgnVarAccurUserNeg(true);
m1081statusMoveData_.setIgnVarEvasTargetPos(true);
m1081statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1081statusMoveData_;
}
static MoveData m121(){
DamagingMoveData m1082damagingMoveData_ = Instances.newDamagingMoveData();
m1082damagingMoveData_.setCategory(I_PHYSIQUE);
m1082damagingMoveData_.setDirect(true);
m1082damagingMoveData_.setStoppableMoveKoSingle(true);
m1082damagingMoveData_.setPp(15);
StringList m1082stringList_=new StringList(new CollCapacity(1));
m1082stringList_.add(I_DRAGON);
m1082damagingMoveData_.setTypes(m1082stringList_);
m1082stringList_=new StringList(new CollCapacity(1));
m1082stringList_.add(I_DRAGON);
m1082damagingMoveData_.setBoostedTypes(m1082stringList_);
m1082damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1082custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1082effectDamage_=Instances.newEffectDamage();
m1082effectDamage_.setPower(R_120);
m1082effectDamage_.setUserAttack(true);
m1082effectDamage_.setStatisAtt(Statistic.ATTACK);
m1082effectDamage_.setTargetDefense(true);
m1082effectDamage_.setStatisDef(Statistic.DEFENSE);
m1082effectDamage_.setTargetChoice(TargetChoice.TOUS_ADV);
m1082effectDamage_.setFail(ES);
m1082custListEffect_.add(m1082effectDamage_);
m1082damagingMoveData_.setEffects(m1082custListEffect_);
m1082damagingMoveData_.setRankIncrementNbRound(17);
m1082damagingMoveData_.setConstUserChoice(true);
m1082damagingMoveData_.setStoppableMoveSolo(true);
m1082damagingMoveData_.setStoppableMoveMulti(true);
m1082damagingMoveData_.setTargetChoice(TargetChoice.TOUS_ADV);
return m1082damagingMoveData_;
}
static MoveData m122(){
DamagingMoveData m1083damagingMoveData_ = Instances.newDamagingMoveData();
m1083damagingMoveData_.setCategory(I_PHYSIQUE);
m1083damagingMoveData_.setDirect(true);
m1083damagingMoveData_.setStoppableMoveKoSingle(true);
m1083damagingMoveData_.setPp(15);
StringList m1083stringList_=new StringList(new CollCapacity(1));
m1083stringList_.add(I_NORMAL);
m1083damagingMoveData_.setTypes(m1083stringList_);
m1083stringList_=new StringList(new CollCapacity(1));
m1083stringList_.add(I_NORMAL);
m1083damagingMoveData_.setBoostedTypes(m1083stringList_);
m1083damagingMoveData_.setAccuracy(R_4_5);
CustList<Effect> m1083custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1083effectDamage_=Instances.newEffectDamage();
m1083effectDamage_.setPower(R_18);
m1083effectDamage_.setUserAttack(true);
m1083effectDamage_.setStatisAtt(Statistic.ATTACK);
m1083effectDamage_.setTargetDefense(true);
m1083effectDamage_.setStatisDef(Statistic.DEFENSE);
m1083effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1083effectDamage_.setFail(ES);
m1083custListEffect_.add(m1083effectDamage_);
m1083damagingMoveData_.setEffects(m1083custListEffect_);
m1083damagingMoveData_.setStoppableMoveSolo(true);
m1083damagingMoveData_.setStoppableMoveMulti(true);
m1083damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1083damagingMoveData_;
}
static MoveData m123(){
StatusMoveData m1084statusMoveData_ = Instances.newStatusMoveData();
m1084statusMoveData_.setPp(20);
StringList m1084stringList_=new StringList(new CollCapacity(1));
m1084stringList_.add(I_NORMAL);
m1084statusMoveData_.setTypes(m1084stringList_);
m1084stringList_=new StringList(new CollCapacity(1));
m1084stringList_.add(I_NORMAL);
m1084statusMoveData_.setBoostedTypes(m1084stringList_);
m1084statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1084custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1084effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1084enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1084enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1);
m1084effectStatistic_.setStatisVarRank(m1084enumMapStatisticByte_);
IdMap<Statistic,String> m1084enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1084enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m1084effectStatistic_.setLocalFailStatis(m1084enumMapStatisticString_);
m1084effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1084effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1084effectStatistic_.setFail(ES);
m1084custListEffect_.add(m1084effectStatistic_);
m1084statusMoveData_.setEffects(m1084custListEffect_);
m1084statusMoveData_.setIgnVarAccurUserNeg(true);
m1084statusMoveData_.setIgnVarEvasTargetPos(true);
m1084statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1084statusMoveData_;
}
static MoveData m124(){
DamagingMoveData m1085damagingMoveData_ = Instances.newDamagingMoveData();
m1085damagingMoveData_.setCategory(I_PHYSIQUE);
m1085damagingMoveData_.setDirect(true);
m1085damagingMoveData_.setStoppableMoveKoSingle(true);
m1085damagingMoveData_.setPp(20);
StringList m1085stringList_=new StringList(new CollCapacity(1));
m1085stringList_.add(I_NORMAL);
m1085damagingMoveData_.setTypes(m1085stringList_);
m1085stringList_=new StringList(new CollCapacity(1));
m1085stringList_.add(I_NORMAL);
m1085damagingMoveData_.setBoostedTypes(m1085stringList_);
m1085damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1085custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1085effectDamage_=Instances.newEffectDamage();
m1085effectDamage_.setPower(R_10);
m1085effectDamage_.setUserAttack(true);
m1085effectDamage_.setStatisAtt(Statistic.ATTACK);
m1085effectDamage_.setTargetDefense(true);
m1085effectDamage_.setStatisDef(Statistic.DEFENSE);
m1085effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1085effectDamage_.setFail(ES);
m1085custListEffect_.add(m1085effectDamage_);
EffectStatistic m1085effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1085enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1085enumMapStatisticByte_.addEntry(Statistic.SPEED,-1);
m1085effectStatistic_.setStatisVarRank(m1085enumMapStatisticByte_);
IdMap<Statistic,String> m1085enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1085enumMapStatisticString_.addEntry(Statistic.SPEED,V_CIBLE_CLONE+GT+R_0);
m1085effectStatistic_.setLocalFailStatis(m1085enumMapStatisticString_);
m1085effectStatistic_.setEvtRate(Rate.newRate(R_1_10));
m1085effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m1085effectStatistic_.setFail(ES);
Ints m1085ints_=new Ints(new CollCapacity(1));
m1085ints_.add(0);
m1085effectStatistic_.setRequiredSuccessfulEffects(m1085ints_);
m1085custListEffect_.add(m1085effectStatistic_);
m1085damagingMoveData_.setEffects(m1085custListEffect_);
m1085damagingMoveData_.setStoppableMoveSolo(true);
m1085damagingMoveData_.setStoppableMoveMulti(true);
m1085damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1085damagingMoveData_;
}
}
