package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit5 extends CstIgame{
private MvInit5(){}
static MoveData m125(){
DamagingMoveData m1088damagingMoveData_ = Instances.newDamagingMoveData();
m1088damagingMoveData_.setCategory(I_PHYSIQUE);
m1088damagingMoveData_.setDirect(true);
m1088damagingMoveData_.setStoppableMoveKoSingle(true);
m1088damagingMoveData_.setPp(15);
StringList m1088stringList_=new StringList(new CollCapacity(1));
m1088stringList_.add(I_COMBAT);
m1088damagingMoveData_.setTypes(m1088stringList_);
m1088stringList_=new StringList(new CollCapacity(1));
m1088stringList_.add(I_COMBAT);
m1088damagingMoveData_.setBoostedTypes(m1088stringList_);
m1088damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1088custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1088effectDamage_=newEffectDamage();
m1088effectDamage_.setPower(A_CARACSEMIOUVERTD+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_0+OC+R_2+RP+OM+R_200+OP+A_CARACSEMIOUVERTD+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_2+OC+R_6+RP+OM+R_150+OP+A_CARACSEMIOUVERTD+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_6+OC+R_13+RP+OM+R_100+OP+A_CARACSEMIOUVERTD+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_13+OC+R_22+RP+OM+R_80+OP+A_CARACSEMIOUVERTD+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_22+OC+R_43+RP+OM+R_40+OP+A_CARACDROITEFERME+LP+R_64+OM+A_DIV+LP+V_LANCEUR_PV_RESTANTS+OC+V_LANCEUR_PV_MAX+RP+OC+R_43+RP+OM+R_20);
m1088effectDamage_.setUserAttack(true);
m1088effectDamage_.setStatisAtt(Statistic.ATTACK);
m1088effectDamage_.setTargetDefense(true);
m1088effectDamage_.setStatisDef(Statistic.DEFENSE);
m1088effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1088custListEffect_.add(m1088effectDamage_);
m1088damagingMoveData_.setEffects(m1088custListEffect_);
m1088damagingMoveData_.setStoppableMoveSolo(true);
m1088damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1088damagingMoveData_;
}
static MoveData m126(){
StatusMoveData m1089statusMoveData_ = Instances.newStatusMoveData();
m1089statusMoveData_.setPp(30);
StringList m1089stringList_=new StringList(new CollCapacity(1));
m1089stringList_.add(I_NORMAL);
m1089statusMoveData_.setTypes(m1089stringList_);
m1089stringList_=new StringList(new CollCapacity(1));
m1089stringList_.add(I_NORMAL);
m1089statusMoveData_.setBoostedTypes(m1089stringList_);
m1089statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1089custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes m1089effectSwitchTypes_=Instances.newEffectSwitchTypes();
m1089effectSwitchTypes_.setConstValuesType(ConstValuesType.TYPES_ATTAQUES_RES);
m1089effectSwitchTypes_.setExchangeTypes(ExchangeType.NOTHING);
m1089effectSwitchTypes_.setTargetChoice(TargetChoice.LANCEUR);
m1089effectSwitchTypes_.setFail(V_TYPES_ATTAQUES_RES_VIDE+OO+A_CARACDROITEOUVERT+LP+V_LANCEUR_DEGATS_RECUS_TOTAL_TOUR+OC+R_0+RP+OE+R_0);
m1089custListEffect_.add(m1089effectSwitchTypes_);
m1089statusMoveData_.setEffects(m1089custListEffect_);
m1089statusMoveData_.setIgnVarAccurUserNeg(true);
m1089statusMoveData_.setIgnVarEvasTargetPos(true);
m1089statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1089statusMoveData_;
}
static MoveData m127(){
StatusMoveData m1090statusMoveData_ = Instances.newStatusMoveData();
m1090statusMoveData_.setPp(10);
StringList m1090stringList_=new StringList(new CollCapacity(1));
m1090stringList_.add(I_NORMAL);
m1090statusMoveData_.setTypes(m1090stringList_);
m1090stringList_=new StringList(new CollCapacity(1));
m1090stringList_.add(I_NORMAL);
m1090statusMoveData_.setBoostedTypes(m1090stringList_);
m1090statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1090custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectCopyMove m1090effectCopyMove_=Instances.newEffectCopyMove();
m1090effectCopyMove_.setCopyingMoveForUser(5);
m1090stringList_=new StringList(new CollCapacity(5));
m1090stringList_.add(I_BABIL);
m1090stringList_.add(I_COPIE);
m1090stringList_.add(I_GRIBOUILLE);
m1090stringList_.add(I_LUTTE);
m1090stringList_.add(I_METRONOME);
m1090effectCopyMove_.setMovesNotToBeCopied(m1090stringList_);
m1090effectCopyMove_.setTargetChoice(TargetChoice.ADJ_MULT);
m1090effectCopyMove_.setFail(V_PAS_ATTAQUES_COPIABLES+OO+V_PAS_TOUR_TERRAIN);
m1090custListEffect_.add(m1090effectCopyMove_);
m1090statusMoveData_.setEffects(m1090custListEffect_);
m1090statusMoveData_.setStoppableMoveSolo(true);
m1090statusMoveData_.setStoppableMoveMulti(true);
m1090statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1090statusMoveData_;
}
static MoveData m128(){
StatusMoveData m1091statusMoveData_ = Instances.newStatusMoveData();
m1091statusMoveData_.setPp(15);
StringList m1091stringList_=new StringList(new CollCapacity(1));
m1091stringList_.add(I_NORMAL);
m1091statusMoveData_.setTypes(m1091stringList_);
m1091stringList_=new StringList(new CollCapacity(1));
m1091stringList_.add(I_NORMAL);
m1091statusMoveData_.setBoostedTypes(m1091stringList_);
m1091statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1091custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes m1091effectSwitchTypes_=Instances.newEffectSwitchTypes();
m1091effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
m1091effectSwitchTypes_.setExchangeTypes(ExchangeType.GIVE_TO_THROWER);
m1091effectSwitchTypes_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1091effectSwitchTypes_.setFail(A_CARDINAL+LP+LB+V_CIBLE_TYPES+RB+RP+OE+R_0);
m1091custListEffect_.add(m1091effectSwitchTypes_);
m1091statusMoveData_.setEffects(m1091custListEffect_);
m1091statusMoveData_.setStoppableMoveSolo(true);
m1091statusMoveData_.setIgnVarAccurUserNeg(true);
m1091statusMoveData_.setIgnVarEvasTargetPos(true);
m1091statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1091statusMoveData_;
}
static MoveData m129(){
DamagingMoveData m1092damagingMoveData_ = Instances.newDamagingMoveData();
m1092damagingMoveData_.setCategory(I_PHYSIQUE);
m1092damagingMoveData_.setDirect(true);
m1092damagingMoveData_.setStoppableMoveKoSingle(true);
m1092damagingMoveData_.setPp(10);
StringList m1092stringList_=new StringList(new CollCapacity(1));
m1092stringList_.add(I_EAU);
m1092damagingMoveData_.setTypes(m1092stringList_);
m1092stringList_=new StringList(new CollCapacity(1));
m1092stringList_.add(I_EAU);
m1092damagingMoveData_.setBoostedTypes(m1092stringList_);
m1092damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1092custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1092effectDamage_=newEffectDamage();
m1092effectDamage_.setPower(R_75);
m1092effectDamage_.setUserAttack(true);
m1092effectDamage_.setStatisAtt(Statistic.ATTACK);
m1092effectDamage_.setTargetDefense(true);
m1092effectDamage_.setStatisDef(Statistic.DEFENSE);
m1092effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1092custListEffect_.add(m1092effectDamage_);
EffectStatistic m1092effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1092enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1092enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m1092effectStatistic_.setStatisVarRank(m1092enumMapStatisticByte_);
IdMap<Statistic,String> m1092enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1092enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1092effectStatistic_.setLocalFailStatis(m1092enumMapStatisticString_);
m1092effectStatistic_.setEvtRate(Rate.newRate(R_1_2));
m1092effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1092ints_=new Ints(new CollCapacity(1));
m1092ints_.add(0);
m1092effectStatistic_.setRequiredSuccessfulEffects(m1092ints_);
m1092custListEffect_.add(m1092effectStatistic_);
m1092damagingMoveData_.setEffects(m1092custListEffect_);
m1092damagingMoveData_.setStoppableMoveSolo(true);
m1092damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1092damagingMoveData_;
}
static MoveData m130(){
DamagingMoveData m1093damagingMoveData_ = Instances.newDamagingMoveData();
m1093damagingMoveData_.setCategory(I_PHYSIQUE);
m1093damagingMoveData_.setDirect(true);
m1093damagingMoveData_.setStoppableMoveKoSingle(true);
m1093damagingMoveData_.setPp(10);
StringList m1093stringList_=new StringList(new CollCapacity(1));
m1093stringList_.add(I_COMBAT);
m1093damagingMoveData_.setTypes(m1093stringList_);
m1093stringList_=new StringList(new CollCapacity(1));
m1093stringList_.add(I_COMBAT);
m1093damagingMoveData_.setBoostedTypes(m1093stringList_);
m1093damagingMoveData_.setPriority(-1);
m1093damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1093custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1093effectDamage_=newEffectDamage();
m1093effectDamage_.setPower(R_70);
m1093effectDamage_.setUserAttack(true);
m1093effectDamage_.setStatisAtt(Statistic.ATTACK);
m1093effectDamage_.setTargetDefense(true);
m1093effectDamage_.setStatisDef(Statistic.DEFENSE);
m1093effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1093custListEffect_.add(m1093effectDamage_);
m1093damagingMoveData_.setEffects(m1093custListEffect_);
m1093damagingMoveData_.setStoppableMoveSolo(true);
m1093damagingMoveData_.setStoppableMoveMulti(true);
m1093damagingMoveData_.setStoppableMovePrio(true);
m1093damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1093damagingMoveData_;
}
static MoveData m131(){
StatusMoveData m1094statusMoveData_ = Instances.newStatusMoveData();
m1094statusMoveData_.setThievableMove(true);
m1094statusMoveData_.setPp(10);
StringList m1094stringList_=new StringList(new CollCapacity(1));
m1094stringList_.add(I_PLANTE);
m1094statusMoveData_.setTypes(m1094stringList_);
m1094stringList_=new StringList(new CollCapacity(1));
m1094stringList_.add(I_PLANTE);
m1094statusMoveData_.setBoostedTypes(m1094stringList_);
m1094statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1094custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1094effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1094enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1094enumMapStatisticByte_.addEntry(Statistic.DEFENSE,3L);
m1094effectStatistic_.setStatisVarRank(m1094enumMapStatisticByte_);
m1094effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1094effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1094custListEffect_.add(m1094effectStatistic_);
m1094statusMoveData_.setEffects(m1094custListEffect_);
m1094statusMoveData_.setStoppableMoveMulti(true);
m1094statusMoveData_.setIgnVarAccurUserNeg(true);
m1094statusMoveData_.setIgnVarEvasTargetPos(true);
m1094statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1094statusMoveData_;
}
static MoveData m132(){
DamagingMoveData m1095damagingMoveData_ = Instances.newDamagingMoveData();
m1095damagingMoveData_.setCategory(I_SPECIALE);
m1095damagingMoveData_.setStoppableMoveKoSingle(true);
m1095damagingMoveData_.setPp(10);
StringList m1095stringList_=new StringList(new CollCapacity(1));
m1095stringList_.add(I_SOL);
m1095damagingMoveData_.setTypes(m1095stringList_);
m1095stringList_=new StringList(new CollCapacity(1));
m1095stringList_.add(I_SOL);
m1095damagingMoveData_.setBoostedTypes(m1095stringList_);
m1095damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1095custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1095effectDamage_=newEffectDamage();
m1095effectDamage_.setPower(R_20);
m1095effectDamage_.setUserAttack(true);
m1095effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1095effectDamage_.setTargetDefense(true);
m1095effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1095effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1095custListEffect_.add(m1095effectDamage_);
EffectStatistic m1095effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1095enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1095enumMapStatisticByte_.addEntry(Statistic.ACCURACY,-1L);
m1095effectStatistic_.setStatisVarRank(m1095enumMapStatisticByte_);
IdMap<Statistic,String> m1095enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1095enumMapStatisticString_.addEntry(Statistic.ACCURACY,V_CIBLE_CLONE+GT+R_0);
m1095effectStatistic_.setLocalFailStatis(m1095enumMapStatisticString_);
m1095effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1095effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m1095ints_=new Ints(new CollCapacity(1));
m1095ints_.add(0);
m1095effectStatistic_.setRequiredSuccessfulEffects(m1095ints_);
m1095custListEffect_.add(m1095effectStatistic_);
m1095damagingMoveData_.setEffects(m1095custListEffect_);
m1095damagingMoveData_.setStoppableMoveSolo(true);
m1095damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1095damagingMoveData_;
}
static MoveData m133(){
DamagingMoveData m1096damagingMoveData_ = Instances.newDamagingMoveData();
m1096damagingMoveData_.setCategory(I_PHYSIQUE);
m1096damagingMoveData_.setDirect(true);
m1096damagingMoveData_.setStoppableMoveKoSingle(true);
m1096damagingMoveData_.setPp(15);
StringList m1096stringList_=new StringList(new CollCapacity(1));
m1096stringList_.add(I_NORMAL);
m1096damagingMoveData_.setTypes(m1096stringList_);
m1096stringList_=new StringList(new CollCapacity(1));
m1096stringList_.add(I_NORMAL);
m1096damagingMoveData_.setBoostedTypes(m1096stringList_);
m1096damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1096custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1096effectDamage_=newEffectDamage();
m1096effectDamage_.setPower(R_100);
m1096effectDamage_.setUserAttack(true);
m1096effectDamage_.setStatisAtt(Statistic.ATTACK);
m1096effectDamage_.setTargetDefense(true);
m1096effectDamage_.setStatisDef(Statistic.DEFENSE);
m1096effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1096custListEffect_.add(m1096effectDamage_);
EffectStatistic m1096effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1096enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1096enumMapStatisticByte_.addEntry(Statistic.DEFENSE,1L);
m1096effectStatistic_.setStatisVarRank(m1096enumMapStatisticByte_);
m1096effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1096effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m1096ints_=new Ints(new CollCapacity(1));
m1096ints_.add(0);
m1096effectStatistic_.setRequiredSuccessfulEffects(m1096ints_);
m1096custListEffect_.add(m1096effectStatistic_);
m1096damagingMoveData_.setEffects(m1096custListEffect_);
m1096damagingMoveData_.setNbPrepaRound(1);
m1096damagingMoveData_.setStoppableMoveSolo(true);
m1096damagingMoveData_.setStoppableMoveMulti(true);
m1096damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1096damagingMoveData_;
}
static MoveData m134(){
DamagingMoveData m1097damagingMoveData_ = Instances.newDamagingMoveData();
m1097damagingMoveData_.setCategory(I_PHYSIQUE);
m1097damagingMoveData_.setDirect(true);
m1097damagingMoveData_.setStoppableMoveKoSingle(true);
m1097damagingMoveData_.setPp(30);
StringList m1097stringList_=new StringList(new CollCapacity(1));
m1097stringList_.add(I_NORMAL);
m1097damagingMoveData_.setTypes(m1097stringList_);
m1097stringList_=new StringList(new CollCapacity(1));
m1097stringList_.add(I_NORMAL);
m1097damagingMoveData_.setBoostedTypes(m1097stringList_);
m1097damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1097custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1097effectDamage_=newEffectDamage();
m1097effectDamage_.setPower(R_50);
m1097effectDamage_.setUserAttack(true);
m1097effectDamage_.setStatisAtt(Statistic.ATTACK);
m1097effectDamage_.setTargetDefense(true);
m1097effectDamage_.setStatisDef(Statistic.DEFENSE);
m1097effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1097custListEffect_.add(m1097effectDamage_);
m1097damagingMoveData_.setEffects(m1097custListEffect_);
m1097damagingMoveData_.setStoppableMoveSolo(true);
m1097damagingMoveData_.setStoppableMoveMulti(true);
m1097damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1097damagingMoveData_;
}
static MoveData m135(){
DamagingMoveData m1098damagingMoveData_ = Instances.newDamagingMoveData();
m1098damagingMoveData_.setCategory(I_PHYSIQUE);
m1098damagingMoveData_.setStoppableMoveKoSingle(true);
m1098damagingMoveData_.setPp(20);
StringList m1098stringList_=new StringList(new CollCapacity(1));
m1098stringList_.add(I_PSY);
m1098damagingMoveData_.setTypes(m1098stringList_);
m1098stringList_=new StringList(new CollCapacity(1));
m1098stringList_.add(I_PSY);
m1098damagingMoveData_.setBoostedTypes(m1098stringList_);
m1098damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1098custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1098effectDamage_=newEffectDamage();
m1098effectDamage_.setChRate(1);
m1098effectDamage_.setPower(R_70);
m1098effectDamage_.setUserAttack(true);
m1098effectDamage_.setStatisAtt(Statistic.ATTACK);
m1098effectDamage_.setTargetDefense(true);
m1098effectDamage_.setStatisDef(Statistic.DEFENSE);
m1098effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1098custListEffect_.add(m1098effectDamage_);
m1098damagingMoveData_.setEffects(m1098custListEffect_);
m1098damagingMoveData_.setStoppableMoveSolo(true);
m1098damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1098damagingMoveData_;
}
static MoveData m136(){
DamagingMoveData m1099damagingMoveData_ = Instances.newDamagingMoveData();
m1099damagingMoveData_.setCategory(I_SPECIALE);
m1099damagingMoveData_.setStoppableMoveKoSingle(true);
m1099damagingMoveData_.setPp(10);
StringList m1099stringList_=new StringList(new CollCapacity(1));
m1099stringList_.add(I_NORMAL);
m1099damagingMoveData_.setTypes(m1099stringList_);
m1099stringList_=new StringList(new CollCapacity(1));
m1099stringList_.add(I_NORMAL);
m1099damagingMoveData_.setBoostedTypes(m1099stringList_);
m1099damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1099custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1099effectDamage_=newEffectDamage();
m1099effectDamage_.setChRate(1);
m1099effectDamage_.setPower(R_80);
m1099effectDamage_.setUserAttack(true);
m1099effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1099effectDamage_.setTargetDefense(true);
m1099effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1099effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m1099custListEffect_.add(m1099effectDamage_);
m1099damagingMoveData_.setEffects(m1099custListEffect_);
m1099damagingMoveData_.setNbPrepaRound(1);
m1099damagingMoveData_.setStoppableMoveSolo(true);
m1099damagingMoveData_.setStoppableMoveMulti(true);
m1099damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1099damagingMoveData_;
}
static MoveData m137(){
DamagingMoveData m1100damagingMoveData_ = Instances.newDamagingMoveData();
m1100damagingMoveData_.setCategory(I_PHYSIQUE);
m1100damagingMoveData_.setDirect(true);
m1100damagingMoveData_.setStoppableMoveKoSingle(true);
m1100damagingMoveData_.setPp(5);
StringList m1100stringList_=new StringList(new CollCapacity(1));
m1100stringList_.add(I_TENEBRE);
m1100damagingMoveData_.setTypes(m1100stringList_);
m1100stringList_=new StringList(new CollCapacity(1));
m1100stringList_.add(I_TENEBRE);
m1100damagingMoveData_.setBoostedTypes(m1100stringList_);
m1100damagingMoveData_.setPriority(1);
m1100damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1100custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1100effectDamage_=newEffectDamage();
m1100effectDamage_.setPower(R_80);
m1100effectDamage_.setUserAttack(true);
m1100effectDamage_.setStatisAtt(Statistic.ATTACK);
m1100effectDamage_.setTargetDefense(true);
m1100effectDamage_.setStatisDef(Statistic.DEFENSE);
m1100effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1100custListEffect_.add(m1100effectDamage_);
m1100damagingMoveData_.setEffects(m1100custListEffect_);
m1100damagingMoveData_.setStoppableMoveSolo(true);
m1100damagingMoveData_.setStoppableMovePrio(true);
m1100damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1100damagingMoveData_;
}
static MoveData m138(){
DamagingMoveData m1101damagingMoveData_ = Instances.newDamagingMoveData();
m1101damagingMoveData_.setCategory(I_PHYSIQUE);
m1101damagingMoveData_.setDirect(true);
m1101damagingMoveData_.setStoppableMoveKoSingle(true);
m1101damagingMoveData_.setPp(5);
StringList m1101stringList_=new StringList(new CollCapacity(1));
m1101stringList_.add(I_COMBAT);
m1101damagingMoveData_.setTypes(m1101stringList_);
m1101stringList_=new StringList(new CollCapacity(1));
m1101stringList_.add(I_COMBAT);
m1101damagingMoveData_.setBoostedTypes(m1101stringList_);
m1101damagingMoveData_.setAccuracy(R_4_5);
CustList<Effect> m1101custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1101effectDamage_=newEffectDamage();
m1101effectDamage_.setChRate(1);
m1101effectDamage_.setPower(R_100);
m1101effectDamage_.setUserAttack(true);
m1101effectDamage_.setStatisAtt(Statistic.ATTACK);
m1101effectDamage_.setTargetDefense(true);
m1101effectDamage_.setStatisDef(Statistic.DEFENSE);
m1101effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1101custListEffect_.add(m1101effectDamage_);
m1101damagingMoveData_.setEffects(m1101custListEffect_);
m1101damagingMoveData_.setStoppableMoveSolo(true);
m1101damagingMoveData_.setStoppableMoveMulti(true);
m1101damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1101damagingMoveData_;
}
static MoveData m139(){
DamagingMoveData m1102damagingMoveData_ = Instances.newDamagingMoveData();
m1102damagingMoveData_.setCategory(I_PHYSIQUE);
m1102damagingMoveData_.setDirect(true);
m1102damagingMoveData_.setStoppableMoveKoSingle(true);
m1102damagingMoveData_.setPp(10);
StringList m1102stringList_=new StringList(new CollCapacity(1));
m1102stringList_.add(I_NORMAL);
m1102damagingMoveData_.setTypes(m1102stringList_);
m1102stringList_=new StringList(new CollCapacity(1));
m1102stringList_.add(I_NORMAL);
m1102damagingMoveData_.setBoostedTypes(m1102stringList_);
m1102damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1102custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1102effectDamage_=newEffectDamageLaw(new Rate(R_2));
m1102effectDamage_.setPower(R_35);
m1102effectDamage_.setUserAttack(true);
m1102effectDamage_.setStatisAtt(Statistic.ATTACK);
m1102effectDamage_.setTargetDefense(true);
m1102effectDamage_.setStatisDef(Statistic.DEFENSE);
m1102effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1102custListEffect_.add(m1102effectDamage_);
m1102damagingMoveData_.setEffects(m1102custListEffect_);
m1102damagingMoveData_.setStoppableMoveSolo(true);
m1102damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1102damagingMoveData_;
}
static MoveData m140(){
DamagingMoveData m1103damagingMoveData_ = Instances.newDamagingMoveData();
m1103damagingMoveData_.setCategory(I_PHYSIQUE);
m1103damagingMoveData_.setDirect(true);
m1103damagingMoveData_.setStoppableMoveKoSingle(true);
m1103damagingMoveData_.setPp(15);
StringList m1103stringList_=new StringList(new CollCapacity(1));
m1103stringList_.add(I_NORMAL);
m1103damagingMoveData_.setTypes(m1103stringList_);
m1103stringList_=new StringList(new CollCapacity(1));
m1103stringList_.add(I_NORMAL);
m1103damagingMoveData_.setBoostedTypes(m1103stringList_);
m1103damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1103custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1103effectDamage_=newEffectDamage();
m1103effectDamage_.setPower(R_70);
m1103effectDamage_.setUserAttack(true);
m1103effectDamage_.setStatisAtt(Statistic.ATTACK);
m1103effectDamage_.setTargetDefense(true);
m1103effectDamage_.setStatisDef(Statistic.DEFENSE);
m1103effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1103custListEffect_.add(m1103effectDamage_);
EffectStatus m1103effectStatus_=Instances.newEffectStatus();
MonteCarloString m1103monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1103monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1103monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m1103effectStatus_.setLawStatus(m1103monteCarloString_);
StringMap<String> m1103stringMapString_=new StringMap<String>(new CollCapacity(1));
m1103stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1103effectStatus_.setLocalFailStatus(m1103stringMapString_);
m1103effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m1103ints_=new Ints(new CollCapacity(1));
m1103ints_.add(0);
m1103effectStatus_.setRequiredSuccessfulEffects(m1103ints_);
m1103custListEffect_.add(m1103effectStatus_);
m1103damagingMoveData_.setEffects(m1103custListEffect_);
m1103damagingMoveData_.setStoppableMoveSolo(true);
m1103damagingMoveData_.setStoppableMoveMulti(true);
m1103damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1103damagingMoveData_;
}
static MoveData m141(){
DamagingMoveData m1104damagingMoveData_ = Instances.newDamagingMoveData();
m1104damagingMoveData_.setCategory(I_SPECIALE);
m1104damagingMoveData_.setStoppableMoveKoSingle(true);
m1104damagingMoveData_.setPp(15);
StringList m1104stringList_=new StringList(new CollCapacity(1));
m1104stringList_.add(I_ELECTRIQUE);
m1104damagingMoveData_.setTypes(m1104stringList_);
m1104stringList_=new StringList(new CollCapacity(1));
m1104stringList_.add(I_ELECTRIQUE);
m1104damagingMoveData_.setBoostedTypes(m1104stringList_);
m1104damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1104custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1104effectDamage_=newEffectDamage();
m1104effectDamage_.setPower(R_80);
m1104effectDamage_.setUserAttack(true);
m1104effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1104effectDamage_.setTargetDefense(true);
m1104effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1104effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1104custListEffect_.add(m1104effectDamage_);
EffectStatus m1104effectStatus_=Instances.newEffectStatus();
MonteCarloString m1104monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1104monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1104monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_3));
m1104effectStatus_.setLawStatus(m1104monteCarloString_);
StringMap<String> m1104stringMapString_=new StringMap<String>(new CollCapacity(1));
m1104stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1104effectStatus_.setLocalFailStatus(m1104stringMapString_);
m1104effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m1104ints_=new Ints(new CollCapacity(1));
m1104ints_.add(0);
m1104effectStatus_.setRequiredSuccessfulEffects(m1104ints_);
m1104custListEffect_.add(m1104effectStatus_);
m1104damagingMoveData_.setEffects(m1104custListEffect_);
m1104damagingMoveData_.setStoppableMoveSolo(true);
m1104damagingMoveData_.setStoppableMoveMulti(true);
m1104damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1104damagingMoveData_;
}
static MoveData m142(){
StatusMoveData m1105statusMoveData_ = Instances.newStatusMoveData();
m1105statusMoveData_.setPp(20);
StringList m1105stringList_=new StringList(new CollCapacity(1));
m1105stringList_.add(I_NORMAL);
m1105statusMoveData_.setTypes(m1105stringList_);
m1105stringList_=new StringList(new CollCapacity(1));
m1105stringList_.add(I_NORMAL);
m1105statusMoveData_.setBoostedTypes(m1105stringList_);
m1105statusMoveData_.setPriority(5);
m1105statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1105custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectAlly m1105effectAlly_=Instances.newEffectAlly();
m1105effectAlly_.setMultAllyDamage(Rate.newRate(R_3_2));
m1105effectAlly_.setTargetChoice(TargetChoice.ALLIE);
m1105effectAlly_.setFail(V_PAS_PARTENAIRE_TERRAIN);
m1105custListEffect_.add(m1105effectAlly_);
m1105statusMoveData_.setEffects(m1105custListEffect_);
m1105statusMoveData_.setStoppableMoveMulti(true);
m1105statusMoveData_.setStoppableMovePrio(true);
m1105statusMoveData_.setIgnVarAccurUserNeg(true);
m1105statusMoveData_.setIgnVarEvasTargetPos(true);
m1105statusMoveData_.setTargetChoice(TargetChoice.ALLIE);
return m1105statusMoveData_;
}
static MoveData m143(){
DamagingMoveData m1106damagingMoveData_ = Instances.newDamagingMoveData();
m1106damagingMoveData_.setCategory(I_PHYSIQUE);
m1106damagingMoveData_.setDirect(true);
m1106damagingMoveData_.setStoppableMoveKoSingle(true);
m1106damagingMoveData_.setPp(5);
StringList m1106stringList_=new StringList(new CollCapacity(1));
m1106stringList_.add(I_FEU);
m1106damagingMoveData_.setTypes(m1106stringList_);
m1106stringList_=new StringList(new CollCapacity(1));
m1106stringList_.add(I_FEU);
m1106damagingMoveData_.setBoostedTypes(m1106stringList_);
m1106damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1106custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1106effectDamage_=newEffectDamage();
m1106effectDamage_.setPower(R_180);
m1106effectDamage_.setUserAttack(true);
m1106effectDamage_.setStatisAtt(Statistic.ATTACK);
m1106effectDamage_.setTargetDefense(true);
m1106effectDamage_.setStatisDef(Statistic.DEFENSE);
m1106effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1106custListEffect_.add(m1106effectDamage_);
EffectStatistic m1106effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1106enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(3));
m1106enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-1L);
m1106enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m1106enumMapStatisticByte_.addEntry(Statistic.SPEED,-1L);
m1106effectStatistic_.setStatisVarRank(m1106enumMapStatisticByte_);
IdMap<Statistic,String> m1106enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(3));
m1106enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_LANCEUR_CLONE+GT+R_0);
m1106enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_LANCEUR_CLONE+GT+R_0);
m1106enumMapStatisticString_.addEntry(Statistic.SPEED,V_LANCEUR_CLONE+GT+R_0);
m1106effectStatistic_.setLocalFailStatis(m1106enumMapStatisticString_);
m1106effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1106effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m1106ints_=new Ints(new CollCapacity(1));
m1106ints_.add(0);
m1106effectStatistic_.setRequiredSuccessfulEffects(m1106ints_);
m1106custListEffect_.add(m1106effectStatistic_);
m1106damagingMoveData_.setEffects(m1106custListEffect_);
m1106damagingMoveData_.setStoppableMoveSolo(true);
m1106damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1106damagingMoveData_;
}
static MoveData m144(){
DamagingMoveData m1107damagingMoveData_ = Instances.newDamagingMoveData();
m1107damagingMoveData_.setCategory(I_SPECIALE);
m1107damagingMoveData_.setStoppableMoveKoSingle(true);
m1107damagingMoveData_.setPp(10);
StringList m1107stringList_=new StringList(new CollCapacity(1));
m1107stringList_.add(I_POISON);
m1107damagingMoveData_.setTypes(m1107stringList_);
m1107stringList_=new StringList(new CollCapacity(1));
m1107stringList_.add(I_POISON);
m1107damagingMoveData_.setBoostedTypes(m1107stringList_);
m1107damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1107custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1107effectDamage_=newEffectDamage();
m1107effectDamage_.setPower(R_95+OM+LP+R_2+OM+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_PLONGEE+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m1107effectDamage_.setUserAttack(true);
m1107effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1107effectDamage_.setTargetDefense(true);
m1107effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1107effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1107custListEffect_.add(m1107effectDamage_);
EffectStatus m1107effectStatus_=Instances.newEffectStatus();
MonteCarloString m1107monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1107monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1107monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m1107effectStatus_.setLawStatus(m1107monteCarloString_);
StringMap<String> m1107stringMapString_=new StringMap<String>(new CollCapacity(1));
m1107stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1107effectStatus_.setLocalFailStatus(m1107stringMapString_);
m1107effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m1107ints_=new Ints(new CollCapacity(1));
m1107ints_.add(0);
m1107effectStatus_.setRequiredSuccessfulEffects(m1107ints_);
m1107custListEffect_.add(m1107effectStatus_);
m1107damagingMoveData_.setEffects(m1107custListEffect_);
m1107damagingMoveData_.setStoppableMoveSolo(true);
m1107damagingMoveData_.setStoppableMoveMulti(true);
m1107stringList_=new StringList(new CollCapacity(1));
m1107stringList_.add(I_PLONGEE);
m1107damagingMoveData_.setAchieveDisappearedPkUsingMove(m1107stringList_);
m1107damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1107damagingMoveData_;
}
static MoveData m145(){
DamagingMoveData m1108damagingMoveData_ = Instances.newDamagingMoveData();
m1108damagingMoveData_.setCategory(I_PHYSIQUE);
m1108damagingMoveData_.setDirect(true);
m1108damagingMoveData_.setStoppableMoveKoSingle(true);
m1108damagingMoveData_.setPp(25);
StringList m1108stringList_=new StringList(new CollCapacity(1));
m1108stringList_.add(I_PSY);
m1108damagingMoveData_.setTypes(m1108stringList_);
m1108stringList_=new StringList(new CollCapacity(1));
m1108stringList_.add(I_PSY);
m1108damagingMoveData_.setBoostedTypes(m1108stringList_);
m1108damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1108custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1108effectDamage_=newEffectDamage();
m1108effectDamage_.setPower(R_60);
m1108effectDamage_.setUserAttack(true);
m1108effectDamage_.setStatisAtt(Statistic.ATTACK);
m1108effectDamage_.setTargetDefense(true);
m1108effectDamage_.setStatisDef(Statistic.DEFENSE);
m1108effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1108custListEffect_.add(m1108effectDamage_);
EffectStatus m1108effectStatus_=Instances.newEffectStatus();
MonteCarloString m1108monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1108monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1108monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m1108effectStatus_.setLawStatus(m1108monteCarloString_);
StringMap<String> m1108stringMapString_=new StringMap<String>(new CollCapacity(1));
m1108stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1108effectStatus_.setLocalFailStatus(m1108stringMapString_);
m1108effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m1108ints_=new Ints(new CollCapacity(1));
m1108ints_.add(0);
m1108effectStatus_.setRequiredSuccessfulEffects(m1108ints_);
m1108custListEffect_.add(m1108effectStatus_);
m1108damagingMoveData_.setEffects(m1108custListEffect_);
m1108damagingMoveData_.setStoppableMoveSolo(true);
m1108damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1108damagingMoveData_;
}
static MoveData m146(){
DamagingMoveData m1109damagingMoveData_ = Instances.newDamagingMoveData();
m1109damagingMoveData_.setCategory(I_PHYSIQUE);
m1109damagingMoveData_.setDirect(true);
m1109damagingMoveData_.setStoppableMoveKoSingle(true);
m1109damagingMoveData_.setPp(15);
StringList m1109stringList_=new StringList(new CollCapacity(1));
m1109stringList_.add(I_POISON);
m1109damagingMoveData_.setTypes(m1109stringList_);
m1109stringList_=new StringList(new CollCapacity(1));
m1109stringList_.add(I_POISON);
m1109damagingMoveData_.setBoostedTypes(m1109stringList_);
m1109damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1109custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1109effectDamage_=newEffectDamage();
m1109effectDamage_.setPower(R_50);
m1109effectDamage_.setUserAttack(true);
m1109effectDamage_.setStatisAtt(Statistic.ATTACK);
m1109effectDamage_.setTargetDefense(true);
m1109effectDamage_.setStatisDef(Statistic.DEFENSE);
m1109effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1109custListEffect_.add(m1109effectDamage_);
EffectStatus m1109effectStatus_=Instances.newEffectStatus();
MonteCarloString m1109monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1109monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1109monteCarloString_.addQuickEvent(I_POISON_GRAVE,LgInt.newLgInt(R_3));
m1109effectStatus_.setLawStatus(m1109monteCarloString_);
StringMap<String> m1109stringMapString_=new StringMap<String>(new CollCapacity(1));
m1109stringMapString_.addEntry(I_POISON_GRAVE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1109effectStatus_.setLocalFailStatus(m1109stringMapString_);
m1109effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1109ints_=new Ints(new CollCapacity(1));
m1109ints_.add(0);
m1109effectStatus_.setRequiredSuccessfulEffects(m1109ints_);
m1109custListEffect_.add(m1109effectStatus_);
m1109damagingMoveData_.setEffects(m1109custListEffect_);
m1109damagingMoveData_.setStoppableMoveSolo(true);
m1109damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1109damagingMoveData_;
}
static MoveData m147(){
StatusMoveData m1110statusMoveData_ = Instances.newStatusMoveData();
m1110statusMoveData_.setCounterableMove(true);
m1110statusMoveData_.setPp(20);
StringList m1110stringList_=new StringList(new CollCapacity(1));
m1110stringList_.add(I_TENEBRE);
m1110statusMoveData_.setTypes(m1110stringList_);
m1110stringList_=new StringList(new CollCapacity(1));
m1110stringList_.add(I_TENEBRE);
m1110statusMoveData_.setBoostedTypes(m1110stringList_);
m1110statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1110custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1110effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1110enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1110enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-2L);
m1110effectStatistic_.setStatisVarRank(m1110enumMapStatisticByte_);
IdMap<Statistic,String> m1110enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1110enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1110effectStatistic_.setLocalFailStatis(m1110enumMapStatisticString_);
m1110effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1110effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m1110custListEffect_.add(m1110effectStatistic_);
m1110statusMoveData_.setEffects(m1110custListEffect_);
m1110statusMoveData_.setStoppableMoveSolo(true);
m1110statusMoveData_.setStoppableMoveMulti(true);
m1110statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1110statusMoveData_;
}
static MoveData m148(){
DamagingMoveData m1111damagingMoveData_ = Instances.newDamagingMoveData();
m1111damagingMoveData_.setCategory(I_PHYSIQUE);
m1111damagingMoveData_.setDirect(true);
m1111damagingMoveData_.setStoppableMoveKoSingle(true);
m1111damagingMoveData_.setPp(15);
StringList m1111stringList_=new StringList(new CollCapacity(1));
m1111stringList_.add(I_ELECTRIQUE);
m1111damagingMoveData_.setTypes(m1111stringList_);
m1111stringList_=new StringList(new CollCapacity(1));
m1111stringList_.add(I_ELECTRIQUE);
m1111damagingMoveData_.setBoostedTypes(m1111stringList_);
m1111damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1111custListEffect_ = new CustList<Effect>(new CollCapacity(3));
EffectDamage m1111effectDamage_=newEffectDamage();
m1111effectDamage_.setPower(R_65);
m1111effectDamage_.setUserAttack(true);
m1111effectDamage_.setStatisAtt(Statistic.ATTACK);
m1111effectDamage_.setTargetDefense(true);
m1111effectDamage_.setStatisDef(Statistic.DEFENSE);
m1111effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1111custListEffect_.add(m1111effectDamage_);
EffectStatus m1111effectStatus_=Instances.newEffectStatus();
MonteCarloString m1111monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1111monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1111monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m1111effectStatus_.setLawStatus(m1111monteCarloString_);
StringMap<String> m1111stringMapString_=new StringMap<String>(new CollCapacity(1));
m1111stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_ELECTRIQUE+RB+RP+RP+GT+R_0);
m1111effectStatus_.setLocalFailStatus(m1111stringMapString_);
m1111effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1111ints_=new Ints(new CollCapacity(1));
m1111ints_.add(0);
m1111effectStatus_.setRequiredSuccessfulEffects(m1111ints_);
m1111custListEffect_.add(m1111effectStatus_);
m1111effectStatus_=Instances.newEffectStatus();
m1111monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1111monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1111monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1111effectStatus_.setLawStatus(m1111monteCarloString_);
m1111stringMapString_=new StringMap<String>(new CollCapacity(1));
m1111stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1111effectStatus_.setLocalFailStatus(m1111stringMapString_);
m1111effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1111ints_=new Ints(new CollCapacity(1));
m1111ints_.add(0);
m1111effectStatus_.setRequiredSuccessfulEffects(m1111ints_);
m1111custListEffect_.add(m1111effectStatus_);
m1111damagingMoveData_.setEffects(m1111custListEffect_);
m1111damagingMoveData_.setStoppableMoveSolo(true);
m1111damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1111damagingMoveData_;
}
static MoveData m149(){
DamagingMoveData m1112damagingMoveData_ = Instances.newDamagingMoveData();
m1112damagingMoveData_.setCategory(I_PHYSIQUE);
m1112damagingMoveData_.setDirect(true);
m1112damagingMoveData_.setStoppableMoveKoSingle(true);
m1112damagingMoveData_.setPp(15);
StringList m1112stringList_=new StringList(new CollCapacity(1));
m1112stringList_.add(I_FEU);
m1112damagingMoveData_.setTypes(m1112stringList_);
m1112stringList_=new StringList(new CollCapacity(1));
m1112stringList_.add(I_FEU);
m1112damagingMoveData_.setBoostedTypes(m1112stringList_);
m1112damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1112custListEffect_ = new CustList<Effect>(new CollCapacity(3));
EffectDamage m1112effectDamage_=newEffectDamage();
m1112effectDamage_.setPower(R_65);
m1112effectDamage_.setUserAttack(true);
m1112effectDamage_.setStatisAtt(Statistic.ATTACK);
m1112effectDamage_.setTargetDefense(true);
m1112effectDamage_.setStatisDef(Statistic.DEFENSE);
m1112effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1112custListEffect_.add(m1112effectDamage_);
EffectStatus m1112effectStatus_=Instances.newEffectStatus();
MonteCarloString m1112monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1112monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1112monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m1112effectStatus_.setLawStatus(m1112monteCarloString_);
StringMap<String> m1112stringMapString_=new StringMap<String>(new CollCapacity(1));
m1112stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m1112effectStatus_.setLocalFailStatus(m1112stringMapString_);
m1112effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1112ints_=new Ints(new CollCapacity(1));
m1112ints_.add(0);
m1112effectStatus_.setRequiredSuccessfulEffects(m1112ints_);
m1112custListEffect_.add(m1112effectStatus_);
m1112effectStatus_=Instances.newEffectStatus();
m1112monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1112monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1112monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1112effectStatus_.setLawStatus(m1112monteCarloString_);
m1112stringMapString_=new StringMap<String>(new CollCapacity(1));
m1112stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1112effectStatus_.setLocalFailStatus(m1112stringMapString_);
m1112effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1112ints_=new Ints(new CollCapacity(1));
m1112ints_.add(0);
m1112effectStatus_.setRequiredSuccessfulEffects(m1112ints_);
m1112custListEffect_.add(m1112effectStatus_);
m1112damagingMoveData_.setEffects(m1112custListEffect_);
m1112damagingMoveData_.setStoppableMoveSolo(true);
m1112damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1112damagingMoveData_;
}
}
