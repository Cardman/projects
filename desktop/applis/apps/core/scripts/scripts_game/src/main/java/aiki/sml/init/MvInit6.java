package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit6 extends CstIgame{
private MvInit6(){}
static MoveData m150(){
DamagingMoveData m1115damagingMoveData_ = Instances.newDamagingMoveData();
m1115damagingMoveData_.setCategory(I_PHYSIQUE);
m1115damagingMoveData_.setDirect(true);
m1115damagingMoveData_.setStoppableMoveKoSingle(true);
m1115damagingMoveData_.setPp(15);
StringList m1115stringList_=new StringList(new CollCapacity(1));
m1115stringList_.add(I_GLACE);
m1115damagingMoveData_.setTypes(m1115stringList_);
m1115stringList_=new StringList(new CollCapacity(1));
m1115stringList_.add(I_GLACE);
m1115damagingMoveData_.setBoostedTypes(m1115stringList_);
m1115damagingMoveData_.setAccuracy(R_19_20);
CustList<Effect> m1115custListEffect_ = new CustList<Effect>(new CollCapacity(3));
EffectDamage m1115effectDamage_=Instances.newEffectDamage();
m1115effectDamage_.setPower(R_65);
m1115effectDamage_.setUserAttack(true);
m1115effectDamage_.setStatisAtt(Statistic.ATTACK);
m1115effectDamage_.setTargetDefense(true);
m1115effectDamage_.setStatisDef(Statistic.DEFENSE);
m1115effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1115effectDamage_.setFail(ES);
m1115custListEffect_.add(m1115effectDamage_);
EffectStatus m1115effectStatus_=Instances.newEffectStatus();
MonteCarloString m1115monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1115monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1115monteCarloString_.addQuickEvent(I_GEL,LgInt.newLgInt(R_1));
m1115effectStatus_.setLawStatus(m1115monteCarloString_);
StringMap<String> m1115stringMapString_=new StringMap<String>(new CollCapacity(1));
m1115stringMapString_.addEntry(I_GEL,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_GEL+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_GLACE+RB+RP+RP+GT+R_0);
m1115effectStatus_.setLocalFailStatus(m1115stringMapString_);
m1115effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1115effectStatus_.setFail(ES);
Ints m1115ints_=new Ints(new CollCapacity(1));
m1115ints_.add(0);
m1115effectStatus_.setRequiredSuccessfulEffects(m1115ints_);
m1115custListEffect_.add(m1115effectStatus_);
m1115effectStatus_=Instances.newEffectStatus();
m1115monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1115monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1115monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1115effectStatus_.setLawStatus(m1115monteCarloString_);
m1115stringMapString_=new StringMap<String>(new CollCapacity(1));
m1115stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1115effectStatus_.setLocalFailStatus(m1115stringMapString_);
m1115effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1115effectStatus_.setFail(ES);
m1115ints_=new Ints(new CollCapacity(1));
m1115ints_.add(0);
m1115effectStatus_.setRequiredSuccessfulEffects(m1115ints_);
m1115custListEffect_.add(m1115effectStatus_);
m1115damagingMoveData_.setEffects(m1115custListEffect_);
m1115damagingMoveData_.setStoppableMoveSolo(true);
m1115damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1115damagingMoveData_;
}
static MoveData m151(){
DamagingMoveData m1116damagingMoveData_ = Instances.newDamagingMoveData();
m1116damagingMoveData_.setCategory(I_PHYSIQUE);
m1116damagingMoveData_.setDirect(true);
m1116damagingMoveData_.setStoppableMoveKoSingle(true);
m1116damagingMoveData_.setPp(15);
StringList m1116stringList_=new StringList(new CollCapacity(1));
m1116stringList_.add(I_NORMAL);
m1116damagingMoveData_.setTypes(m1116stringList_);
m1116stringList_=new StringList(new CollCapacity(1));
m1116stringList_.add(I_NORMAL);
m1116damagingMoveData_.setBoostedTypes(m1116stringList_);
m1116damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1116custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1116effectDamage_=Instances.newEffectDamage();
m1116effectDamage_.setPower(R_80);
m1116effectDamage_.setUserAttack(true);
m1116effectDamage_.setStatisAtt(Statistic.ATTACK);
m1116effectDamage_.setTargetDefense(true);
m1116effectDamage_.setStatisDef(Statistic.DEFENSE);
m1116effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1116effectDamage_.setFail(ES);
m1116custListEffect_.add(m1116effectDamage_);
EffectStatus m1116effectStatus_=Instances.newEffectStatus();
MonteCarloString m1116monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1116monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1116monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1116effectStatus_.setLawStatus(m1116monteCarloString_);
StringMap<String> m1116stringMapString_=new StringMap<String>(new CollCapacity(1));
m1116stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1116effectStatus_.setLocalFailStatus(m1116stringMapString_);
m1116effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1116effectStatus_.setFail(ES);
Ints m1116ints_=new Ints(new CollCapacity(1));
m1116ints_.add(0);
m1116effectStatus_.setRequiredSuccessfulEffects(m1116ints_);
m1116custListEffect_.add(m1116effectStatus_);
m1116damagingMoveData_.setEffects(m1116custListEffect_);
m1116damagingMoveData_.setStoppableMoveSolo(true);
m1116damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1116damagingMoveData_;
}
static MoveData m152(){
DamagingMoveData m1117damagingMoveData_ = Instances.newDamagingMoveData();
m1117damagingMoveData_.setCategory(I_PHYSIQUE);
m1117damagingMoveData_.setDirect(true);
m1117damagingMoveData_.setStoppableMoveKoSingle(true);
m1117damagingMoveData_.setPp(10);
StringList m1117stringList_=new StringList(new CollCapacity(1));
m1117stringList_.add(I_NORMAL);
m1117damagingMoveData_.setTypes(m1117stringList_);
m1117stringList_=new StringList(new CollCapacity(1));
m1117stringList_.add(I_NORMAL);
m1117damagingMoveData_.setBoostedTypes(m1117stringList_);
m1117damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1117custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1117effectDamage_=Instances.newEffectDamage();
MonteCarloString m1117monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1117monteCarloString_.addQuickEvent(A_DIV+LP+V_CIBLE_PV_RESTANTS+OC+R_2+RP,LgInt.newLgInt(R_1));
m1117effectDamage_.setDamageLaw(m1117monteCarloString_);
m1117effectDamage_.setPower(ES);
m1117effectDamage_.setUserAttack(true);
m1117effectDamage_.setStatisAtt(Statistic.ATTACK);
m1117effectDamage_.setTargetDefense(true);
m1117effectDamage_.setStatisDef(Statistic.DEFENSE);
m1117effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1117effectDamage_.setFail(ES);
m1117custListEffect_.add(m1117effectDamage_);
m1117damagingMoveData_.setEffects(m1117custListEffect_);
m1117damagingMoveData_.setStoppableMoveSolo(true);
m1117damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1117damagingMoveData_;
}
static MoveData m153(){
StatusMoveData m1118statusMoveData_ = Instances.newStatusMoveData();
m1118statusMoveData_.setThievableMove(true);
m1118statusMoveData_.setPp(40);
StringList m1118stringList_=new StringList(new CollCapacity(1));
m1118stringList_.add(I_NORMAL);
m1118statusMoveData_.setTypes(m1118stringList_);
m1118stringList_=new StringList(new CollCapacity(1));
m1118stringList_.add(I_NORMAL);
m1118statusMoveData_.setBoostedTypes(m1118stringList_);
m1118statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1118custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1118effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1118enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1118enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1);
m1118effectStatistic_.setStatisVarRank(m1118enumMapStatisticByte_);
m1118effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1118effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1118effectStatistic_.setFail(ES);
m1118custListEffect_.add(m1118effectStatistic_);
m1118statusMoveData_.setEffects(m1118custListEffect_);
m1118statusMoveData_.setStoppableMoveMulti(true);
m1118statusMoveData_.setIgnVarAccurUserNeg(true);
m1118statusMoveData_.setIgnVarEvasTargetPos(true);
m1118statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1118statusMoveData_;
}
static MoveData m154(){
DamagingMoveData m1119damagingMoveData_ = Instances.newDamagingMoveData();
m1119damagingMoveData_.setCategory(I_PHYSIQUE);
m1119damagingMoveData_.setDirect(true);
m1119damagingMoveData_.setStoppableMoveKoSingle(true);
m1119damagingMoveData_.setPp(35);
StringList m1119stringList_=new StringList(new CollCapacity(1));
m1119stringList_.add(I_VOL);
m1119damagingMoveData_.setTypes(m1119stringList_);
m1119stringList_=new StringList(new CollCapacity(1));
m1119stringList_.add(I_VOL);
m1119damagingMoveData_.setBoostedTypes(m1119stringList_);
m1119damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1119custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1119effectDamage_=Instances.newEffectDamage();
m1119effectDamage_.setPower(R_60);
m1119effectDamage_.setUserAttack(true);
m1119effectDamage_.setStatisAtt(Statistic.ATTACK);
m1119effectDamage_.setTargetDefense(true);
m1119effectDamage_.setStatisDef(Statistic.DEFENSE);
m1119effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1119effectDamage_.setFail(ES);
m1119custListEffect_.add(m1119effectDamage_);
m1119damagingMoveData_.setEffects(m1119custListEffect_);
m1119damagingMoveData_.setStoppableMoveSolo(true);
m1119damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1119damagingMoveData_;
}
static MoveData m155(){
DamagingMoveData m1120damagingMoveData_ = Instances.newDamagingMoveData();
m1120damagingMoveData_.setCategory(I_SPECIALE);
m1120damagingMoveData_.setStoppableMoveKoSingle(true);
m1120damagingMoveData_.setPp(20);
StringList m1120stringList_=new StringList(new CollCapacity(1));
m1120stringList_.add(I_NORMAL);
m1120damagingMoveData_.setTypes(m1120stringList_);
m1120stringList_=new StringList(new CollCapacity(1));
m1120stringList_.add(I_NORMAL);
m1120damagingMoveData_.setBoostedTypes(m1120stringList_);
m1120damagingMoveData_.setPriority(-6);
m1120damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1120custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1120effectDamage_=Instances.newEffectDamage();
m1120effectDamage_.setPower(R_40+OM+LP+R_2+OM+A_CARACFERME+LP+A_INCLUSNUM+LP+LB+V_CIBLE_ATTAQUE_CHOISIE+RB+OC+LB+I_ENVOL+OS+I_REBOND+OS+I_CHUTE_LIBRE+RB+RP+OM+V_CIBLE_DISPARAIT+OC+R_1+OC+R_1+RP+OP+A_CARACFERME+LP+V_CIBLE_DISPARAIT+OC+R_0+OC+R_0+RP+RP);
m1120effectDamage_.setUserAttack(true);
m1120effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1120effectDamage_.setTargetDefense(true);
m1120effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1120effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1120effectDamage_.setFail(ES);
m1120custListEffect_.add(m1120effectDamage_);
m1120damagingMoveData_.setEffects(m1120custListEffect_);
m1120damagingMoveData_.setStoppableMoveSolo(true);
m1120damagingMoveData_.setStoppableMovePrio(true);
m1120damagingMoveData_.setSwitchType(SwitchType.CIBLE);
m1120damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1120damagingMoveData_;
}
static MoveData m156(){
DamagingMoveData m1121damagingMoveData_ = Instances.newDamagingMoveData();
m1121damagingMoveData_.setCategory(I_PHYSIQUE);
m1121damagingMoveData_.setDirect(true);
m1121damagingMoveData_.setStoppableMoveKoSingle(true);
m1121damagingMoveData_.setPp(15);
StringList m1121stringList_=new StringList(new CollCapacity(1));
m1121stringList_.add(I_NORMAL);
m1121damagingMoveData_.setTypes(m1121stringList_);
m1121stringList_=new StringList(new CollCapacity(1));
m1121stringList_.add(I_NORMAL);
m1121damagingMoveData_.setBoostedTypes(m1121stringList_);
m1121damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1121custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1121effectDamage_=Instances.newEffectDamage();
m1121effectDamage_.setPower(R_120);
m1121effectDamage_.setUserAttack(true);
m1121effectDamage_.setStatisAtt(Statistic.ATTACK);
m1121effectDamage_.setTargetDefense(true);
m1121effectDamage_.setStatisDef(Statistic.DEFENSE);
m1121effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1121effectDamage_.setFail(ES);
m1121custListEffect_.add(m1121effectDamage_);
EffectDamageRate m1121effectDamageRate_=Instances.newEffectDamageRate();
m1121effectDamageRate_.setRateDamage(Rate.newRate(OD+R_1_3));
m1121effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
m1121effectDamageRate_.setFail(ES);
Ints m1121ints_=new Ints(new CollCapacity(1));
m1121ints_.add(0);
m1121effectDamageRate_.setRequiredSuccessfulEffects(m1121ints_);
m1121custListEffect_.add(m1121effectDamageRate_);
m1121damagingMoveData_.setEffects(m1121custListEffect_);
m1121damagingMoveData_.setStoppableMoveSolo(true);
m1121damagingMoveData_.setStoppableMoveMulti(true);
m1121damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1121damagingMoveData_;
}
static MoveData m157(){
DamagingMoveData m1122damagingMoveData_ = Instances.newDamagingMoveData();
m1122damagingMoveData_.setCategory(I_SPECIALE);
m1122damagingMoveData_.setStoppableMoveKoSingle(true);
m1122damagingMoveData_.setPp(15);
StringList m1122stringList_=new StringList(new CollCapacity(1));
m1122stringList_.add(I_FEU);
m1122damagingMoveData_.setTypes(m1122stringList_);
m1122stringList_=new StringList(new CollCapacity(1));
m1122stringList_.add(I_FEU);
m1122damagingMoveData_.setBoostedTypes(m1122stringList_);
m1122damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m1122custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1122effectDamage_=Instances.newEffectDamage();
m1122effectDamage_.setPower(R_35);
m1122effectDamage_.setUserAttack(true);
m1122effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1122effectDamage_.setTargetDefense(true);
m1122effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1122effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1122effectDamage_.setFail(ES);
m1122custListEffect_.add(m1122effectDamage_);
EffectEndRoundSingleRelation m1122effectEndRoundSingleRelation_=Instances.newEffectEndRoundSingleRelation();
LongMap<Rate> m1122longMapRate_=new LongMap<Rate>(new CollCapacity(5));
m1122longMapRate_.addEntry(1L,Rate.newRate(R_1_16));
m1122longMapRate_.addEntry(2L,Rate.newRate(R_1_16));
m1122longMapRate_.addEntry(3L,Rate.newRate(R_1_16));
m1122longMapRate_.addEntry(4L,Rate.newRate(R_1_16));
m1122longMapRate_.addEntry(5L,Rate.newRate(R_1_16));
m1122effectEndRoundSingleRelation_.setRateDamageFunctionOfNbRounds(m1122longMapRate_);
MonteCarloNumber m1122monteCarloNumber_=new MonteCarloNumber(new CollCapacity(4));
m1122monteCarloNumber_.addQuickEvent(Rate.newRate(R_3),LgInt.newLgInt(R_3));
m1122monteCarloNumber_.addQuickEvent(Rate.newRate(R_2),LgInt.newLgInt(R_3));
m1122monteCarloNumber_.addQuickEvent(Rate.newRate(R_4),LgInt.newLgInt(R_1));
m1122monteCarloNumber_.addQuickEvent(Rate.newRate(R_5),LgInt.newLgInt(R_1));
m1122effectEndRoundSingleRelation_.setLawForEnablingEffect(m1122monteCarloNumber_);
m1122effectEndRoundSingleRelation_.setFailEndRound(V_CIBLE_CLONE+GT+R_0);
m1122effectEndRoundSingleRelation_.setEndRoundRank(43);
m1122effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.ADJ_MULT);
m1122effectEndRoundSingleRelation_.setFail(V_CIBLE_CLONE+GT+R_0);
Ints m1122ints_=new Ints(new CollCapacity(1));
m1122ints_.add(0);
m1122effectEndRoundSingleRelation_.setRequiredSuccessfulEffects(m1122ints_);
m1122custListEffect_.add(m1122effectEndRoundSingleRelation_);
m1122damagingMoveData_.setEffects(m1122custListEffect_);
m1122damagingMoveData_.setStoppableMoveSolo(true);
m1122damagingMoveData_.setStoppableMoveMulti(true);
m1122damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1122damagingMoveData_;
}
static MoveData m158(){
StatusMoveData m1123statusMoveData_ = Instances.newStatusMoveData();
m1123statusMoveData_.setThievableMove(true);
m1123statusMoveData_.setPp(20);
StringList m1123stringList_=new StringList(new CollCapacity(1));
m1123stringList_.add(I_DRAGON);
m1123statusMoveData_.setTypes(m1123stringList_);
m1123stringList_=new StringList(new CollCapacity(1));
m1123stringList_.add(I_DRAGON);
m1123statusMoveData_.setBoostedTypes(m1123stringList_);
m1123statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1123custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1123effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1123enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(2));
m1123enumMapStatisticByte_.addEntry(Statistic.ATTACK,1);
m1123enumMapStatisticByte_.addEntry(Statistic.SPEED,1);
m1123effectStatistic_.setStatisVarRank(m1123enumMapStatisticByte_);
m1123effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1123effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1123effectStatistic_.setFail(ES);
m1123custListEffect_.add(m1123effectStatistic_);
m1123statusMoveData_.setEffects(m1123custListEffect_);
m1123statusMoveData_.setStoppableMoveMulti(true);
m1123statusMoveData_.setIgnVarAccurUserNeg(true);
m1123statusMoveData_.setIgnVarEvasTargetPos(true);
m1123statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1123statusMoveData_;
}
static MoveData m159(){
DamagingMoveData m1124damagingMoveData_ = Instances.newDamagingMoveData();
m1124damagingMoveData_.setCategory(I_SPECIALE);
m1124damagingMoveData_.setStoppableMoveKoSingle(true);
m1124damagingMoveData_.setPp(10);
StringList m1124stringList_=new StringList(new CollCapacity(1));
m1124stringList_.add(I_FEU);
m1124damagingMoveData_.setTypes(m1124stringList_);
m1124stringList_=new StringList(new CollCapacity(1));
m1124stringList_.add(I_FEU);
m1124damagingMoveData_.setBoostedTypes(m1124stringList_);
m1124damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1124custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1124effectDamage_=Instances.newEffectDamage();
m1124effectDamage_.setPower(R_80);
m1124effectDamage_.setUserAttack(true);
m1124effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1124effectDamage_.setTargetDefense(true);
m1124effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1124effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1124effectDamage_.setFail(ES);
m1124custListEffect_.add(m1124effectDamage_);
EffectStatistic m1124effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1124enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1124enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,1);
m1124effectStatistic_.setStatisVarRank(m1124enumMapStatisticByte_);
m1124effectStatistic_.setEvtRate(Rate.newRate(R_1_2));
m1124effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1124effectStatistic_.setFail(ES);
Ints m1124ints_=new Ints(new CollCapacity(1));
m1124ints_.add(0);
m1124effectStatistic_.setRequiredSuccessfulEffects(m1124ints_);
m1124custListEffect_.add(m1124effectStatistic_);
m1124damagingMoveData_.setEffects(m1124custListEffect_);
m1124damagingMoveData_.setStoppableMoveSolo(true);
m1124damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1124damagingMoveData_;
}
static MoveData m160(){
DamagingMoveData m1125damagingMoveData_ = Instances.newDamagingMoveData();
m1125damagingMoveData_.setCategory(I_SPECIALE);
m1125damagingMoveData_.setDirect(true);
m1125damagingMoveData_.setStoppableMoveKoSingle(true);
m1125damagingMoveData_.setPp(20);
StringList m1125stringList_=new StringList(new CollCapacity(1));
m1125stringList_.add(I_PLANTE);
m1125damagingMoveData_.setTypes(m1125stringList_);
m1125stringList_=new StringList(new CollCapacity(1));
m1125stringList_.add(I_PLANTE);
m1125damagingMoveData_.setBoostedTypes(m1125stringList_);
m1125damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1125custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1125effectDamage_=Instances.newEffectDamage();
m1125effectDamage_.setPower(R_120);
m1125effectDamage_.setUserAttack(true);
m1125effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1125effectDamage_.setTargetDefense(true);
m1125effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1125effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1125effectDamage_.setFail(ES);
m1125custListEffect_.add(m1125effectDamage_);
m1125damagingMoveData_.setEffects(m1125custListEffect_);
m1125damagingMoveData_.setRankIncrementNbRound(17);
m1125damagingMoveData_.setConstUserChoice(true);
m1125damagingMoveData_.setStoppableMoveSolo(true);
m1125damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1125damagingMoveData_;
}
static MoveData m161(){
StatusMoveData m1126statusMoveData_ = Instances.newStatusMoveData();
m1126statusMoveData_.setCounterableMove(true);
m1126statusMoveData_.setPp(20);
StringList m1126stringList_=new StringList(new CollCapacity(1));
m1126stringList_.add(I_NORMAL);
m1126statusMoveData_.setTypes(m1126stringList_);
m1126stringList_=new StringList(new CollCapacity(1));
m1126stringList_.add(I_NORMAL);
m1126statusMoveData_.setBoostedTypes(m1126stringList_);
m1126statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1126custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m1126effectStatus_=Instances.newEffectStatus();
MonteCarloString m1126monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1126monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m1126effectStatus_.setLawStatus(m1126monteCarloString_);
StringMap<String> m1126stringMapString_=new StringMap<String>(new CollCapacity(1));
m1126stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1126effectStatus_.setLocalFailStatus(m1126stringMapString_);
m1126effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1126effectStatus_.setFail(ES);
m1126custListEffect_.add(m1126effectStatus_);
m1126statusMoveData_.setEffects(m1126custListEffect_);
m1126statusMoveData_.setStoppableMoveSolo(true);
m1126statusMoveData_.setStoppableMoveMulti(true);
m1126statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1126statusMoveData_;
}
static MoveData m162(){
StatusMoveData m1127statusMoveData_ = Instances.newStatusMoveData();
m1127statusMoveData_.setThievableMove(true);
m1127statusMoveData_.setPp(30);
StringList m1127stringList_=new StringList(new CollCapacity(1));
m1127stringList_.add(I_NORMAL);
m1127statusMoveData_.setTypes(m1127stringList_);
m1127stringList_=new StringList(new CollCapacity(1));
m1127stringList_.add(I_NORMAL);
m1127statusMoveData_.setBoostedTypes(m1127stringList_);
m1127statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1127custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1127effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1127enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1127enumMapStatisticByte_.addEntry(Statistic.ATTACK,2);
m1127effectStatistic_.setStatisVarRank(m1127enumMapStatisticByte_);
m1127effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1127effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
m1127effectStatistic_.setFail(ES);
m1127custListEffect_.add(m1127effectStatistic_);
m1127statusMoveData_.setEffects(m1127custListEffect_);
m1127statusMoveData_.setStoppableMoveMulti(true);
m1127statusMoveData_.setIgnVarAccurUserNeg(true);
m1127statusMoveData_.setIgnVarEvasTargetPos(true);
m1127statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1127statusMoveData_;
}
static MoveData m163(){
StatusMoveData m1128statusMoveData_ = Instances.newStatusMoveData();
m1128statusMoveData_.setPp(10);
StringList m1128stringList_=new StringList(new CollCapacity(1));
m1128stringList_.add(I_PSY);
m1128statusMoveData_.setTypes(m1128stringList_);
m1128stringList_=new StringList(new CollCapacity(1));
m1128stringList_.add(I_PSY);
m1128statusMoveData_.setBoostedTypes(m1128stringList_);
m1128statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1128custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m1128effectStatus_=Instances.newEffectStatus();
m1128effectStatus_.setKoUserHealSubst(true);
m1128effectStatus_.setTargetChoice(TargetChoice.LANCEUR);
m1128effectStatus_.setFail(ES);
m1128custListEffect_.add(m1128effectStatus_);
m1128statusMoveData_.setEffects(m1128custListEffect_);
m1128statusMoveData_.setStoppableMoveMulti(true);
m1128statusMoveData_.setIgnVarAccurUserNeg(true);
m1128statusMoveData_.setIgnVarEvasTargetPos(true);
m1128statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1128statusMoveData_;
}
static MoveData m164(){
StatusMoveData m1129statusMoveData_ = Instances.newStatusMoveData();
m1129statusMoveData_.setPp(5);
StringList m1129stringList_=new StringList(new CollCapacity(1));
m1129stringList_.add(I_EAU);
m1129statusMoveData_.setTypes(m1129stringList_);
m1129stringList_=new StringList(new CollCapacity(1));
m1129stringList_.add(I_EAU);
m1129statusMoveData_.setBoostedTypes(m1129stringList_);
m1129statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1129custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectGlobal m1129effectGlobal_=Instances.newEffectGlobal();
m1129effectGlobal_.setWeather(true);
m1129effectGlobal_.setMultAccuracy(Rate.newRate(R_0));
m1129effectGlobal_.setDamageEndRound(Rate.newRate(R_0));
m1129effectGlobal_.setHealingEndRound(Rate.newRate(R_0));
m1129effectGlobal_.setHealingEndRoundGround(Rate.newRate(R_0));
m1129effectGlobal_.setMultEffectLovingAlly(Rate.newRate(R_0));
m1129stringList_=new StringList(new CollCapacity(2));
m1129stringList_.add(I_GRELE);
m1129stringList_.add(I_TEMPETESABLE);
m1129effectGlobal_.setCancelEffects(m1129stringList_);
StringMap<Rate> m1129stringMapRate_=new StringMap<Rate>(new CollCapacity(2));
m1129stringMapRate_.addEntry(I_EAU,Rate.newRate(R_3_2));
m1129stringMapRate_.addEntry(I_FEU,Rate.newRate(R_1_2));
m1129effectGlobal_.setMultDamageTypesMoves(m1129stringMapRate_);
m1129effectGlobal_.setInvokedMoveTerrain(ES);
m1129effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1129effectGlobal_.setFail(ES);
m1129custListEffect_.add(m1129effectGlobal_);
EffectEndRoundGlobal m1129effectEndRoundGlobal_=Instances.newEffectEndRoundGlobal();
m1129effectEndRoundGlobal_.setFailEndRound(ES);
m1129effectEndRoundGlobal_.setEndRoundRank(34);
m1129effectEndRoundGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1129effectEndRoundGlobal_.setFail(ES);
Ints m1129ints_=new Ints(new CollCapacity(1));
m1129ints_.add(0);
m1129effectEndRoundGlobal_.setRequiredSuccessfulEffects(m1129ints_);
m1129custListEffect_.add(m1129effectEndRoundGlobal_);
m1129statusMoveData_.setEffects(m1129custListEffect_);
m1129statusMoveData_.setRankIncrementNbRound(27);
m1129statusMoveData_.setStoppableMoveMulti(true);
m1129statusMoveData_.setIgnVarAccurUserNeg(true);
m1129statusMoveData_.setIgnVarEvasTargetPos(true);
m1129statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1129statusMoveData_;
}
static MoveData m165(){
StatusMoveData m1130statusMoveData_ = Instances.newStatusMoveData();
m1130statusMoveData_.setCounterableMove(true);
m1130statusMoveData_.setPp(15);
StringList m1130stringList_=new StringList(new CollCapacity(1));
m1130stringList_.add(I_VOL);
m1130statusMoveData_.setTypes(m1130stringList_);
m1130stringList_=new StringList(new CollCapacity(1));
m1130stringList_.add(I_VOL);
m1130statusMoveData_.setBoostedTypes(m1130stringList_);
m1130statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1130custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1130effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Integer> m1130enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1130enumMapStatisticByte_.addEntry(Statistic.ATTACK,-2);
m1130effectStatistic_.setStatisVarRank(m1130enumMapStatisticByte_);
IdMap<Statistic,String> m1130enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1130enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1130effectStatistic_.setLocalFailStatis(m1130enumMapStatisticString_);
m1130effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1130effectStatistic_.setTargetChoice(TargetChoice.ADJ_MULT);
m1130effectStatistic_.setFail(ES);
m1130custListEffect_.add(m1130effectStatistic_);
m1130statusMoveData_.setEffects(m1130custListEffect_);
m1130statusMoveData_.setStoppableMoveSolo(true);
m1130statusMoveData_.setStoppableMoveMulti(true);
m1130statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1130statusMoveData_;
}
static MoveData m166(){
DamagingMoveData m1131damagingMoveData_ = Instances.newDamagingMoveData();
m1131damagingMoveData_.setCategory(I_PHYSIQUE);
m1131damagingMoveData_.setDirect(true);
m1131damagingMoveData_.setStoppableMoveKoSingle(true);
m1131damagingMoveData_.setPp(25);
StringList m1131stringList_=new StringList(new CollCapacity(1));
m1131stringList_.add(I_INSECTE);
m1131damagingMoveData_.setTypes(m1131stringList_);
m1131stringList_=new StringList(new CollCapacity(1));
m1131stringList_.add(I_INSECTE);
m1131damagingMoveData_.setBoostedTypes(m1131stringList_);
m1131damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1131custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1131effectDamage_=Instances.newEffectDamage();
m1131effectDamage_.setPower(R_30);
m1131effectDamage_.setUserAttack(true);
m1131effectDamage_.setStatisAtt(Statistic.ATTACK);
m1131effectDamage_.setTargetDefense(true);
m1131effectDamage_.setStatisDef(Statistic.DEFENSE);
IdMap<Statistic,Integer> m1131enumMapStatisticByte_=new IdMap<Statistic,Integer>(new CollCapacity(1));
m1131enumMapStatisticByte_.addEntry(Statistic.ATTACK,2);
m1131effectDamage_.setBoostStatisOnceKoFoe(m1131enumMapStatisticByte_);
m1131effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1131effectDamage_.setFail(ES);
m1131custListEffect_.add(m1131effectDamage_);
m1131damagingMoveData_.setEffects(m1131custListEffect_);
m1131damagingMoveData_.setStoppableMoveSolo(true);
m1131damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1131damagingMoveData_;
}
static MoveData m167(){
DamagingMoveData m1132damagingMoveData_ = Instances.newDamagingMoveData();
m1132damagingMoveData_.setCategory(I_PHYSIQUE);
m1132damagingMoveData_.setStoppableMoveKoSingle(true);
m1132damagingMoveData_.setPp(20);
StringList m1132stringList_=new StringList(new CollCapacity(1));
m1132stringList_.add(I_INSECTE);
m1132damagingMoveData_.setTypes(m1132stringList_);
m1132stringList_=new StringList(new CollCapacity(1));
m1132stringList_.add(I_INSECTE);
m1132damagingMoveData_.setBoostedTypes(m1132stringList_);
m1132damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m1132custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1132effectDamage_=Instances.newEffectDamage();
m1132effectDamage_.setPower(R_14);
m1132effectDamage_.setUserAttack(true);
m1132effectDamage_.setStatisAtt(Statistic.ATTACK);
m1132effectDamage_.setTargetDefense(true);
m1132effectDamage_.setStatisDef(Statistic.DEFENSE);
m1132effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1132effectDamage_.setFail(ES);
m1132custListEffect_.add(m1132effectDamage_);
m1132damagingMoveData_.setEffects(m1132custListEffect_);
m1132damagingMoveData_.setStoppableMoveSolo(true);
m1132damagingMoveData_.setStoppableMoveMulti(true);
m1132damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1132damagingMoveData_;
}
static MoveData m168(){
DamagingMoveData m1133damagingMoveData_ = Instances.newDamagingMoveData();
m1133damagingMoveData_.setCategory(I_PHYSIQUE);
m1133damagingMoveData_.setStoppableMoveKoSingle(true);
m1133damagingMoveData_.setPp(35);
StringList m1133stringList_=new StringList(new CollCapacity(1));
m1133stringList_.add(I_POISON);
m1133damagingMoveData_.setTypes(m1133stringList_);
m1133stringList_=new StringList(new CollCapacity(1));
m1133stringList_.add(I_POISON);
m1133damagingMoveData_.setBoostedTypes(m1133stringList_);
m1133damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1133custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1133effectDamage_=Instances.newEffectDamage();
m1133effectDamage_.setPower(R_15);
m1133effectDamage_.setUserAttack(true);
m1133effectDamage_.setStatisAtt(Statistic.ATTACK);
m1133effectDamage_.setTargetDefense(true);
m1133effectDamage_.setStatisDef(Statistic.DEFENSE);
m1133effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1133effectDamage_.setFail(ES);
m1133custListEffect_.add(m1133effectDamage_);
EffectStatus m1133effectStatus_=Instances.newEffectStatus();
MonteCarloString m1133monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1133monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1133monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_3));
m1133effectStatus_.setLawStatus(m1133monteCarloString_);
StringMap<String> m1133stringMapString_=new StringMap<String>(new CollCapacity(1));
m1133stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1133effectStatus_.setLocalFailStatus(m1133stringMapString_);
m1133effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1133effectStatus_.setFail(ES);
Ints m1133ints_=new Ints(new CollCapacity(1));
m1133ints_.add(0);
m1133effectStatus_.setRequiredSuccessfulEffects(m1133ints_);
m1133custListEffect_.add(m1133effectStatus_);
m1133damagingMoveData_.setEffects(m1133custListEffect_);
m1133damagingMoveData_.setStoppableMoveSolo(true);
m1133damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1133damagingMoveData_;
}
static MoveData m169(){
DamagingMoveData m1134damagingMoveData_ = Instances.newDamagingMoveData();
m1134damagingMoveData_.setCategory(I_SPECIALE);
m1134damagingMoveData_.setStoppableMoveKoSingle(true);
m1134damagingMoveData_.setPp(5);
StringList m1134stringList_=new StringList(new CollCapacity(1));
m1134stringList_.add(I_FEU);
m1134damagingMoveData_.setTypes(m1134stringList_);
m1134stringList_=new StringList(new CollCapacity(1));
m1134stringList_.add(I_FEU);
m1134damagingMoveData_.setBoostedTypes(m1134stringList_);
m1134damagingMoveData_.setAccuracy(R_17_20);
CustList<Effect> m1134custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1134effectDamage_=Instances.newEffectDamage();
m1134effectDamage_.setPower(R_120);
m1134effectDamage_.setUserAttack(true);
m1134effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1134effectDamage_.setTargetDefense(true);
m1134effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1134effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1134effectDamage_.setFail(ES);
m1134custListEffect_.add(m1134effectDamage_);
EffectStatus m1134effectStatus_=Instances.newEffectStatus();
MonteCarloString m1134monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1134monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_9));
m1134monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m1134effectStatus_.setLawStatus(m1134monteCarloString_);
StringMap<String> m1134stringMapString_=new StringMap<String>(new CollCapacity(1));
m1134stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m1134effectStatus_.setLocalFailStatus(m1134stringMapString_);
m1134effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1134effectStatus_.setFail(ES);
Ints m1134ints_=new Ints(new CollCapacity(1));
m1134ints_.add(0);
m1134effectStatus_.setRequiredSuccessfulEffects(m1134ints_);
m1134custListEffect_.add(m1134effectStatus_);
m1134damagingMoveData_.setEffects(m1134custListEffect_);
m1134damagingMoveData_.setStoppableMoveSolo(true);
m1134damagingMoveData_.setStoppableMoveMulti(true);
m1134damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1134damagingMoveData_;
}
static MoveData m170(){
DamagingMoveData m1135damagingMoveData_ = Instances.newDamagingMoveData();
m1135damagingMoveData_.setCategory(I_PHYSIQUE);
m1135damagingMoveData_.setStoppableMoveKoSingle(true);
m1135damagingMoveData_.setPp(10);
StringList m1135stringList_=new StringList(new CollCapacity(1));
m1135stringList_.add(I_TENEBRE);
m1135damagingMoveData_.setTypes(m1135stringList_);
m1135stringList_=new StringList(new CollCapacity(1));
m1135stringList_.add(I_TENEBRE);
m1135damagingMoveData_.setBoostedTypes(m1135stringList_);
m1135damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1135custListEffect_ = new CustList<Effect>(new CollCapacity(9));
EffectDamage m1135effectDamage_=Instances.newEffectDamage();
m1135effectDamage_.setPower(A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BAIE_ABRIKO+OS+I_BAIE_ALGA+OS+I_BAIE_BABIRI+OS+I_BAIE_CERIZ+OS+I_BAIE_CHARTI+OS+I_BAIE_CHERIM+OS+I_BAIE_CHOCCO+OS+I_BAIE_COBABA+OS+I_BAIE_DURIN+OS+I_BAIE_ENIGMA+OS+I_BAIE_FIGUY+OS+I_BAIE_FRAIGO+OS+I_BAIE_FRAIVE+OS+I_BAIE_FRAMBY+OS+I_BAIE_FRISTA+OS+I_BAIE_GOWAV+OS+I_BAIE_GRENA+OS+I_BAIE_JABOCA+OS+I_BAIE_JOUCA+OS+I_BAIE_KEBIA+OS+I_BAIE_KIKA+OS+I_BAIE_KIWAN+OS+I_BAIE_LAMPOU+OS+I_BAIE_LANSAT+OS+I_BAIE_LICHII+OS+I_BAIE_LINGAN+OS+I_BAIE_LONME+OS+I_BAIE_MAGO+OS+I_BAIE_MANGOU+OS+I_BAIE_MARON+OS+I_BAIE_MEPO+OS+I_BAIE_MICLE+OS+I_BAIE_MYRTE+OS+I_BAIE_NANAB+OS+I_BAIE_NANANA+OS+I_BAIE_NANONE+OS+I_BAIE_ORAN+OS+I_BAIE_PALMA+OS+I_BAIE_PANGA+OS+I_BAIE_PAPAYA+OS+I_BAIE_PARMA+OS+I_BAIE_PECHA+OS+I_BAIE_PITAYE+OS+I_BAIE_POCPOC+OS+I_BAIE_POMMO+OS+I_BAIE_POMROZ+OS+I_BAIE_PRINE+OS+I_BAIE_QUALOT+OS+I_BAIE_RABUTA+OS+I_BAIE_RATAM+OS+I_BAIE_REMU+OS+I_BAIE_REPOI+OS+I_BAIE_RESIN+OS+I_BAIE_SAILAK+OS+I_BAIE_SEDRA+OS+I_BAIE_SIAM+OS+I_BAIE_SITRUS+OS+I_BAIE_STEKPA+OS+I_BAIE_TAMATO+OS+I_BAIE_TRONCI+OS+I_BAIE_WIKI+OS+I_BAIE_WILLIA+OS+I_BAIE_YAPAP+OS+I_BAIE_ZALIS+OS+I_BANDEAU+OS+I_BIZAR_ENCENS+OS+I_CARAPACE_MUE+OS+I_CEINTURE_PRO+OS+I_ENCENS_DOUX+OS+I_ENCENS_FLEUR+OS+I_ENCENS_MER+OS+I_ENCENS_PLEIN+OS+I_ENCENS_PUR+OS+I_ENCENS_ROC+OS+I_ENCENS_VAGUE+OS+I_ENCENS_VEINE+OS+I_GRELOT_ZEN+OS+I_HERBE_MENTAL+OS+I_HERBE_POUV+OS+I_LUNET_SAGES+OS+I_MOUCH_SOIE+OS+I_POUDRECLAIRE+OS+I_POUDRE_METAL+OS+I_POUDRE_VITE+OS+I_RALENTIQUEUE+OS+I_RESTES+OS+I_ROCHE_LISSE+OS+I_SABLE_DOUX+OS+I_TISSU_FAUCHE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_10+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_FOSSILE_ARMURE+OS+I_FOSSILE_CRANE+OS+I_FOSSILE_DOME+OS+I_FOSSILE_GRIFFE+OS+I_FOSSILE_PLAQUE+OS+I_FOSSILE_PLUME+OS+I_FOSSILE_RACINE+OS+I_NAUTILE+OS+I_OS_RARE+OS+I_PIERRE_DURE+OS+I_VIEIL_AMBRE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_100+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BALLE_FER+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_130+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_AIMANT+OS+I_AMELIORATOR+OS+I_ANTIDOTE+OS+I_ANTIGEL+OS+I_ANTI_BRULE+OS+I_ANTI_PARA+OS+I_BOUE_NOIRE+OS+I_BOULE_FUMEE+OS+I_CALCIUM+OS+I_CARBONE+OS+I_CENDRESACREE+OS+I_CHARBON+OS+I_CROC_RASOIR+OS+I_CUILLERTORDU+OS+I_EAU_FRAICHE+OS+I_EAU_MYSTIQUE+OS+I_ECAILLE_DRACO+OS+I_ELIXIR+OS+I_FER+OS+I_GLACETERNEL+OS+I_GRANDE_PERLE+OS+I_GRELOT_COQUE+OS+I_GROS_CHAMPI+OS+I_GUERISON+OS+I_HUILE+OS+I_HUILE_MAX+OS+I_HYPER_POTION+OS+I_JUS_DE_BAIE+OS+I_LAIT_MEUMEU+OS+I_LENTILSCOPE+OS+I_LIMONADE+OS+I_LUMARGILE+OS+I_MAX_ELIXIR+OS+I_METRO+OS+I_MORC_ETOILE+OS+I_MULTI_EXP+OS+I_OEUF_CHANCE+OS+I_ORBE_FLAMME+OS+I_ORBE_VIE+OS+I_PEAU_METAL+OS+I_PEPITE+OS+I_PERLE+OS+I_PETIT_CHAMPI+OS+I_PIECE_RUNE+OS+I_PIERRE_EAU+OS+I_PIERRE_FEU+OS+I_PIERRE_FOUDRE+OS+I_PIERRE_LUNE+OS+I_PIERRE_PLANTE+OS+I_PIERRE_STASE+OS+I_POTION+OS+I_POTION_MAX+OS+I_POUSS_ETOILE+OS+I_PP_MAX+OS+I_PP_PLUS+OS+I_PROTEINE+OS+I_PV_PLUS+OS+I_RAPPEL+OS+I_RAPPEL_MAX+OS+I_REVEIL+OS+I_ROCHE_ROYALE+OS+I_RUNE_PURIF+OS+I_RUNE_SORT+OS+I_SODA_COOL+OS+I_SUPER_POTION+OS+I_TOTAL_SOIN+OS+I_ZINC+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_30+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_POING_CHANCE+OS+I_ROCHE_GLACE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_40+OP+A_INCLUSNUM+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+RB+RP+OM+R_5+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_APPAT_BALL+OS+I_BALLON+OS+I_BANDEAU_ETREINTE+OS+I_BAND_CHOIX+OS+I_BAND_MUSCLE+OS+I_BAND_POUV+OS+I_BIS_BALL+OS+I_BOUTON_FUITE+OS+I_BULBE+OS+I_CARTE_ROUGE+OS+I_CASQUE_BRUT+OS+I_CEINT_FORCE+OS+I_CEINT_NOIRE+OS+I_CEINT_POUV+OS+I_CHAINE_POUV+OS+I_CHRONO_BALL+OS+I_COMPET_BALL+OS+I_COPAIN_BALL+OS+I_ECAILLE_OCEAN+OS+I_EVOLUROC+OS+I_FAIBLO_BALL+OS+I_FERRAILLE+OS+I_FILET_BALL+OS+I_GRAIN_MIRACL+OS+I_GRIFFE_RASOIR+OS+I_GROSSERACINE+OS+I_HERBEBLANCHE+OS+I_HONOR_BALL+OS+I_HYPER_BALL+OS+I_LENTIL_ZOOM+OS+I_LENT_POUV+OS+I_LOUPE+OS+I_LOVE_BALL+OS+I_LUNET_CHOIX+OS+I_LUNET_NOIRES+OS+I_LUNE_BALL+OS+I_LUXE_BALL+OS+I_MASSE_BALL+OS+I_MASTER_BALL+OS+I_MAX_REPOUSSE+OS+I_MODULE_AQUA+OS+I_MODULE_CHOC+OS+I_MODULE_CRYO+OS+I_MODULE_PYRO+OS+I_MOUCH_CHOIX+OS+I_NIVEAU_BALL+OS+I_NOEUD_DESTIN+OS+I_ORBE_PLATINE+OS+I_ORBE_TOXIQUE+OS+I_PIERRALLEGEE+OS+I_PIERRE_GLACE+OS+I_PIERRE_MOUSSE+OS+I_PIERRE_SOLAIRE+OS+I_PILE+OS+I_PIQUANTS+OS+I_POIDS_POUV+OS+I_POIGN_POUV+OS+I_POKE_BALL+OS+I_POUDRE_ARG+OS+I_PT_DE_MIRE+OS+I_RAPIDE_BALL+OS+I_REPOUSSE+OS+I_ROCHE_ELECTRIQUE+OS+I_SCUBA_BALL+OS+I_SOIN_BALL+OS+I_SOMBRE_BALL+OS+I_SPEED_BALL+OS+I_SUPER_BALL+OS+I_SUPER_REPOUSSE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_5+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BEC_POINTU+OS+I_CD_DOUTEUX+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_50+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BATON+OS+I_BRAC_MACHO+OS+I_ORBE_ADAMANT+OS+I_ORBE_PERLE+OS+I_ROCHE_CHAUDE+OS+I_ROCHE_HUMIDE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_60+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_CROC_DRAGON+OS+I_PIC_VENIN+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_70+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_ELECTRISEUR+OS+I_MAGMARISEUR+OS+I_PIERRE_AUBE+OS+I_PIERRE_ECLAT+OS+I_PIERRE_NUIT+OS+I_PIERRE_OVALE+OS+I_PROTECTEUR+OS+I_VIVE_GRIFFE+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_80+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_ACCRO_GRIFFE+OS+I_DENT_OCEAN+OS+I_MASSE_OS+OS+I_PLAQUESPRIT+OS+I_PLAQUE_CIEL+OS+I_PLAQUE_DRACO+OS+I_PLAQUE_FANTO+OS+I_PLAQUE_FER+OS+I_PLAQUE_FLAM+OS+I_PLAQUE_GLACE+OS+I_PLAQUE_HERBE+OS+I_PLAQUE_HYDRO+OS+I_PLAQUE_OMBRE+OS+I_PLAQUE_POING+OS+I_PLAQUE_ROC+OS+I_PLAQUE_TERRE+OS+I_PLAQUE_TOXIC+OS+I_PLAQUE_VOLT+OS+I_PLAQUINSECT+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_90);
m1135effectDamage_.setUserAttack(true);
m1135effectDamage_.setStatisAtt(Statistic.ATTACK);
m1135effectDamage_.setTargetDefense(true);
m1135effectDamage_.setStatisDef(Statistic.DEFENSE);
m1135effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectDamage_.setFail(ES);
m1135custListEffect_.add(m1135effectDamage_);
EffectStatus m1135effectStatus_=Instances.newEffectStatus();
MonteCarloString m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_BRULURE,LgInt.newLgInt(R_1));
m1135effectStatus_.setLawStatus(m1135monteCarloString_);
StringMap<String> m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_BRULURE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_BRULURE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_FEU+RB+RP+RP+GT+R_0);
m1135effectStatus_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
Ints m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
m1135effectStatus_=Instances.newEffectStatus();
m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_POISON_GRAVE,LgInt.newLgInt(R_1));
m1135effectStatus_.setLawStatus(m1135monteCarloString_);
m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_POISON_GRAVE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1135effectStatus_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
m1135effectStatus_=Instances.newEffectStatus();
m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_1));
m1135effectStatus_.setLawStatus(m1135monteCarloString_);
m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1135effectStatus_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
m1135effectStatus_=Instances.newEffectStatus();
m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m1135effectStatus_.setLawStatus(m1135monteCarloString_);
m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1135effectStatus_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
m1135effectStatus_=Instances.newEffectStatus();
m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1135effectStatus_.setLawStatus(m1135monteCarloString_);
m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1135effectStatus_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
EffectStatus m1135effectStatus2_=Instances.newEffectStatus();
m1135monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1135monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1135effectStatus2_.setLawStatus(m1135monteCarloString_);
m1135stringMapString_=new StringMap<String>(new CollCapacity(1));
m1135stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1135effectStatus2_.setLocalFailStatus(m1135stringMapString_);
m1135effectStatus2_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus2_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus2_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus2_);
m1135effectStatus_=Instances.newEffectStatus();
m1135stringList_=new StringList(new CollCapacity(1));
m1135stringList_.add(I_AMOUR);
m1135effectStatus_.setDeletedStatus(m1135stringList_);
m1135effectStatus_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatus_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatus_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatus_);
EffectStatistic m1135effectStatistic_=Instances.newEffectStatistic();
m1135effectStatistic_.setEvtRate(Rate.newRate(R_1));
IdList<Statistic> m1135enumListStatistic_=new IdList<Statistic>(new CollCapacity(7));
m1135enumListStatistic_.add(Statistic.ATTACK);
m1135enumListStatistic_.add(Statistic.DEFENSE);
m1135enumListStatistic_.add(Statistic.SPECIAL_ATTACK);
m1135enumListStatistic_.add(Statistic.SPECIAL_DEFENSE);
m1135enumListStatistic_.add(Statistic.SPEED);
m1135enumListStatistic_.add(Statistic.ACCURACY);
m1135enumListStatistic_.add(Statistic.EVASINESS);
m1135effectStatistic_.setCancelLowStat(m1135enumListStatistic_);
m1135effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1135effectStatistic_.setFail(ES);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(0);
m1135effectStatistic_.setRequiredSuccessfulEffects(m1135ints_);
m1135custListEffect_.add(m1135effectStatistic_);
m1135damagingMoveData_.setEffects(m1135custListEffect_);
m1135damagingMoveData_.setStoppableMoveSolo(true);
StringMap<Ints> m1135stringMapInts_=new StringMap<Ints>(new CollCapacity(8));
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(8);
m1135stringMapInts_.addEntry(I_HERBEBLANCHE,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(6);
m1135stringMapInts_.addEntry(I_ROCHE_ROYALE,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(4);
m1135stringMapInts_.addEntry(I_PIC_VENIN,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(1);
m1135stringMapInts_.addEntry(I_ORBE_FLAMME,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(3);
m1135stringMapInts_.addEntry(I_AIMANT,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(2);
m1135stringMapInts_.addEntry(I_ORBE_TOXIQUE,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(7);
m1135stringMapInts_.addEntry(I_HERBE_MENTAL,m1135ints_);
m1135ints_=new Ints(new CollCapacity(1));
m1135ints_.add(5);
m1135stringMapInts_.addEntry(I_CROC_RASOIR,m1135ints_);
m1135damagingMoveData_.setSecEffectsByItem(m1135stringMapInts_);
m1135damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1135damagingMoveData_;
}
static MoveData m171(){
StatusMoveData m1136statusMoveData_ = Instances.newStatusMoveData();
m1136statusMoveData_.setPp(25);
StringList m1136stringList_=new StringList(new CollCapacity(1));
m1136stringList_.add(I_ELECTRIQUE);
m1136statusMoveData_.setTypes(m1136stringList_);
m1136stringList_=new StringList(new CollCapacity(1));
m1136stringList_.add(I_ELECTRIQUE);
m1136statusMoveData_.setBoostedTypes(m1136stringList_);
m1136statusMoveData_.setPriority(1);
m1136statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1136custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchMoveTypes m1136effectSwitchMoveTypes_=Instances.newEffectSwitchMoveTypes();
StringMap<String> m1136stringMapString_=new StringMap<String>(new CollCapacity(1));
m1136stringMapString_.addEntry(I_NORMAL,I_ELECTRIQUE);
m1136effectSwitchMoveTypes_.setChangeTypes(m1136stringMapString_);
m1136effectSwitchMoveTypes_.setTargetChoice(TargetChoice.GLOBALE);
m1136effectSwitchMoveTypes_.setFail(ES);
m1136custListEffect_.add(m1136effectSwitchMoveTypes_);
m1136statusMoveData_.setEffects(m1136custListEffect_);
m1136statusMoveData_.setStoppableMoveMulti(true);
m1136statusMoveData_.setStoppableMovePrio(true);
m1136statusMoveData_.setIgnVarAccurUserNeg(true);
m1136statusMoveData_.setIgnVarEvasTargetPos(true);
m1136statusMoveData_.setTargetChoice(TargetChoice.GLOBALE);
return m1136statusMoveData_;
}
static MoveData m172(){
DamagingMoveData m1137damagingMoveData_ = Instances.newDamagingMoveData();
m1137damagingMoveData_.setCategory(I_PHYSIQUE);
m1137damagingMoveData_.setDirect(true);
m1137damagingMoveData_.setStoppableMoveKoSingle(true);
m1137damagingMoveData_.setPp(20);
StringList m1137stringList_=new StringList(new CollCapacity(1));
m1137stringList_.add(I_INSECTE);
m1137damagingMoveData_.setTypes(m1137stringList_);
m1137stringList_=new StringList(new CollCapacity(1));
m1137stringList_.add(I_INSECTE);
m1137damagingMoveData_.setBoostedTypes(m1137stringList_);
m1137damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1137custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1137effectDamage_=Instances.newEffectDamage();
m1137effectDamage_.setPower(R_70);
m1137effectDamage_.setUserAttack(true);
m1137effectDamage_.setStatisAtt(Statistic.ATTACK);
m1137effectDamage_.setTargetDefense(true);
m1137effectDamage_.setStatisDef(Statistic.DEFENSE);
m1137effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1137effectDamage_.setFail(ES);
m1137custListEffect_.add(m1137effectDamage_);
m1137damagingMoveData_.setEffects(m1137custListEffect_);
m1137damagingMoveData_.setStoppableMoveSolo(true);
m1137damagingMoveData_.setSwitchType(SwitchType.LANCEUR);
m1137damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1137damagingMoveData_;
}
static MoveData m173(){
StatusMoveData m1138statusMoveData_ = Instances.newStatusMoveData();
m1138statusMoveData_.setCounterableMove(true);
m1138statusMoveData_.setPp(10);
StringList m1138stringList_=new StringList(new CollCapacity(1));
m1138stringList_.add(I_SPECTRE);
m1138statusMoveData_.setTypes(m1138stringList_);
m1138stringList_=new StringList(new CollCapacity(1));
m1138stringList_.add(I_SPECTRE);
m1138statusMoveData_.setBoostedTypes(m1138stringList_);
m1138statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1138custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectVarPP m1138effectVarPP_=Instances.newEffectVarPP();
m1138effectVarPP_.setDeletePp(4);
m1138effectVarPP_.setTargetChoice(TargetChoice.ADJ_MULT);
m1138effectVarPP_.setFail(V_PAS_PP_ATTAQUE_CIBLE+OO+V_PAS_UTILIS_ATTAQUE_CIBLE);
m1138custListEffect_.add(m1138effectVarPP_);
m1138statusMoveData_.setEffects(m1138custListEffect_);
m1138statusMoveData_.setStoppableMoveSolo(true);
m1138statusMoveData_.setStoppableMoveMulti(true);
m1138statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1138statusMoveData_;
}
static MoveData m174(){
DamagingMoveData m1139damagingMoveData_ = Instances.newDamagingMoveData();
m1139damagingMoveData_.setCategory(I_PHYSIQUE);
m1139damagingMoveData_.setDirect(true);
m1139damagingMoveData_.setStoppableMoveKoSingle(true);
m1139damagingMoveData_.setPp(5);
StringList m1139stringList_=new StringList(new CollCapacity(1));
m1139stringList_.add(I_NORMAL);
m1139damagingMoveData_.setTypes(m1139stringList_);
m1139stringList_=new StringList(new CollCapacity(1));
m1139stringList_.add(I_NORMAL);
m1139damagingMoveData_.setBoostedTypes(m1139stringList_);
m1139damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1139custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1139effectDamage_=Instances.newEffectDamage();
m1139effectDamage_.setPower(R_140);
m1139effectDamage_.setUserAttack(true);
m1139effectDamage_.setStatisAtt(Statistic.ATTACK);
m1139effectDamage_.setTargetDefense(true);
m1139effectDamage_.setStatisDef(Statistic.DEFENSE);
m1139effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1139effectDamage_.setFail(ES);
m1139custListEffect_.add(m1139effectDamage_);
m1139damagingMoveData_.setEffects(m1139custListEffect_);
m1139damagingMoveData_.setStoppableMoveSolo(true);
m1139damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1139damagingMoveData_;
}
}
