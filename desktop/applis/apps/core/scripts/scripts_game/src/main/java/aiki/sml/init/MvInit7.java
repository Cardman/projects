package aiki.sml.init;
import aiki.instances.*;
import aiki.fight.util.*;
import aiki.fight.enums.*;
import aiki.fight.moves.*;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.*;
import aiki.map.levels.enums.*;
import aiki.fight.moves.enums.*;
import code.maths.*;
import code.maths.montecarlo.*;
import code.util.*;
final class MvInit7 extends CstIgame{
private MvInit7(){}
static MoveData m175(){
StatusMoveData m1142statusMoveData_ = Instances.newStatusMoveData();
m1142statusMoveData_.setCounterableMove(true);
m1142statusMoveData_.setPp(20);
StringList m1142stringList_=new StringList(new CollCapacity(1));
m1142stringList_.add(I_TENEBRE);
m1142statusMoveData_.setTypes(m1142stringList_);
m1142stringList_=new StringList(new CollCapacity(1));
m1142stringList_.add(I_TENEBRE);
m1142statusMoveData_.setBoostedTypes(m1142stringList_);
m1142statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1142custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1142effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1142enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m1142enumMapStatisticByte_.addEntry(Statistic.ATTACK,-1L);
m1142enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-1L);
m1142effectStatistic_.setStatisVarRank(m1142enumMapStatisticByte_);
IdMap<Statistic,String> m1142enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m1142enumMapStatisticString_.addEntry(Statistic.ATTACK,V_CIBLE_CLONE+GT+R_0);
m1142enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_CIBLE_CLONE+GT+R_0);
m1142effectStatistic_.setLocalFailStatis(m1142enumMapStatisticString_);
m1142effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1142effectStatistic_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1142custListEffect_.add(m1142effectStatistic_);
m1142statusMoveData_.setEffects(m1142custListEffect_);
m1142statusMoveData_.setStoppableMoveSolo(true);
m1142statusMoveData_.setSwitchType(SwitchType.LANCEUR);
m1142statusMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1142statusMoveData_;
}
static MoveData m176(){
DamagingMoveData m1143damagingMoveData_ = Instances.newDamagingMoveData();
m1143damagingMoveData_.setCategory(I_PHYSIQUE);
m1143damagingMoveData_.setStoppableMoveKoSingle(true);
m1143damagingMoveData_.setPp(5);
StringList m1143stringList_=new StringList(new CollCapacity(1));
m1143stringList_.add(I_NORMAL);
m1143damagingMoveData_.setTypes(m1143stringList_);
m1143stringList_=new StringList(new CollCapacity(1));
m1143stringList_.add(I_NORMAL);
m1143damagingMoveData_.setBoostedTypes(m1143stringList_);
m1143damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1143custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1143effectDamage_=newEffectDamage();
m1143effectDamage_.setPower(R_200);
m1143effectDamage_.setUserAttack(true);
m1143effectDamage_.setStatisAtt(Statistic.ATTACK);
m1143effectDamage_.setTargetDefense(true);
m1143effectDamage_.setStatisDef(Statistic.DEFENSE);
m1143effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1143custListEffect_.add(m1143effectDamage_);
EffectRemainedHpRate m1143effectRemainedHpRate_=Instances.newEffectRemainedHpRate();
m1143effectRemainedHpRate_.setRateHp(Rate.newRate(OD+R_1));
m1143effectRemainedHpRate_.setTargetChoice(TargetChoice.LANCEUR);
Ints m1143ints_=new Ints(new CollCapacity(1));
m1143ints_.add(0);
m1143effectRemainedHpRate_.setRequiredSuccessfulEffects(m1143ints_);
m1143custListEffect_.add(m1143effectRemainedHpRate_);
m1143damagingMoveData_.setEffects(m1143custListEffect_);
m1143damagingMoveData_.setStoppableMoveSolo(true);
m1143damagingMoveData_.setStoppableMoveMulti(true);
m1143damagingMoveData_.setSecEffectIfNoDamage(true);
m1143damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1143damagingMoveData_;
}
static MoveData m177(){
StatusMoveData m1144statusMoveData_ = Instances.newStatusMoveData();
m1144statusMoveData_.setPp(5);
StringList m1144stringList_=new StringList(new CollCapacity(1));
m1144stringList_.add(I_COMBAT);
m1144statusMoveData_.setTypes(m1144stringList_);
m1144stringList_=new StringList(new CollCapacity(1));
m1144stringList_.add(I_COMBAT);
m1144statusMoveData_.setBoostedTypes(m1144stringList_);
m1144statusMoveData_.setPriority(3);
m1144statusMoveData_.setAccuracy(A_PUIS+LP+R_2+OC+OD+V_LANCEUR_NB_UTILISATION+SE+I_ABRI+OD+V_LANCEUR_NB_UTILISATION+SE+I_DETECTION+RP);
CustList<Effect> m1144custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectProtection m1144effectProtection_=Instances.newEffectProtection();
m1144effectProtection_.setProtSingle(true);
m1144effectProtection_.setTargetChoice(TargetChoice.LANCEUR);
m1144custListEffect_.add(m1144effectProtection_);
m1144statusMoveData_.setEffects(m1144custListEffect_);
m1144statusMoveData_.setStoppableMoveMulti(true);
m1144statusMoveData_.setStoppableMovePrio(true);
m1144statusMoveData_.setIgnVarEvasTargetPos(true);
m1144statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1144statusMoveData_;
}
static MoveData m178(){
StatusMoveData m1145statusMoveData_ = Instances.newStatusMoveData();
m1145statusMoveData_.setPp(20);
StringList m1145stringList_=new StringList(new CollCapacity(1));
m1145stringList_.add(I_EAU);
m1145statusMoveData_.setTypes(m1145stringList_);
m1145stringList_=new StringList(new CollCapacity(1));
m1145stringList_.add(I_EAU);
m1145statusMoveData_.setBoostedTypes(m1145stringList_);
m1145statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1145custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectSwitchTypes m1145effectSwitchTypes_=Instances.newEffectSwitchTypes();
m1145effectSwitchTypes_.setConstValuesType(ConstValuesType.NOTHING);
m1145effectSwitchTypes_.setExchangeTypes(ExchangeType.GIVE_CONST);
m1145effectSwitchTypes_.setFail(V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_CAPACITE+RB+OC+LB+I_MULTITYPE+RB+RP+RP+GT+R_0);
m1145stringList_=new StringList(new CollCapacity(1));
m1145stringList_.add(I_EAU);
m1145effectSwitchTypes_.setConstTypes(m1145stringList_);
m1145effectSwitchTypes_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1145custListEffect_.add(m1145effectSwitchTypes_);
m1145statusMoveData_.setEffects(m1145custListEffect_);
m1145statusMoveData_.setStoppableMoveSolo(true);
m1145statusMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1145statusMoveData_;
}
static MoveData m179(){
DamagingMoveData m1146damagingMoveData_ = Instances.newDamagingMoveData();
m1146damagingMoveData_.setCategory(I_PHYSIQUE);
m1146damagingMoveData_.setStoppableMoveKoSingle(true);
m1146damagingMoveData_.setPp(5);
StringList m1146stringList_=new StringList(new CollCapacity(1));
m1146stringList_.add(I_POISON);
m1146damagingMoveData_.setTypes(m1146stringList_);
m1146stringList_=new StringList(new CollCapacity(1));
m1146stringList_.add(I_POISON);
m1146damagingMoveData_.setBoostedTypes(m1146stringList_);
m1146damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1146custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1146effectDamage_=newEffectDamage();
m1146effectDamage_.setPower(R_120);
m1146effectDamage_.setUserAttack(true);
m1146effectDamage_.setStatisAtt(Statistic.ATTACK);
m1146effectDamage_.setTargetDefense(true);
m1146effectDamage_.setStatisDef(Statistic.DEFENSE);
m1146effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1146custListEffect_.add(m1146effectDamage_);
EffectStatus m1146effectStatus_=Instances.newEffectStatus();
MonteCarloString m1146monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1146monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1146monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_3));
m1146effectStatus_.setLawStatus(m1146monteCarloString_);
StringMap<String> m1146stringMapString_=new StringMap<String>(new CollCapacity(1));
m1146stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1146effectStatus_.setLocalFailStatus(m1146stringMapString_);
m1146effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1146ints_=new Ints(new CollCapacity(1));
m1146ints_.add(0);
m1146effectStatus_.setRequiredSuccessfulEffects(m1146ints_);
m1146custListEffect_.add(m1146effectStatus_);
m1146damagingMoveData_.setEffects(m1146custListEffect_);
m1146damagingMoveData_.setStoppableMoveSolo(true);
m1146damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1146damagingMoveData_;
}
static MoveData m180(){
DamagingMoveData m1147damagingMoveData_ = Instances.newDamagingMoveData();
m1147damagingMoveData_.setCategory(I_SPECIALE);
m1147damagingMoveData_.setStoppableMoveKoSingle(true);
m1147damagingMoveData_.setPp(20);
StringList m1147stringList_=new StringList(new CollCapacity(1));
m1147stringList_.add(I_POISON);
m1147damagingMoveData_.setTypes(m1147stringList_);
m1147stringList_=new StringList(new CollCapacity(1));
m1147stringList_.add(I_POISON);
m1147damagingMoveData_.setBoostedTypes(m1147stringList_);
m1147damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1147custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1147effectDamage_=newEffectDamage();
m1147effectDamage_.setPower(R_65);
m1147effectDamage_.setUserAttack(true);
m1147effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1147effectDamage_.setTargetDefense(true);
m1147effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1147effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1147custListEffect_.add(m1147effectDamage_);
EffectStatus m1147effectStatus_=Instances.newEffectStatus();
MonteCarloString m1147monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1147monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1147monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_3));
m1147effectStatus_.setLawStatus(m1147monteCarloString_);
StringMap<String> m1147stringMapString_=new StringMap<String>(new CollCapacity(1));
m1147stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1147effectStatus_.setLocalFailStatus(m1147stringMapString_);
m1147effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1147ints_=new Ints(new CollCapacity(1));
m1147ints_.add(0);
m1147effectStatus_.setRequiredSuccessfulEffects(m1147ints_);
m1147custListEffect_.add(m1147effectStatus_);
m1147damagingMoveData_.setEffects(m1147custListEffect_);
m1147damagingMoveData_.setStoppableMoveSolo(true);
m1147damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1147damagingMoveData_;
}
static MoveData m181(){
DamagingMoveData m1148damagingMoveData_ = Instances.newDamagingMoveData();
m1148damagingMoveData_.setCategory(I_SPECIALE);
m1148damagingMoveData_.setStoppableMoveKoSingle(true);
m1148damagingMoveData_.setPp(15);
StringList m1148stringList_=new StringList(new CollCapacity(1));
m1148stringList_.add(I_PSY);
m1148damagingMoveData_.setTypes(m1148stringList_);
m1148stringList_=new StringList(new CollCapacity(1));
m1148stringList_.add(I_PSY);
m1148damagingMoveData_.setBoostedTypes(m1148stringList_);
m1148damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1148custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1148effectDamage_=newEffectDamage();
m1148effectDamage_.setPower(R_100);
m1148effectDamage_.setUserAttack(true);
m1148effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1148effectDamage_.setTargetDefense(true);
m1148effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1148effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1148effectDamage_.setFail(A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SOMMEIL+OS+I_SOMMEIL_REPOS+RB+RP+RP+OE+R_0);
m1148custListEffect_.add(m1148effectDamage_);
EffectDamageRate m1148effectDamageRate_=Instances.newEffectDamageRate();
m1148effectDamageRate_.setRateDamage(Rate.newRate(R_1_2));
m1148effectDamageRate_.setTargetChoice(TargetChoice.LANCEUR);
Ints m1148ints_=new Ints(new CollCapacity(1));
m1148ints_.add(0);
m1148effectDamageRate_.setRequiredSuccessfulEffects(m1148ints_);
m1148custListEffect_.add(m1148effectDamageRate_);
m1148damagingMoveData_.setEffects(m1148custListEffect_);
m1148damagingMoveData_.setStoppableMoveSolo(true);
m1148damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1148damagingMoveData_;
}
static MoveData m182(){
DamagingMoveData m1149damagingMoveData_ = Instances.newDamagingMoveData();
m1149damagingMoveData_.setCategory(I_PHYSIQUE);
m1149damagingMoveData_.setDirect(true);
m1149damagingMoveData_.setStoppableMoveKoSingle(true);
m1149damagingMoveData_.setPp(20);
StringList m1149stringList_=new StringList(new CollCapacity(1));
m1149stringList_.add(I_POISON);
m1149damagingMoveData_.setTypes(m1149stringList_);
m1149stringList_=new StringList(new CollCapacity(1));
m1149stringList_.add(I_POISON);
m1149damagingMoveData_.setBoostedTypes(m1149stringList_);
m1149damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1149custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1149effectDamage_=newEffectDamage();
m1149effectDamage_.setPower(R_80);
m1149effectDamage_.setUserAttack(true);
m1149effectDamage_.setStatisAtt(Statistic.ATTACK);
m1149effectDamage_.setTargetDefense(true);
m1149effectDamage_.setStatisDef(Statistic.DEFENSE);
m1149effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1149custListEffect_.add(m1149effectDamage_);
EffectStatus m1149effectStatus_=Instances.newEffectStatus();
MonteCarloString m1149monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1149monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1149monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_3));
m1149effectStatus_.setLawStatus(m1149monteCarloString_);
StringMap<String> m1149stringMapString_=new StringMap<String>(new CollCapacity(1));
m1149stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1149effectStatus_.setLocalFailStatus(m1149stringMapString_);
m1149effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
Ints m1149ints_=new Ints(new CollCapacity(1));
m1149ints_.add(0);
m1149effectStatus_.setRequiredSuccessfulEffects(m1149ints_);
m1149custListEffect_.add(m1149effectStatus_);
m1149damagingMoveData_.setEffects(m1149custListEffect_);
m1149damagingMoveData_.setStoppableMoveSolo(true);
m1149damagingMoveData_.setStoppableMoveMulti(true);
m1149damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1149damagingMoveData_;
}
static MoveData m183(){
StatusMoveData m1150statusMoveData_ = Instances.newStatusMoveData();
m1150statusMoveData_.setPp(5);
StringList m1150stringList_=new StringList(new CollCapacity(1));
m1150stringList_.add(I_PSY);
m1150statusMoveData_.setTypes(m1150stringList_);
m1150stringList_=new StringList(new CollCapacity(1));
m1150stringList_.add(I_PSY);
m1150statusMoveData_.setBoostedTypes(m1150stringList_);
m1150statusMoveData_.setPriority(-7);
m1150statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1150custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectGlobal m1150effectGlobal_=Instances.newEffectGlobal();
m1150effectGlobal_.setCanceledIfUsed(true);
m1150effectGlobal_.setReverseOrderOfSortBySpeed(true);
m1150effectGlobal_.setTargetChoice(TargetChoice.LANCEUR);
m1150custListEffect_.add(m1150effectGlobal_);
m1150statusMoveData_.setEffects(m1150custListEffect_);
m1150statusMoveData_.setRankIncrementNbRound(6);
m1150statusMoveData_.setStoppableMoveMulti(true);
m1150statusMoveData_.setStoppableMovePrio(true);
m1150statusMoveData_.setIgnVarAccurUserNeg(true);
m1150statusMoveData_.setIgnVarEvasTargetPos(true);
m1150statusMoveData_.setTargetChoice(TargetChoice.LANCEUR);
return m1150statusMoveData_;
}
static MoveData m184(){
DamagingMoveData m1151damagingMoveData_ = Instances.newDamagingMoveData();
m1151damagingMoveData_.setCategory(I_PHYSIQUE);
m1151damagingMoveData_.setStoppableMoveKoSingle(true);
m1151damagingMoveData_.setPp(15);
StringList m1151stringList_=new StringList(new CollCapacity(1));
m1151stringList_.add(I_NORMAL);
m1151damagingMoveData_.setTypes(m1151stringList_);
m1151stringList_=new StringList(new CollCapacity(1));
m1151stringList_.add(I_NORMAL);
m1151damagingMoveData_.setBoostedTypes(m1151stringList_);
m1151damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1151custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1151effectDamage_=newEffectDamage();
m1151effectDamage_.setPower(A_INCLUSNUM+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+RB+RP+OM+R_40+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_ACCRO_GRIFFE+OS+I_AIMANT+OS+I_AMELIORATOR+OS+I_ANTIDOTE+OS+I_ANTIGEL+OS+I_ANTI_BRULE+OS+I_ANTI_PARA+OS+I_APPAT_BALL+OS+I_BALLE_FER+OS+I_BALLON+OS+I_BANDEAU+OS+I_BANDEAU_ETREINTE+OS+I_BAND_CHOIX+OS+I_BAND_MUSCLE+OS+I_BAND_POUV+OS+I_BATON+OS+I_BEC_POINTU+OS+I_BIS_BALL+OS+I_BIZAR_ENCENS+OS+I_BOUE_NOIRE+OS+I_BOULE_FUMEE+OS+I_BOUTON_FUITE+OS+I_BRAC_MACHO+OS+I_BULBE+OS+I_CALCIUM+OS+I_CARAPACE_MUE+OS+I_CARBONE+OS+I_CARTE_ROUGE+OS+I_CASQUE_BRUT+OS+I_CD_DOUTEUX+OS+I_CEINTURE_PRO+OS+I_CEINT_FORCE+OS+I_CEINT_NOIRE+OS+I_CEINT_POUV+OS+I_CENDRESACREE+OS+I_CHAINE_POUV+OS+I_CHARBON+OS+I_CHRONO_BALL+OS+I_COMPET_BALL+OS+I_COPAIN_BALL+OS+I_CROC_DRAGON+OS+I_CROC_RASOIR+OS+I_CUILLERTORDU+OS+I_DENT_OCEAN+OS+I_EAU_FRAICHE+OS+I_EAU_MYSTIQUE+OS+I_ECAILLE_DRACO+OS+I_ECAILLE_OCEAN+OS+I_ELECTRISEUR+OS+I_ELIXIR+OS+I_ENCENS_DOUX+OS+I_ENCENS_FLEUR+OS+I_ENCENS_MER+OS+I_ENCENS_PLEIN+OS+I_ENCENS_PUR+OS+I_ENCENS_ROC+OS+I_ENCENS_VAGUE+OS+I_ENCENS_VEINE+OS+I_EVOLUROC+OS+I_FAIBLO_BALL+OS+I_FER+OS+I_FERRAILLE+OS+I_FILET_BALL+OS+I_FOSSILE_ARMURE+OS+I_FOSSILE_CRANE+OS+I_FOSSILE_DOME+OS+I_FOSSILE_GRIFFE+OS+I_FOSSILE_PLAQUE+OS+I_FOSSILE_PLUME+OS+I_FOSSILE_RACINE+OS+I_GLACETERNEL+OS+I_GRAIN_MIRACL+OS+I_GRANDE_PERLE+OS+I_GRELOT_COQUE+OS+I_GRELOT_ZEN+OS+I_GRIFFE_RASOIR+OS+I_GROSSERACINE+OS+I_GROS_CHAMPI+OS+I_GUERISON+OS+I_HERBEBLANCHE+OS+I_HERBE_MENTAL+OS+I_HERBE_POUV+OS+I_HONOR_BALL+OS+I_HUILE+OS+I_HUILE_MAX+OS+I_HYPER_BALL+OS+I_HYPER_POTION+OS+I_JUS_DE_BAIE+OS+I_LAIT_MEUMEU+OS+I_LENTILSCOPE+OS+I_LENTIL_ZOOM+OS+I_LENT_POUV+OS+I_LIMONADE+OS+I_LOUPE+OS+I_LOVE_BALL+OS+I_LUMARGILE+OS+I_LUNET_CHOIX+OS+I_LUNET_NOIRES+OS+I_LUNET_SAGES+OS+I_LUNE_BALL+OS+I_LUXE_BALL+OS+I_MAGMARISEUR+OS+I_MASSE_BALL+OS+I_MASSE_OS+OS+I_MASTER_BALL+OS+I_MAX_ELIXIR+OS+I_MAX_REPOUSSE+OS+I_METRO+OS+I_MODULE_AQUA+OS+I_MODULE_CHOC+OS+I_MODULE_CRYO+OS+I_MODULE_PYRO+OS+I_MORC_ETOILE+OS+I_MOUCH_CHOIX+OS+I_MOUCH_SOIE+OS+I_MULTI_EXP+OS+I_NAUTILE+OS+I_NIVEAU_BALL+OS+I_NOEUD_DESTIN+OS+I_OEUF_CHANCE+OS+I_ORBE_ADAMANT+OS+I_ORBE_FLAMME+OS+I_ORBE_PERLE+OS+I_ORBE_PLATINE+OS+I_ORBE_TOXIQUE+OS+I_ORBE_VIE+OS+I_OS_RARE+OS+I_PEAU_METAL+OS+I_PEPITE+OS+I_PERLE+OS+I_PETIT_CHAMPI+OS+I_PIC_VENIN+OS+I_PIECE_RUNE+OS+I_PIERRALLEGEE+OS+I_PIERRE_AUBE+OS+I_PIERRE_DURE+OS+I_PIERRE_EAU+OS+I_PIERRE_ECLAT+OS+I_PIERRE_FEU+OS+I_PIERRE_FOUDRE+OS+I_PIERRE_GLACE+OS+I_PIERRE_LUNE+OS+I_PIERRE_MOUSSE+OS+I_PIERRE_NUIT+OS+I_PIERRE_OVALE+OS+I_PIERRE_PLANTE+OS+I_PIERRE_SOLAIRE+OS+I_PIERRE_STASE+OS+I_PILE+OS+I_PIQUANTS+OS+I_PLAQUESPRIT+OS+I_PLAQUE_CIEL+OS+I_PLAQUE_DRACO+OS+I_PLAQUE_FANTO+OS+I_PLAQUE_FER+OS+I_PLAQUE_FLAM+OS+I_PLAQUE_GLACE+OS+I_PLAQUE_HERBE+OS+I_PLAQUE_HYDRO+OS+I_PLAQUE_OMBRE+OS+I_PLAQUE_POING+OS+I_PLAQUE_ROC+OS+I_PLAQUE_TERRE+OS+I_PLAQUE_TOXIC+OS+I_PLAQUE_VOLT+OS+I_PLAQUINSECT+OS+I_POIDS_POUV+OS+I_POIGN_POUV+OS+I_POING_CHANCE+OS+I_POKE_BALL+OS+I_POTION+OS+I_POTION_MAX+OS+I_POUDRECLAIRE+OS+I_POUDRE_ARG+OS+I_POUDRE_METAL+OS+I_POUDRE_VITE+OS+I_POUSS_ETOILE+OS+I_PP_MAX+OS+I_PP_PLUS+OS+I_PROTECTEUR+OS+I_PROTEINE+OS+I_PT_DE_MIRE+OS+I_PV_PLUS+OS+I_RALENTIQUEUE+OS+I_RAPIDE_BALL+OS+I_RAPPEL+OS+I_RAPPEL_MAX+OS+I_REPOUSSE+OS+I_RESTES+OS+I_REVEIL+OS+I_ROCHE_CHAUDE+OS+I_ROCHE_ELECTRIQUE+OS+I_ROCHE_GLACE+OS+I_ROCHE_HUMIDE+OS+I_ROCHE_LISSE+OS+I_ROCHE_ROYALE+OS+I_RUNE_PURIF+OS+I_RUNE_SORT+OS+I_SABLE_DOUX+OS+I_SCUBA_BALL+OS+I_SODA_COOL+OS+I_SOIN_BALL+OS+I_SOMBRE_BALL+OS+I_SPEED_BALL+OS+I_SUPER_BALL+OS+I_SUPER_POTION+OS+I_SUPER_REPOUSSE+OS+I_TISSU_FAUCHE+OS+I_TOTAL_SOIN+OS+I_VIEIL_AMBRE+OS+I_VIVE_GRIFFE+OS+I_ZINC+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_40+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BAIE_BABIRI+OS+I_BAIE_CERIZ+OS+I_BAIE_CHARTI+OS+I_BAIE_CHOCCO+OS+I_BAIE_COBABA+OS+I_BAIE_FIGUY+OS+I_BAIE_FRAIGO+OS+I_BAIE_FRAIVE+OS+I_BAIE_FRAMBY+OS+I_BAIE_GOWAV+OS+I_BAIE_JOUCA+OS+I_BAIE_KEBIA+OS+I_BAIE_KIKA+OS+I_BAIE_LAMPOU+OS+I_BAIE_MAGO+OS+I_BAIE_MARON+OS+I_BAIE_MEPO+OS+I_BAIE_NANONE+OS+I_BAIE_ORAN+OS+I_BAIE_PANGA+OS+I_BAIE_PAPAYA+OS+I_BAIE_PARMA+OS+I_BAIE_PECHA+OS+I_BAIE_POCPOC+OS+I_BAIE_POMROZ+OS+I_BAIE_PRINE+OS+I_BAIE_RATAM+OS+I_BAIE_SEDRA+OS+I_BAIE_SITRUS+OS+I_BAIE_WIKI+OS+I_BAIE_WILLIA+OS+I_BAIE_YAPAP+OS+I_BAIE_ZALIS+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_60+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BAIE_ALGA+OS+I_BAIE_GRENA+OS+I_BAIE_KIWAN+OS+I_BAIE_LONME+OS+I_BAIE_MANGOU+OS+I_BAIE_NANAB+OS+I_BAIE_NANANA+OS+I_BAIE_PALMA+OS+I_BAIE_QUALOT+OS+I_BAIE_RABUTA+OS+I_BAIE_REMU+OS+I_BAIE_REPOI+OS+I_BAIE_RESIN+OS+I_BAIE_SIAM+OS+I_BAIE_TAMATO+OS+I_BAIE_TRONCI+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_70+OP+A_CARACFERME+LP+A_CARDINAL+LP+A_INTER+LP+LB+V_LANCEUR_OBJET+RB+OC+LB+I_BAIE_ABRIKO+OS+I_BAIE_CHERIM+OS+I_BAIE_DURIN+OS+I_BAIE_ENIGMA+OS+I_BAIE_FRISTA+OS+I_BAIE_JABOCA+OS+I_BAIE_LANSAT+OS+I_BAIE_LICHII+OS+I_BAIE_LINGAN+OS+I_BAIE_MICLE+OS+I_BAIE_MYRTE+OS+I_BAIE_PITAYE+OS+I_BAIE_POMMO+OS+I_BAIE_SAILAK+OS+I_BAIE_STEKPA+RB+RP+RP+OC+R_1+OC+R_1+RP+OM+R_80);
m1151effectDamage_.setUserAttack(true);
m1151effectDamage_.setStatisAtt(Statistic.ATTACK);
m1151effectDamage_.setTargetDefense(true);
m1151effectDamage_.setStatisDef(Statistic.DEFENSE);
m1151effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1151custListEffect_.add(m1151effectDamage_);
m1151damagingMoveData_.setEffects(m1151custListEffect_);
m1151damagingMoveData_.setStoppableMoveSolo(true);
m1151damagingMoveData_.setStoppableMoveMulti(true);
StringMap<String> m1151stringMapString_=new StringMap<String>(new CollCapacity(277));
m1151stringMapString_.addEntry(ES,I_NORMAL);
m1151stringMapString_.addEntry(I_DENT_OCEAN,I_NORMAL);
m1151stringMapString_.addEntry(I_RAPPEL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_PITAYE,I_POISON);
m1151stringMapString_.addEntry(I_ROCHE_LISSE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_LAMPOU,I_TENEBRE);
m1151stringMapString_.addEntry(I_POUDRE_VITE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_CERIZ,I_FEU);
m1151stringMapString_.addEntry(I_PIERRE_FOUDRE,I_NORMAL);
m1151stringMapString_.addEntry(I_HYPER_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_GRAIN_MIRACL,I_NORMAL);
m1151stringMapString_.addEntry(I_GRIFFE_RASOIR,I_NORMAL);
m1151stringMapString_.addEntry(I_CEINTURE_PRO,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_BABIRI,I_ACIER);
m1151stringMapString_.addEntry(I_CEINT_NOIRE,I_NORMAL);
m1151stringMapString_.addEntry(I_ROCHE_HUMIDE,I_NORMAL);
m1151stringMapString_.addEntry(I_POUDRE_METAL,I_NORMAL);
m1151stringMapString_.addEntry(I_EAU_FRAICHE,I_NORMAL);
m1151stringMapString_.addEntry(I_PILE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_GOWAV,I_DRAGON);
m1151stringMapString_.addEntry(I_BAIE_PAPAYA,I_TENEBRE);
m1151stringMapString_.addEntry(I_ENCENS_VAGUE,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_STASE,I_NORMAL);
m1151stringMapString_.addEntry(I_LOVE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_DRACO,I_NORMAL);
m1151stringMapString_.addEntry(I_GRANDE_PERLE,I_NORMAL);
m1151stringMapString_.addEntry(I_PIECE_RUNE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_KIKA,I_SOL);
m1151stringMapString_.addEntry(I_BAIE_NANONE,I_GLACE);
m1151stringMapString_.addEntry(I_BAIE_POCPOC,I_FEU);
m1151stringMapString_.addEntry(I_MODULE_AQUA,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_ECLAT,I_NORMAL);
m1151stringMapString_.addEntry(I_MAX_ELIXIR,I_NORMAL);
m1151stringMapString_.addEntry(I_POKE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_OEUF_CHANCE,I_NORMAL);
m1151stringMapString_.addEntry(I_MOUCH_CHOIX,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_FLEUR,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_OMBRE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_KEBIA,I_POISON);
m1151stringMapString_.addEntry(I_ROCHE_GLACE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_ENIGMA,I_INSECTE);
m1151stringMapString_.addEntry(I_BAIE_RABUTA,I_SPECTRE);
m1151stringMapString_.addEntry(I_BAIE_WILLIA,I_GLACE);
m1151stringMapString_.addEntry(I_LUMARGILE,I_NORMAL);
m1151stringMapString_.addEntry(I_EAU_MYSTIQUE,I_NORMAL);
m1151stringMapString_.addEntry(I_CENDRESACREE,I_NORMAL);
m1151stringMapString_.addEntry(I_SODA_COOL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_JOUCA,I_SOL);
m1151stringMapString_.addEntry(I_PIERRE_EAU,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_ROC,I_NORMAL);
m1151stringMapString_.addEntry(I_BANDEAU,I_NORMAL);
m1151stringMapString_.addEntry(I_JUS_DE_BAIE,I_NORMAL);
m1151stringMapString_.addEntry(I_LUNET_SAGES,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_NANAB,I_EAU);
m1151stringMapString_.addEntry(I_ORBE_FLAMME,I_NORMAL);
m1151stringMapString_.addEntry(I_BOULE_FUMEE,I_NORMAL);
m1151stringMapString_.addEntry(I_ACCRO_GRIFFE,I_NORMAL);
m1151stringMapString_.addEntry(I_HYPER_POTION,I_NORMAL);
m1151stringMapString_.addEntry(I_PEPITE,I_NORMAL);
m1151stringMapString_.addEntry(I_ROCHE_CHAUDE,I_NORMAL);
m1151stringMapString_.addEntry(I_TOTAL_SOIN,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_PUR,I_NORMAL);
m1151stringMapString_.addEntry(I_ORBE_VIE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_YAPAP,I_PSY);
m1151stringMapString_.addEntry(I_MAX_REPOUSSE,I_NORMAL);
m1151stringMapString_.addEntry(I_LAIT_MEUMEU,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_OVALE,I_NORMAL);
m1151stringMapString_.addEntry(I_SABLE_DOUX,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_SEDRA,I_SPECTRE);
m1151stringMapString_.addEntry(I_SUPER_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_MEPO,I_COMBAT);
m1151stringMapString_.addEntry(I_PP_PLUS,I_NORMAL);
m1151stringMapString_.addEntry(I_POTION,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_TRONCI,I_DRAGON);
m1151stringMapString_.addEntry(I_VIEIL_AMBRE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_MICLE,I_ROCHE);
m1151stringMapString_.addEntry(I_BAIE_ZALIS,I_NORMAL);
m1151stringMapString_.addEntry(I_REPOUSSE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_STEKPA,I_FEU);
m1151stringMapString_.addEntry(I_PV_PLUS,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_SOLAIRE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_KIWAN,I_TENEBRE);
m1151stringMapString_.addEntry(I_NAUTILE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_PANGA,I_INSECTE);
m1151stringMapString_.addEntry(I_BAIE_FRAIVE,I_PLANTE);
m1151stringMapString_.addEntry(I_PIC_VENIN,I_NORMAL);
m1151stringMapString_.addEntry(I_GUERISON,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_POMROZ,I_COMBAT);
m1151stringMapString_.addEntry(I_PLAQUE_FLAM,I_NORMAL);
m1151stringMapString_.addEntry(I_FILET_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_PALMA,I_ACIER);
m1151stringMapString_.addEntry(I_CEINT_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_CHRONO_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_GROSSERACINE,I_NORMAL);
m1151stringMapString_.addEntry(I_REVEIL,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_VEINE,I_NORMAL);
m1151stringMapString_.addEntry(I_HERBEBLANCHE,I_NORMAL);
m1151stringMapString_.addEntry(I_SOMBRE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_REMU,I_FEU);
m1151stringMapString_.addEntry(I_PLAQUINSECT,I_NORMAL);
m1151stringMapString_.addEntry(I_BATON,I_NORMAL);
m1151stringMapString_.addEntry(I_RUNE_SORT,I_NORMAL);
m1151stringMapString_.addEntry(I_COMPET_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_ORBE_ADAMANT,I_NORMAL);
m1151stringMapString_.addEntry(I_MOUCH_SOIE,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_GRIFFE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_WIKI,I_ROCHE);
m1151stringMapString_.addEntry(I_GLACETERNEL,I_NORMAL);
m1151stringMapString_.addEntry(I_PT_DE_MIRE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_LICHII,I_PLANTE);
m1151stringMapString_.addEntry(I_PIERRE_FEU,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_FANTO,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUESPRIT,I_NORMAL);
m1151stringMapString_.addEntry(I_CUILLERTORDU,I_NORMAL);
m1151stringMapString_.addEntry(I_FERRAILLE,I_NORMAL);
m1151stringMapString_.addEntry(I_BEC_POINTU,I_NORMAL);
m1151stringMapString_.addEntry(I_CHAINE_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_QUALOT,I_POISON);
m1151stringMapString_.addEntry(I_ECAILLE_OCEAN,I_NORMAL);
m1151stringMapString_.addEntry(I_PROTEINE,I_NORMAL);
m1151stringMapString_.addEntry(I_PETIT_CHAMPI,I_NORMAL);
m1151stringMapString_.addEntry(I_LIMONADE,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_RACINE,I_NORMAL);
m1151stringMapString_.addEntry(I_POING_CHANCE,I_NORMAL);
m1151stringMapString_.addEntry(I_CARTE_ROUGE,I_NORMAL);
m1151stringMapString_.addEntry(I_SUPER_POTION,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_NUIT,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_DURE,I_NORMAL);
m1151stringMapString_.addEntry(I_ANTI_BRULE,I_NORMAL);
m1151stringMapString_.addEntry(I_RUNE_PURIF,I_NORMAL);
m1151stringMapString_.addEntry(I_ORBE_PLATINE,I_NORMAL);
m1151stringMapString_.addEntry(I_SPEED_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_GLACE,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_ROC,I_NORMAL);
m1151stringMapString_.addEntry(I_BOUE_NOIRE,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_MER,I_NORMAL);
m1151stringMapString_.addEntry(I_CEINT_FORCE,I_NORMAL);
m1151stringMapString_.addEntry(I_MAGMARISEUR,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_SIAM,I_INSECTE);
m1151stringMapString_.addEntry(I_PIERRE_MOUSSE,I_NORMAL);
m1151stringMapString_.addEntry(I_METRO,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRALLEGEE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_REPOI,I_ELECTRIQUE);
m1151stringMapString_.addEntry(I_VIVE_GRIFFE,I_NORMAL);
m1151stringMapString_.addEntry(I_CROC_DRAGON,I_NORMAL);
m1151stringMapString_.addEntry(I_CARAPACE_MUE,I_NORMAL);
m1151stringMapString_.addEntry(I_SCUBA_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_FER,I_NORMAL);
m1151stringMapString_.addEntry(I_BAND_CHOIX,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_PRINE,I_VOL);
m1151stringMapString_.addEntry(I_MORC_ETOILE,I_NORMAL);
m1151stringMapString_.addEntry(I_ANTIDOTE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_SAILAK,I_COMBAT);
m1151stringMapString_.addEntry(I_BAIE_FRAIGO,I_DRAGON);
m1151stringMapString_.addEntry(I_BANDEAU_ETREINTE,I_NORMAL);
m1151stringMapString_.addEntry(I_POIDS_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_LINGAN,I_GLACE);
m1151stringMapString_.addEntry(I_BAND_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_SOIN_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_PLUME,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_LUNE,I_NORMAL);
m1151stringMapString_.addEntry(I_RAPPEL_MAX,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_CHARTI,I_ROCHE);
m1151stringMapString_.addEntry(I_BAIE_CHOCCO,I_FEU);
m1151stringMapString_.addEntry(I_BAIE_ABRIKO,I_SOL);
m1151stringMapString_.addEntry(I_BAIE_JABOCA,I_DRAGON);
m1151stringMapString_.addEntry(I_BAIE_FIGUY,I_INSECTE);
m1151stringMapString_.addEntry(I_LENTILSCOPE,I_NORMAL);
m1151stringMapString_.addEntry(I_COPAIN_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_NOEUD_DESTIN,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_CHERIM,I_SPECTRE);
m1151stringMapString_.addEntry(I_MODULE_CRYO,I_NORMAL);
m1151stringMapString_.addEntry(I_HONOR_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_LUNE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_HYDRO,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_NANANA,I_PLANTE);
m1151stringMapString_.addEntry(I_HUILE,I_NORMAL);
m1151stringMapString_.addEntry(I_LENT_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_RAPIDE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_MYRTE,I_ELECTRIQUE);
m1151stringMapString_.addEntry(I_CD_DOUTEUX,I_NORMAL);
m1151stringMapString_.addEntry(I_BRAC_MACHO,I_NORMAL);
m1151stringMapString_.addEntry(I_LENTIL_ZOOM,I_NORMAL);
m1151stringMapString_.addEntry(I_GRELOT_ZEN,I_NORMAL);
m1151stringMapString_.addEntry(I_ROCHE_ROYALE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_RATAM,I_PLANTE);
m1151stringMapString_.addEntry(I_BULBE,I_NORMAL);
m1151stringMapString_.addEntry(I_CARBONE,I_NORMAL);
m1151stringMapString_.addEntry(I_ORBE_PERLE,I_NORMAL);
m1151stringMapString_.addEntry(I_CROC_RASOIR,I_NORMAL);
m1151stringMapString_.addEntry(I_PROTECTEUR,I_NORMAL);
m1151stringMapString_.addEntry(I_CALCIUM,I_NORMAL);
m1151stringMapString_.addEntry(I_CHARBON,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_PLANTE,I_NORMAL);
m1151stringMapString_.addEntry(I_PIQUANTS,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_GRENA,I_GLACE);
m1151stringMapString_.addEntry(I_HERBE_MENTAL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_DURIN,I_EAU);
m1151stringMapString_.addEntry(I_PLAQUE_HERBE,I_NORMAL);
m1151stringMapString_.addEntry(I_FER,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_CIEL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_FRAMBY,I_ACIER);
m1151stringMapString_.addEntry(I_BAIE_PARMA,I_ELECTRIQUE);
m1151stringMapString_.addEntry(I_BAIE_ORAN,I_POISON);
m1151stringMapString_.addEntry(I_PEAU_METAL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_POMMO,I_TENEBRE);
m1151stringMapString_.addEntry(I_CASQUE_BRUT,I_NORMAL);
m1151stringMapString_.addEntry(I_LUNET_CHOIX,I_NORMAL);
m1151stringMapString_.addEntry(I_OS_RARE,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_POING,I_NORMAL);
m1151stringMapString_.addEntry(I_BALLE_FER,I_NORMAL);
m1151stringMapString_.addEntry(I_MASSE_OS,I_NORMAL);
m1151stringMapString_.addEntry(I_ECAILLE_DRACO,I_NORMAL);
m1151stringMapString_.addEntry(I_ENCENS_PLEIN,I_NORMAL);
m1151stringMapString_.addEntry(I_ELIXIR,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_TOXIC,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_SITRUS,I_PSY);
m1151stringMapString_.addEntry(I_MULTI_EXP,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_COBABA,I_VOL);
m1151stringMapString_.addEntry(I_BAIE_MAGO,I_SPECTRE);
m1151stringMapString_.addEntry(I_MODULE_PYRO,I_NORMAL);
m1151stringMapString_.addEntry(I_BOUTON_FUITE,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_CRANE,I_NORMAL);
m1151stringMapString_.addEntry(I_BIZAR_ENCENS,I_NORMAL);
m1151stringMapString_.addEntry(I_POUDRECLAIRE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_FRISTA,I_PSY);
m1151stringMapString_.addEntry(I_HUILE_MAX,I_NORMAL);
m1151stringMapString_.addEntry(I_MASSE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_POUSS_ETOILE,I_NORMAL);
m1151stringMapString_.addEntry(I_SUPER_REPOUSSE,I_NORMAL);
m1151stringMapString_.addEntry(I_LUNET_NOIRES,I_NORMAL);
m1151stringMapString_.addEntry(I_AMELIORATOR,I_NORMAL);
m1151stringMapString_.addEntry(I_GRELOT_COQUE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_ALGA,I_COMBAT);
m1151stringMapString_.addEntry(I_HERBE_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_LANSAT,I_VOL);
m1151stringMapString_.addEntry(I_TISSU_FAUCHE,I_NORMAL);
m1151stringMapString_.addEntry(I_ANTI_PARA,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_AUBE,I_NORMAL);
m1151stringMapString_.addEntry(I_PERLE,I_NORMAL);
m1151stringMapString_.addEntry(I_EVOLUROC,I_NORMAL);
m1151stringMapString_.addEntry(I_LUXE_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_LONME,I_SOL);
m1151stringMapString_.addEntry(I_AIMANT,I_NORMAL);
m1151stringMapString_.addEntry(I_POIGN_POUV,I_NORMAL);
m1151stringMapString_.addEntry(I_BALLON,I_NORMAL);
m1151stringMapString_.addEntry(I_PIERRE_GLACE,I_NORMAL);
m1151stringMapString_.addEntry(I_ROCHE_ELECTRIQUE,I_NORMAL);
m1151stringMapString_.addEntry(I_APPAT_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_DOME,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_TAMATO,I_PSY);
m1151stringMapString_.addEntry(I_ENCENS_DOUX,I_NORMAL);
m1151stringMapString_.addEntry(I_FAIBLO_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_POUDRE_ARG,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_ARMURE,I_NORMAL);
m1151stringMapString_.addEntry(I_RESTES,I_NORMAL);
m1151stringMapString_.addEntry(I_BIS_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_MARON,I_EAU);
m1151stringMapString_.addEntry(I_ANTIGEL,I_NORMAL);
m1151stringMapString_.addEntry(I_POTION_MAX,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_RESIN,I_VOL);
m1151stringMapString_.addEntry(I_PP_MAX,I_NORMAL);
m1151stringMapString_.addEntry(I_LOUPE,I_NORMAL);
m1151stringMapString_.addEntry(I_ORBE_TOXIQUE,I_NORMAL);
m1151stringMapString_.addEntry(I_MASTER_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_BAND_MUSCLE,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_TERRE,I_NORMAL);
m1151stringMapString_.addEntry(I_ELECTRISEUR,I_NORMAL);
m1151stringMapString_.addEntry(I_ZINC,I_NORMAL);
m1151stringMapString_.addEntry(I_NIVEAU_BALL,I_NORMAL);
m1151stringMapString_.addEntry(I_GROS_CHAMPI,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_PECHA,I_ELECTRIQUE);
m1151stringMapString_.addEntry(I_MODULE_CHOC,I_NORMAL);
m1151stringMapString_.addEntry(I_PLAQUE_VOLT,I_NORMAL);
m1151stringMapString_.addEntry(I_RALENTIQUEUE,I_NORMAL);
m1151stringMapString_.addEntry(I_FOSSILE_PLAQUE,I_NORMAL);
m1151stringMapString_.addEntry(I_BAIE_MANGOU,I_ROCHE);
m1151damagingMoveData_.setTypesByOwnedItem(m1151stringMapString_);
m1151damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1151damagingMoveData_;
}
static MoveData m185(){
DamagingMoveData m1152damagingMoveData_ = Instances.newDamagingMoveData();
m1152damagingMoveData_.setCategory(I_PHYSIQUE);
m1152damagingMoveData_.setDirect(true);
m1152damagingMoveData_.setStoppableMoveKoSingle(true);
m1152damagingMoveData_.setPp(15);
StringList m1152stringList_=new StringList(new CollCapacity(1));
m1152stringList_.add(I_DRAGON);
m1152damagingMoveData_.setTypes(m1152stringList_);
m1152stringList_=new StringList(new CollCapacity(1));
m1152stringList_.add(I_DRAGON);
m1152damagingMoveData_.setBoostedTypes(m1152stringList_);
m1152damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1152custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1152effectDamage_=newEffectDamageLaw(new Rate(R_2));
m1152effectDamage_.setPower(R_40);
m1152effectDamage_.setUserAttack(true);
m1152effectDamage_.setStatisAtt(Statistic.ATTACK);
m1152effectDamage_.setTargetDefense(true);
m1152effectDamage_.setStatisDef(Statistic.DEFENSE);
m1152effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1152custListEffect_.add(m1152effectDamage_);
m1152damagingMoveData_.setEffects(m1152custListEffect_);
m1152damagingMoveData_.setStoppableMoveSolo(true);
m1152damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1152damagingMoveData_;
}
static MoveData m186(){
DamagingMoveData m1153damagingMoveData_ = Instances.newDamagingMoveData();
m1153damagingMoveData_.setCategory(I_PHYSIQUE);
m1153damagingMoveData_.setStoppableMoveKoSingle(true);
m1153damagingMoveData_.setPp(20);
StringList m1153stringList_=new StringList(new CollCapacity(1));
m1153stringList_.add(I_INSECTE);
m1153damagingMoveData_.setTypes(m1153stringList_);
m1153stringList_=new StringList(new CollCapacity(1));
m1153stringList_.add(I_INSECTE);
m1153damagingMoveData_.setBoostedTypes(m1153stringList_);
m1153damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1153custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1153effectDamage_=newEffectDamageLaw(new Rate(R_2));
m1153effectDamage_.setPower(R_25);
m1153effectDamage_.setUserAttack(true);
m1153effectDamage_.setStatisAtt(Statistic.ATTACK);
m1153effectDamage_.setTargetDefense(true);
m1153effectDamage_.setStatisDef(Statistic.DEFENSE);
m1153effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1153custListEffect_.add(m1153effectDamage_);
EffectStatus m1153effectStatus_=Instances.newEffectStatus();
MonteCarloString m1153monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1153monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m1153monteCarloString_.addQuickEvent(I_SIMPLE_POISON,LgInt.newLgInt(R_1));
m1153effectStatus_.setLawStatus(m1153monteCarloString_);
StringMap<String> m1153stringMapString_=new StringMap<String>(new CollCapacity(1));
m1153stringMapString_.addEntry(I_SIMPLE_POISON,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_SIMPLE_POISON+OS+I_POISON_GRAVE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0+OO+A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_TYPES+RB+OC+LB+I_POISON+OS+I_ACIER+RB+RP+RP+GT+R_0);
m1153effectStatus_.setLocalFailStatus(m1153stringMapString_);
m1153effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1153ints_=new Ints(new CollCapacity(1));
m1153ints_.add(0);
m1153effectStatus_.setRequiredSuccessfulEffects(m1153ints_);
m1153custListEffect_.add(m1153effectStatus_);
m1153damagingMoveData_.setEffects(m1153custListEffect_);
m1153damagingMoveData_.setStoppableMoveSolo(true);
m1153damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1153damagingMoveData_;
}
static MoveData m187(){
DamagingMoveData m1154damagingMoveData_ = Instances.newDamagingMoveData();
m1154damagingMoveData_.setCategory(I_PHYSIQUE);
m1154damagingMoveData_.setDirect(true);
m1154damagingMoveData_.setStoppableMoveKoSingle(true);
m1154damagingMoveData_.setPp(30);
StringList m1154stringList_=new StringList(new CollCapacity(1));
m1154stringList_.add(I_COMBAT);
m1154damagingMoveData_.setTypes(m1154stringList_);
m1154stringList_=new StringList(new CollCapacity(1));
m1154stringList_.add(I_COMBAT);
m1154damagingMoveData_.setBoostedTypes(m1154stringList_);
m1154damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1154custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1154effectDamage_=newEffectDamageLaw(new Rate(R_2));
m1154effectDamage_.setPower(R_30);
m1154effectDamage_.setUserAttack(true);
m1154effectDamage_.setStatisAtt(Statistic.ATTACK);
m1154effectDamage_.setTargetDefense(true);
m1154effectDamage_.setStatisDef(Statistic.DEFENSE);
m1154effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1154custListEffect_.add(m1154effectDamage_);
m1154damagingMoveData_.setEffects(m1154custListEffect_);
m1154damagingMoveData_.setStoppableMoveSolo(true);
m1154damagingMoveData_.setStoppableMoveMulti(true);
m1154damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1154damagingMoveData_;
}
static MoveData m188(){
StatusMoveData m1155statusMoveData_ = Instances.newStatusMoveData();
m1155statusMoveData_.setCounterableMove(true);
m1155statusMoveData_.setPp(10);
StringList m1155stringList_=new StringList(new CollCapacity(1));
m1155stringList_.add(I_NORMAL);
m1155statusMoveData_.setTypes(m1155stringList_);
m1155stringList_=new StringList(new CollCapacity(1));
m1155stringList_.add(I_NORMAL);
m1155statusMoveData_.setBoostedTypes(m1155stringList_);
m1155statusMoveData_.setAccuracy(R_3_4);
CustList<Effect> m1155custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatus m1155effectStatus_=Instances.newEffectStatus();
MonteCarloString m1155monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1155monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m1155effectStatus_.setLawStatus(m1155monteCarloString_);
StringMap<String> m1155stringMapString_=new StringMap<String>(new CollCapacity(1));
m1155stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1155effectStatus_.setLocalFailStatus(m1155stringMapString_);
m1155effectStatus_.setTargetChoice(TargetChoice.ADJ_MULT);
m1155custListEffect_.add(m1155effectStatus_);
m1155statusMoveData_.setEffects(m1155custListEffect_);
m1155statusMoveData_.setStoppableMoveSolo(true);
m1155statusMoveData_.setStoppableMoveMulti(true);
m1155statusMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1155statusMoveData_;
}
static MoveData m189(){
StatusMoveData m1156statusMoveData_ = Instances.newStatusMoveData();
m1156statusMoveData_.setCounterableMove(true);
m1156statusMoveData_.setPp(20);
StringList m1156stringList_=new StringList(new CollCapacity(1));
m1156stringList_.add(I_NORMAL);
m1156statusMoveData_.setTypes(m1156stringList_);
m1156stringList_=new StringList(new CollCapacity(1));
m1156stringList_.add(I_NORMAL);
m1156statusMoveData_.setBoostedTypes(m1156stringList_);
m1156statusMoveData_.setAccuracy(R_1);
CustList<Effect> m1156custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectStatistic m1156effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1156enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1156enumMapStatisticByte_.addEntry(Statistic.EVASINESS,-1L);
m1156effectStatistic_.setStatisVarRank(m1156enumMapStatisticByte_);
IdMap<Statistic,String> m1156enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1156enumMapStatisticString_.addEntry(Statistic.EVASINESS,V_CIBLE_CLONE+GT+R_0);
m1156effectStatistic_.setLocalFailStatis(m1156enumMapStatisticString_);
m1156effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1156effectStatistic_.setTargetChoice(TargetChoice.ADJ_ADV);
m1156custListEffect_.add(m1156effectStatistic_);
m1156statusMoveData_.setEffects(m1156custListEffect_);
m1156statusMoveData_.setStoppableMoveSolo(true);
m1156statusMoveData_.setStoppableMoveMulti(true);
m1156statusMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1156statusMoveData_;
}
static MoveData m190(){
DamagingMoveData m1157damagingMoveData_ = Instances.newDamagingMoveData();
m1157damagingMoveData_.setCategory(I_PHYSIQUE);
m1157damagingMoveData_.setDirect(true);
m1157damagingMoveData_.setStoppableMoveKoSingle(true);
m1157damagingMoveData_.setPp(10);
StringList m1157stringList_=new StringList(new CollCapacity(1));
m1157stringList_.add(I_DRAGON);
m1157damagingMoveData_.setTypes(m1157stringList_);
m1157stringList_=new StringList(new CollCapacity(1));
m1157stringList_.add(I_DRAGON);
m1157damagingMoveData_.setBoostedTypes(m1157stringList_);
m1157damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1157custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1157effectDamage_=newEffectDamage();
m1157effectDamage_.setPower(R_100);
m1157effectDamage_.setUserAttack(true);
m1157effectDamage_.setStatisAtt(Statistic.ATTACK);
m1157effectDamage_.setTargetDefense(true);
m1157effectDamage_.setStatisDef(Statistic.DEFENSE);
m1157effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1157custListEffect_.add(m1157effectDamage_);
EffectStatus m1157effectStatus_=Instances.newEffectStatus();
MonteCarloString m1157monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1157monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_4));
m1157monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_1));
m1157effectStatus_.setLawStatus(m1157monteCarloString_);
StringMap<String> m1157stringMapString_=new StringMap<String>(new CollCapacity(1));
m1157stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1157effectStatus_.setLocalFailStatus(m1157stringMapString_);
m1157effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1157ints_=new Ints(new CollCapacity(1));
m1157ints_.add(0);
m1157effectStatus_.setRequiredSuccessfulEffects(m1157ints_);
m1157custListEffect_.add(m1157effectStatus_);
m1157damagingMoveData_.setEffects(m1157custListEffect_);
m1157damagingMoveData_.setStoppableMoveSolo(true);
m1157damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1157damagingMoveData_;
}
static MoveData m191(){
DamagingMoveData m1158damagingMoveData_ = Instances.newDamagingMoveData();
m1158damagingMoveData_.setCategory(I_SPECIALE);
m1158damagingMoveData_.setStoppableMoveKoSingle(true);
m1158damagingMoveData_.setPp(10);
StringList m1158stringList_=new StringList(new CollCapacity(1));
m1158stringList_.add(I_DRAGON);
m1158damagingMoveData_.setTypes(m1158stringList_);
m1158stringList_=new StringList(new CollCapacity(1));
m1158stringList_.add(I_DRAGON);
m1158damagingMoveData_.setBoostedTypes(m1158stringList_);
m1158damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1158custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1158effectDamage_=newEffectDamage();
m1158effectDamage_.setPower(R_90);
m1158effectDamage_.setUserAttack(true);
m1158effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1158effectDamage_.setTargetDefense(true);
m1158effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1158effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1158custListEffect_.add(m1158effectDamage_);
m1158damagingMoveData_.setEffects(m1158custListEffect_);
m1158damagingMoveData_.setStoppableMoveSolo(true);
m1158damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1158damagingMoveData_;
}
static MoveData m192(){
DamagingMoveData m1159damagingMoveData_ = Instances.newDamagingMoveData();
m1159damagingMoveData_.setCategory(I_PHYSIQUE);
m1159damagingMoveData_.setDirect(true);
m1159damagingMoveData_.setStoppableMoveKoSingle(true);
m1159damagingMoveData_.setPp(15);
StringList m1159stringList_=new StringList(new CollCapacity(1));
m1159stringList_.add(I_DRAGON);
m1159damagingMoveData_.setTypes(m1159stringList_);
m1159stringList_=new StringList(new CollCapacity(1));
m1159stringList_.add(I_DRAGON);
m1159damagingMoveData_.setBoostedTypes(m1159stringList_);
m1159damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1159custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1159effectDamage_=newEffectDamage();
m1159effectDamage_.setPower(R_80);
m1159effectDamage_.setUserAttack(true);
m1159effectDamage_.setStatisAtt(Statistic.ATTACK);
m1159effectDamage_.setTargetDefense(true);
m1159effectDamage_.setStatisDef(Statistic.DEFENSE);
m1159effectDamage_.setTargetChoice(TargetChoice.ADJ_MULT);
m1159custListEffect_.add(m1159effectDamage_);
m1159damagingMoveData_.setEffects(m1159custListEffect_);
m1159damagingMoveData_.setStoppableMoveSolo(true);
m1159damagingMoveData_.setStoppableMoveMulti(true);
m1159damagingMoveData_.setTargetChoice(TargetChoice.ADJ_MULT);
return m1159damagingMoveData_;
}
static MoveData m193(){
DamagingMoveData m1160damagingMoveData_ = Instances.newDamagingMoveData();
m1160damagingMoveData_.setCategory(I_SPECIALE);
m1160damagingMoveData_.setStoppableMoveKoSingle(true);
m1160damagingMoveData_.setPp(20);
StringList m1160stringList_=new StringList(new CollCapacity(1));
m1160stringList_.add(I_DRAGON);
m1160damagingMoveData_.setTypes(m1160stringList_);
m1160stringList_=new StringList(new CollCapacity(1));
m1160stringList_.add(I_DRAGON);
m1160damagingMoveData_.setBoostedTypes(m1160stringList_);
m1160damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1160custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1160effectDamage_=newEffectDamage();
m1160effectDamage_.setPower(R_60);
m1160effectDamage_.setUserAttack(true);
m1160effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1160effectDamage_.setTargetDefense(true);
m1160effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1160effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1160custListEffect_.add(m1160effectDamage_);
EffectStatus m1160effectStatus_=Instances.newEffectStatus();
MonteCarloString m1160monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1160monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1160monteCarloString_.addQuickEvent(I_PARALYSIE,LgInt.newLgInt(R_3));
m1160effectStatus_.setLawStatus(m1160monteCarloString_);
StringMap<String> m1160stringMapString_=new StringMap<String>(new CollCapacity(1));
m1160stringMapString_.addEntry(I_PARALYSIE,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_PARALYSIE+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1160effectStatus_.setLocalFailStatus(m1160stringMapString_);
m1160effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1160ints_=new Ints(new CollCapacity(1));
m1160ints_.add(0);
m1160effectStatus_.setRequiredSuccessfulEffects(m1160ints_);
m1160custListEffect_.add(m1160effectStatus_);
m1160damagingMoveData_.setEffects(m1160custListEffect_);
m1160damagingMoveData_.setStoppableMoveSolo(true);
m1160damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1160damagingMoveData_;
}
static MoveData m194(){
DamagingMoveData m1161damagingMoveData_ = Instances.newDamagingMoveData();
m1161damagingMoveData_.setCategory(I_SPECIALE);
m1161damagingMoveData_.setStoppableMoveKoSingle(true);
m1161damagingMoveData_.setPp(5);
StringList m1161stringList_=new StringList(new CollCapacity(1));
m1161stringList_.add(I_DRAGON);
m1161damagingMoveData_.setTypes(m1161stringList_);
m1161stringList_=new StringList(new CollCapacity(1));
m1161stringList_.add(I_DRAGON);
m1161damagingMoveData_.setBoostedTypes(m1161stringList_);
m1161damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1161custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1161effectDamage_=newEffectDamage();
m1161effectDamage_.setPower(R_140);
m1161effectDamage_.setUserAttack(true);
m1161effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1161effectDamage_.setTargetDefense(true);
m1161effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1161effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1161custListEffect_.add(m1161effectDamage_);
EffectStatistic m1161effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1161enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(1));
m1161enumMapStatisticByte_.addEntry(Statistic.SPECIAL_ATTACK,-2L);
m1161effectStatistic_.setStatisVarRank(m1161enumMapStatisticByte_);
IdMap<Statistic,String> m1161enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(1));
m1161enumMapStatisticString_.addEntry(Statistic.SPECIAL_ATTACK,V_LANCEUR_CLONE+GT+R_0);
m1161effectStatistic_.setLocalFailStatis(m1161enumMapStatisticString_);
m1161effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1161effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
Ints m1161ints_=new Ints(new CollCapacity(1));
m1161ints_.add(0);
m1161effectStatistic_.setRequiredSuccessfulEffects(m1161ints_);
m1161custListEffect_.add(m1161effectStatistic_);
m1161damagingMoveData_.setEffects(m1161custListEffect_);
m1161damagingMoveData_.setStoppableMoveSolo(true);
m1161damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1161damagingMoveData_;
}
static MoveData m195(){
DamagingMoveData m1162damagingMoveData_ = Instances.newDamagingMoveData();
m1162damagingMoveData_.setCategory(I_PHYSIQUE);
m1162damagingMoveData_.setDirect(true);
m1162damagingMoveData_.setStoppableMoveKoSingle(true);
m1162damagingMoveData_.setPp(10);
StringList m1162stringList_=new StringList(new CollCapacity(1));
m1162stringList_.add(I_DRAGON);
m1162damagingMoveData_.setTypes(m1162stringList_);
m1162stringList_=new StringList(new CollCapacity(1));
m1162stringList_.add(I_DRAGON);
m1162damagingMoveData_.setBoostedTypes(m1162stringList_);
m1162damagingMoveData_.setPriority(-6);
m1162damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1162custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1162effectDamage_=newEffectDamage();
m1162effectDamage_.setPower(R_60);
m1162effectDamage_.setUserAttack(true);
m1162effectDamage_.setStatisAtt(Statistic.ATTACK);
m1162effectDamage_.setTargetDefense(true);
m1162effectDamage_.setStatisDef(Statistic.DEFENSE);
m1162effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1162effectDamage_.setFail(V_CIBLE_CLONE+GT+R_0+OO+V_CIBLE_EFFET+SE+I_RACINES);
m1162custListEffect_.add(m1162effectDamage_);
m1162damagingMoveData_.setEffects(m1162custListEffect_);
m1162damagingMoveData_.setStoppableMoveSolo(true);
m1162damagingMoveData_.setStoppableMovePrio(true);
m1162damagingMoveData_.setSwitchType(SwitchType.CIBLE);
m1162damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1162damagingMoveData_;
}
static MoveData m196(){
DamagingMoveData m1163damagingMoveData_ = Instances.newDamagingMoveData();
m1163damagingMoveData_.setCategory(I_SPECIALE);
m1163damagingMoveData_.setStoppableMoveKoSingle(true);
m1163damagingMoveData_.setPp(10);
StringList m1163stringList_=new StringList(new CollCapacity(1));
m1163stringList_.add(I_DRAGON);
m1163damagingMoveData_.setTypes(m1163stringList_);
m1163stringList_=new StringList(new CollCapacity(1));
m1163stringList_.add(I_DRAGON);
m1163damagingMoveData_.setBoostedTypes(m1163stringList_);
m1163damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1163custListEffect_ = new CustList<Effect>(new CollCapacity(1));
EffectDamage m1163effectDamage_=newEffectDamage();
m1163effectDamage_.setConstDamage(true);
m1163effectDamage_.setPower(R_40);
m1163effectDamage_.setUserAttack(true);
m1163effectDamage_.setStatisAtt(Statistic.SPECIAL_ATTACK);
m1163effectDamage_.setTargetDefense(true);
m1163effectDamage_.setStatisDef(Statistic.SPECIAL_DEFENSE);
m1163effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1163custListEffect_.add(m1163effectDamage_);
m1163damagingMoveData_.setEffects(m1163custListEffect_);
m1163damagingMoveData_.setStoppableMoveSolo(true);
m1163damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1163damagingMoveData_;
}
static MoveData m197(){
DamagingMoveData m1164damagingMoveData_ = Instances.newDamagingMoveData();
m1164damagingMoveData_.setCategory(I_PHYSIQUE);
m1164damagingMoveData_.setStoppableMoveKoSingle(true);
m1164damagingMoveData_.setPp(5);
StringList m1164stringList_=new StringList(new CollCapacity(1));
m1164stringList_.add(I_VOL);
m1164damagingMoveData_.setTypes(m1164stringList_);
m1164stringList_=new StringList(new CollCapacity(1));
m1164stringList_.add(I_VOL);
m1164damagingMoveData_.setBoostedTypes(m1164stringList_);
m1164damagingMoveData_.setAccuracy(R_1);
CustList<Effect> m1164custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1164effectDamage_=newEffectDamage();
m1164effectDamage_.setPower(R_120);
m1164effectDamage_.setUserAttack(true);
m1164effectDamage_.setStatisAtt(Statistic.ATTACK);
m1164effectDamage_.setTargetDefense(true);
m1164effectDamage_.setStatisDef(Statistic.DEFENSE);
m1164effectDamage_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
m1164custListEffect_.add(m1164effectDamage_);
EffectStatistic m1164effectStatistic_=Instances.newEffectStatistic();
IdMap<Statistic,Long> m1164enumMapStatisticByte_=new IdMap<Statistic,Long>(new CollCapacity(2));
m1164enumMapStatisticByte_.addEntry(Statistic.SPECIAL_DEFENSE,-1L);
m1164enumMapStatisticByte_.addEntry(Statistic.DEFENSE,-1L);
m1164effectStatistic_.setStatisVarRank(m1164enumMapStatisticByte_);
IdMap<Statistic,String> m1164enumMapStatisticString_=new IdMap<Statistic,String>(new CollCapacity(2));
m1164enumMapStatisticString_.addEntry(Statistic.SPECIAL_DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1164enumMapStatisticString_.addEntry(Statistic.DEFENSE,V_CIBLE_CLONE+GT+R_0);
m1164effectStatistic_.setLocalFailStatis(m1164enumMapStatisticString_);
m1164effectStatistic_.setEvtRate(Rate.newRate(R_1));
m1164effectStatistic_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
Ints m1164ints_=new Ints(new CollCapacity(1));
m1164ints_.add(0);
m1164effectStatistic_.setRequiredSuccessfulEffects(m1164ints_);
m1164custListEffect_.add(m1164effectStatistic_);
m1164damagingMoveData_.setEffects(m1164custListEffect_);
m1164damagingMoveData_.setStoppableMoveSolo(true);
m1164damagingMoveData_.setTargetChoice(TargetChoice.AUTRE_UNIQ);
return m1164damagingMoveData_;
}
static MoveData m198(){
DamagingMoveData m1165damagingMoveData_ = Instances.newDamagingMoveData();
m1165damagingMoveData_.setCategory(I_PHYSIQUE);
m1165damagingMoveData_.setDirect(true);
m1165damagingMoveData_.setStoppableMoveKoSingle(true);
m1165damagingMoveData_.setPp(5);
StringList m1165stringList_=new StringList(new CollCapacity(1));
m1165stringList_.add(I_COMBAT);
m1165damagingMoveData_.setTypes(m1165stringList_);
m1165stringList_=new StringList(new CollCapacity(1));
m1165stringList_.add(I_COMBAT);
m1165damagingMoveData_.setBoostedTypes(m1165stringList_);
m1165damagingMoveData_.setAccuracy(R_1_2);
CustList<Effect> m1165custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1165effectDamage_=newEffectDamage();
m1165effectDamage_.setPower(R_100);
m1165effectDamage_.setUserAttack(true);
m1165effectDamage_.setStatisAtt(Statistic.ATTACK);
m1165effectDamage_.setTargetDefense(true);
m1165effectDamage_.setStatisDef(Statistic.DEFENSE);
m1165effectDamage_.setTargetChoice(TargetChoice.ADJ_UNIQ);
m1165custListEffect_.add(m1165effectDamage_);
EffectStatus m1165effectStatus_=Instances.newEffectStatus();
MonteCarloString m1165monteCarloString_=new MonteCarloString(new CollCapacity(1));
m1165monteCarloString_.addQuickEvent(I_CONFUSION,LgInt.newLgInt(R_1));
m1165effectStatus_.setLawStatus(m1165monteCarloString_);
StringMap<String> m1165stringMapString_=new StringMap<String>(new CollCapacity(1));
m1165stringMapString_.addEntry(I_CONFUSION,A_CARDINAL+LP+A_INTER+LP+LB+V_CIBLE_STATUTS+RB+OC+LB+I_CONFUSION+RB+RP+RP+GT+R_0+OO+V_CIBLE_CLONE+GT+R_0);
m1165effectStatus_.setLocalFailStatus(m1165stringMapString_);
m1165effectStatus_.setTargetChoice(TargetChoice.ADJ_UNIQ);
Ints m1165ints_=new Ints(new CollCapacity(1));
m1165ints_.add(0);
m1165effectStatus_.setRequiredSuccessfulEffects(m1165ints_);
m1165custListEffect_.add(m1165effectStatus_);
m1165damagingMoveData_.setEffects(m1165custListEffect_);
m1165damagingMoveData_.setStoppableMoveSolo(true);
m1165damagingMoveData_.setTargetChoice(TargetChoice.ADJ_UNIQ);
return m1165damagingMoveData_;
}
static MoveData m199(){
DamagingMoveData m1166damagingMoveData_ = Instances.newDamagingMoveData();
m1166damagingMoveData_.setCategory(I_PHYSIQUE);
m1166damagingMoveData_.setStoppableMoveKoSingle(true);
m1166damagingMoveData_.setPp(10);
StringList m1166stringList_=new StringList(new CollCapacity(1));
m1166stringList_.add(I_ROCHE);
m1166damagingMoveData_.setTypes(m1166stringList_);
m1166stringList_=new StringList(new CollCapacity(1));
m1166stringList_.add(I_ROCHE);
m1166damagingMoveData_.setBoostedTypes(m1166stringList_);
m1166damagingMoveData_.setAccuracy(R_9_10);
CustList<Effect> m1166custListEffect_ = new CustList<Effect>(new CollCapacity(2));
EffectDamage m1166effectDamage_=newEffectDamage();
m1166effectDamage_.setPower(R_75);
m1166effectDamage_.setUserAttack(true);
m1166effectDamage_.setStatisAtt(Statistic.ATTACK);
m1166effectDamage_.setTargetDefense(true);
m1166effectDamage_.setStatisDef(Statistic.DEFENSE);
m1166effectDamage_.setTargetChoice(TargetChoice.ADJ_ADV);
m1166custListEffect_.add(m1166effectDamage_);
EffectStatus m1166effectStatus_=Instances.newEffectStatus();
MonteCarloString m1166monteCarloString_=new MonteCarloString(new CollCapacity(2));
m1166monteCarloString_.addQuickEvent(ES,LgInt.newLgInt(R_7));
m1166monteCarloString_.addQuickEvent(I_PEUR,LgInt.newLgInt(R_3));
m1166effectStatus_.setLawStatus(m1166monteCarloString_);
StringMap<String> m1166stringMapString_=new StringMap<String>(new CollCapacity(1));
m1166stringMapString_.addEntry(I_PEUR,V_CIBLE_CLONE+GT+R_0);
m1166effectStatus_.setLocalFailStatus(m1166stringMapString_);
m1166effectStatus_.setTargetChoice(TargetChoice.ADJ_ADV);
Ints m1166ints_=new Ints(new CollCapacity(1));
m1166ints_.add(0);
m1166effectStatus_.setRequiredSuccessfulEffects(m1166ints_);
m1166custListEffect_.add(m1166effectStatus_);
m1166damagingMoveData_.setEffects(m1166custListEffect_);
m1166damagingMoveData_.setStoppableMoveSolo(true);
m1166damagingMoveData_.setStoppableMoveMulti(true);
m1166damagingMoveData_.setTargetChoice(TargetChoice.ADJ_ADV);
return m1166damagingMoveData_;
}
}
