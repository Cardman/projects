package aiki.sml;

import aiki.game.*;
import aiki.game.fight.*;
import aiki.game.player.*;
import aiki.map.pokemon.*;
import code.sml.util.*;

public final class MessagesCorePk {

    public static final String M0 = "{0} learnt the move {1}.";
    public static final String M1 = "{0} apprend l''attaque {1}.";

    private MessagesCorePk(){
    }
    public static TranslationsFile enGame(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(Game.BEATEN_TRAINER,"The partially unlocked places are: {0}.");
        e_.add(Game.BEATEN_TRAINER_FULL,"The unlocked places are: {0}.");
        e_.add(Game.CAUGHT_PK,"The wild pokemon is caught.");
        e_.add(Game.END_GAME,"The game is successful, you are master over pokemon.");
        e_.add(Game.LOST_MONEY,"You lost {0} euros.");
        e_.add(Game.MISSING_PK,"It is missing {0} pokemon for hosting.");
        e_.add(Game.NOT_CAUGHT_PK,"The wild pokemon is not caught.");
        e_.add(Game.NOT_ENOUGH_PLACE,"You have not room enough to get the egg to your team.");
        e_.add(Game.NOT_ENOUGH_PLACE_PARENTS,"You have not room enough to get the two hosted pokemon.");
        e_.add(Game.NO_BEATEN_TRAINER,"{0} from {1} was not beaten yet.");
        e_.add(Game.NO_COMMON_EGG,"The pokemon cannot be together.");
        e_.add(Game.POSSIBLE_BEAT_LEADER,"You can beat {0}.");
        e_.add(Game.RECEIVED_EGG,"You got an egg containing {0}.");
        e_.add(Game.RECEIVED_EGG_PARENTS,"You got an egg containing {0} and the two pokemon having produced it.");
        e_.add(Game.RECEIVED_EGG_WITHOUT_PARENT,"You got an egg containing {0} without the two pokemon having produced it.");
        e_.add(Game.RECEIVED_PARENTS,"You got the two hosted pokemon.");
        e_.add(Game.REMAINING_TRAINERS_GYM,"You must beat all other trainers in this gym.");
        e_.add(Game.SAME_GENDER,"The pokemon have same gender.");
        e_.add(Game.SAME_PK,"The same pokemon is selected twice.");
        e_.add(Game.WON_MONEY,"You won {0} euros.");
        return e_;
    }
    public static TranslationsFile frGame(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(Game.BEATEN_TRAINER,"Les lieux partiellement débloqués sont: {0}.");
        f_.add(Game.BEATEN_TRAINER_FULL,"Les lieux débloqués sont: {0}.");
        f_.add(Game.CAUGHT_PK,"Le pokemon sauvage est capturé.");
        f_.add(Game.END_GAME,"Le jeu est fini, vous êtes maître des pokemon.");
        f_.add(Game.LOST_MONEY,"Vous avez perdu {0} euros.");
        f_.add(Game.MISSING_PK,"Il manque {0} pokemon pour la pension.");
        f_.add(Game.NOT_CAUGHT_PK,"Le pokemon sauvage n''est pas capturé.");
        f_.add(Game.NOT_ENOUGH_PLACE,"Vous n'avez pas assez de place dans l'équipe pour récupérer l'oeuf");
        f_.add(Game.NOT_ENOUGH_PLACE_PARENTS,"Vous n'avez pas assez de place dans l'équipe pour récupérer les pokemon de la pension.");
        f_.add(Game.NO_BEATEN_TRAINER,"{0} de {1} n''a pas encore été battu.");
        f_.add(Game.NO_COMMON_EGG,"Les pokemon ne sont pas compatibles.");
        f_.add(Game.POSSIBLE_BEAT_LEADER,"Vous pouvez combattre {0}.");
        f_.add(Game.RECEIVED_EGG,"Vous avez récupéré un oeuf contenant {0}.");
        f_.add(Game.RECEIVED_EGG_PARENTS,"Vous avez récupéré un oeuf contenant {0} et les deux pokemons l''ayant produit.");
        f_.add(Game.RECEIVED_EGG_WITHOUT_PARENT,"Vous avez récupéré un oeuf contenant {0} sans les deux pokemons l''ayant produit.");
        f_.add(Game.RECEIVED_PARENTS,"Vous avez récupéré les pokemon de la pension.");
        f_.add(Game.REMAINING_TRAINERS_GYM,"Vous devez battre tous les autres dresseurs dans cette arêne.");
        f_.add(Game.SAME_GENDER,"Les pokemon ont le même genre.");
        f_.add(Game.SAME_PK,"Le même pokemon est sélectionné deux fois.");
        f_.add(Game.WON_MONEY,"Vous avez gagné {0} euros.");
        return f_;
    }
    public static TranslationsFile enFight(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(Fight.ABILITY_END_ROUND,"The ability {0} is acting on {1}.");
        e_.add(Fight.AFF_STATUS,"{0} is affected by the status {1}.");
        e_.add(Fight.AFF_STATUS_REL,"{0} is affected by the status {1} with {2}.");
        e_.add(Fight.BATON_PASS,"{0} forwards its strenght and weakness to {1}.");
        e_.add(Fight.CANNOT_USE_MOVE_STATUS,"{0} cannot use any move, because of the status {1}.");
        e_.add(Fight.CANNOT_USE_MOVE_STATUS_REL,"{0} cannot use any move, because of the status {1} by {2}.");
        e_.add(Fight.CHANGED_ABILITY,"The ability of {0} became {1}.");
        e_.add(Fight.CHANGED_ABILITY_DISABLED,"The ability of {0} became disabled.");
        e_.add(Fight.CHANGED_TYPES,"The types of {0} became {1}.");
        e_.add(Fight.CHANGING_VIEW_POINT_TARGET,"{0} became the target.");
        e_.add(Fight.CHANGING_VIEW_POINT_USER,"{0} became the user.");
        e_.add(Fight.CLONE_DAMAGE,"The clone of {0} lost {1} health points.");
        e_.add(Fight.CLONE_ZERO,"The clone of {0} is destroyed.");
        e_.add(Fight.COMBO_MOVE_END_ROUND,"The moves {0} used by your team are acting.");
        e_.add(Fight.COMBO_MOVE_END_ROUND_FOE,"The moves {0} used by the foe team are acting.");
        e_.add(Fight.COMMON_STATISTIC,"The common value of the base of statistic {0} of {1} and {2} is now {3}.");
        e_.add(Fight.COPY_FIGHTER,"{0} became {1}.");
        e_.add(Fight.CREATE_CLONE,"{0} creates itself a clone with {1} health points.");
        e_.add(Fight.CRITICAL_HIT,"Critical hit!");
        e_.add(Fight.DISABLED_FOE_TEAM_MOVE,"The foe team is no longer under effect of the move {0}.");
        e_.add(Fight.DISABLED_FOE_TEAM_USES_MOVE,"The number of uses of the move {0} by the foe team falls to zero.");
        e_.add(Fight.DISABLED_MOVE,"{0} is no longer under the effect of the move {1}.");
        e_.add(Fight.DISABLED_MOVE_REL,"{0} is no longer under the effect of the move {1} with {2}.");
        e_.add(Fight.DISABLED_STATUS,"The status {0} of {1} is disabled.");
        e_.add(Fight.DISABLED_STATUS_REL,"The status {0} of {1} with {2} is disabled.");
        e_.add(Fight.DISABLED_STATUS_REL_OTHER,"The status {0} of {1} with any fighter is disabled.");
        e_.add(Fight.DISABLED_TEAM_MOVE,"Your team is no longer under effect of the move {0}.");
        e_.add(Fight.DISABLED_TEAM_USES_MOVE,"The number of uses of the move {0} by your team falls to zero.");
        e_.add(Fight.DISABLED_WEATHER,"The weather {0} is disabled.");
        e_.add(Fight.DISABLE_ITEM,"{0} cannot use anymore an item.");
        e_.add(Fight.DISAPPEARED,"{0} is disappeared.");
        e_.add(Fight.ENABLED_ABILITY,"The ability of {0} is enabled by changement.");
        e_.add(Fight.ENABLED_FOE_TEAM_MOVE,"The foe team is under effect of the move {0}.");
        e_.add(Fight.ENABLED_MOVE,"{0} is under the effect of the move {1}.");
        e_.add(Fight.ENABLED_MOVE_REL,"{0} is under the effect of the move {1} with {2}.");
        e_.add(Fight.ENABLED_TEAM_MOVE,"Your team is under effect of the move {0}.");
        e_.add(Fight.ENABLED_WEATHER,"The weather {0} is enabled.");
        e_.add(Fight.ERR_BACK_MOVE,"{0} cannot use a move because {0} is a back fighter.");
        e_.add(Fight.ERR_BACK_SWITCH,"{0} cannot be substituted because {0} is already at back of fight.");
        e_.add(Fight.ERR_BAD_CHOICE,"The target was badly chosen for the move {0} used by {1}.");
        e_.add(Fight.ERR_BELONG_SWITCH,"{0} cannot be substitute because {0} does not belong to you.");
        e_.add(Fight.ERR_EVOLVING,"{0} must have between {1} and {2} moves, but {0} has {3} moves.");
        e_.add(Fight.ERR_EVOLVING_AB,"The evolution of {0} must have an ability.");
        e_.add(Fight.ERR_FRONT_SWITCH,"{0} cannot be substitute because {0} is already at front of fight.");
        e_.add(Fight.ERR_KO_SUBSTITUTE,"{0} is ko, so {0} cannot be sent.");
        e_.add(Fight.ERR_NO_CHOSEN_TARGET,"No target was chosen for the move {0} used by {1}.");
        e_.add(Fight.ERR_NO_EFFECT,"The item {0} has no effect on {1}.");
        e_.add(Fight.ERR_NO_HEALED_MOVE,"For using the item {0} on {1}, one single move must be selected.");
        e_.add(Fight.ERR_NO_ITEM,"For healing {0}, an healing item must be used. ");
        e_.add(Fight.ERR_SUBSTITUTE,"{0} cannot be substitute twice.");
        e_.add(Fight.ERR_SUBSTITUTE_BELONG,"The place does not belong to you.");
        e_.add(Fight.ERR_SUBSTITUTE_KO_END_ROUND,"{0} is ko, so {0} cannot stay at front of fight.");
        e_.add(Fight.ERR_SUBSTITUTE_NO_SWITCH_PLACE,"You cannot switch a pokemon at front with an other pokemon at front.");
        e_.add(Fight.ERR_SUBSTITUTE_PLACE,"The place {0} is used at least twice.");
        e_.add(Fight.ERR_SUBSTITUTE_USED_PLACE,"Each place belonging to you must be used once only.");
        e_.add(Fight.ERR_SWITCH,"{0} must have a single substitute.");
        e_.add(Fight.ERR_TOO_FAR_TARGET,"The chosen target for the move {0} used by {1} is too far.");
        e_.add(Fight.ERR_TOO_FEW_ACTIONS,"All your not ko pokemon must act.");
        e_.add(Fight.ERR_TOO_MANY_ACTIONS,"Only {0} actions must be chosen, {1} actions are currently chosen.");
        e_.add(Fight.ERR_TOO_MANY_ITEMS,"The item {0} is used more time than the number of {0} in the inventory.");
        e_.add(Fight.ERR_UNUSABLE_MOVE,"{0} cannot use the move {1}.");
        e_.add(Fight.FAIL_MOVE,"The move {0} failed against {1}.");
        e_.add(Fight.FIGHTER_ALLY,"ally {0}");
        e_.add(Fight.FIGHTER_FOE,"foe {0}");
        e_.add(Fight.FIGHT_EVOLUTION,"{0} evolved into {1}.");
        e_.add(Fight.FIRST_MOVE,"{0} use the move {1}.");
        e_.add(Fight.FORGET_MOVE_EVOLUTION,"{0} forgot the move {1}.");
        e_.add(Fight.GLOBAL_MOVE_END_ROUND,"The weather {0} is acting.");
        e_.add(Fight.HELP_ALLY,"{0} helps {1}.");
        e_.add(Fight.IMMU_CHGT_STAT_MAX,"{0} achieved the maximum of the statistic {1}.");
        e_.add(Fight.IMMU_CHGT_STAT_MIN,"{0} achieved the minimum of the statistic {1}.");
        e_.add(Fight.IMMU_LOW_STAT_ABILITY,"{0} is protected against lowering the statistic {1} by the ability {2}.");
        e_.add(Fight.IMMU_LOW_STAT_ABILITY_ALLY,"{0} is protected against lowering the statistic {1} by the ability {2} of an ally.");
        e_.add(Fight.IMMU_LOW_STAT_ITEM,"{0} is protected against lowering the statistic {1} by the item {2}.");
        e_.add(Fight.IMMU_LOW_STAT_ST_ABILITY,"{0} is protected against lowering the statistic {1} by the ability {2} with the status {3}.");
        e_.add(Fight.IMMU_LOW_STAT_TEAM,"{0} is protected against lowering the statistic {1} by the team move {2}.");
        e_.add(Fight.IMMU_STAT_ABILITY,"{0} is protected against the status {1} by the ability {2}.");
        e_.add(Fight.IMMU_STAT_ABILITY_ALLY,"{0} is protected against the status {1} by the ability {2} of an ally.");
        e_.add(Fight.IMMU_STAT_GLOBAL_MOVE,"{0} is protected against the status {1} by a global move.");
        e_.add(Fight.IMMU_STAT_GLOBAL_MOVE_ABILITY,"{0} is protected against the status {1} by the ability {2} enabled by the global move {3}.");
        e_.add(Fight.IMMU_STAT_ITEM,"{0} is protected against the status {1} by the item {2}.");
        e_.add(Fight.IMMU_STAT_TEAM,"{0} is protected against the status {1} by the team move {2}.");
        e_.add(Fight.INCR_FOE_TEAM_USES_MOVE,"The number of uses of the move {0} by the foe team is increased by one.");
        e_.add(Fight.INCR_STATUS,"The number of rounds of the status {0} of {1} est increased by 1.");
        e_.add(Fight.INCR_STATUS_REL,"The number of rounds of the status {0} of {1} with {2} est increased by 1.");
        e_.add(Fight.INCR_TEAM_USES_MOVE,"The number of uses of the move {0} by your team is increased by one.");
        e_.add(Fight.INVOKE_MOVE,"{0} invoke the move {1}.");
        e_.add(Fight.INVOKE_MOVE_FAIL,"The invokation of the move {0} failed.");
        e_.add(Fight.ITEM_END_ROUND,"The item {0} is acting on {1}.");
        e_.add(Fight.KEEP_MOVE_EVOLUTION,"{0} kept the move {1}.");
        e_.add(Fight.KO_FIGHTER,"{0} falls ko.");
        e_.add(Fight.LEARN_MOVE_EVOLUTION, M0);
        e_.add(Fight.LEARN_MOVE_ROUND, M0);
        e_.add(Fight.LEARN_MOVE_ROUND_DEF,"{0} definitively learnt the move {1}.");
        e_.add(Fight.LOOSE_HP,"{0} lost {1} health points.");
        e_.add(Fight.LOOSE_ITEM,"{0} lost the item {1}.");
        e_.add(Fight.MOVE_END_ROUND,"The move {0} is acting on {1}.");
        e_.add(Fight.MOVE_END_ROUND_REL,"The move {0} is acting on {1} by {2}.");
        e_.add(Fight.MOVE_TYPES,"The types of the move {2}, used by {0}, are {1}.");
        e_.add(Fight.NB_HITS,"{0} hits are inflicted against {1}.");
        e_.add(Fight.NO_ACHIEVE_TARGET,"The move {0} used by {1} do not achieve any target.");
        e_.add(Fight.NO_PRIVATE_MOVES,"{0} can use the move {1} again.");
        e_.add(Fight.NO_VAR_HP,"{0} does not suffered by variation of health points.");
        e_.add(Fight.PREPA_ROUND,"{0} is preparing the move {1}.");
        e_.add(Fight.PRIVATE_MOVES,"{0} cannot use anymore the move {1}.");
        e_.add(Fight.PROTECTED_AGAINST_SEC_EFF,"{0} is protected against the second effects of the move {1} by the ability {2}.");
        e_.add(Fight.PROTECTED_BY_DISAPPEARING,"{0} is untouchable.");
        e_.add(Fight.PROTECTED_BY_INDIVIDUAL_MOVE,"{0} is protected against the move {1} by the individual move {2}.");
        e_.add(Fight.PROTECTED_BY_TEAM_MOVE,"{0} is protected against the move {1} by the team move {2}.");
        e_.add(Fight.PROTECT_BY_ABILITY,"{0} is protected against the move {1} by the ability {2}.");
        e_.add(Fight.PROTECT_BY_ABILITY_DAMAGE,"{0} is protected against the damaging move {1} by the ability {2}.");
        e_.add(Fight.PROTECT_BY_ABILITY_DAMAGE_ALLY,"The ally {0} is protected against the damaging move {1} by the ability {2}.");
        e_.add(Fight.PROTECT_BY_ALLY_ABILITY,"{0} is protected against the move {1} by the ability {2} of an ally of {0}.");
        e_.add(Fight.PROTECT_BY_ITEM,"{0} is protected against the move {1} by the item {2}.");
        e_.add(Fight.PROTECT_TYPE_BY_ABILITY,"{0} is protected against the type {1} by the ability {2}.");
        e_.add(Fight.PROTECT_TYPE_BY_ABILITY_WEATHER,"{0} is protected against the type {1} by the ability {2} enabled by the global move {3}.");
        e_.add(Fight.PROTECT_TYPE_BY_GLOBAL_MOVE,"{0} is protected against the type {1} by the global move {2}.");
        e_.add(Fight.PROTECT_TYPE_BY_INDIVIDUAL_MOVE,"{0} is protected against the type {1} by some moves.");
        e_.add(Fight.PROTECT_TYPE_BY_ITEM,"{0} is protected against the type {1} by the item {2}.");
        e_.add(Fight.RECHARGE_ROUND,"{0} is recharge while this round, so {0} cannot use a move while this round.");
        e_.add(Fight.RE_ENABLE_ITEM,"{0} can an item again.");
        e_.add(Fight.SEND,"{0} is sent.");
        e_.add(Fight.SEND_SUBSTITUTE,"Your ally is going to send {0}.");
        e_.add(Fight.SEND_SUBSTITUTE_FOE,"The foe trainer is going to send {0}.");
        e_.add(Fight.STATUS_BEGIN_ROUND,"{0} cannot use a move because {0} is under the effect of the status {1}.");
        e_.add(Fight.STATUS_BEGIN_ROUND_REL,"{0} cannot use a move against {2} because {0} is under the effect of the status {1} by {2}.");
        e_.add(Fight.STATUS_END_ROUND,"The status {0} is acting on {1}.");
        e_.add(Fight.STATUS_REL_END_ROUND,"The status {0} is acting on {1} by {2}.");
        e_.add(Fight.SUCCESSFUL_MOVE,"The move {0} is successful against {1}.");
        e_.add(Fight.SUCCESSFUL_MOVE_BUT_NO_DAMAGE,"The move {0} is successful against {1} but does not inflict damage against {1}.");
        e_.add(Fight.SWITCH_ITEMS,"{0} hold the item {2} instead of the item {1}.");
        e_.add(Fight.SWITCH_PLACES,"{0} and {1} switch their places.");
        e_.add(Fight.VAR_PP_EFFECT,"The power points the move {0} of {1} vary by {2}.");
        e_.add(Fight.VAR_STATISTIC,"The statistic {0} of {1} changed by {2} levels.");
        e_.add(Fight.WEATHER_INCR,"The number of rounds of the weather {0} is increased by one.");
        e_.add(Fight.WIN_HP,"{0} has {1} health points restored.");
        e_.add(Fight.WIN_ITEM,"{0} take the item {1}.");
        e_.add(Fight.WITHDRAW,"{0} is withdrawen.");
        e_.add(Fight.ISSUE_AFTER_FIGHT,"Bad choice of evolutions after the fight");
        e_.add(Fight.ISSUE_RANDOM,"Issue of random editing");
        e_.add(Fight.ISSUE_RULES_LEARN,"Issue of learning moves choice or evolving");
        e_.add(Fight.ISSUE_RULES_MOVES,"Issue of moves choice");
        e_.add(Fight.ISSUE_RULES_SWITCH,"Issue of switching");
        e_.add(Fight.ISSUE_SENDING,"Issue of sending");
        e_.add(Fight.ISSUE_TOO_HARD,"Issue of hard simulation");
        e_.add(Fight.ISSUE_USING,"Issue of using a move for a pokemon player");
        return e_;
    }
    public static TranslationsFile frFight(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(Fight.ABILITY_END_ROUND,"La capacité {0} agit sur {1}.");
        f_.add(Fight.AFF_STATUS,"{0} prend le statut {1}.");
        f_.add(Fight.AFF_STATUS_REL,"{0} prend le statut {1} avec {2}.");
        f_.add(Fight.BATON_PASS,"{0} transfère sa force et sa faiblesse à {1}.");
        f_.add(Fight.CANNOT_USE_MOVE_STATUS,"{0} ne peut pas attaquer, à cause du statut {1}.");
        f_.add(Fight.CANNOT_USE_MOVE_STATUS_REL,"{0} ne peut pas attaquer, à cause du statut {1} avec {2}.");
        f_.add(Fight.CHANGED_ABILITY,"La capacité de {0} devient {1}.");
        f_.add(Fight.CHANGED_ABILITY_DISABLED,"La capacité de {0} devient inactive.");
        f_.add(Fight.CHANGED_TYPES,"Les types de {0} deviennent {1}.");
        f_.add(Fight.CHANGING_VIEW_POINT_TARGET,"{0} devient la cible.");
        f_.add(Fight.CHANGING_VIEW_POINT_USER,"{0} devient le lanceur.");
        f_.add(Fight.CLONE_DAMAGE,"Le clone de {0} perd {1} points de vie.");
        f_.add(Fight.CLONE_ZERO,"Le clone de {0} est détruit.");
        f_.add(Fight.COMBO_MOVE_END_ROUND,"Les attaques {0} utilisées par votre équipe agissent.");
        f_.add(Fight.COMBO_MOVE_END_ROUND_FOE,"Les attaques {0} utilisées par l''équipe ennemie agissent.");
        f_.add(Fight.COMMON_STATISTIC,"La valeur commune de la base de statistique {0} de {1} et {2} est maintenant de {3}.");
        f_.add(Fight.COPY_FIGHTER,"{0} devient {1}.");
        f_.add(Fight.CREATE_CLONE,"{0} se crée un clone avec {1} points de vie.");
        f_.add(Fight.CRITICAL_HIT,"Coup critique!");
        f_.add(Fight.DISABLED_FOE_TEAM_MOVE,"L''équipe ennemie n''est plus sous effet de l''attaque {0}.");
        f_.add(Fight.DISABLED_FOE_TEAM_USES_MOVE,"Le numbre d''utilisations de l''attaque {0} par l''équipe ennemie tombe à zero.");
        f_.add(Fight.DISABLED_MOVE,"{0} n''est plus sous l''effet de l''attaque {1}.");
        f_.add(Fight.DISABLED_MOVE_REL,"{0} n''est plus sous l''effet de l''attaque {1} avec {2}.");
        f_.add(Fight.DISABLED_STATUS,"Le statut {0} de {1} est désactivé.");
        f_.add(Fight.DISABLED_STATUS_REL,"Le statut {0} de {1} avec {2} est désactivé.");
        f_.add(Fight.DISABLED_STATUS_REL_OTHER,"Le statut {0} de {1} avec n''importe quel combattant est désactivé.");
        f_.add(Fight.DISABLED_TEAM_MOVE,"Votre équipe n''est plus sous effet de l''attaque {0}.");
        f_.add(Fight.DISABLED_TEAM_USES_MOVE,"Le numbre d''utilisations de l''attaque {0} par votre équipe tombe à zero.");
        f_.add(Fight.DISABLED_WEATHER,"Le climat {0} est désactivé.");
        f_.add(Fight.DISABLE_ITEM,"{0} ne peut pas utiliser un objet.");
        f_.add(Fight.DISAPPEARED,"{0} a disparu.");
        f_.add(Fight.ENABLED_ABILITY,"La capacité de {0} est activé par changement.");
        f_.add(Fight.ENABLED_FOE_TEAM_MOVE,"L''équipe ennemie est sous effet de l''attaque {0}.");
        f_.add(Fight.ENABLED_MOVE,"{0} est sous l''effet de l''attaque {1}.");
        f_.add(Fight.ENABLED_MOVE_REL,"{0} est sous l''effet de l''attaque {1} avec {2}.");
        f_.add(Fight.ENABLED_TEAM_MOVE,"Votre équipe est sous effet de l''attaque {0}.");
        f_.add(Fight.ENABLED_WEATHER,"Le climat {0} est activé.");
        f_.add(Fight.ERR_BACK_MOVE,"{0} ne peut pas lancer une attaque car {0} est un combattant à l''arriè.");
        f_.add(Fight.ERR_BACK_SWITCH,"{0} ne peut pas être remplacé car {0} est déjà à l''arriè.");
        f_.add(Fight.ERR_BAD_CHOICE,"La cible a mal été choisie pour l''attaque {0} lancée par {1}.");
        f_.add(Fight.ERR_BELONG_SWITCH,"{0} ne peut pas être remplaçant car {0} ne vous appartient pas.");
        f_.add(Fight.ERR_EVOLVING,"{0} doit avoir entre {1} et {2} attaques, mais {0} a {3} attaques.");
        f_.add(Fight.ERR_EVOLVING_AB,"L''évolution de {0} doit avoir une capacité.");
        f_.add(Fight.ERR_FRONT_SWITCH,"{0} ne peut pas être remplaçant car {0} est déjà au front.");
        f_.add(Fight.ERR_KO_SUBSTITUTE,"{0} est ko, donc {0} ne peut pas être envoyé.");
        f_.add(Fight.ERR_NO_CHOSEN_TARGET,"Aucune cible n''est choisie pour l''attaque {0} lancée par {1}.");
        f_.add(Fight.ERR_NO_EFFECT,"L''objet {0} est sans effet sur {1}.");
        f_.add(Fight.ERR_NO_HEALED_MOVE,"Pour utiliser l''objet {0} sur {1}, il faut qu''une seule attaque soit sélectionnée.");
        f_.add(Fight.ERR_NO_ITEM,"Pour soigner {0}, il faut utiliser un objet de soin. ");
        f_.add(Fight.ERR_SUBSTITUTE,"{0} ne peut pas être remplaçant deux fois.");
        f_.add(Fight.ERR_SUBSTITUTE_BELONG,"La place ne vous appartient pas.");
        f_.add(Fight.ERR_SUBSTITUTE_KO_END_ROUND,"{0} est ko, donc {0} ne peut pas rester au front.");
        f_.add(Fight.ERR_SUBSTITUTE_NO_SWITCH_PLACE,"Vous ne pouvez pas échanger un pokemon de front avec un autre pokemon de front.");
        f_.add(Fight.ERR_SUBSTITUTE_PLACE,"La place numéro {0} est utilisée au moins deux fois.");
        f_.add(Fight.ERR_SUBSTITUTE_USED_PLACE,"Chaque place vous appartenant doit être utilisée une fois seulement.");
        f_.add(Fight.ERR_SWITCH,"{0} doit avoir un seul remplaçant.");
        f_.add(Fight.ERR_TOO_FAR_TARGET,"La cible choisie pour l''attaque {0} lancée par {1} est trop loin.");
        f_.add(Fight.ERR_TOO_FEW_ACTIONS,"Tous vos pokemon non ko doivent agir.");
        f_.add(Fight.ERR_TOO_MANY_ACTIONS,"Seules {0} actions doivent être choisies, {1} actions sont actuellement choisies.");
        f_.add(Fight.ERR_TOO_MANY_ITEMS,"L''objet {0} est plus de fois utilisé que la quantité de {0} dans l''inventaire.");
        f_.add(Fight.ERR_UNUSABLE_MOVE,"{0} ne peut pas lancer l''attaque {1}.");
        f_.add(Fight.FAIL_MOVE,"L''attaque {0} a échoué contre {1}.");
        f_.add(Fight.FIGHTER_ALLY,"{0} allié");
        f_.add(Fight.FIGHTER_FOE,"{0} ennemi");
        f_.add(Fight.FIGHT_EVOLUTION,"{0} a évolué en {1}.");
        f_.add(Fight.FIRST_MOVE,"{0} lance l''attaque {1}.");
        f_.add(Fight.FORGET_MOVE_EVOLUTION,"{0} oublie l''attaque {1}.");
        f_.add(Fight.GLOBAL_MOVE_END_ROUND,"Le climat {0} agit.");
        f_.add(Fight.HELP_ALLY,"{0} aide {1}.");
        f_.add(Fight.IMMU_CHGT_STAT_MAX,"{0} a atteint le maximum de la statistique {1}.");
        f_.add(Fight.IMMU_CHGT_STAT_MIN,"{0} a atteint le minimum de la statistique {1}.");
        f_.add(Fight.IMMU_LOW_STAT_ABILITY,"{0} est protégé contre la baisse de la statistique {1} par la capacité {2}.");
        f_.add(Fight.IMMU_LOW_STAT_ABILITY_ALLY,"{0} est protégé contre la baisse de la statistique {1} par la capacité {2} d''un allié.");
        f_.add(Fight.IMMU_LOW_STAT_ITEM,"{0} est protégé contre la baisse de la statistique {1} par l''objet {2}.");
        f_.add(Fight.IMMU_LOW_STAT_ST_ABILITY,"{0} est protégé contre la baisse de la statistique {1} par la capacité {2} avec le statut {3}.");
        f_.add(Fight.IMMU_LOW_STAT_TEAM,"{0} est protégé contre la baisse de la statistique {1} par l''attaque d''équipe {2}.");
        f_.add(Fight.IMMU_STAT_ABILITY,"{0} est protégé contre le statut {1} par la capacité {2}.");
        f_.add(Fight.IMMU_STAT_ABILITY_ALLY,"{0} est protégé contre le statut {1} par la capacité {2} d''un allié.");
        f_.add(Fight.IMMU_STAT_GLOBAL_MOVE,"{0} est protégé contre le statut {1} par une attaque globale.");
        f_.add(Fight.IMMU_STAT_GLOBAL_MOVE_ABILITY,"{0} est protégé contre le statut {1} par la capacité {2} activé par l''attaque globale {3}.");
        f_.add(Fight.IMMU_STAT_ITEM,"{0} est protégé contre le statut {1} par l''objet {2}.");
        f_.add(Fight.IMMU_STAT_TEAM,"{0} est protégé contre le statut {1} par l''attaque d''équipe {2}.");
        f_.add(Fight.INCR_FOE_TEAM_USES_MOVE,"Le numbre d''utilisations de l''attaque {0} par l''équipe ennemie est augmenté de un.");
        f_.add(Fight.INCR_STATUS,"Le nombre de tours du statut {0} de {1} est incrémenté de 1.");
        f_.add(Fight.INCR_STATUS_REL,"Le nombre de tours du statut {0} de {1} avec {2} est incrémenté de 1.");
        f_.add(Fight.INCR_TEAM_USES_MOVE,"Le numbre d''utilisations de l''attaque {0} par votre équipe est augmenté de un.");
        f_.add(Fight.INVOKE_MOVE,"{0} invoque l''attaque {1}.");
        f_.add(Fight.INVOKE_MOVE_FAIL,"L''invoquation de l''attaque {0} a échoué.");
        f_.add(Fight.ITEM_END_ROUND,"L''objet {0} agit sur {1}.");
        f_.add(Fight.KEEP_MOVE_EVOLUTION,"{0} garde l''attaque {1}.");
        f_.add(Fight.KO_FIGHTER,"{0} tombe ko.");
        f_.add(Fight.LEARN_MOVE_EVOLUTION, M1);
        f_.add(Fight.LEARN_MOVE_ROUND, M1);
        f_.add(Fight.LEARN_MOVE_ROUND_DEF,"{0} a définitivement appris l''attaque {1}.");
        f_.add(Fight.LOOSE_HP,"{0} perd {1} points de vie.");
        f_.add(Fight.LOOSE_ITEM,"{0} perd l''objet {1}.");
        f_.add(Fight.MOVE_END_ROUND,"L''attaque {0} agit sur {1}.");
        f_.add(Fight.MOVE_END_ROUND_REL,"L''attaque {0} agit sur {1} par {2}.");
        f_.add(Fight.MOVE_TYPES,"Les types de l''attaque {2}, utilisée par {0}, sont {1}.");
        f_.add(Fight.NB_HITS,"{0} coups sont infligés contre {1}.");
        f_.add(Fight.NO_ACHIEVE_TARGET,"L''attaque {0} lancée par {1} n''atteint aucune cible.");
        f_.add(Fight.NO_PRIVATE_MOVES,"{0} peut à nouveau utiliser l''attaque {1}.");
        f_.add(Fight.NO_VAR_HP,"{0} ne subit pas de variation de points de vie.");
        f_.add(Fight.PREPA_ROUND,"{0} prépare l''attaque {1}.");
        f_.add(Fight.PRIVATE_MOVES,"{0} ne peut plus utiliser l''attaque {1}.");
        f_.add(Fight.PROTECTED_AGAINST_SEC_EFF,"{0} est protégé contre les effets secondaires de l''attaque {1} par la capacité {2}.");
        f_.add(Fight.PROTECTED_BY_DISAPPEARING,"{0} est intouchable.");
        f_.add(Fight.PROTECTED_BY_INDIVIDUAL_MOVE,"{0} est protégé contre l''attaque {1} par l''attaque individuelle {2}.");
        f_.add(Fight.PROTECTED_BY_TEAM_MOVE,"{0} est protégé contre l''attaque {1} par l''attaque d''équipe {2}.");
        f_.add(Fight.PROTECT_BY_ABILITY,"{0} est protégé contre l''attaque {1} par la capacité {2}.");
        f_.add(Fight.PROTECT_BY_ABILITY_DAMAGE,"{0} est protégé contre l''attaque offensive {1} par la capacité {2}.");
        f_.add(Fight.PROTECT_BY_ABILITY_DAMAGE_ALLY,"L''allié {0} est protégé contre l''attaque offensive {1} par la capacité {2}.");
        f_.add(Fight.PROTECT_BY_ALLY_ABILITY,"{0} est protégé contre l''attaque {1} par la capacité {2} d''un allié de {0}.");
        f_.add(Fight.PROTECT_BY_ITEM,"{0} est protégé contre l''attaque {1} par l''objet {2}.");
        f_.add(Fight.PROTECT_TYPE_BY_ABILITY,"{0} est protégé contre le type {1} par la capacité {2}.");
        f_.add(Fight.PROTECT_TYPE_BY_ABILITY_WEATHER,"{0} est protégé contre le type {1} par la capacité {2} activé par l''attaque globale {3}.");
        f_.add(Fight.PROTECT_TYPE_BY_GLOBAL_MOVE,"{0} est protégé contre le type {1} par l''attaque globale {2}.");
        f_.add(Fight.PROTECT_TYPE_BY_INDIVIDUAL_MOVE,"{0} est protégé contre le type {1} par certaines attaques.");
        f_.add(Fight.PROTECT_TYPE_BY_ITEM,"{0} est protégé contre le type {1} par l''objet{2}.");
        f_.add(Fight.RECHARGE_ROUND,"{0} recharge pendant ce tour, donc {0} ne peut pas utiliser une attaque pendant ce tour.");
        f_.add(Fight.RE_ENABLE_ITEM,"{0} peut à nouveau utiliser un objet.");
        f_.add(Fight.SEND,"{0} est envoyé.");
        f_.add(Fight.SEND_SUBSTITUTE,"Votre allié va envoyer {0}.");
        f_.add(Fight.SEND_SUBSTITUTE_FOE,"Le dresseur ennemi va envoyer {0}.");
        f_.add(Fight.STATUS_BEGIN_ROUND,"{0} ne peut pas utiliser une attaque car {0} est sous l''effet du statut {1}.");
        f_.add(Fight.STATUS_BEGIN_ROUND_REL,"{0} ne peut pas utiliser une attaque contre {2} car {0} est sous l''effet du statut {1} par {2}.");
        f_.add(Fight.STATUS_END_ROUND,"Le statut {0} agit sur {1}.");
        f_.add(Fight.STATUS_REL_END_ROUND,"Le statut {0} agit sur {1} par {2}.");
        f_.add(Fight.SUCCESSFUL_MOVE,"L''attaque {0} a réussi contre {1}.");
        f_.add(Fight.SUCCESSFUL_MOVE_BUT_NO_DAMAGE,"L''attaque {0} a réussi contre {1} mais n''inflige aucun dégât contre {1}.");
        f_.add(Fight.SWITCH_ITEMS,"{0} tient à la place de l''objet {1} l''objet {2}.");
        f_.add(Fight.SWITCH_PLACES,"{0} et {1} échangent leurs places.");
        f_.add(Fight.VAR_PP_EFFECT,"Les points de pouvoir de l''attaque {0} de {1} varient de {2}.");
        f_.add(Fight.VAR_STATISTIC,"La statistique {0} de {1} varie de {2} crans.");
        f_.add(Fight.WEATHER_INCR,"Le nombre de tours du climat {0} est augmenté de un.");
        f_.add(Fight.WIN_HP,"{0} a {1} points de vie restorés.");
        f_.add(Fight.WIN_ITEM,"{0} prend l''objet {1}.");
        f_.add(Fight.WITHDRAW,"{0} est retiré.");
        f_.add(Fight.ISSUE_AFTER_FIGHT,"Mauvais choix d''évolutions après le combat");
        f_.add(Fight.ISSUE_RANDOM,"Problème de tirage aléatoire");
        f_.add(Fight.ISSUE_RULES_LEARN,"Problème de choix d''apprentissage d''attaques ou d''évolutions");
        f_.add(Fight.ISSUE_RULES_MOVES,"Problème de choix d''attaques");
        f_.add(Fight.ISSUE_RULES_SWITCH,"Problème de remplacement");
        f_.add(Fight.ISSUE_SENDING,"Problème d''envoi");
        f_.add(Fight.ISSUE_TOO_HARD,"Problème de simulation compliquée");
        f_.add(Fight.ISSUE_USING,"Problème d''utilisation d''une attaque pour un pokemon de joueur");
        return f_;
    }
    public static TranslationsFile enTeam(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(Team.CANCEL_USE_ITEM,"With the help of an ally, {0} can use its item again.");
        e_.add(Team.USE_ITEM,"{0} lost its item, so {0} cannot use anymore it.");
        return e_;
    }
    public static TranslationsFile frTeam(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(Team.CANCEL_USE_ITEM,"Avec l''aide d''un allié, {0} peut utiliser de nouveau son objet.");
        f_.add(Team.USE_ITEM,"{0} a perdu son objet, donc {0} ne peut plus l''utiliser.");
        return f_;
    }
    public static TranslationsFile enFighter(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(Fighter.FULL_HEAL,"{0} is full healed.");
        e_.add(Fighter.GROW_LEVEL,"{0} grew to level {1}.");
        e_.add(Fighter.LEARN_MOVE, M0);
        e_.add(Fighter.MAX_HAPPINESS,"{0} achieved the maximum of happiness points.");
        e_.add(Fighter.WON_EV,"{0} won {1} points of ev for the statistic {2}.");
        e_.add(Fighter.WON_EV_MAX,"{0} has the maximum points of ev for the statistic {1}.");
        e_.add(Fighter.WON_EXP,"{0} won {1} points of experience.");
        e_.add(Fighter.WON_HAPPINESS,"{0} won {1} happiness points.");
        return e_;
    }
    public static TranslationsFile frFighter(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(Fighter.FULL_HEAL,"{0} est totalement soigné.");
        f_.add(Fighter.GROW_LEVEL,"{0} monte au niveau {1}.");
        f_.add(Fighter.LEARN_MOVE, M1);
        f_.add(Fighter.MAX_HAPPINESS,"{0} a le maximum de points de bonheur.");
        f_.add(Fighter.WON_EV,"{0} a gagné {1} points d''ev pour la statistique {2}.");
        f_.add(Fighter.WON_EV_MAX,"{0} a le maximum de points d''ev pour la statistique {1}.");
        f_.add(Fighter.WON_EXP,"{0} a gagné {1} points d''expérience.");
        f_.add(Fighter.WON_HAPPINESS,"{0} a gagné {1} points de bonheur.");
        return f_;
    }
    public static TranslationsFile enPlayer(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(Player.BAD_NUMBER_MOVES,"{0} cannot know {1} moves.");
        e_.add(Player.BETWEEN_NUMBER_MOVES,"{0} must know between {1} and {2} moves.");
        e_.add(Player.BOOSTED_MOVE,"The maximum of power points of the move {0} of the pokemon {1} are increased by {2}.");
        e_.add(Player.BOOSTED_STATISTIC,"The statistic {0} of the pokemon {1} is increased by {2}.");
        e_.add(Player.CANNOT_EVOLVE,"{0} cannot evolve");
        e_.add(Player.ENABLE_REPEL,"The item {0} is enabled for {1} steps.");
        e_.add(Player.EVOLVE_INTO,"{0} evolve into {1}.");
        e_.add(Player.FORGET_MOVES,"{0} forgot the move {1}.");
        e_.add(Player.HATCH,"{0} hatched from its egg.");
        e_.add(Player.HEAL_STATUS,"The status {0} of the pokemon {1} is deleted.");
        e_.add(Player.KEEP_MOVES,"{0} kept the move {1}.");
        e_.add(Player.LEARN_MOVE,"{0} learnt {1}.");
        e_.add(Player.LEARN_MOVES, M0);
        e_.add(Player.LEARN_MOVE_FORGET,"{0} learnt {1} by forgetting {2}.");
        e_.add(Player.MISS_MOVES,"{0} must know all moves.");
        e_.add(Player.NEW_PK,"{0} is added to the data.");
        e_.add(Player.NEW_PK_ADDED_BOX,"The new pokemon is added to the box.");
        e_.add(Player.REPEL_OFF,"The wild pokemon are no longer repelled");
        e_.add(Player.RESTORED_HP,"The restored health points of {0} are {1}.");
        e_.add(Player.RESTORED_MOVE,"The move {0} of the pokemon {1} is recovered by {2} power points.");
        e_.add(Player.TAKEN_ITEM,"The item {0} is moved to the inventory.");
        return e_;
    }
    public static TranslationsFile frPlayer(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(Player.BAD_NUMBER_MOVES,"{0} ne peut pas connaître {1} attaques.");
        f_.add(Player.BETWEEN_NUMBER_MOVES,"{0} doit connaître entre {1} et {2} attaques.");
        f_.add(Player.BOOSTED_MOVE,"Le maximum des points de pouvoir de l''attaque {0} du pokemon {1} sont augmentés de {2}.");
        f_.add(Player.BOOSTED_STATISTIC,"La statistique {0} du pokemon {1} est augmentée de {2}.");
        f_.add(Player.CANNOT_EVOLVE,"{0} ne peut pas évoluer.");
        f_.add(Player.ENABLE_REPEL,"L''objet {0} est activé pendant {1} pas.");
        f_.add(Player.EVOLVE_INTO,"{0} évolue en {1}.");
        f_.add(Player.FORGET_MOVES,"{0} oublie l''attaque {1}.");
        f_.add(Player.HATCH,"{0} est sorti de son oeuf.");
        f_.add(Player.HEAL_STATUS,"Le statut {0} du pokemon {1} est retiré.");
        f_.add(Player.KEEP_MOVES,"{0} garde l''attaque {1}.");
        f_.add(Player.LEARN_MOVE,"{0} apprend {1}.");
        f_.add(Player.LEARN_MOVES, M1);
        f_.add(Player.LEARN_MOVE_FORGET,"{0} apprend {1} en oubliant {2}.");
        f_.add(Player.MISS_MOVES,"{0} doit connaître toutes les attaques.");
        f_.add(Player.NEW_PK,"{0} est ajouté aux données.");
        f_.add(Player.NEW_PK_ADDED_BOX,"Le nouveau pokemon est ajouté à la boîte.");
        f_.add(Player.REPEL_OFF,"Les pokemon sauvages ne sont plus repoussés");
        f_.add(Player.RESTORED_HP,"Le nombre de points de vie restaurés de {0} vaut {1}.");
        f_.add(Player.RESTORED_MOVE,"L''attaque {0} du pokemon {1} est restaurée de {2} points de pouvoir.");
        f_.add(Player.TAKEN_ITEM,"L''objet {0} est rangé dans l''inventaire.");
        return f_;
    }
    public static TranslationsFile enPokemonPlayer(){
        TranslationsFile e_ = new TranslationsFile();
        e_.add(PokemonPlayer.CST_HAPPINESS,"{0} won {1} points of happiness.");
        e_.add(PokemonPlayer.DECREASING_HP,"The health points of {0} are set from {1} to {2}.");
        return e_;
    }
    public static TranslationsFile frPokemonPlayer(){
        TranslationsFile f_ = new TranslationsFile();
        f_.add(PokemonPlayer.CST_HAPPINESS,"{0} gagne {1} points de bonheur.");
        f_.add(PokemonPlayer.DECREASING_HP,"Les points de vie de {0} passent de {1} à {2}.");
        return f_;
    }
}
