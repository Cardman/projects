package code.scripts.pages.cards;
import code.sml.util.*;
public final class MessagesHelpCards60{
public static final String M_60_0="_60_0";
public static final String M_60_10="_60_10";
public static final String M_60_11="_60_11";
public static final String M_60_12="_60_12";
public static final String M_60_13="_60_13";
public static final String M_60_14="_60_14";
public static final String M_60_15="_60_15";
public static final String M_60_17="_60_17";
public static final String M_60_19="_60_19";
public static final String M_60_1="_60_1";
public static final String M_60_21="_60_21";
public static final String M_60_22="_60_22";
public static final String M_60_24="_60_24";
public static final String M_60_26="_60_26";
public static final String M_60_28="_60_28";
public static final String M_60_29="_60_29";
public static final String M_60_2="_60_2";
public static final String M_60_31="_60_31";
public static final String M_60_33="_60_33";
public static final String M_60_35="_60_35";
public static final String M_60_36="_60_36";
public static final String M_60_38="_60_38";
public static final String M_60_3="_60_3";
public static final String M_60_40="_60_40";
public static final String M_60_42="_60_42";
public static final String M_60_43="_60_43";
public static final String M_60_4="_60_4";
public static final String M_60_5="_60_5";
public static final String M_60_6="_60_6";
public static final String M_60_7="_60_7";
public static final String M_60_8="_60_8";
public static final String M_60_9="_60_9";
private MessagesHelpCards60(){
}
public static TranslationsFile en(){
TranslationsFile e=new TranslationsFile(32);
e.add(M_60_0,"The subs menu \"Training\" contains the sub menus about games for training.");
e.add(M_60_10,"The minimum is worth fifteen and the maximum is worth twenty one.");
e.add(M_60_11,"Save the Small:");
e.add(M_60_12,"The minimum is worth one and the maximum is worth five.");
e.add(M_60_13,"Lead the Small at the last trick:");
e.add(M_60_14,"The minimum is worth fourteen and the maximum is worth twenty one.");
e.add(M_60_15,"At four players:");
e.add(M_60_17,"The minimum is worth thirteen and the maximum is worth eighteen.");
e.add(M_60_19,"The minimum is worth one and the maximum is worth four.");
e.add(M_60_1,"For each different number of players (three, four, five or six), there are four training modes at tarot:");
e.add(M_60_21,"The minimum is worth twelve and the maximum is worth seventeen.");
e.add(M_60_22,"At five players, (with call):");
e.add(M_60_24,"The minimum is worth ten and the maximum is worth fifteen.");
e.add(M_60_26,"The minimum is worth one and the maximum is worth three.");
e.add(M_60_28,"The minimum is worth nine and the maximum is worth fourteen.");
e.add(M_60_29,"At five players, (without call):");
e.add(M_60_2,"Haunt the Small");
e.add(M_60_31,"The minimum is worth ten and the maximum is worth fourteen.");
e.add(M_60_33,"The minimum is worth one and the maximum is worth two.");
e.add(M_60_35,"The minimum is worth nine and the maximum is worth thirteen.");
e.add(M_60_36,"At six players:");
e.add(M_60_38,"The minimum is worth nine and the maximum is worth twelve.");
e.add(M_60_3,"Save the Small");
e.add(M_60_40,"The minimum is worth one and the maximum is worth three.");
e.add(M_60_42,"The minimum is worth eight and the maximum is worth eleven.");
e.add(M_60_43,"In all cases, a deal checking the above conditions, is played.");
e.add(M_60_4,"Lead the Small at the last trick");
e.add(M_60_5,"This is developped by editing random numbers.");
e.add(M_60_6,"A random number of trump cards is edited following a binomial conditionnal law; for keeping the events with the same probability.");
e.add(M_60_7,"Intervals of numbers of trump cards to be edited are the following one (The Small does not belong to the randomly edited trump cards.):");
e.add(M_60_8,"At three players:");
e.add(M_60_9,"Haunt the Small:");
return e;
}
public static TranslationsFile fr(){
TranslationsFile f=new TranslationsFile(32);
f.add(M_60_0,"Le sous menu \"Entrainement\" contient les sous menus sur les jeux pour l'entraînement.");
f.add(M_60_10,"Le minimum vaut quinze et le maximum vaut vingt et un.");
f.add(M_60_11,"Petit à sauver:");
f.add(M_60_12,"Le minimum vaut un et le maximum vaut cinq.");
f.add(M_60_13,"Petit à emmener au bout:");
f.add(M_60_14,"Le minimum vaut quatorze et le maximum vaut vingt et un.");
f.add(M_60_15,"A quatre joueurs:");
f.add(M_60_17,"Le minimum vaut treize et le maximum vaut dix - huit.");
f.add(M_60_19,"Le minimum vaut un et le maximum vaut quatre.");
f.add(M_60_1,"Pour chaque nombre de joueurs différents (trois, quatre, cinq ou six), il existe trois modes d'entraînement au tarot:");
f.add(M_60_21,"Le minimum vaut douze et le maximum vaut dix - sept.");
f.add(M_60_22,"A cinq joueurs, (avec un appel):");
f.add(M_60_24,"Le minimum vaut dix et le maximum vaut quinze.");
f.add(M_60_26,"Le minimum vaut un et le maximum vaut trois.");
f.add(M_60_28,"Le minimum vaut neuf et le maximum vaut quatorze.");
f.add(M_60_29,"A cinq joueurs, (sans appel):");
f.add(M_60_2,"Petit à chasser");
f.add(M_60_31,"Le minimum vaut dix et le maximum vaut quatorze.");
f.add(M_60_33,"Le minimum vaut un et le maximum vaut deux.");
f.add(M_60_35,"Le minimum vaut neuf et le maximum vaut treize.");
f.add(M_60_36,"A six joueurs:");
f.add(M_60_38,"Le minimum vaut neuf et le maximum vaut douze.");
f.add(M_60_3,"Petit à sauver");
f.add(M_60_40,"Le minimum vaut un et le maximum vaut trois.");
f.add(M_60_42,"Le minimum vaut huit et le maximum vaut onze.");
f.add(M_60_43,"Dans tous les cas, une partie vérifiant les conditions ci - dessus, est jouée.");
f.add(M_60_4,"Petit à emmener au bout");
f.add(M_60_5,"Ceci est programmé par des tirages de Monte - Carlo, c'est - à - dire des tirages de nombres aléatoires.");
f.add(M_60_6,"On tire un nombre aléatoire d'atouts suivant une loi binômiale conditionnelle; pour garder les événements équiprobables.");
f.add(M_60_7,"Les intervalles de nombres d'atouts à tirer sont les suivants (Le Petit ne fait pas partie des atouts tirés aléatoirement.):");
f.add(M_60_8,"A trois joueurs:");
f.add(M_60_9,"Petit à chasser:");
return f;
}
}
