private String attribute="";
    private String processingAttribute = EMPTY_STRING;
//    public int getRowFile(int _sum) {
//        int i_ = 0;
//        int r_ = 1;
//        while (i_ < Math.min(_sum,file.length())) {
//            char ch_ = file.charAt(i_);
//            if (ch_ == '\n') {
//                r_++;
//            }
//            i_++;
//        }
//        return r_;
//    }
//
//    public int getColFile(int _sum, int _r) {
//        int i_ = 0;
//        int r_ = 1;
//        while (r_ < _r) {
//            char ch_ = file.charAt(i_);
//            if (ch_ == '\n') {
//                r_++;
//            }
//            i_++;
//        }
//        int begin_ = i_;
//        int d_ = 0;
//        int count_ =  Math.min(_sum,file.length()-1);
//        for (int j = begin_; j <= count_; j++) {
//            char ch_ = file.charAt(j);
//            if (ch_ == '\t') {
//                d_ += tabWidth;
//                d_ -= d_ % tabWidth;
//            } else {
//                d_++;
//            }
//        }
//        return d_;
//    }
////    public int getSum() {
//        ExecAbstractFileBlock fileBl_ = file();
//        if (fileBl_ == null){
//            return 0;
//        }
//        return realIndex(fileBl_);
////        if (rendReadWrite == null) {
////            return 0;
////        }
////        return AnalyzingDoc.getSum(opOffset,offset,rendReadWrite.getRead(),processingAttribute);
//    }
    private static final char QUOT = 34;
    private static final char APOS = 39;
    private StringMap<IntTreeMap<Integer>> escapedChars = new StringMap<IntTreeMap<Integer>>();
    public static int getCurrentLocationIndex(AnalyzedPageEl _analyzing, AnalyzingDoc _analyzingDoc) {
        int offset_ = _analyzing.getOffset();
        return _analyzingDoc.getSum2(_analyzing.getTraceIndex());//+ _analyzing.getTraceIndex()-offset_;
//        return _analyzingDoc.getSum(offset_)+ _analyzing.getTraceIndex()-offset_;
    }
//    public static int getSum(int _offset, int _glOffset, RendBlock _currentBlock, String _attribute) {
//        int delta_ = getDelta(_offset, _attribute, _currentBlock.getEscapedChars());
//        return _glOffset+_offset+delta_;
//    }

//    public int getSum(int _offset) {
//        if (currentBlock == null) {
//            return 0;
//        }
//        int delta_ = getDelta(_offset, attribute, currentBlock.getEscapedChars());
//        return _offset+delta_;
//    }

//    private static int getDelta(int _offset, String _attribute, StringMap<IntTreeMap<Integer>> _escapedChars) {
//        int delta_ = 0;
//        IntTreeMap< Integer> esc_ = getEscapedChars(_attribute, _escapedChars);
//        if (esc_ != null) {
//            int nbIndexes_ = getIndexesCount(esc_, _offset);
//            for (int i = 0; i < nbIndexes_; i++) {
//                delta_ += esc_.getValue(i);
//            }
//        }
//        return delta_;
//    }

//    private static int getIndexesCount(IntTreeMap< Integer> _t, int _offset) {
//        int delta_ = 0;
//        int count_ = 0;
//        for (EntryCust<Integer, Integer> e: _t.entryList()) {
//            if (e.getKey() - delta_ >= _offset) {
//                return count_;
//            }
//            delta_ += e.getValue();
//            count_++;
//        }
//        return count_;
//    }
//    private static IntTreeMap<Integer> getEscapedChars(String _attribute, StringMap<IntTreeMap<Integer>> _escapedChars) {
//        for (EntryCust<String, IntTreeMap< Integer>> t: _escapedChars.entryList()) {
//            String c_ = t.getKey();
//            if (!StringUtil.quickEq(c_, _attribute)) {
//                continue;
//            }
//            return t.getValue();
//        }
//        return null;
//    }


    private static AnaRendBlock newRendBlockEsc(int _begin, AnaRendParentBlock _curParent, String _prefix, Node _elt, String _docText, PrimitiveTypes _primTypes, RendKeyWords _rendKeyWords) {
        AnaRendBlock bl_ = newRendBlock(_begin, _curParent, _prefix, _elt, _docText, _primTypes, _rendKeyWords);
        if (_elt instanceof Text) {
//            int endHeader_ = _docText.indexOf(LT_BEGIN_TAG, _begin);
//            AttributePart attrPart_ = new AttributePart();
//            attrPart_.setBegin(_begin);
//            attrPart_.setEnd(endHeader_);
//            IntTreeMap<Integer> esc_ = getIndexesSpecChars(_docText, false, attrPart_, _begin);
//            StringMap<IntTreeMap<Integer>> infos_ = new StringMap<IntTreeMap<Integer>>();
//            infos_.addEntry(EMPTY_STRING,esc_);
//            bl_.escapedChars = infos_;
        } else {
            Element elt_ = (Element) _elt;
            String tagName_ = elt_.getTagName();
            int endHeader_ = _docText.indexOf(GT_TAG, _begin);
            int beginHeader_ = _begin + tagName_.length();
            StringMap<AttributePart> attr_;
            attr_ = getAttributes(_docText, beginHeader_, endHeader_);
            bl_.attributeDelimiters = attr_;
//            StringMap<IntTreeMap<Integer>> infos_ = new StringMap<IntTreeMap<Integer>>();
//            for (EntryCust<String, AttributePart> e: attr_.entryList()) {
//                infos_.put(e.getKey(), getIndexesSpecChars(_docText, true, e.getValue(), _begin));
//            }
//            bl_.escapedChars = infos_;
        }
        return bl_;
    }

//    public static IntTreeMap< Integer> getIndexesSpecChars(String _html, boolean _realAttr, AttributePart _att, int _beginNode) {
//        int begin_ = _att.getBegin();
//        int end_ = _att.getEnd();
//        int i_ = begin_;
//        int delta_ = 0;
//        if (_realAttr) {
//            delta_ = begin_ - _beginNode;
//        }
//        IntTreeMap< Integer> indexes_;
//        indexes_ = new IntTreeMap< Integer>();
//        while (i_ < end_) {
//            if (_html.charAt(i_) == ENCODED) {
//                int beginEscaped_ = i_;
//                i_++;
//                while (i_ < _html.length()&&_html.charAt(i_) != END_ESCAPED) {
//                    i_++;
//                }
//                indexes_.put(beginEscaped_ - _beginNode - delta_, i_ - beginEscaped_);
//            }
//            i_++;
//        }
//        return indexes_;
//    }


    public void buildAna(String _expression, int _off, AnalyzingDoc _anaDoc, AnalyzedPageEl _page) {
        opExpRoot = new CustList<OperationNode>();
        StringBuilder str_ = new StringBuilder();
        int length_ = _expression.length();
        boolean escaped_ = false;
        int i_ = IndexConstants.FIRST_INDEX;
        while (i_ < length_) {
            char cur_ = _expression.charAt(i_);
            if (escaped_) {
                if (cur_ == QUOTE) {
                    if (i_ < length_ - 1) {
                        if (_expression.charAt(i_ + 1) == QUOTE) {
                            str_.append(QUOTE);
                            i_++;
                            i_++;
                            continue;
                        }
                    }
                    escaped_ = false;
                } else {
                    str_.append(cur_);
                }
                i_++;
                continue;
            }
            if (cur_ == QUOTE) {
                if (i_ < length_ - 1) {
                    if (_expression.charAt(i_ + 1) == QUOTE) {
                        str_.append(QUOTE);
                        i_++;
                        i_++;
                        continue;
                    }
                }
                escaped_ = true;
                i_++;
                continue;
            }
            if (cur_ == LEFT_EL) {
                texts.add(str_.toString());
                str_.delete(0,str_.length());
                expOffsets.add(i_);
                i_++;
                if (i_ >= length_ || _expression.charAt(i_) == RIGHT_EL) {
                    FoundErrorInterpret badEl_ = new FoundErrorInterpret();
                    badEl_.setFileName(_anaDoc.getFileName());
                    badEl_.setIndexFile(_off);
                    badEl_.buildError(_page.getAnalysisMessages().getBadExpression(),
                            Character.toString(RIGHT_EL),
                            Long.toString(i_),
                            _expression);
                    AnalyzingDoc.addError(badEl_, _anaDoc, _page);
                    return;
                }
                OperationNode root_ = RenderAnalysis.getRootAnalyzedOperationsDel(_expression, i_, _anaDoc, _page);
                opExpRoot.add(root_);
                i_ = _anaDoc.getNextIndex();
                expEnds.add(i_);
                continue;
            }
            if (cur_ == RIGHT_EL){
                FoundErrorInterpret badEl_ = new FoundErrorInterpret();
                badEl_.setFileName(_anaDoc.getFileName());
                badEl_.setIndexFile(_off);
                badEl_.buildError(_page.getAnalysisMessages().getBadExpression(),
                        Character.toString(RIGHT_EL),
                        Long.toString(i_),
                        _expression);
                AnalyzingDoc.addError(badEl_, _anaDoc, _page);
                return;
            }
            str_.append(cur_);
            i_++;
        }
        texts.add(str_.toString());
    }
