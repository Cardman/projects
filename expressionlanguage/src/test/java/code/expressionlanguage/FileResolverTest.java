package code.expressionlanguage;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.expressionlanguage.methods.AccessEnum;
import code.expressionlanguage.methods.Affectation;
import code.expressionlanguage.methods.Block;
import code.expressionlanguage.methods.ClassBlock;
import code.expressionlanguage.methods.Classes;
import code.expressionlanguage.methods.Condition;
import code.expressionlanguage.methods.ConstructorBlock;
import code.expressionlanguage.methods.DeclareAffectVariable;
import code.expressionlanguage.methods.DeclareVariable;
import code.expressionlanguage.methods.DoBlock;
import code.expressionlanguage.methods.ElementBlock;
import code.expressionlanguage.methods.ElseCondition;
import code.expressionlanguage.methods.ElseIfCondition;
import code.expressionlanguage.methods.EnumBlock;
import code.expressionlanguage.methods.FieldBlock;
import code.expressionlanguage.methods.ForIterativeLoop;
import code.expressionlanguage.methods.IfCondition;
import code.expressionlanguage.methods.InfoBlock;
import code.expressionlanguage.methods.InstanceBlock;
import code.expressionlanguage.methods.Line;
import code.expressionlanguage.methods.MethodBlock;
import code.expressionlanguage.methods.ReturnMehod;
import code.expressionlanguage.methods.RootBlock;
import code.expressionlanguage.methods.SemiAffectation;
import code.expressionlanguage.methods.StaticBlock;
import code.expressionlanguage.methods.Throwing;
import code.expressionlanguage.methods.WhileCondition;
import code.util.StringMap;

@SuppressWarnings("static-method")
public final class FileResolverTest {

    @Test
    public void parseFile1Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.ExClass {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.ExClass", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
    }
    @Test
    public void parseFile2Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.ExClass<#T> {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.ExClass", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        assertEq("<#T>",r_.getTemplateDef());
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
    }
    @Test
    public void parseFile3Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#T:pktwo.Content> {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#T:pktwo.Content>",r_.getTemplateDef());
    }
    @Test
    public void parseFile4Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#Param> : pkgthree.Inherit {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param>",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("pkgthree.Inherit",r_.getDirectSuperTypes().first());
    }
    @Test
    public void parseFile5Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#Param> : pkgthree.Inherit<#Param> {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param>",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("pkgthree.Inherit<#Param>",r_.getDirectSuperTypes().first());
    }
    @Test
    public void parseFile6Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#Param,#SecondParam> : pkgthree.Inherit<#Param> : pkgfour.Inherit<#SecondParam> {");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("<#Param,#SecondParam>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("pkgthree.Inherit<#Param>",r_.getDirectSuperTypes().first());
        assertEq("pkgfour.Inherit<#SecondParam>",r_.getDirectSuperTypes().last());
    }
    @Test
    public void parseFile7Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : pkgthree.Inherit<#T> : pkgfour.Inherit<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("pkgthree.Inherit<#T>",r_.getDirectSuperTypes().first());
        assertEq("pkgfour.Inherit<#T>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(137, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(154, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(146, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(162, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile8Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.Toto<#T> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t$private $normal $String exfield(){\n");
        file_.append("\t\t$throw $badthrow:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String exfields(){\n");
        file_.append("\t\t$throw $badthrowbis:\n");
        file_.append("\t\t$return $unreachablebis:\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String loop(){\n");
        file_.append("\t\t$for($int i=0i:10i::1i){\n");
        file_.append("\t\t\t$return $unreachable:\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachablebis:\n");
        file_.append("\t}\n");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("hello.word<#T>",r_.getDirectSuperTypes().first());
        assertEq("every.body<#T>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        FieldBlock field_ = (FieldBlock) child_;
        assertTrue(!field_.isStaticField());
        assertTrue(!field_.isFinalField());
        assertSame(AccessEnum.PRIVATE, field_.getAccess());
        assertEq(111, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(128, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(120, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(136, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfield", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        Block instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrow",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("exfields", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrowbis",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("loop", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq(" i",for_.getVariableName());
        assertTrue(for_.isEq());
        Block grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) grChild_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile9Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<Ex> : every.body {\n");
        file_.append("\tONE,\n");
        file_.append("\t//Simple comment\n");
        file_.append("\tTHERE(1i,\n3i),\n");
        file_.append("\tHERE:\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow:\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String other(){\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload($int i,\n $int j){\n");
        file_.append("\t\t$throw $badthrowsbis:\n");
        file_.append("\t\t$return $unreachablebis:\n");
        file_.append("\t}\n");
        file_.append("\t$private $normal $String overload(){\n");
        file_.append("\t\t$for($int i=0i:10i::1i){\n");
        file_.append("\t\t\t$return $unreachablebis:\n");
        file_.append("\t\t}\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<Ex>",r_.getDirectSuperTypes().first());
        assertEq("every.body",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        InfoBlock field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertTrue(field_.isFinalField());
        assertSame(AccessEnum.PUBLIC, field_.getAccess());
        assertEq("ONE", field_.getFieldName());
        assertEq("pkgtwo.Toto", field_.getClassName());
        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(102, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(-1, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertTrue(field_.isFinalField());
        assertSame(AccessEnum.PUBLIC, field_.getAccess());
        assertEq("THERE", field_.getFieldName());
        assertEq("pkgtwo.Toto", field_.getClassName());
        assertEq("1i,\n3i", ((ElementBlock)field_).getValue());
        assertEq(126, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(132, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof ElementBlock);
        field_ = (InfoBlock) child_;
        assertTrue(field_.isStaticField());
        assertTrue(field_.isFinalField());
        assertSame(AccessEnum.PUBLIC, field_.getAccess());
        assertEq("HERE", field_.getFieldName());
        assertEq("pkgtwo.Toto", field_.getClassName());
        assertEq("", ((ElementBlock)field_).getValue());
        assertEq(142, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(-1, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(149, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(166, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(158, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(174, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrow",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("other", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(2, method_.getParametersNames().size());
        assertEq("i", method_.getParametersNames().first());
        assertEq("j", method_.getParametersNames().last());
        assertEq(2, method_.getParametersTypes().size());
        assertEq("$int", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().last());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrowsbis",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachablebis",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = method_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("overload", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof ForIterativeLoop);
        ForIterativeLoop for_ = (ForIterativeLoop) instr_;
        assertEq("0i",for_.getInit());
        assertEq("1i",for_.getStep());
        assertEq("10i",for_.getExpression());
        assertEq(" i",for_.getVariableName());
        assertTrue(for_.isEq());
        Block grChild_ = instr_.getFirstChild();
        assertTrue(grChild_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) grChild_;
        assertEq(" $unreachablebis",ret_.getExpression());
        assertNull(grChild_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile10Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $static $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("hello.word<#T>",r_.getDirectSuperTypes().first());
        assertEq("every.body<#T>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(111, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(119, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(127, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertEq(135, ((FieldBlock) child_).getValueOffset());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrow",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile11Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("hello.word<#T>",r_.getDirectSuperTypes().first());
        assertEq("every.body<#T>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(111, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(126, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(118, ((FieldBlock) child_).getClassNameOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        assertEq(134, ((FieldBlock) child_).getValueOffset());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrow",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile12Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t[[$int array:\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(156, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareVariable);
        DeclareVariable decl_ = (DeclareVariable) instr_;
        assertEq("[[$int",decl_.getClassName());
        assertEq("array",decl_.getVariableName());
        assertEq(327, decl_.getVariableNameOffset());
        assertEq(320, decl_.getClassNameOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }

    @Test
    public void parseFile13Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("/* multi line\n");
        file_.append("comment*/\n");
        file_.append("$public $class pkgtwo.ExClass {\n");
        file_.append("}\n");
        file_.append("$public $class pkgtwo.ExClassTwo {\n");
        file_.append("}");
        ContextEl context_ = simpleContext();
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(2, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.ExClass", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.ExClass");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
        assertEq("pkgtwo.ExClassTwo", context_.getClasses().getClassBodies().last().getFullName());
        r_ = context_.getClasses().getClassBody("pkgtwo.ExClassTwo");
        assertTrue(r_ instanceof ClassBlock);
        cl_ = (ClassBlock) r_;
        assertNull(cl_.getFirstChild());
    }

    @Test
    public void parseFile14Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $class pkgtwo.Toto<#T:pkgtwo.Inherit> : hello.word<#T> : every.body<#T> {\n");
        file_.append("\t$private $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrow:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo(#T pOne, $int pTwo, pkg.ParType pThree):\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof ClassBlock);
        ClassBlock cl_ = (ClassBlock) r_;
        assertEq("<#T:pkgtwo.Inherit>",r_.getTemplateDef());
        assertEq(2,r_.getDirectSuperTypes().size());
        assertEq("hello.word<#T>",r_.getDirectSuperTypes().first());
        assertEq("every.body<#T>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(!((FieldBlock) child_).isStaticField());
        assertTrue(!((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(102, ((FieldBlock) child_).getAccessOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(119, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(111, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(127, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrow",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(3, method_.getParametersNames().size());
        assertEq("pOne", method_.getParametersNames().first());
        assertEq("pTwo", method_.getParametersNames().get(1));
        assertEq("pThree", method_.getParametersNames().last());
        assertEq(3, method_.getParametersTypes().size());
        assertEq("#T", method_.getParametersTypes().first());
        assertEq("$int", method_.getParametersTypes().get(1));
        assertEq("pkg.ParType", method_.getParametersTypes().last());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile15Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t[[$int array = $null:\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        assertEq("", ((ElementBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(156, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareAffectVariable);
        DeclareAffectVariable decl_ = (DeclareAffectVariable) instr_;
        assertEq(320, decl_.getClassNameOffset());
        assertEq("[[$int",decl_.getClassName());
        assertEq(327, decl_.getVariableNameOffset());
        assertEq("array",decl_.getVariableName());
        assertEq(335, decl_.getRightMemberOffset());
        assertEq("$null",decl_.getRightMember());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile16Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $interfaces (hello.word,every.bodies) (Ex pOne, $int pTwo, pkg.ParType pThree){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t[[$int array = $null:\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word",r_.getDirectSuperTypes().first());
        assertEq("every.body",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(74, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(80, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(84, ((FieldBlock) child_).getAccessOffset());
        assertEq(93, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(101, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(124, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        ConstructorBlock ctor_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PUBLIC, ctor_.getAccess());
        assertEq("", ctor_.getName());
        assertEq("$void", ctor_.getReturnType(context_.getStandards()));
        assertEq(3, ctor_.getParametersNames().size());
        assertEq("pOne", ctor_.getParametersNames().first());
        assertEq("pTwo", ctor_.getParametersNames().get(1));
        assertEq("pThree", ctor_.getParametersNames().last());
        assertEq(3, ctor_.getParametersTypes().size());
        assertEq("Ex", ctor_.getParametersTypes().first());
        assertEq("$int", ctor_.getParametersTypes().get(1));
        assertEq("pkg.ParType", ctor_.getParametersTypes().last());
        assertEq(2, ctor_.getInterfaces().size());
        assertEq("hello.word", ctor_.getInterfaces().first());
        assertEq("every.bodies", ctor_.getInterfaces().last());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareAffectVariable);
        DeclareAffectVariable decl_ = (DeclareAffectVariable) instr_;
        assertEq(380, decl_.getClassNameOffset());
        assertEq("[[$int",decl_.getClassName());
        assertEq(387, decl_.getVariableNameOffset());
        assertEq("array",decl_.getVariableName());
        assertEq(395, decl_.getRightMemberOffset());
        assertEq("$null",decl_.getRightMember());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile17Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word : every.body {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public (Ex pOne, $int pTwo, pkg.ParType pThree){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\t[[$int array = $null:\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word",r_.getDirectSuperTypes().first());
        assertEq("every.body",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(74, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(80, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(84, ((FieldBlock) child_).getAccessOffset());
        assertEq(93, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(101, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(116, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(108, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(124, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        ConstructorBlock ctor_ = (ConstructorBlock) child_;
        assertSame(AccessEnum.PUBLIC, ctor_.getAccess());
        assertEq("", ctor_.getName());
        assertEq("$void", ctor_.getReturnType(context_.getStandards()));
        assertEq(3, ctor_.getParametersNames().size());
        assertEq("pOne", ctor_.getParametersNames().first());
        assertEq("pTwo", ctor_.getParametersNames().get(1));
        assertEq("pThree", ctor_.getParametersNames().last());
        assertEq(3, ctor_.getParametersTypes().size());
        assertEq("Ex", ctor_.getParametersTypes().first());
        assertEq("$int", ctor_.getParametersTypes().get(1));
        assertEq("pkg.ParType", ctor_.getParametersTypes().last());
        assertEq(0, ctor_.getInterfaces().size());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof DeclareAffectVariable);
        DeclareAffectVariable decl_ = (DeclareAffectVariable) instr_;
        assertEq(342, decl_.getClassNameOffset());
        assertEq("[[$int",decl_.getClassName());
        assertEq(349, decl_.getVariableNameOffset());
        assertEq("array",decl_.getVariableName());
        assertEq(357, decl_.getRightMemberOffset());
        assertEq("$null",decl_.getRightMember());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile18Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tarray = 0i:\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(156, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Affectation);
        Affectation decl_ = (Affectation) instr_;
        assertEq(320, decl_.getLeftMemberOffset());
        assertEq("array",decl_.getLeftMember());
        assertEq(328, decl_.getRightMemberOffset());
        assertEq("0i",decl_.getRightMember());
        assertEq("=", decl_.getOper());
        assertEq(326, decl_.getOperOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile19Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield=\"{IN_BRACE}(){}\"({INNER}):\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call():\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(156, ((FieldBlock) child_).getValueOffset());
        assertEq("\"{IN_BRACE}(){}\"({INNER})", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(320, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile20Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\tFIRST():\n");
        file_.append("\t$private $static $final $String exfield:\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call():\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof ElementBlock);
        assertEq("FIRST", ((ElementBlock) child_).getFieldName());
        assertEq("pkgtwo.Toto", ((ElementBlock) child_).getClassName());
        assertEq("", ((ElementBlock) child_).getValue());
        assertEq(106, ((ElementBlock) child_).getFieldNameOffest());
        assertEq(112, ((ElementBlock) child_).getValueOffest());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(116, ((FieldBlock) child_).getAccessOffset());
        assertEq(125, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(133, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(148, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(140, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(148, ((FieldBlock) child_).getValueOffset());
        assertEq("", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(294, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile21Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto : hello.word<pkgtwo.Inherit> : every.body<pkgtwo.Inherit> {\n");
        file_.append("\t$private $static $final $String exfield:\n");
        file_.append("\t{\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abs(){\n");
        file_.append("\t}\n");
        file_.append("\t$public $abstract $String abstwo():\n");
        file_.append("\t$private $normal $String conc(){\n");
        file_.append("\t\tobject.call():\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t\t$return $unreachable:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(3,r_.getDirectSuperTypes().size());
        assertEq("hello.word<pkgtwo.Inherit>",r_.getDirectSuperTypes().first());
        assertEq("every.body<pkgtwo.Inherit>",r_.getDirectSuperTypes().get(1));
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().last());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof FieldBlock);
        assertTrue(((FieldBlock) child_).isStaticField());
        assertTrue(((FieldBlock) child_).isFinalField());
        assertSame(AccessEnum.PRIVATE, ((FieldBlock) child_).getAccess());
        assertEq(106, ((FieldBlock) child_).getAccessOffset());
        assertEq(115, ((FieldBlock) child_).getStaticFieldOffset());
        assertEq(123, ((FieldBlock) child_).getFinalFieldOffset());
        assertEq("exfield", ((FieldBlock) child_).getFieldName());
        assertEq(138, ((FieldBlock) child_).getFieldNameOffset());
        assertEq(130, ((FieldBlock) child_).getClassNameOffset());
        assertEq("$String", ((FieldBlock) child_).getClassName());
        assertEq(138, ((FieldBlock) child_).getValueOffset());
        assertEq("", ((FieldBlock) child_).getValue());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof InstanceBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        MethodBlock method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abs", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(method_.isAbstractMethod());
        assertTrue(!method_.isNormalMethod());
        assertSame(AccessEnum.PUBLIC, method_.getAccess());
        assertEq("abstwo", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        assertNull(method_.getFirstChild());
        child_ = child_.getNextSibling();
        assertTrue(child_ instanceof MethodBlock);
        method_ = (MethodBlock) child_;
        assertTrue(!method_.isStaticMethod());
        assertTrue(!method_.isFinalMethod());
        assertTrue(!method_.isAbstractMethod());
        assertTrue(method_.isNormalMethod());
        assertSame(AccessEnum.PRIVATE, method_.getAccess());
        assertEq("conc", method_.getName());
        assertEq("$String", method_.getReturnType(context_.getStandards()));
        assertEq(0, method_.getParametersNames().size());
        assertEq(0, method_.getParametersTypes().size());
        instr_ = method_.getFirstChild();
        assertTrue(instr_ instanceof Line);
        Line decl_ = (Line) instr_;
        assertEq("object.call()",decl_.getExpression());
        assertEq(284, decl_.getExpressionOffset());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof Throwing);
        th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ReturnMehod);
        ReturnMehod ret_ = (ReturnMehod) instr_;
        assertEq(" $unreachable",ret_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(method_.getNextSibling());
    }
    @Test
    public void parseFile22Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$throw $badthrows:\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().first());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof Throwing);
        Throwing th_ = (Throwing) instr_;
        assertEq(" $badthrows",th_.getExpression());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile23Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$while(condition;.){\n");
        file_.append("\t\t\ti;.++:\n");
        file_.append("\t\t\tj;.--:\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().first());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof WhileCondition);
        WhileCondition th_ = (WhileCondition) instr_;
        assertEq("condition;.",th_.getCondition());
        Block instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof SemiAffectation);
        assertEq("\n\t\t\ti;.", ((SemiAffectation)instrWhile_).getLeftMember());
        assertEq("++", ((SemiAffectation)instrWhile_).getOper());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof SemiAffectation);
        assertEq("\n\t\t\tj;.", ((SemiAffectation)instrWhile_).getLeftMember());
        assertEq("--", ((SemiAffectation)instrWhile_).getOper());
        assertNull(instrWhile_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile24Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$do {\n");
        file_.append("\t\t\ti;.++:\n");
        file_.append("\t\t\tj;.--:\n");
        file_.append("\t\t} $while(condition;.):\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().first());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof DoBlock);
        DoBlock th_ = (DoBlock) instr_;
        Block instrWhile_ = th_.getFirstChild();
        assertTrue(instrWhile_ instanceof SemiAffectation);
        assertEq("\n\t\t\ti;.", ((SemiAffectation)instrWhile_).getLeftMember());
        assertEq("++", ((SemiAffectation)instrWhile_).getOper());
        instrWhile_ = instrWhile_.getNextSibling();
        assertTrue(instrWhile_ instanceof SemiAffectation);
        assertEq("\n\t\t\tj;.", ((SemiAffectation)instrWhile_).getLeftMember());
        assertEq("--", ((SemiAffectation)instrWhile_).getOper());
        assertNull(instrWhile_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof WhileCondition);
        assertEq("condition;.",((Condition) instr_).getCondition());
        assertNull(instr_.getFirstChild());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    @Test
    public void parseFile25Test() {
        StringBuilder file_ = new StringBuilder();
        file_.append("pkg.Ex;\n");
        file_.append("pkg.ExTwo;\n");
        file_.append("$public $enum pkgtwo.Toto {\n");
        file_.append("\t$static {\n");
        file_.append("\t\t$if (condOne;.) {\n");
        file_.append("\t\t\ti;.++:\n");
        file_.append("\t\t} $elseif (condTwo;.) {\n");
        file_.append("\t\t\tj;.++:\n");
        file_.append("\t\t} $else {\n");
        file_.append("\t\t\tk;.++:\n");
        file_.append("\t\t}\n");
        file_.append("\t}\n");
        file_.append("}\n");
        ContextEl context_ = simpleContext();
        StringMap<String> files_ = new StringMap<String>();
        files_.put("my_file", file_.toString());
        FileResolver.parseFile("my_file",file_.toString(), false, context_);
        assertEq(1, context_.getClasses().getClassBodies().size());
        assertEq("pkgtwo.Toto", context_.getClasses().getClassBodies().first().getFullName());
        RootBlock r_ = context_.getClasses().getClassBody("pkgtwo.Toto");
        assertTrue(r_ instanceof EnumBlock);
        EnumBlock cl_ = (EnumBlock) r_;
        assertEq("",r_.getTemplateDef());
        assertEq(1,r_.getDirectSuperTypes().size());
        assertEq("$Enum<pkgtwo.Toto>",r_.getDirectSuperTypes().first());
        Block child_ = cl_.getFirstChild();
        assertTrue(child_ instanceof StaticBlock);
        Block instr_ = child_.getFirstChild();
        assertTrue(instr_ instanceof IfCondition);
        Condition th_ = (Condition) instr_;
        assertEq("condOne;.",((Condition) instr_).getCondition());
        Block instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof SemiAffectation);
        assertEq("\n\t\t\ti;.", ((SemiAffectation)instrCond_).getLeftMember());
        assertEq("++", ((SemiAffectation)instrCond_).getOper());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseIfCondition);
        assertEq("condTwo;.",((Condition) instr_).getCondition());
        th_ = (Condition) instr_;
        instrCond_ = th_.getFirstChild();
        assertTrue(instrCond_ instanceof SemiAffectation);
        assertEq("\n\t\t\tj;.", ((SemiAffectation)instrCond_).getLeftMember());
        assertEq("++", ((SemiAffectation)instrCond_).getOper());
        assertNull(instrCond_.getNextSibling());
        instr_ = instr_.getNextSibling();
        assertTrue(instr_ instanceof ElseCondition);
        instrCond_ = instr_.getFirstChild();
        assertTrue(instrCond_ instanceof SemiAffectation);
        assertEq("\n\t\t\tk;.", ((SemiAffectation)instrCond_).getLeftMember());
        assertEq("++", ((SemiAffectation)instrCond_).getOper());
        assertNull(instrCond_.getNextSibling());
        assertNull(instr_.getNextSibling());
        assertNull(child_.getNextSibling());
    }
    private static ContextEl simpleContext() {
        ContextEl cont_ = new ContextEl();
        cont_.setClasses(new Classes());
        InitializationLgNames.initAdvStandards(cont_);
        return cont_;
    }
}
