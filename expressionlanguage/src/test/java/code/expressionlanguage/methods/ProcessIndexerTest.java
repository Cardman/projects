package code.expressionlanguage.methods;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.opers.util.MethodId;
import code.util.CustList;
import code.util.StringMap;
import org.junit.Test;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public final class ProcessIndexerTest extends ProcessMethodCommon {
    @Test
    public void calculate1Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate2Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  e;.[0]++:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(6, ret_.getNumber());
    }
    @Test
    public void calculate3Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]++:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate4Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return ++e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(6, ret_.getNumber());
    }
    @Test
    public void calculate5Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]+=10:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(15, ret_.getNumber());
    }
    @Test
    public void calculate6Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator++ pkg.Ex(pkg.Ex p) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]++:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]++:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExCont c = $new ExCont():\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  c;.[0] = e;.:\n");
        xml_.append("  c;.[0]++:\n");
        xml_.append("  $return c;.[0][0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(6, ret_.getNumber());
    }
    @Test
    public void calculate7Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator++ pkg.Ex(pkg.Ex p) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]++:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]++:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExCont c = $new ExCont():\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  c;.[0] = e;.:\n");
        xml_.append("  Ex o = c;.[0]++:\n");
        xml_.append("  $return o;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate8Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator++ pkg.Ex(pkg.Ex p) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]++:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]++:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExCont c = $new ExCont():\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  c;.[0] = e;.:\n");
        xml_.append("  Ex o = ++c;.[0]:\n");
        xml_.append("  $return o;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(6, ret_.getNumber());
    }
    @Test
    public void calculate9Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0,1] = 5:\n");
        xml_.append("  $return e;.[0,1]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int... p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;[0]+p;.;[1]]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int... p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;[0]+p;.;[1]] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate10Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0,1] = 5:\n");
        xml_.append("  $return e;.[0,1]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int q,$int... p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;[0]+q;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int q,$int... p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;[0]+q;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate11Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator+ pkg.Ex(pkg.Ex p,pkg.Ex q) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]+= q;.;[0]:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]+= q;.;[1]:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExCont c = $new ExCont():\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  Ex f = $new Ex():\n");
        xml_.append("  f;.[0] = 10:\n");
        xml_.append("  c;.[0] = e;.:\n");
        xml_.append("  c;.[0] += f;.:\n");
        xml_.append("  $return c;.[0][0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(15, ret_.getNumber());
    }
    @Test
    public void calculate12Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator+ pkg.Ex(pkg.Ex p,pkg.Ex q) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]+= q;.;[0]:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]+= q;.;[1]:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $null:\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return 0:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate13Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] /= 0:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate14Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate15Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate16Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$operator+ pkg.Ex(pkg.Ex p,pkg.Ex q) {\n");
        xml_.append("  pkg.Ex e = $new pkg.Ex():\n");
        xml_.append("  e;.[0] = p;.;[0]:\n");
        xml_.append("  e;.[0]+= q;.;[0]:\n");
        xml_.append("  e;.[1] = p;.;[1]:\n");
        xml_.append("  e;.[1]+= q;.;[1]:\n");
        xml_.append("  $return e;.:\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  String e = \"\":\n");
        xml_.append("  e;.$classchoice(Ex)[0] = 5:\n");
        xml_.append("  $return 0:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Ex[] inst=$new Ex[]{$new Ex()}:\n");
        xml_.append(" $public Ex $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate17Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex<String> e = $new Ex<String>():\n");
        xml_.append("  e;.$classchoice(Ex<Number>)[0] = 5:\n");
        xml_.append("  $return 0:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T[] inst=$new T[2]:\n");
        xml_.append(" $public T $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate18Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex<String> e = $new Ex<String>():\n");
        xml_.append("  e;.$classchoice(Ex<!Object>)[0] = 5:\n");
        xml_.append("  $return 0:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex<T> {\n");
        xml_.append(" $public T[] inst=$new T[2]:\n");
        xml_.append(" $public T $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate19Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Object e = $new Ex():\n");
        xml_.append("  e;.$classchoice(Ex)[0] = 5:\n");
        xml_.append("  $return e;.$classchoice(Ex)[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate20Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.$that[0] = 5:\n");
        xml_.append("  $return e;.$that[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate21Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return $super[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $super[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate22Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[$id(Ex,$int),0] = 5:\n");
        xml_.append("  $return e;.[$id(Ex,$int),0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate23Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[$vararg($int),$firstopt(0),1] = 5:\n");
        xml_.append("  $return e;.[$vararg($int),$firstopt(0),1]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int... p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;[0]+p;.;[1]]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int... p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;[0]+p;.;[1]] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate24Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return $superaccess(Ex)[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $superaccess(Ex)[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate25Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new ExSub():\n");
        xml_.append("  e;.$thisaccess(Ex)[0] = 5:\n");
        xml_.append("  $return e;.$thisaccess(Ex)[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:Ex {\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $protected $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $protected $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate26Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new ExSub();\n");
        xml_.append("  e.thisaccess(Ex)[0] = 5;\n");
        xml_.append("  return e.thisaccess(Ex)[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExSub:Ex {\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected int this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[p];\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculate27Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int $this($long p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[($int)p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($long p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[($int)p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate28Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  $Class cl = $class(Ex):\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $Method meth = cl;.getDeclaredMethods(\"[]\",$false,$false,$class($int))[0]:\n");
        xml_.append("  $return ($int) meth;.invoke(e;.,0):\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate29Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  $Class cl = $class(Ex):\n");
        xml_.append("  $Method meth = cl;.getDeclaredMethods(\"[]=\",$false,$false,$class($int))[0]:\n");
        xml_.append("  meth;.invoke(e;.,0,5):\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(5, ret_.getNumber());
    }
    @Test
    public void calculate30Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  $Class cl = $class(Ex):\n");
        xml_.append("  $Method meth = cl;.getDeclaredMethods(\"[]=\",$false,$false,$class($int))[0]:\n");
        xml_.append("  meth;.invoke(e;.,0,1,5):\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate31Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  Ex e = $new Ex():\n");
        xml_.append("  $Class cl = $class(Ex):\n");
        xml_.append("  $Method meth = cl;.getDeclaredMethods(\"[]=\",$false,$false,$class($int))[0]:\n");
        xml_.append("  meth;.invoke(e;.,0,\"\"):\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return inst[p;.;]:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p;.;] = $value;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        calculateArgument("pkg.Apply", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculate32Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExInt e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSup {\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return ((ExInt)$this).inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  ((ExInt)$this).inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:ExSup:ExInt {\n");
        xml_.append(" $public ExSub() {\n");
        xml_.append("  $interfaces(ExInt)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.ExInt {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $int $this($int p):\n");
        xml_.append(" $void $this($int p):\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("test");
        Argument ret_;
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(20, ret_.getNumber());
    }
    @Test
    public void calculateFailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new ExSub();\n");
        xml_.append("  e.$thisaccess(Ex)[0] = 5;\n");
        xml_.append("  return e.$thisaccess(Ex)[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExSub:Ex {\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2]:\n");
        xml_.append(" protected int this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[p];\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate2FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new ExSub();\n");
        xml_.append("  e[0] = 5;\n");
        xml_.append("  return e[0];\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExSub:Ex {\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return super[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  super[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected abstract int this(int p);\n");
        xml_.append(" protected abstract void this(int p);\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate3FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new Ex();\n");
        xml_.append("  e[m()] = 5;\n");
        xml_.append("  return 0;\n");
        xml_.append(" }\n");
        xml_.append(" static void m(){}\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return super[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  super[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate4FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new Ex();\n");
        xml_.append("  m()[0] = 5;\n");
        xml_.append("  return 0;\n");
        xml_.append(" }\n");
        xml_.append(" static void m(){}\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return super[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  super[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate5FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new ExSub();\n");
        xml_.append("  e.thisaccess(String)[0] = 5;\n");
        xml_.append("  return 0;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExSub:Ex {\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected int this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[p];\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate6FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int test(){\n");
        xml_.append("  Ex e = new ExSub();\n");
        xml_.append("  e.superaccess(String)[0] = 5;\n");
        xml_.append("  return 0;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.ExSub:Ex {\n");
        xml_.append(" protected int this(int value)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[value]*2;\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value*2;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public int[] inst=new int[2];\n");
        xml_.append(" protected int this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  return inst[p];\n");
        xml_.append(" }\n");
        xml_.append(" protected void this(int p)\n");
        xml_.append(" {\n");
        xml_.append("  inst[p] = value;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculate7FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Apply {\n");
        xml_.append(" $public $static $int test(){\n");
        xml_.append("  ExInt e = $new ExSub():\n");
        xml_.append("  e;.[0] = 5:\n");
        xml_.append("  $return e;.[0]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSup {\n");
        xml_.append(" $public $int $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  $return ((ExInt)$this).inst[p;.;]*2:\n");
        xml_.append(" }\n");
        xml_.append(" $public $void $this($int p)\n");
        xml_.append(" {\n");
        xml_.append("  ((ExInt)$this).inst[p;.;] = $value;.;*2:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $class pkg.ExSub:ExSup:ExInt {\n");
        xml_.append(" $public ExSub() {\n");
        xml_.append("  $interfaces(ExInt)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.ExInt {\n");
        xml_.append(" $public $int[] inst=$new $int[2]:\n");
        xml_.append(" $long $this($int p):\n");
        xml_.append(" $void $this($int p):\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
}
