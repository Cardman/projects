package code.expressionlanguage.methods;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.opers.util.MethodId;
import code.util.CustList;
import code.util.StringMap;

@SuppressWarnings("static-method")
public final class ProcessMethodFieldTest extends ProcessMethodCommon {

    @Test
    public void calculateArgument1025Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1026Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1027Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=1000i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1028Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append("  $return:\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=1000i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110,(Number) ret_.getObject());
    }

    @Test
    public void calculateArgument1029Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append("  $if($true){\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=1000i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110,(Number) ret_.getObject());
    }

    @Test
    public void calculateArgument1030Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  $finally{\n");
        xml_.append("   myf;;;+=100i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=1000i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1210, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1031Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Ex{\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  $finally{\n");
        xml_.append("   myf;;;+=100i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=1000i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1210, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1032Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $finally{\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1033Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(code.expressionlanguage.exceptions.BadIndexException e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    $throw e;..:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1034Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(java.lang.Exception e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    badMethod():\n");
        xml_.append("    $throw e;..:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1035Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(java.lang.Exception e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    badMethod():\n");
        xml_.append("    $throw e;..:\n");
        xml_.append("   }\n");
        xml_.append("   $finally{\n");
        xml_.append("    t;.=10i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1036Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(java.lang.Exception e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    badMethod():\n");
        xml_.append("    $throw e;..:\n");
        xml_.append("   }\n");
        xml_.append("   $finally{\n");
        xml_.append("    t;.=10i:\n");
        xml_.append("    badMethod():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1037Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl(12);
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("factrec", cont_.getStandards().getAliasPrimInteger());
        Argument v_ = new Argument();
        v_.setObject(11);
        args_.add(v_);
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(39916800, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1038Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(java.lang.Exception e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    $throw e;..:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1039Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $if(l;.;<=0){\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return l;.;*factrec(l;.;-1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void addelt(code.expressionlanguage.classes.Ints l,$int e){\n");
        xml_.append("  l;.;add(e;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int catching(){\n");
        xml_.append("  $int t:\n");
        xml_.append("  t;.=0i:\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    $return badMethod():\n");
        xml_.append("   }\n");
        xml_.append("   $catch(java.lang.Exception e){\n");
        xml_.append("    t;.=1i:\n");
        xml_.append("    $throw exception():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Exception e){\n");
        xml_.append("   $return 1i+t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $catch(java.lang.Object e){\n");
        xml_.append("   $return 10i+t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int badMethod(){\n");
        xml_.append("  $return 1i/0i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static java.lang.Object exception(){\n");
        xml_.append("  $return $new java.lang.String():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1040Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1041Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  myf;;;+=100i:\n");
        xml_.append("  $return:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1042Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  $try{\n");
        xml_.append("   myf;;;+=100i:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  $finally{\n");
        xml_.append("   myf;;;+=1000i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1043Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    myf;;;+=100i:\n");
        xml_.append("    $return:\n");
        xml_.append("   }\n");
        xml_.append("   $finally{\n");
        xml_.append("    myf;;;+=1000i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $finally{\n");
        xml_.append("   myf;;;+=10000i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1044Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return $static(pkg.ExTwo).getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int new=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return new;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" $static{\n");
        xml_.append("  $try{\n");
        xml_.append("   $try{\n");
        xml_.append("    new;;;+=100i:\n");
        xml_.append("    $return:\n");
        xml_.append("   }\n");
        xml_.append("   $finally{\n");
        xml_.append("    new;;;+=1000i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $finally{\n");
        xml_.append("   new;;;+=10000i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11110, (Number)ret_.getObject());
    }

    @Test
    public void calculateArgument1045Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return exmethsec()+1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmethsec(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  code.expressionlanguage.classes.PickableList p=$new code.expressionlanguage.classes.PickableList():\n");
        xml_.append("  adding(p;.,0):\n");
        xml_.append("  adding(p;.,2):\n");
        xml_.append("  $do{\n");
        xml_.append("   t;.++:\n");
        xml_.append("  }\n");
        xml_.append("  $while(exmethparam(p;.)):\n");
        xml_.append("  $foreach($int i:exmethlist()){\n");
        xml_.append("   $if(i;%2=0i){\n");
        xml_.append("    t;.+=i;:\n");
        xml_.append("   }\n");
        xml_.append("   $else{\n");
        xml_.append("    t;.+=i;+1:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.+p;.getList().size():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $void adding(code.expressionlanguage.classes.PickableList l,java.lang.Object o){\n");
        xml_.append("  l;.;getList().add(o;.;):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static code.expressionlanguage.classes.Ints exmethlist(){\n");
        xml_.append("  code.expressionlanguage.classes.Ints t:\n");
        xml_.append("  t;.=$new code.expressionlanguage.classes.Ints():\n");
        xml_.append("  t;.add(8i):\n");
        xml_.append("  t;.add(2i):\n");
        xml_.append("  t;.add(1i):\n");
        xml_.append("  $return t;.:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $boolean exmethparam(code.expressionlanguage.classes.PickableList l){\n");
        xml_.append("  $return l;.;removeAndExistAfter(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int factrec($int l){\n");
        xml_.append("  $try{\n");
        xml_.append("   $if(l;.;<=0){\n");
        xml_.append("    $return 1i:\n");
        xml_.append("   }\n");
        xml_.append("   $return l;.;*factrec(l;.;-1i):\n");
        xml_.append("  }\n");
        xml_.append("  $catch(code.expressionlanguage.exceptions.StackOverFlow e){\n");
        xml_.append("   $return -1i:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl(2);
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("factrec", cont_.getStandards().getAliasPrimInteger());
        Argument v_ = new Argument();
        v_.setObject(2);
        args_.add(v_);
        Argument ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(-2, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument1046Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return pkg.ExTwo.getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument1047Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return ExTwo.getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument1048Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("pkgtwo.ExTwo;\n");
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $return ExTwo.getstatic()+8i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.ExTwo {\n");
        xml_.append(" $public $static $int myf=2i:\n");
        xml_.append(" $public $static $int getstatic(){\n");
        xml_.append("  $return myf;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $elseif(t;.<0){\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $if(t;.%2=0){\n");
        xml_.append("   t;.+=8:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append("  $else{\n");
        xml_.append("   t;.+=2:\n");
        xml_.append("   $return 1i+$($int)t;.:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
    }
}
