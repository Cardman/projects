package code.expressionlanguage.methods;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.opers.util.ClassField;
import code.expressionlanguage.opers.util.ConstructorId;
import code.expressionlanguage.opers.util.MethodId;
import code.expressionlanguage.structs.*;
import code.util.CustList;
import code.util.StringMap;
import org.junit.Test;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;


public final class ProcessMethodInstanceInterfaceTest extends
        ProcessMethodCommon {
    @Test
    public void instanceArgument60Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument61Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument62Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument63Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument64Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 3i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument65Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument66Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance=$new pkg.Ex().doubleValue():\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument67Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument68Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument69Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument70Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument71Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument72Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $static $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice(pkg.Int3)doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument73Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int2{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice(pkg.Int3)doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int3{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 3i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument74Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int2{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice(pkg.Int3)doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int3{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",cont_.getStandards().getAliasPrimInteger());

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument75Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree[] third=$new pkg.ExThree[]{$new pkg.ExThree()}:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i]=$null:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_CUST, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct elt_ = (((ArrayStruct)field_).getInstance()) [0];
        assertSame(NullStruct.NULL_VALUE,elt_);
    }
    @Test
    public void instanceArgument76Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $int ance=$classchoice(pkg.Ex)inst:\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExTwo");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExTwo", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExTwo", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }

    @Test
    public void instanceArgument77Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree :pkg.ExFour{\n");
        xml_.append(" $public $int ance=17i:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $super():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }

    @Test
    public void instanceArgument78Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
    }

    @Test
    public void instanceArgument79Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=sec;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
    }
    @Test
    public void instanceArgument80Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument81Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $super():\n");
        xml_.append("  inst;;;++:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument82Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
    }

    @Test
    public void instanceArgument83Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public $int ouf:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append("  $int toto:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
    }

    @Test
    public void instanceArgument84Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public $int ouf:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
    }
    @Test
    public void instanceArgument85Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument86Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument87Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument88Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).TWO;;;.doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(5, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument89Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).ONE;;;.doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(4, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument90Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public java.lang.String inst=$static($enums).name($static(pkg.Ex).TWO;;;):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(STRING, field_.getClassName(cont_));
        assertEq("TWO", ((StringStruct)field_).getInstance());
    }
    @Test
    public void instanceArgument901Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex<T> {\n");
        xml_.append(" ONE<String>(4i),\n");
        xml_.append(" TWO<Number>:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public java.lang.String inst=$static($enums).name($valueOf(pkg.Ex,\"TWO\")):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(STRING, field_.getClassName(cont_));
        assertEq("TWO", ((StringStruct)field_).getInstance());
    }
    @Test
    public void instanceArgument902Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Outer {\n");
        xml_.append("$public $enum Ex<T> {\n");
        xml_.append(" ONE<String>(4i),\n");
        xml_.append(" TWO<Number>:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public java.lang.String inst=$static($enums).name($valueOf(pkg.Outer..Ex,\"TWO\")):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(STRING, field_.getClassName(cont_));
        assertEq("TWO", ((StringStruct)field_).getInstance());
    }
    @Test
    public void instanceArgument91Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static($enums).ordinal($static(pkg.Ex).TWO;;;):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument92Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$values(pkg.Ex).length:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument93Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public pkg.Ex inst=$valueOf(pkg.Ex,\"ONE\"):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        assertSame(cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE")), field_);
    }
    @Test
    public void instanceArgument94Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  $return $values(pkg.Ex).length:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument95Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public java.lang.Object[] array=$new java.lang.Object[1i]:\n");
        xml_.append(" $public $int elt=2i:\n");
        xml_.append(" {\n");
        xml_.append("  ref()[0i]=getter():\n");
        xml_.append(" }\n");
        xml_.append(" $public $final java.lang.Object[] ref(){\n");
        xml_.append("  $return array;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int getter(){\n");
        xml_.append("  $return elt;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "array"));
        assertEq(ARR_OBJECT, field_.getClassName(cont_));
        Struct[] array_ = ((ArrayStruct)field_).getInstance();
        assertEq(2, ((NumberStruct) array_[0]).intStruct());
    }
    @Test
    public void instanceArgument96Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $super():\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument97Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument98Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case(ONE){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument99Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument100Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $default:\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument102Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).TWO;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $default{\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("   $case(TWO):\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument103Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case(ONE):\n");
        xml_.append("   $default:\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument104Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case($null){\n");
        xml_.append("    r;. = 2i:\n");
        xml_.append("   }\n");
        xml_.append("   $default:\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument105Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $null:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case($null){\n");
        xml_.append("    r;. = 2i:\n");
        xml_.append("    $break:\n");
        xml_.append("   }\n");
        xml_.append("   $default:\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(4, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument1051Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $null:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("   $case($null){\n");
        xml_.append("    r;. = 2i:\n");
        xml_.append("    $break:\n");
        xml_.append("   }\n");
        xml_.append("   $default:\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(4, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument106Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public $int res:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public($int i){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  res;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex(5i):\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(5, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(1, ((NumberStruct)subField_).intStruct());
    }
    @Test
    public void instanceArgument107Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public $int res:\n");
        xml_.append(" $public $int res2:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(1i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $this(i;.;,4i):\n");
        xml_.append(" }\n");
        xml_.append(" $public($int i,$int j){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  res;;;=i;.;:\n");
        xml_.append("  res2;;;=j;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex(5i,8i):\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex(3i):\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(5, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res2"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(8, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Ex", "res2"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(4, ((NumberStruct)subField_).intStruct());
    }
    @Test
    public void instanceArgument108Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  common;;;=2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument109Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(3i):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  common;;;=p;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument110Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3<java.lang.Integer>{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(3i):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3<java.lang.Integer>{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3<#T> {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public (#T p){\n");
        xml_.append("  common;;;=$(java.lang.Integer)p;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument111Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(3i):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  $this(p;.;,5i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p,$int s){\n");
        xml_.append("  common;;;=p;.;+s;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(8, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument112Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int:pkg.Int4{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(3i):\n");
        xml_.append("  $interfaces(pkg.Int4)(14i):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  $this(p;.;,5i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p,$int s){\n");
        xml_.append("  common;;;=p;.;+s;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  $this(p;.;,5i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p,$int s){\n");
        xml_.append("  common;;;=p;.;-s;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int4", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int4", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(8, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument113Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO;\n");
        xml_.append(" $public $int first;\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first=i;\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first=5i;\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public pkg.Ex inst=Ex.valueOf(\"ONE\");\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        assertSame(cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE")), field_);
    }
    @Test
    public void instanceArgument114Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO;\n");
        xml_.append(" $public $int first;\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first=i;\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first=5i;\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=Ex.values().length;\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextElDefault();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
    }
    @Test
    public void instanceArgument115Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int:pkg.Int4:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(3i):\n");
        xml_.append("  $interfaces(pkg.Int4)(14i):\n");
        xml_.append("  $interfaces(pkg.Int5)(10i):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  $this(p;.;,5i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p,$int s){\n");
        xml_.append("  common;;;=p;.;+s;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  $this(p;.;,5i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int p,$int s){\n");
        xml_.append("  common;;;=p;.;-s;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public ($int p){\n");
        xml_.append("  common;;;=p;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int4", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int5", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int4", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(8, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void calculateArgument113Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $final $int CST = 8i:\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $switch(t;.){\n");
        xml_.append("   $case($static(Ex).CST;;;){\n");
        xml_.append("    t;.=10:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, ret_.getNumber());
    }
    @Test
    public void calculateArgument114Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $final $int CST = 8i:\n");
        xml_.append(" $public $static $int exmeth(){\n");
        xml_.append("  $long t:\n");
        xml_.append("  t;.=8:\n");
        xml_.append("  $switch(t;.){\n");
        xml_.append("   $case(CST;;;){\n");
        xml_.append("    t;.=10:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return 1i+$($int)t;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        files_.put("pkg/Ex", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, ret_.getNumber());
    }
    @Test
    public void calculateArgument75Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree[] third=(pkg.ExThree[])$new pkg.ExThree[]{$new pkg.ExThree()}:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i]=$null:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_CUST, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct elt_ = (((ArrayStruct)field_).getInstance()) [0];
        assertSame(NullStruct.NULL_VALUE,elt_);
    }
    @Test
    public void calculateArgument76Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $boolean inst=Ex.TWO == Ex.TWO:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument77Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $boolean inst=Ex.ONE != Ex.TWO:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument78Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object inst=$ObjectsUtil.getParent(Ex.ONE):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument79Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int[] ONE = {}:\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $boolean inst=Ex.ONE == Ex.ONE:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument80Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object inst=$ObjectsUtil.getParent($new Ex()):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument81Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $class Inner {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $static Object value=$new Ex().$new Inner():\n");
        xml_.append(" $public Object inst=value == value:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument82Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $class Inner {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object inst=$new Ex().$new Inner() != $new Ex().$new Inner():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument83Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object inst=$ObjectsUtil.getParent($new code.util.Replacement(\"\",\"\")):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument84Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object one=$new code.util.Replacement(\"\",\"\"):\n");
        xml_.append(" $public Object two=$new code.util.Replacement(\" \",\"\"):\n");
        xml_.append(" $public $boolean inst=one != two:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument85Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object one=$new code.util.Replacement(\"\",\"\"):\n");
        xml_.append(" $public $boolean inst=one == one:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument86Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object inst=$ObjectsUtil.getParent($new Object()):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument87Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object one=$new Object():\n");
        xml_.append(" $public Object two=$new Object():\n");
        xml_.append(" $public $boolean inst=one != two:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument88Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public Object one=$new Object():\n");
        xml_.append(" $public $boolean inst=one == one:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument89Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $boolean inst=Ex.ONE != Ex.TWO:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(BOOLEAN, field_.getClassName(cont_));
        assertTrue(((BooleanStruct)field_).getInstance());
    }
    @Test
    public void calculateArgument90Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" {$enums.name($null):}\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        assertEq("code.util.exceptions.NullObjectException", cont_.getException().getClassName(cont_));
    }
    @Test
    public void calculateArgument91Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" {$enums.ordinal($null):}\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        assertEq("code.util.exceptions.NullObjectException", cont_.getException().getClassName(cont_));
    }
    @Test
    public void calculateArgument92Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $private $final Object inst = Ex.valueOf($null):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument out_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = out_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument93Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $private $final Object inst = Ex.valueOf(\"\"):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");

        Argument out_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = out_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertSame(NullStruct.NULL_VALUE,field_);
    }
    @Test
    public void calculateArgument94Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3) pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $static $int res = 0: $static {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
        Struct st_ = cont_.getClasses().getStaticField(new ClassField("pkg.Int3","res"));
        assertEq(INTEGER, st_.getClassName(cont_));
        assertEq(-1, ((NumberStruct)st_).intStruct());
    }
    @Test
    public void instanceArgument1151Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $static $final $int res = -1:}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
        Struct st_ = cont_.getClasses().getStaticField(new ClassField("pkg.Int3","res"));
        assertEq(INTEGER, st_.getClassName(cont_));
        assertEq(-1, ((NumberStruct)st_).intStruct());
    }
    @Test
    public void instanceArgument1152Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3,pkg.Int4) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");

        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int4", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(7, ((NumberStruct)subField_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, ((NumberStruct)subField_).intStruct());
        subField_ = ((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.Int4", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(8, ((NumberStruct)subField_).intStruct());
    }

    @Test
    public void instanceArgument116Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $super():\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int5", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument117Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int5", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void calculateArgument95Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument96Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument97Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $interfaces(pkg.In)(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument98Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $interfaces(pkg.Int3)(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument99Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $this():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument100Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $this(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {$public $int res = 0: {--res:}}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument101Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces (pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument1010Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3) ():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument1011Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3 )():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgument1020Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces( pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");

        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, ((NumberStruct)field_).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, ((NumberStruct)((FieldableStruct)field_).getFields().getVal(new ClassField("pkg.ExThree", "ance"))).intStruct());
        field_ = ((FieldableStruct)str_).getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, (((ArrayStruct)field_).getInstance()).length);
        Struct[] inter_ = ((ArrayStruct)field_).getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = (((ArrayStruct)inter_[0]).getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = ((FieldableStruct)elt_).getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, ((NumberStruct)intern_).intStruct());
    }
    @Test
    public void instanceArgumentFailTest() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).TWO;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $default{\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("   $case(TWO;;;):\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument2FailTest() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  pkg.Ex var = $static(pkg.Ex).ONE;;;:\n");
        xml_.append("  $int r = 0i:\n");
        xml_.append("  $switch(var;.){\n");
        xml_.append("   $default:\n");
        xml_.append("   $case(TWO):\n");
        xml_.append("   $case(TWO){\n");
        xml_.append("    r;. = 1i:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $return $values(pkg.Ex).length+r;.:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static(pkg.Ex).doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument3FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $super():\n");
        xml_.append("  $interfaces(pkg.Int3)(1):\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument4FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $super():\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)(1):\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument5FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $super():\n");
        xml_.append("  $super():\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument6FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)(1):\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument7FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $int i = 0:\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument8FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $if ($true):\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument9FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $if ($true):\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument10FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int2)():\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument11FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append(" $public Int5(){\n");
        xml_.append("  $interfaces(pkg.Int2)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument12FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append(" $public Int5(){\n");
        xml_.append("  $if($interfaces(pkg.Int2)()):\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument13FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo: pkg.ExFour :pkg.Int:Int5{\n");
        xml_.append(" $public java.lang.Object[][] third=$new java.lang.Object[1i][1i]:\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int5)():\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int5 {\n");
        xml_.append(" $public $int common=10i:\n");
        xml_.append(" {\n");
        xml_.append("  $if($interfaces(pkg.Int2)()):\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument14FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument15FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int2,pkg.Int3) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument16FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.ExThree) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument17FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int,pkg.Inexist1) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument18FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Inexist1) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void instanceArgument19FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class $interfaces(pkg.Int3,pkg.Int4) pkg.Ex :pkg.Int2{\n");
        xml_.append("\n");
        xml_.append(" $public(){\n");
        xml_.append("  $interfaces(pkg.Int3)():\n");
        xml_.append("  $interfaces(pkg.Int4)():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface $interfaces(pkg.Int3) pkg.Int2 :pkg.Int3:Int4{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        xml_.append("$public $interface pkg.Int4 {\n");
        xml_.append(" $public $static $int nb=6i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
}
