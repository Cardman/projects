package code.expressionlanguage.methods;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.PrimitiveTypeUtil;
import code.expressionlanguage.opers.util.ClassField;
import code.expressionlanguage.opers.util.ConstructorId;
import code.expressionlanguage.opers.util.Struct;
import code.util.CustList;
import code.util.StringMap;

public final class ProcessMethodInstanceInterfaceTest extends
        ProcessMethodCommon {
    @Test
    public void instanceArgument60Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument61Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument62Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument63Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument64Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 3i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument65Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument66Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance=$new pkg.Ex().doubleValue():\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument67Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument68Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument69Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument70Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument71Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(10, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument72Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $static $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice$pkg$Int3$$doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument73Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int2{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice$pkg$Int3$$doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int3{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 3i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument74Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int2{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  pkg.Int3 k=$new pkg.Ex():\n");
        xml_.append("  ance;;;=k;.$classchoice$pkg$Int3$$doubleValue():\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int3{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.ExThree",PrimitiveTypeUtil.PRIM_INT);
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(9, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument75Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public [pkg.ExThree third=$new [pkg.ExThree[]($new pkg.ExThree()):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i]=$null:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_CUST, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct elt_ = ((Struct[])field_.getInstance()) [0];
        assertTrue(elt_.isNull());
    }
    @Test
    public void instanceArgument76Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public $int ance=$classchoice$pkg$Ex$$inst;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExTwo");
        ProcessMethod.initializeClass("pkg.ExTwo", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExTwo", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExTwo", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "ance"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument77Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree :pkg.ExFour{\n");
        xml_.append(" $public $int ance=17i:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $super():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExFour {\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }

    @Test
    public void instanceArgument78Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
    }

    @Test
    public void instanceArgument79Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo{\n");
        xml_.append(" $public $int inst=sec;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public pkg.ExThree third=$new pkg.ExThree():\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public $static $int st:\n");
        xml_.append(" $static{\n");
        xml_.append("  st;;;+=14i:\n");
        xml_.append(" }\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i+st;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(38, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
    }
    @Test
    public void instanceArgument80Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument81Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $super():\n");
        xml_.append("  inst;;;++:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $int common=1i:\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(3, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument82Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.Int2{\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, (Number)subField_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, (Number)subField_.getInstance());
    }

    @Test
    public void instanceArgument83Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.Int2{\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public $int ouf:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append("  $int toto:\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, (Number)subField_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, (Number)subField_.getInstance());
    }

    @Test
    public void instanceArgument84Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.Int2{\n");
        xml_.append(" $public (){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public pkg.Ex inst=$new pkg.Ex():\n");
        xml_.append(" $public pkg.Ex ance=$new pkg.Ex():\n");
        xml_.append(" $public $int ouf:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int :pkg.Int2{}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $static $int nb=1i:\n");
        xml_.append(" {\n");
        xml_.append("  nb;;;++:\n");
        xml_.append(" }\n");
        xml_.append(" $public $int common=nb;;;:\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExThree", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        Struct subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(2, (Number)subField_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        subField_ = field_.getFields().getVal(new ClassField("pkg.Int3", "common"));
        assertEq(INTEGER, subField_.getClassName(cont_));
        assertEq(3, (Number)subField_.getInstance());
    }
    @Test
    public void instanceArgument85Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo :pkg.Int{\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument86Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $normal $int doubleValue(){\n");
        xml_.append("  $return 1i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(!cont_.getClasses().isInitialized("pkg.ExThree"));
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument87Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = contextEl();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex :pkg.ExTwo:pkg.Int3:pkg.Int{\n");
        xml_.append(" $public $int inst=2i:\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExTwo {\n");
        xml_.append(" $public [[java.lang.Object third=$new [java.lang.Object(1i,1i):\n");
        xml_.append(" $public $int fourth=third;;;length:\n");
        xml_.append(" $public $int sec:\n");
        xml_.append(" $public java.lang.Object elt:\n");
        xml_.append(" {\n");
        xml_.append("  sec;;;+=8i:\n");
        xml_.append("  third;;;[0i][0i]=$new pkg.ExThree():\n");
        xml_.append("  elt;;;=third;;;[0i][0i]:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  sec;;;+=16i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return 2i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExThree {\n");
        xml_.append(" $public $int ance:\n");
        xml_.append(" $public (){\n");
        xml_.append("  $this(17i):\n");
        xml_.append(" }\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  $if(i;.;>0){\n");
        xml_.append("   ance;;;=i;.;:\n");
        xml_.append("   $return:\n");
        xml_.append("  }\n");
        xml_.append("  ance;;;=i;.;:\n");
        xml_.append("  ance;;;+=i;.;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int {\n");
        xml_.append("}\n");
        files_.put("pkg/Int", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int2 :pkg.Int3{}\n");
        files_.put("pkg/Int2", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $interface pkg.Int3 {\n");
        xml_.append(" $public $abstract $int doubleValue(){\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Int3", xml_.toString());
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "elt"));
        assertEq("pkg.ExThree", field_.getClassName(cont_));
        assertEq(17, (Number)field_.getFields().getVal(new ClassField("pkg.ExThree", "ance")).getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(ARR_ARR_OBJECT, field_.getClassName(cont_));
        assertEq(1, ((Struct[])field_.getInstance()).length);
        Struct[] inter_ = (Struct[]) field_.getInstance();
        assertEq(1, inter_.length);
        Struct elt_ = ((Struct[]) inter_[0].getInstance())[0];
        assertEq("pkg.ExThree", elt_.getClassName(cont_));
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(INTEGER, intern_.getClassName(cont_));
        assertEq(17, (Number)intern_.getInstance());
    }
    @Test
    public void instanceArgument88Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static$pkg$Ex.TWO;;;.doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(5, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument89Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static$pkg$Ex.ONE;;;.doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(4, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument90Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public java.lang.String inst=$static$pkg$Ex.TWO;;;.name():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(STRING, field_.getClassName(cont_));
        assertEq("TWO", (String)field_.getInstance());
    }
    @Test
    public void instanceArgument91Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static$pkg$Ex.TWO;;;.ordinal():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(1, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument92Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static$pkg$Ex.values().length:\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number)field_.getInstance());
    }
    @Test
    public void instanceArgument93Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int doubleValue(){\n");
        xml_.append("  $return first;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public pkg.Ex inst=$static$pkg$Ex.valueOf(\"ONE\"):\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq("pkg.Ex", field_.getClassName(cont_));
        assertSame(cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE")), field_);
    }
    @Test
    public void instanceArgument94Test() {
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $enum pkg.Ex {\n");
        xml_.append(" ONE(4i),\n");
        xml_.append(" TWO:\n");
        xml_.append(" $public $int first:\n");
        xml_.append(" $public ($int i){\n");
        xml_.append("  first;;;=i;.;:\n");
        xml_.append(" }\n");
        xml_.append(" $public (){\n");
        xml_.append("  first;;;=5i:\n");
        xml_.append(" }\n");
        xml_.append(" $public $static $int doubleValue(){\n");
        xml_.append("  $return values().length:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        StringMap<String> files_ = new StringMap<String>();
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.ExCont {\n");
        xml_.append(" $public $int inst=$static$pkg$Ex.doubleValue():\n");
        xml_.append("}\n");
        files_.put("pkg/ExCont", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExCont");
        ProcessMethod.initializeClass("pkg.ExCont", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExCont", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.ExCont", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExCont", "inst"));
        assertEq(INTEGER, field_.getClassName(cont_));
        assertEq(2, (Number) field_.getInstance());
    }
    @Test
    public void instanceArgument95Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public [java.lang.Object array=$new [java.lang.Object(1i):\n");
        xml_.append(" $public $int elt=2i:\n");
        xml_.append(" {\n");
        xml_.append("  ref()[0i]=getter():\n");
        xml_.append(" }\n");
        xml_.append(" $public $final [java.lang.Object ref(){\n");
        xml_.append("  $return array;;;:\n");
        xml_.append(" }\n");
        xml_.append(" $public $final $int getter(){\n");
        xml_.append("  $return elt;;;:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().getErrorsDet().isEmpty());
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq("pkg.Ex", str_.getClassName(cont_));
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "array"));
        assertEq(ARR_OBJECT, field_.getClassName(cont_));
        Struct[] array_ = (Struct[]) field_.getInstance();
        assertEq(2, (Number) array_[0].getInstance());
    }
    
}
