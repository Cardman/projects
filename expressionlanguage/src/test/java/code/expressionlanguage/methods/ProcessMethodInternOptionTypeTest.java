package code.expressionlanguage.methods;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.opers.util.MethodId;
import code.util.CustList;
import code.util.StringMap;

public final class ProcessMethodInternOptionTypeTest extends ProcessMethodCommon {

    @Test
    public void calculateArgument1Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (static(Class).getClass(v).getName() != \"pkgtwo.OuterThree<$core.String>..InnerFive<$core.String>..InnerInner<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument2Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument3Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument4Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public String field = static(Class).getClass(this).getName();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument5Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument6Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument7Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append(" public Inner field = new Inner();\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument8Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument9Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  Outer<String>.InnerThree<String> w;\n");
        xml_.append("  w = new Outer<String>().new InnerThree<String>();\n");
        xml_.append("  v = $(Outer<String>.InnerThree<String>.InnerInner<String>)\n");
        xml_.append("  class(Outer.InnerThree.InnerInner).makeGeneric(class(String),class(String),class(String)).getDeclaredConstructors(false)[0i].newInstance(w);\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument10Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public String field = static(Class).getClass(this).getName();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument11Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return field+stfield;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public String field = static(Class).getClass(this).getName();\n");
        xml_.append(" }\n");
        xml_.append(" public static String stfield = \" \";\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String> \") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument12Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (static(Class).getClass(static(ObjectsUtil).getParent(v)).getName() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument13Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static Inner field = new Inner();\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument14Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static Inner field = new Inner();\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  pkg.Outer.Inner w = $(pkg.Outer.Inner) class(pkg.Outer.Inner).defaultInstance();\n");
        xml_.append("  if (static(Class).getClass(w).getName() != \"pkg.Outer..Inner\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (static(Class).getClass(static(ObjectsUtil).getParent(w)) != null) {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument15Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  pkg.Outer<String>.Inner w = $(pkg.Outer<String>.Inner) class(pkg.Outer<String>.Inner).defaultInstance();\n");
        xml_.append("  if (static(Class).getClass(w).getName() != \"pkg.Outer<$core.String>..Inner\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (static(Class).getClass(static(ObjectsUtil).getParent(w)).getName() != \"pkg.Outer<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument16Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner<#D> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  pkg.Outer<String>.Inner<Number> w = $(pkg.Outer<String>.Inner<Number>) class(pkg.Outer<String>.Inner<Number>).defaultInstance();\n");
        xml_.append("  if (static(Class).getClass(w).getName() != \"pkg.Outer<$core.String>..Inner<$core.Number>\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (static(Class).getClass(static(ObjectsUtil).getParent(w)).getName() != \"pkg.Outer<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument17Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  private String field = static(Class).getClass(this).getName();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument18Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public class InnerEx {\n");
        xml_.append("   public String innerField = static(Class).getClass(static(pkg.Outer.Inner).this).getName();\n");
        xml_.append("  }\n");
        xml_.append("  public static Inner.InnerEx field = new Inner().new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append(" static{\n");
        xml_.append("  class(Outer.Inner).init();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument19Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String> parent = new Outer<String>();\n");
        xml_.append("  pkg.Outer<String>.Inner w = $(pkg.Outer<String>.Inner) class(pkg.Outer<String>.Inner).defaultInstance(parent);\n");
        xml_.append("  if (static(Class).getClass(w).getName() != \"pkg.Outer<$core.String>..Inner\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (static(ObjectsUtil).getParent(w) != parent) {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument20Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static Inner field = new Inner();\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String> parent = new Outer<String>();\n");
        xml_.append("  pkg.Outer.Inner w = $(pkg.Outer.Inner) class(pkg.Outer.Inner).defaultInstance(parent);\n");
        xml_.append("  if (static(Class).getClass(w).getName() != \"pkg.Outer..Inner\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (static(Class).getClass(static(ObjectsUtil).getParent(w)) != null) {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument21Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public annotation pkg.Outer {\n");
        xml_.append(" class Inner<#A> {\n");
        xml_.append("  public #A field = $(#A)\"sample\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer.Inner<String> v;\n");
        xml_.append("  v = new Outer.Inner<String>();\n");
        xml_.append("  if (static(Class).getClass(v).getName() != \"pkg.Outer..Inner<$core.String>\") {\n");
        xml_.append("   return 2i;\n");
        xml_.append("  }\n");
        xml_.append("  if (v.field != \"sample\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument22Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        //pkgtwo.OuterThree.InnerFive.this
        xml_.append("    return static(Class).getClass(pkgtwo.OuterThree.InnerFive.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument23Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(OuterThree.InnerFive.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument24Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(OuterThree.InnerFive.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument25Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(InnerFive.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument26Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(pkgtwo.OuterThree.InnerFive.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument27Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(InnerFive.InnerInner.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterThree<$core.String>..InnerFive<$core.String>..InnerInner<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument28Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(OuterThree.InnerFive.InnerInner.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterThree<$core.String>..InnerFive<$core.String>..InnerInner<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument29Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(pkgtwo.OuterThree.InnerFive.InnerInner.this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterThree<$core.String>..InnerFive<$core.String>..InnerInner<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument30Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append(" public Inner field = (Outer<#C>.Inner)new Inner();\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument31Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append(" public Inner field = (Inner)new Inner();\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument32Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = (InnerEx)new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument33Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = (Inner.InnerEx)new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument34Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  Outer<String>.InnerThree<String> w;\n");
        xml_.append("  w = new Outer<String>().new InnerThree<String>();\n");
        xml_.append("  v = (Outer<String>.InnerThree<String>.InnerInner<String>)\n");
        xml_.append("  class(Outer.InnerThree.InnerInner).makeGeneric(class(String),class(String),class(String)).getDeclaredConstructors(false)[0i].newInstance(w);\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument35Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = (InnerEx)new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+(CST);\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument36Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = (InnerEx)new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+(OuterThree.InnerFive.CST);\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument37Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass((this)).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument38Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass((this)).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" public normal String getOuterLoc(){\n");
        xml_.append("  return (OuterThree.this.getOuterSec());\n");
        xml_.append(" }\n");
        xml_.append(" public normal String getOuterSec(){\n");
        xml_.append("  return \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument39Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class [pkgtwo.OuterThree.InnerFive;] pkg.Outer: OuterTwo {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerTwo:OuterTwo.InnerThree {\n");
        xml_.append("  public static final InnerFive CST = new InnerFive();\n");
        xml_.append("  public static String method(){\n");
        xml_.append("   return Class.getClass(CST).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static String method(){\n");
        xml_.append("  return pkg.Outer.InnerTwo.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.OuterTwo {\n");
        xml_.append(" protected static class InnerThree {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerFour:InnerThree {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq("pkgtwo.OuterThree..InnerFive", (String)ret_.getObject());
    }
    @Test
    public void calculateArgument40Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class [pkgtwo.OuterThree.InnerFive;] pkg.Outer: OuterTwo {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerTwo:OuterTwo.InnerThree {\n");
        xml_.append("  public static final InnerFive CST = new InnerFive();\n");
        xml_.append("  public static String method(){\n");
        xml_.append("   return Class.getClass(CST).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static String method(){\n");
        xml_.append("  return pkg.Outer.InnerTwo.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.OuterTwo {\n");
        xml_.append(" protected static class InnerThree {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerFour:InnerThree {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree:OuterFour {\n");
        xml_.append("}\n");
        xml_.append("public class pkgtwo.OuterFour {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq("pkgtwo.OuterFour..InnerFive", (String)ret_.getObject());
    }
    @Test
    public void calculateArgument41Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class [static pkgtwo.OuterThree.InnerFive;] pkg.Outer: OuterTwo {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerTwo:OuterTwo.InnerThree {\n");
        xml_.append("  public static final InnerFive CST = new InnerFive();\n");
        xml_.append("  public static String method(){\n");
        xml_.append("   return Class.getClass(CST).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static String method(){\n");
        xml_.append("  return pkg.Outer.InnerTwo.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.OuterTwo {\n");
        xml_.append(" protected static class InnerThree {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerFour:InnerThree {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq("pkgtwo.OuterThree..InnerFive", (String)ret_.getObject());
    }
    @Test
    public void calculateArgument42Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class [static pkgtwo.OuterThree.InnerFive;] pkg.Outer: OuterTwo {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerTwo:OuterTwo.InnerThree {\n");
        xml_.append("  public static final InnerFive CST = new InnerFive();\n");
        xml_.append("  public static String method(){\n");
        xml_.append("   return Class.getClass(CST).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static String method(){\n");
        xml_.append("  return pkg.Outer.InnerTwo.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.OuterTwo {\n");
        xml_.append(" protected static class InnerThree {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerFour:InnerThree {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree:OuterFour {\n");
        xml_.append(" public class InnerFive {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkgtwo.OuterFour {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq("pkgtwo.OuterFour..InnerFive", (String)ret_.getObject());
    }
    @Test
    public void calculateArgument43Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class [pkgtwo.OuterThree.InnerFive.InnerSix;] pkg.Outer: OuterTwo {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerTwo:OuterTwo.InnerThree {\n");
        xml_.append("  public static final InnerSix CST = new InnerSix();\n");
        xml_.append("  public static String method(){\n");
        xml_.append("   return Class.getClass(CST).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static String method(){\n");
        xml_.append("  return pkg.Outer.InnerTwo.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.OuterTwo {\n");
        xml_.append(" protected static class InnerThree {\n");
        xml_.append(" }\n");
        xml_.append(" public static class InnerFour:InnerThree {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree:OuterFour {\n");
        xml_.append("}\n");
        xml_.append("public class pkgtwo.OuterFour {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append("  public static class InnerSix {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq("pkgtwo.OuterFour..InnerFive..InnerSix", (String)ret_.getObject());
    }
    @Test
    public void calculateArgument44Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static Outer<String> staticField = new Outer<String>();\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = staticField.new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (static(Class).getClass(v).getName() != \"pkgtwo.OuterThree<$core.String>..InnerFive<$core.String>..InnerInner<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        xml_.append("public class pkg.Apply {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  return Ex.method();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Apply", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument45Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    if (OuterThree.this instanceof pkg.Outer<String>){\n");
        xml_.append("     return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("    }\n");
        xml_.append("    return \"\";\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument46Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    if (OuterThree.InnerFive.this instanceof pkgtwo.OuterThree<String>.InnerFive<String>){\n");
        xml_.append("     return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("    }\n");
        xml_.append("    return \"\";\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument47Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  private boolean eq;\n");
        xml_.append("  public(){\n");
        xml_.append("   this(OuterThree.this);\n");
        xml_.append("  }\n");
        xml_.append("  public(OuterThree<#A> p){\n");
        xml_.append("   eq = p == OuterThree.this;\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append(" public static boolean isEq(){\n");
        xml_.append("  return new OuterThree<Number>().new InnerFive<String>().eq;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("isEq");
        Argument ret_ = calculateArgument("pkgtwo.OuterThree", id_, args_, cont_);
        assertTrue((Boolean)ret_.getObject());
    }
    @Test
    public void calculateArgument1FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String> u;\n");
        xml_.append("  u = null;\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = u.new InnerInner<String>();\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument2FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = new Outer<String>().new InnerThree<String>().new InnerInner<String>();\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument3FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public static Inner field = new Inner();\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument4FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append("  public static class InnerInner {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return field;\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public String field = static(Class).getClass(this).getName();\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument5FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree {\n");
        xml_.append(" public static class InnerFive {\n");
        xml_.append("  public static class InnerInner {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return method();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String method() {\n");
        xml_.append("   return static(Class).getClass(this).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument6FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  Outer<String>.InnerThree<String> w;\n");
        xml_.append("  w = new Outer<String>().new InnerThree<String>();\n");
        xml_.append("  v = $(Outer<String>.InnerThree<String>.InnerInner<String>)\n");
        xml_.append("  class(Outer.InnerThree.InnerInner).makeGeneric(class(String),class(String),class(String)).getDeclaredConstructors(false)[0i].newInstance($(Object)null);\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument7FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public static class Inner {\n");
        xml_.append("  public static class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  public static InnerEx field = new InnerEx();\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  Outer<String>.InnerThree<String>.InnerInner<String> v;\n");
        xml_.append("  v = $(Outer<String>.InnerThree<String>.InnerInner<String>)\n");
        xml_.append("  class(Outer.InnerThree.InnerInner).makeGeneric(class(String),class(String),class(String)).getDeclaredConstructors(false)[0i].newInstance(\"\");\n");
        xml_.append("  if (v.get() != \"pkgtwo.OuterTwo<$core.String>..InnerThree<$core.String>\") {\n");
        xml_.append("   return 1i;\n");
        xml_.append("  }\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument8FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public static String get(){\n");
        xml_.append("    return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument9FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public static class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument10FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(Class).getClass(static(OuterThree).this).getName();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument11FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public static String get(){\n");
        xml_.append("   return static(Class).getClass(static(OuterThree.InnerFive).this).getName();\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument12FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public static class InnerFive<#E> {\n");
        xml_.append("  public(){\n");
        xml_.append("   this(static(Class).getClass(static(OuterThree.InnerFive).this).getName());\n");
        xml_.append("  }\n");
        xml_.append("  public(String p){\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument13FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  pkg.Outer<String>.Inner w = $(pkg.Outer<String>.Inner) class(pkg.Outer<String>.Inner).defaultInstance(null);\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument14FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("public class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" public class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerTwo:OuterTwo<#C>.InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" public class InnerThree<#F>:OuterThree<#B>.InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" public class InnerFour:InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  public class InnerInner<#G> {\n");
        xml_.append("   public normal String get(){\n");
        xml_.append("    return static(OuterThree.InnerFive).this.getLoc();\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  public normal String getLoc(){\n");
        xml_.append("   return static(Class).getClass(this).getName()+CST;\n");
        xml_.append("  }\n");
        xml_.append("  private static final String CST = \"\";\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" public static int method(){\n");
        xml_.append("  pkg.Outer<String>.Inner w = $(pkg.Outer<String>.Inner) class(pkg.Outer<String>.Inner).defaultInstance(\"\");\n");
        xml_.append("  return 0i;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument15FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" public class InnerFive<#E> {\n");
        xml_.append("  private boolean eq;\n");
        xml_.append("  public(){\n");
        xml_.append("   this(this);\n");
        xml_.append("  }\n");
        xml_.append("  public(Object p){\n");
        xml_.append("   eq = p == OuterThree.this;\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument16FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("public class pkg.Ex {\n");
        xml_.append(" private boolean eq;\n");
        xml_.append(" public(){\n");
        xml_.append("  Object res = eq.this;\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEnElDefaultInternType();
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
}
