package code.expressionlanguage.methods;

import static code.expressionlanguage.EquallableElUtil.assertEq;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.opers.util.MethodId;
import code.util.CustList;
import code.util.StringMap;

public final class ProcessMethodInternTypeTest extends ProcessMethodCommon {

    @Test
    public void calculateArgument1Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if ($static($Class).getClass(v;.).getName() != \"pkgtwo.OuterThree<java.lang.String>..InnerFive<java.lang.String>..InnerInner<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument2Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static($Class).getClass($static(OuterThree..InnerFive).$this).getName():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument3Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName():\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument4Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return field;;;:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public java.lang.String field = $static($Class).getClass($this).getName():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument5Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName():\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument6Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument7Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append(" $public ..Inner field = $new..Inner():\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument8Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $static $class Inner {\n");
        xml_.append("  $public {} $static $class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  $public $static ..InnerEx field = $new..InnerEx():\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument9Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $static $class Inner {\n");
        xml_.append("  $public {} $static $class InnerEx {\n");
        xml_.append("  }\n");
        xml_.append("  $public $static ..InnerEx field = $new..InnerEx():\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String> w:\n");
        xml_.append("  w;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>():\n");
        xml_.append("  v;. = $(Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String>)\n");
        xml_.append("  $class(Outer..InnerThree..InnerInner).makeGeneric($class(java.lang.String),$class(java.lang.String),$class(java.lang.String)).getDeclaredConstructors($false)[0i].newInstance(w;.):\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument10Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $static $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return field;;;:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public java.lang.String field = $static($Class).getClass($this).getName():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument11Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $static $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return field;;;+stfield;;;:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public java.lang.String field = $static($Class).getClass($this).getName():\n");
        xml_.append(" }\n");
        xml_.append(" $public $static java.lang.String stfield = \" \":\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String> \") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument12Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if ($static($Class).getClass($static($ObjectsUtil).getParent(v;.)).getName() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument13Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $static $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public $static ..Inner field = $new..Inner():\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument14Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $static $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public $static ..Inner field = $new..Inner():\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  pkg.Outer..Inner w = $(pkg.Outer..Inner) $class(pkg.Outer..Inner).defaultInstance():\n");
        xml_.append("  $if ($static($Class).getClass(w;.).getName() != \"pkg.Outer..Inner\") {\n");
        xml_.append("   $return 2i:\n");
        xml_.append("  }\n");
        xml_.append("  $if ($static($Class).getClass($static($ObjectsUtil).getParent(w;.)) != $null) {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument15Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  pkg.Outer<java.lang.String>..Inner w = $(pkg.Outer<java.lang.String>..Inner) $class(pkg.Outer<java.lang.String>..Inner).defaultInstance():\n");
        xml_.append("  $if ($static($Class).getClass(w;.).getName() != \"pkg.Outer<java.lang.String>..Inner\") {\n");
        xml_.append("   $return 2i:\n");
        xml_.append("  }\n");
        xml_.append("  $if ($static($Class).getClass($static($ObjectsUtil).getParent(w;.)).getName() != \"pkg.Outer<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument16Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner<#D> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static $final java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  pkg.Outer<java.lang.String>..Inner<java.lang.Number> w = $(pkg.Outer<java.lang.String>..Inner<java.lang.Number>) $class(pkg.Outer<java.lang.String>..Inner<java.lang.Number>).defaultInstance():\n");
        xml_.append("  $if ($static($Class).getClass(w;.).getName() != \"pkg.Outer<java.lang.String>..Inner<java.lang.Number>\") {\n");
        xml_.append("   $return 2i:\n");
        xml_.append("  }\n");
        xml_.append("  $if ($static($Class).getClass($static($ObjectsUtil).getParent(w;.)).getName() != \"pkg.Outer<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument17Test() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $static $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return field;;;:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $private java.lang.String field = $static($Class).getClass($this).getName():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
    }
    @Test
    public void calculateArgument1FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String> u:\n");
        xml_.append("  u;. = $null:\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = u;.$new InnerInner<java.lang.String>():\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(cont_.getClasses().isEmptyErrors());
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("method");
        calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNotNull(cont_.getException());
    }
    @Test
    public void calculateArgument2FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer<#C>: OuterTwo<#C> {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerTwo:OuterTwo<#C>..InnerThree<#C> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterTwo<#B>:OuterThree<#B> {\n");
        xml_.append(" $public {} $class InnerThree<#F>:OuterThree<#B>..InnerFive<#F> {\n");
        xml_.append(" }\n");
        xml_.append(" $public {} $class InnerFour:..InnerThree<#B> {\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExTwo", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree<#A> {\n");
        xml_.append(" $public {} $class InnerFive<#E> {\n");
        xml_.append("  $public {} $class InnerInner<#G> {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return $static(OuterThree..InnerFive).$this.getLoc():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String getLoc(){\n");
        xml_.append("   $return $static($Class).getClass($this).getName()+CST:\n");
        xml_.append("  }\n");
        xml_.append("  $private $static java.lang.String CST = \"\":\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        xml_ = new StringBuilder();
        xml_.append("$public $class pkg.Ex {\n");
        xml_.append(" $public $static $int method(){\n");
        xml_.append("  Outer<java.lang.String>..InnerThree<java.lang.String>..InnerInner<java.lang.String> v:\n");
        xml_.append("  v;. = $new Outer<java.lang.String>().$new InnerThree<java.lang.String>().$new InnerInner<java.lang.String>():\n");
        xml_.append("  $if (v;.get() != \"pkgtwo.OuterTwo<java.lang.String>..InnerThree<java.lang.String>\") {\n");
        xml_.append("   $return 1i:\n");
        xml_.append("  }\n");
        xml_.append("  $return 0i:\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExFour", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument3FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("pkgtwo.OuterTwo;\n");
        xml_.append("$public $class pkg.Outer {\n");
        xml_.append(" $public {} $class Inner {\n");
        xml_.append(" }\n");
        xml_.append(" $public $static ..Inner field = $new..Inner():\n");
        xml_.append("}\n");
        files_.put("pkg/Ex", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument4FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree {\n");
        xml_.append(" $public {} $static $class InnerFive {\n");
        xml_.append("  $public {} $static $class InnerInner {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return field;;;:\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public java.lang.String field = $static($Class).getClass($this).getName():\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
    @Test
    public void calculateArgument5FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        StringBuilder xml_;
        xml_ = new StringBuilder();
        xml_.append("$public $class pkgtwo.OuterThree {\n");
        xml_.append(" $public {} $static $class InnerFive {\n");
        xml_.append("  $public {} $static $class InnerInner {\n");
        xml_.append("   $public $normal java.lang.String get(){\n");
        xml_.append("    $return method():\n");
        xml_.append("   }\n");
        xml_.append("  }\n");
        xml_.append("  $public $normal java.lang.String method() {\n");
        xml_.append("   $return $static($Class).getClass($this).getName():\n");
        xml_.append("  }\n");
        xml_.append(" }\n");
        xml_.append("}\n");
        files_.put("pkg/ExThree", xml_.toString());
        ContextEl cont_ = contextEl(true,false);
        Classes.validateAll(files_, cont_);
        assertTrue(!cont_.getClasses().isEmptyErrors());
    }
}
