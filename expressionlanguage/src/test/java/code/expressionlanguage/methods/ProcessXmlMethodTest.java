package code.expressionlanguage.methods;
import static code.util.opers.EquallableUtil.assertEq;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.lang.reflect.Array;

import org.junit.Ignore;
import org.junit.Test;

import code.expressionlanguage.AccessValueEx;
import code.expressionlanguage.Argument;
import code.expressionlanguage.ContextEl;
import code.expressionlanguage.CustBase;
import code.expressionlanguage.CustEnum;
import code.expressionlanguage.PageEl;
import code.expressionlanguage.PrimitiveTypeUtil;
import code.expressionlanguage.classes.Ints;
import code.expressionlanguage.classes.PickableList;
import code.expressionlanguage.exceptions.StackOverFlow;
import code.expressionlanguage.methods.exceptions.UndefinedConstructorException;
import code.expressionlanguage.opers.OperationNode;
import code.expressionlanguage.opers.util.ClassField;
import code.expressionlanguage.opers.util.ClassName;
import code.expressionlanguage.opers.util.ConstructorId;
import code.expressionlanguage.opers.util.FctConstraints;
import code.expressionlanguage.opers.util.MethodId;
import code.expressionlanguage.opers.util.Struct;
import code.util.CustList;
import code.util.EqList;
import code.util.StringList;
import code.util.StringMap;

@SuppressWarnings("static-method")
public class ProcessXmlMethodTest {

//    private static final String ARR_INT = "[I";
//    private static final String ARR_CUST = "[Lpkg.ExThree;";
//    private static final String ARR_ARR_CUST = "[[Lpkg.ExThree;";
    private static final String ARR_INT = "[$int";
    private static final String ARR_CUST = "[pkg.ExThree";
    private static final String ARR_ARR_CUST = "[[pkg.ExThree";
    private static final String NUMBERS = Ints.class.getName();
    private static final String PICKABLE_LIST = PickableList.class.getName();
    private static final String CUST = NUMBERS;
    private static final String PUBLIC_ACCESS = "PUBLIC";
    private static final String PROTECTED_ACCESS = "PROTECTED";
    private static final String PACKAGE_ACCESS = "PACKAGE";
    private static final String PRIVATE_ACCESS = "PRIVATE";

    @Test(timeout=1000)
    public void calculateArgument1Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(9, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument2Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='10'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument3Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='10'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='12'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(13, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument4Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='12'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(13, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument5Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='9'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument6Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='9'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='9'>\n";
        xml_ += "<affect left='t;.' oper='=' right='21'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(22, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument7Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='9'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='9'/>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument8Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='8'/>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument9Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='8'/>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument10Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='9'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='t;.' oper='=' right='12'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(13, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument11Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='9'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default/>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument12Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='l' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='l;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<foreach class='java.lang.Integer' var='e' expression='l;.'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='e;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
//        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument13Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='l' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='l;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<foreach class='java.lang.Integer' var='e' expression='l;.'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='e;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
//        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument14Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='l' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='l;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<foreach class='java.lang.Integer' var='e' expression='l;.'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
//        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument15Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='l' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='l;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='l;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<foreach class='java.lang.Integer' var='e' expression='l;.'>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "<affect left='t;.' oper='+=' right='e;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
//        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(12, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument16Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument17Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument18Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<if condition='t;.&lt;0'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</else>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument19Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</else>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument20Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;-1'>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<else>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</else>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument21Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='-2i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;-1'>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<else>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</else>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument22Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='-2i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;-1'>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test
    public void calculateArgument23Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='-1i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;-1'>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='=' right='3i'/>\n";
        xml_ += "</else>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(3, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument24Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='-1i'/>\n";
        xml_ += "<if condition='t;.&gt;=0'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;-1'>\n";
        xml_ += "<affect left='t;.' oper='=' right='2i'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(-1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument25Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='t;.' oper='=' right='12'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(13, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument26Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default/>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument27Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='10'/>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='=' right='16'/>\n";
        xml_ += "<break/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='t;.' oper='=' right='12'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument28Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<return expression='10i'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument29Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;%2=0'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(424, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument30Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;=2'>\n";
        xml_ += "<break/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(323, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument31Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;%2=0'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1000i'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2424, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument32Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;=2'>\n";
        xml_ += "<break/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1000i'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2323, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument33Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='4i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='0i' step='-1i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument34Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='4i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='1i' step='-1i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument35Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument36Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='4i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='1i' step='-2i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(6, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument37Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='1i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='2i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(4, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument38Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='4i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='1i' step='2i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(6, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument39Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='1i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='-2i' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
//        xml_ += "<affect left='t;.' oper='=' right='t;.+i;'/>\n";
        xml_ += "</for>\n";
//        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(4, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument40Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='1i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='1i' step='0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument41Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='1i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'/>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument42Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='a' class='"+ARR_INT+"'/>\n";
        xml_ += "<affect left='a;.' oper='=' right='^new."+ARR_INT+"(2i)'/>\n";
        xml_ += "<affect left='a;.[0i]' oper='=' right='8i'/>\n";
        xml_ += "<affect left='a;.[1i]' oper='=' right='16i'/>\n";
        xml_ += "<foreach var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='a;.'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
//        xml_ += "<affect left='t;.' oper='=' right='t;.+i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(24, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument43Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='a' class='"+ARR_INT+"'/>\n";
        xml_ += "<affect left='a;.' oper='=' right='^new."+ARR_INT+"(0i)'/>\n";
        xml_ += "<foreach var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='a;.'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument44Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i' eq=''>\n";
        xml_ += "<for init='0i' var='j' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='i;' eq=''>\n";
        xml_ += "<affect left='t;.' oper='+=' right='j;'/>\n";
        xml_ += "</for>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(23, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument45Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='0i'/>\n";
        xml_ += "<case value='null'>\n";
        xml_ += "<affect left='r;.' oper='=' right='1i'/>\n";
        xml_ += "</case>\n";
        xml_ += "</switch>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument46Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='null'>\n";
        xml_ += "<affect left='r;.' oper='=' right='1i'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='0i'/>\n";
        xml_ += "</switch>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument47Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<switch value='t;.'/>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument48Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i' eq=''>\n";
        xml_ += "<switch value='i;'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<continue/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument49Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='r;.&lt;0'>\n";
        xml_ += "<switch value='r;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<continue/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</while>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument50Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='r;.&lt;10'>\n";
        xml_ += "<switch value='r;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</while>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(100, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument51Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='i;.&lt;10'>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</while>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(811, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument52Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<do>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='i;.&lt;9'/>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(711, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test
    public void calculateArgument53Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='2i' step='1i'>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='i;.&lt;10'>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</while>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1622, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument54Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='2i' step='1i'>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<do>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='i;.&lt;9'/>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1422, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument55Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='i;.&lt;10'>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</while>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(811, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument56Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<do>\n";
        xml_ += "<switch value='i;.'>\n";
        xml_ += "<case value='1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='i;.&lt;9'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(711, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument57Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='i;.&lt;10'>\n";
        xml_ += "<if condition='i;.=1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='i;.=2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='r;.' oper='+=' right='100i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</else>\n";
        xml_ += "</while>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(811, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument58Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='java.lang.Integer'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='null'/>\n";
        xml_ += "<declare var='r' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='r;.' oper='=' right='0i'/>\n";
        xml_ += "<declare var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='i;.' oper='=' right='0i'/>\n";
        xml_ += "<while condition='i;.&lt;10'>\n";
        xml_ += "<if condition='i;.=1i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='1i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='i;.=2i'>\n";
        xml_ += "<affect left='r;.' oper='+=' right='10i'/>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "<continue/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<affect left='i;.' oper='++'/>\n";
        xml_ += "</while>\n";
        xml_ += "<return expression='r;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument59Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;%2=0'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(4424, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument60Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;=2'>\n";
        xml_ += "<break/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(3323, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument61Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;%2=0'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</if>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(424, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument62Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<for init='0i' var='i' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='4i' step='1i'>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='t;.' oper='+=' right='1i'/>\n";
        xml_ += "<if condition='i;=2'>\n";
        xml_ += "<break/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='t;.' oper='+=' right='10i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</if>\n";
        xml_ += "</for>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(323, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument63Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument64Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.io.IOException'>\n";
        xml_ += "<return expression='100i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument65Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument66Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<return expression='0i'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='12i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument67Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='10'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<return expression='0i'/>\n";
        xml_ += "</case>\n";
        xml_ += "<default>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='12i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument68Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='10'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<return expression='0i'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='9'/>\n";
        xml_ += "<default>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='12i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument69Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<switch value='t;.'>\n";
        xml_ += "<case value='8'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "</case>\n";
        xml_ += "<case value='9'/>\n";
        xml_ += "<default>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</default>\n";
        xml_ += "</switch>\n";
//        xml_ += "<return expression='12i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test
    public void calculateArgument1001Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(9, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1002Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1003Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(20, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1004Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(20, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1005Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='p;.getList().add(0)'/>\n";
        xml_ += "<line expression='p;.getList().add(2)'/>\n";
        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(21, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1006Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='p;.getList().add(0)'/>\n";
        xml_ += "<line expression='p;.getList().add(2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(21, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1007Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(21, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1008Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(21, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1009Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(21, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1010Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(23, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1011Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<while condition='exmethparam(p;.)'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</while>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<declareset var='elt' class='"+PrimitiveTypeUtil.PRIM_INT+"' expression='5i'/>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='elt;.'/>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(38, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1012Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(25, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1013Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("factrec", PrimitiveTypeUtil.PRIM_INT);
        Argument v_ = new Argument();
        v_.setArgClassName(Integer.class.getName());
        v_.setObject(5);
        args_.add(v_);
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(120, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1014Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("addelt", CUST, "java.lang.Object");
        Argument v_ = new Argument();
        Ints l_ = new Ints();
        v_.setArgClassName(CustList.class.getName());
        v_.setObject(l_);
        args_.add(v_);
        v_ = new Argument();
        v_.setArgClassName(Object.class.getName());
        v_.setObject(5);
        args_.add(v_);
        Argument ret_ = new Argument();
        assertEq(0, l_.size());
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertNull(ret_.getObject());
        assertEq(OperationNode.VOID_RETURN, ret_.getArgClassName());
        assertEq(1, l_.size());
        assertEq(5, (Number)l_.first());
    }

    @Test(timeout=1000)
    public void calculateArgument1015Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1016Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
//        xml_ += "<line expression='simpleMethod()'/>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='simpleMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1017Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='0i'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<line expression='simpleMethod()'/>\n";
//        xml_ += "<return expression='1i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='simpleMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(0, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument1018Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='betterMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='betterMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1019Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<finally>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1020Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'/>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument1021Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='j' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='j;'/>\n";
        xml_ += "</foreach>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(30,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument1022Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='j' expression='exmethlist()'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='j;'/>\n";
        xml_ += "</foreach>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,8i))'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(^class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='calling' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='emptymeth()'/>\n";
        xml_ += "<return expression='18i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='emptymeth' class='"+OperationNode.VOID_RETURN+"'/>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("calling");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(18, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
    @Test(timeout=1000)
    public void calculateArgument1023Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1024Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.exmeth()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(25, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1025Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(10, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1026Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1027Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1028Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</static>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1029Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "</static>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1030Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<return/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</static>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1210, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument1031Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.Ex'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<return/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</static>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</static>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1210, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1032Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1033Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.NullPointerException'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1034Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<line expression='badMethod()'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }


    @Test(timeout=1000)
    public void calculateArgument1035Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<line expression='badMethod()'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='=' right='10i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1036Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<line expression='badMethod()'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='t;.' oper='=' right='10i'/>\n";
        xml_ += "<line expression='badMethod()'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test
    public void calculateArgument1037Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(12);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("factrec", PrimitiveTypeUtil.PRIM_INT);
        Argument v_ = new Argument();
        v_.setArgClassName(Integer.class.getName());
        v_.setObject(11);
        args_.add(v_);
        Argument ret_;
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(39916800, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1038Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<throw expression='e;..'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1039Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "<throw expression='exception()'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "<catch var='e' class='java.lang.Throwable'>\n";
        xml_ += "<return expression='10i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exception' class='java.lang.Throwable'>\n";
        xml_ += "<return expression='^new.java.lang.Throwable()'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1040Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "</static>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1041Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<static>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</static>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1042Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<static>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</static>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(1110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1043Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='myf' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='myf;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<static>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='100i'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='myf;;;' oper='+=' right='10000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</static>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(timeout=1000)
    public void calculateArgument1044Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='static^pkg^ExTwo.getstatic()+8i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='new' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getstatic' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='new;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<static>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<affect left='new;;;' oper='+=' right='100i'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='new;;;' oper='+=' right='1000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</try>\n";
        xml_ += "<finally>\n";
        xml_ += "<affect left='new;;;' oper='+=' right='10000i'/>\n";
        xml_ += "</finally>\n";
        xml_ += "</static>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(11110, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Test(expected=StackOverFlow.class)
    public void calculateArgument1FailTest() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("factrec", PrimitiveTypeUtil.PRIM_INT);
        Argument v_ = new Argument();
        v_.setArgClassName(Integer.class.getName());
        v_.setObject(50);
        args_.add(v_);
        calculateArgument("pkg.Ex", id_, args_, cont_);
    }

    static Argument calculateArgument(String _class, MethodId _method, CustList<Argument> _args, ContextEl _cont) {
        EqList<StringList> constraints_ = new EqList<StringList>();
        for (ClassName c: _method.getClassNames()) {
            constraints_.add(new StringList(c.getName()));
        }
        FctConstraints fct_ = new FctConstraints(_method.getName(),constraints_);
        Classes classes_ = _cont.getClasses();
        MethodBlock method_ = classes_.getMethodBody(_class, fct_);
        Block firstChild_ = method_.getFirstChild();
        if (firstChild_ == null) {
            Argument a_ = new Argument();
            a_.setArgClassName(method_.getReturnType());
            return a_;
        }
        Argument argGlLoc_ = new Argument();
        argGlLoc_.setArgClassName(_class);
        return ProcessXmlMethod.calculateArgument(argGlLoc_, _class, fct_, _args, _cont);
    }

    @Test
    public void initializeClass1Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'/>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
    }

    @Test
    public void initializeClass2Test() {
        String xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<element name='ONE'/>\n";
        xml_ += "</enum>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
    }

    @Test
    public void initializeClass3Test() {
        String xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<element name='ONE'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='first' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='4i'/>\n";
        xml_ += "</enum>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
    }

    @Test
    public void initializeClass4Test() {
        String xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<element name='ONE' value='4i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='first' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='first;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</enum>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
    }

    @Test
    public void initializeClass5Test() {
        String xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<element name='ONE' value='4i'/>\n";
        xml_ += "<element name='TWO'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='first' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='first;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='first;;;' oper='=' right='5i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</enum>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "TWO"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void initializeClass6Test() {
        String xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<element name='ONE' value='4i'/>\n";
        xml_ += "<element name='TWO'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='first' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='first;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(5i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</enum>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "ONE"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        str_ = cont_.getClasses().getStaticField(new ClassField("pkg.Ex", "TWO"));
        assertEq(CustEnum.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "first"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument1Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'/>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
    }


    @Test(timeout=1000)
    public void instanceArgument2Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument3Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'/>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
    }

    @Test(timeout=1000)
    public void instanceArgument4Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument5Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(0i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument6Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument7Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='3i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var1='j' class1='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='j;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^this(5i,i;.;)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument8Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='3i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='field' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='1i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var1='j' class1='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='j;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^this(5i,i;.;)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "<affect left='field;;;' oper='=' right='6i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "field"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument9Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='3i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='field' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='1i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var1='j' class1='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='j;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^this(5i,i;.;)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "<affect left='field;;;' oper='=' right='6i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='7i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "field"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(7, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument10Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='3i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='field' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='1i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var1='j' class1='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='j;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^this(5i,i;.;)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "<affect left='field;;;' oper='=' right='6i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.Ex'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='7i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "field"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument11Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='3i'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='field' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='1i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var1='j' class1='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^super(7i)'/>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='j;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^this(5i,i;.;)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(4i)'/>\n";
        xml_ += "<affect left='field;;;' oper='=' right='6i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(4, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "field"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(7, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument12Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='8i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument13Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='8i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument14Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='8i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument15Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='8i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test//(timeout=1000)
    public void instanceArgument16Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
    }

    @Test//(timeout=1000)
    public void instanceArgument17Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.ExThree'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^super(17i)'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument18Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.ExThree'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^super(17i)'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument19Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.ExThree'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^super(17i)'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&lt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(34, (Number)field_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument20Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='pkg.ExThree' value='^new.pkg.ExThree(17i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&lt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(CustBase.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExThree", field_.getClassName());
        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(34, (Number)intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument21Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='pkg.ExThree' value='^new.pkg.ExThree(17i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(CustBase.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExThree", field_.getClassName());
        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument22Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='pkg.ExThree' value='^new.pkg.ExThree()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(CustBase.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExThree", field_.getClassName());
        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument23Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='"+ARR_CUST+"' value='^new."+ARR_CUST+"(1i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "<affect left='third;;;[0i]' oper='=' right='^new.pkg.ExThree()'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertTrue(field_.isJavaObject());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertTrue(field_.isJavaObject());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(Struct[].class.getName(), field_.getRealClassName());
        assertEq(ARR_CUST, field_.getClassName());
        assertTrue(!field_.isJavaObject());
        assertEq(1, Array.getLength(field_.getInstance()));
        Struct elt_ = (Struct) Array.get(field_.getInstance(), 0);
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
        assertTrue(intern_.isJavaObject());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument24Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='"+ARR_CUST+"' value='^new."+ARR_CUST+"(1i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='fourth' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='third;;;length'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "<affect left='third;;;[0i]' oper='=' right='^new.pkg.ExThree()'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(Struct[].class.getName(), field_.getRealClassName());
        assertEq(ARR_CUST, field_.getClassName());
        assertEq(1, Array.getLength(field_.getInstance()));
        Struct elt_ = (Struct) Array.get(field_.getInstance(), 0);
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
    }

    @Test//(timeout=1000)
    public void instanceArgument25Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.ExThree'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^super(17i)'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' name='instancemethod' class='"+OperationNode.VOID_RETURN+"' modifier='normal' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
    }

    @Test//(timeout=1000)
    public void instanceArgument26Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg' superclass='pkg.ExThree'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^super(17i)'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' name='instancemethod' class='"+OperationNode.VOID_RETURN+"' modifier='normal' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' name='instancemethod' class='"+OperationNode.VOID_RETURN+"' modifier='normal' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
    }


    @Test(timeout=1000)
    public void instanceArgument27Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='"+ARR_CUST+"' value='^new."+ARR_CUST+"[](^new.pkg.ExThree())'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='fourth' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='third;;;length'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
//        xml_ += "<affect left='third;;;[0i]' oper='=' right='^new.pkg.ExThree()'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(Struct[].class.getName(), field_.getRealClassName());
        assertEq(ARR_CUST, field_.getClassName());
        assertEq(1, Array.getLength(field_.getInstance()));
        Struct elt_ = (Struct) Array.get(field_.getInstance(), 0);
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument28Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='["+ARR_CUST+"' value='^new."+ARR_CUST+"(1i,1i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='fourth' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='third;;;length'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "<affect left='third;;;[0i][0i]' oper='=' right='^new.pkg.ExThree()'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        assertTrue(!str_.isJavaObject());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(1, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(Struct[][].class.getName(), field_.getRealClassName());
        assertEq(ARR_ARR_CUST, field_.getClassName());
        assertEq(1, Array.getLength(field_.getInstance()));
        Struct[] inter_ = (Struct[]) Array.get(field_.getInstance(), 0);
//        Struct elt_ = (Struct) Array.get(field_.getInstance(), 0);
        assertEq(1, Array.getLength(inter_));
        Struct elt_ = (Struct) Array.get(inter_, 0);
        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
    }


    @Test(timeout=1000)
    public void instanceArgument29Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='pkg.ExThree' value='^new.pkg.ExThree()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='17i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
        assertEq(CustBase.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExThree", field_.getClassName());
        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), intern_.getRealClassName());
        assertEq(Integer.class.getName(), intern_.getClassName());
        assertEq(17, (Number)intern_.getInstance());
    }

    @Test(timeout=1000)
    public void instanceArgument30Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='pkg.ExThree' value='^new.pkg.ExThree()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='third;;;doubleValue()'/>\n";
        xml_ += "</constructor>\n";
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='doubleValue' class='"+OperationNode.VOID_RETURN+"' class0='pkg.ExTwo' var0='param'>\n";
//        xml_ += "<affect left='param;.;sec;;;' oper='*=' right='2i'/>\n";
//        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='17i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='doubleValue' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='doubleValue(^this)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='doubleValue' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='pkg.ExThree' var0='param'>\n";
        xml_ += "<return expression='param;.;ance;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExTwo");
        ProcessXmlMethod.initializeClass("pkg.ExTwo", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExTwo", null, id_, args_, cont_);
//        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExTwo", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(41, (Number)field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
//        assertEq(Integer.class.getName(), field_.getRealClassName());
//        assertEq(Integer.class.getName(), field_.getClassName());
//        assertEq(24, (Number)field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
//        assertEq(CustBase.class.getName(), field_.getRealClassName());
//        assertEq("pkg.ExThree", field_.getClassName());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, (Number)intern_.getInstance());
    }

    @Test
    public void instanceArgument31Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='17i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='doubleValue' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='ance;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='^new.pkg.ExThree().doubleValue()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExTwo");
        ProcessXmlMethod.initializeClass("pkg.ExTwo", cont_);
        cont_.addPage(new PageEl());
        Argument ret_;
        ret_ = instanceArgument("pkg.ExTwo", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExTwo", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument32Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='three' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='17i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='two' class='pkg.ExThree' value='^new.pkg.ExThree()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExOne' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='one' class='pkg.ExTwo' value='^new.pkg.ExTwo()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='four' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='one;;;two;;;.three;;;'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExOne."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExOne");
        ProcessXmlMethod.initializeClass("pkg.ExOne", cont_);
        cont_.addPage(new PageEl());
        Argument ret_;
        ret_ = instanceArgument("pkg.ExOne", null, id_, args_, cont_);
//        cont_.getLastPage().setGlobalArgument(ret_);
//        Argument f_ = ProcessXmlMethod.calculateArgument("pkg.ExThree", getMethodId("doubleValue"), new CustList<Argument>(), cont_);
//        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExOne", str_.getClassName());
        Struct field_;
//        field_ = f_.getStruct();
//        assertEq(Integer.class.getName(), field_.getRealClassName());
//        assertEq(Integer.class.getName(), field_.getClassName());
//        assertEq(17, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExOne", "four"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
//        assertEq(CustBase.class.getName(), field_.getRealClassName());
//        assertEq("pkg.ExThree", field_.getClassName());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, (Number)intern_.getInstance());
    }

    @Test//(timeout=1000)
    public void instanceArgument33Test() {
        StringMap<String> files_ = new StringMap<String>();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExEnum' value='static^pkg^ExEnum.ONE;;;'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<enum access='"+PUBLIC_ACCESS+"' name='ExEnum' package='pkg'>\n";
        xml_ += "<element name='ONE'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</enum>\n";
        files_.put("pkg/ExEnum."+Classes.EXT, xml_);
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(CustEnum.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExEnum", field_.getClassName());
        Struct subField_;
        subField_ = field_.getFields().getVal(new ClassField("pkg.ExEnum", "ance"));
        assertEq(Integer.class.getName(), subField_.getRealClassName());
        assertEq(Integer.class.getName(), subField_.getClassName());
        assertEq(2, (Number)subField_.getInstance());
    }
    @Test//(timeout=1000)
    public void instanceArgument34Test() {
        StringMap<String> files_ = new StringMap<String>();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExEnum' value='static^pkg^ExEnum.ONE;;;'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExEnum' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' static='' name='ONE' class='pkg.ExEnum' value='^new.pkg.ExEnum()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExEnum."+Classes.EXT, xml_);
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.Ex");
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(CustBase.class.getName(), field_.getRealClassName());
        assertEq("pkg.ExEnum", field_.getClassName());
        Struct subField_;
        subField_ = field_.getFields().getVal(new ClassField("pkg.ExEnum", "ance"));
        assertEq(Integer.class.getName(), subField_.getRealClassName());
        assertEq(Integer.class.getName(), subField_.getClassName());
        assertEq(2, (Number)subField_.getInstance());
        assertSame(field_, cont_.getClasses().getStaticField(new ClassField("pkg.ExEnum", "ONE")));
    }

    @Test
    public void instanceArgument35Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<line expression='^super(16i)'/>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='sec;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(16, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument36Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<line expression='^super(16i)'/>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PROTECTED_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='sec;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(16, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument37Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<line expression='^super(16i)'/>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PACKAGE_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='sec;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(16, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument38Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='^static^pkg^ExTwo.getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='16i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument39Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PRIVATE_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='^static^pkg^ExTwo.getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='16i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(24, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument40Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<line expression='^super(16i)'/>\n";
        xml_ += "<affect left='inst;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='inst;;;' oper='+=' right='getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='inst;;;+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='i'>\n";
        xml_ += "<affect left='sec;;;' oper='=' right='getter()'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='sec;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        Argument arg_;
        arg_ = new Argument();
        arg_.setArgClassName(PrimitiveTypeUtil.PRIM_INT);
        arg_.setObject(8);
        args_.add(arg_);
        ConstructorId id_ = getConstructorId("pkg.Ex",PrimitiveTypeUtil.PRIM_INT);
        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.Ex", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(17, (Number)field_.getInstance());
        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(1, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument41Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;getter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkg.ExThree"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(2, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument42Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkgtwo.ExTwo'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkgtwo'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkgtwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkgtwo.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;getter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkgtwo.ExThree");
        ProcessXmlMethod.initializeClass("pkgtwo.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkgtwo.ExThree", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkgtwo.ExThree"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkgtwo.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkgtwo.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument43Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkgtwo.ExTwo'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkgtwo'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkgtwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkgtwo.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;getter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkgtwo.ExThree");
        ProcessXmlMethod.initializeClass("pkgtwo.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkgtwo.ExThree", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkgtwo.ExThree"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkgtwo.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkgtwo.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument44Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='^super^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.Ex' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;superaccess()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument45Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='java.lang.Integer' var0='p'>\n";
        xml_ += "<return expression='p;.;+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='java.lang.Number' var0='p'>\n";
        xml_ += "<return expression='p;.;intValue()+2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='^static^pkg^Ex.getter(5i)'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
    }
 
    @Test
    public void instanceArgument46Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PRIVATE_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='java.lang.Integer' var0='p'>\n";
        xml_ += "<return expression='p;.;+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='java.lang.Number' var0='p'>\n";
        xml_ += "<return expression='p;.;intValue()+2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='^static^pkg^Ex.getter(5i)'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(7, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument47Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='java.lang.Integer' var0='p'>\n";
        xml_ += "<affect left='inst;;;' right='p;.;+1i' op='='/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='java.lang.Number' var0='p'>\n";
        xml_ += "<affect left='inst;;;' right='p;.;intValue()+2i' op='='/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='^new.pkg.Ex(5i).inst;;;'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(6, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument48Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PRIVATE_ACCESS+"' class0='java.lang.Integer' var0='p'>\n";
        xml_ += "<affect left='inst;;;' right='p;.;+1i' op='='/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' class0='java.lang.Number' var0='p'>\n";
        xml_ += "<affect left='inst;;;' right='p;.;intValue()+2i' op='='/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='^new.pkg.Ex(5i).inst;;;'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(7, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument49Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='^super^inst;;;'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.Ex' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;superaccess()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(8, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument50Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='pkg^ExTwo^^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.Ex' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;superaccess()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument51Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='pkg^ExTwo^^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='9i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' modifier='abstract' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='abstract' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;absgetter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(9, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument52Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='pkg^ExTwo^^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='9i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' modifier='abstract' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='abstract' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.Ex' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;superaccess()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument53Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='pkg^ExTwo^^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='9i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' modifier='abstract' name='ExTwo' package='pkg' superclass='pkg.ExFour'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='abstract' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExFour' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='11i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExFour."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;absgetter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(9, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument54Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='8i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='superaccess' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='pkg^ExTwo^^getter()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='9i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' modifier='abstract' name='ExTwo' package='pkg' superclass='pkg.ExFour'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='abstract' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExFour' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='16i'/>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='absgetter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='11i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExFour."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkg.ExFour' value='^new.pkg.ExFour()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;absgetter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkg.ExThree");
        ProcessXmlMethod.initializeClass("pkg.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkg.ExThree", null, id_, args_, cont_);
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkg.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(11, (Number)field_.getInstance());
    }

    @Test
    public void instanceArgument55Test() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkgtwo.ExTwo'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='normal' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='2i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkgtwo'>\n";
        xml_ += "<method access='"+PACKAGE_ACCESS+"' modifier='final' name='getter' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='5i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkgtwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='pkgtwo.ExTwo' value='^new.pkg.Ex()'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='inst;;;getter()'/>\n";
        xml_ += "</class>\n";
        files_.put("pkgtwo/ExThree."+Classes.EXT, xml_);
        cont_.setAccessValue(new AccessValueEx());
        Classes.validateAll(files_, cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        ConstructorId id_ = getConstructorId("pkgtwo.ExThree");
        ProcessXmlMethod.initializeClass("pkgtwo.ExThree", cont_);
        Argument ret_;
        ret_ = instanceArgument("pkgtwo.ExThree", null, id_, args_, cont_);
        assertTrue(cont_.getClasses().isInitialized("pkgtwo.ExThree"));
        Struct str_ = ret_.getStruct();
        assertEq(CustBase.class.getName(), str_.getRealClassName());
        assertEq("pkgtwo.ExThree", str_.getClassName());
        Struct field_;
        field_ = str_.getFields().getVal(new ClassField("pkgtwo.ExThree", "ance"));
        assertEq(Integer.class.getName(), field_.getRealClassName());
        assertEq(Integer.class.getName(), field_.getClassName());
        assertEq(5, (Number)field_.getInstance());
    }

    @Test(expected=UndefinedConstructorException.class)
    public void instanceArgument1FailTest() {
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl(50);
        cont_.setAccessValue(new AccessValueEx());
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg' superclass='pkg.ExTwo'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='inst' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='2i'/>\n";
        xml_ += "</class>\n";
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExTwo' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='third' class='"+ARR_CUST+"' value='^new."+ARR_CUST+"(1i)'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='fourth' class='"+PrimitiveTypeUtil.PRIM_INT+"' value='third;;;length'/>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='sec' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<instance>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='8i'/>\n";
        xml_ += "<affect left='third;;;[0i]' oper='=' right='^new.pkg.ExThree()'/>\n";
        xml_ += "</instance>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<affect left='sec;;;' oper='+=' right='16i'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExTwo."+Classes.EXT, xml_);
        xml_ = "<class access='"+PUBLIC_ACCESS+"' name='ExThree' package='pkg'>\n";
        xml_ += "<field access='"+PUBLIC_ACCESS+"' name='ance' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"'>\n";
        xml_ += "<line expression='^this(17i)'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "<constructor access='"+PUBLIC_ACCESS+"' var0='i' class0='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<line expression='^super()'/>\n";
        xml_ += "<if condition='i;.;&gt;0'>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<return/>\n";
        xml_ += "</if>\n";
        xml_ += "<affect left='ance;;;' oper='=' right='i;.;'/>\n";
        xml_ += "<affect left='ance;;;' oper='+=' right='i;.;'/>\n";
        xml_ += "</constructor>\n";
        xml_ += "</class>\n";
        files_.put("pkg/ExThree."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        List<Argument> args_ = new List<Argument>();
//        ConstructorId id_ = getConstructorId("pkg.Ex");
//        ProcessXmlMethod.initializeClass("pkg.Ex", cont_);
//        Argument ret_;
//        ret_ = instanceArgument("pkg.Ex", null, id_, args_, cont_);
//        assertTrue(cont_.getClasses().isInitialized("pkg.Ex"));
//        Struct str_ = ret_.getStruct();
//        assertEq(CustBase.class.getName(), str_.getRealClassName());
//        assertEq("pkg.Ex", str_.getClassName());
//        Struct field_;
//        field_ = str_.getFields().getVal(new ClassField("pkg.Ex", "inst"));
//        assertEq(Integer.class.getName(), field_.getRealClassName());
//        assertEq(Integer.class.getName(), field_.getClassName());
//        assertEq(2, field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "sec"));
//        assertEq(Integer.class.getName(), field_.getRealClassName());
//        assertEq(Integer.class.getName(), field_.getClassName());
//        assertEq(24, field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "fourth"));
//        assertEq(Integer.class.getName(), field_.getRealClassName());
//        assertEq(Integer.class.getName(), field_.getClassName());
//        assertEq(1, field_.getInstance());
//        field_ = str_.getFields().getVal(new ClassField("pkg.ExTwo", "third"));
//        assertEq(Struct[].class.getName(), field_.getRealClassName());
//        assertEq(ARR_CUST, field_.getClassName());
//        assertEq(1, Array.getLength(field_.getInstance()));
//        Struct elt_ = (Struct) Array.get(field_.getInstance(), 0);
//        Struct intern_ = elt_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
//        Struct intern_ = field_.getFields().getVal(new ClassField("pkg.ExThree", "ance"));
//        assertEq(Integer.class.getName(), intern_.getRealClassName());
//        assertEq(Integer.class.getName(), intern_.getClassName());
//        assertEq(17, intern_.getInstance());
    }

    public static Argument instanceArgument(String _class, Argument _global, ConstructorId _id, CustList<Argument> _args, ContextEl _cont) {
        int len_ = _id.getClassNames().size();
        EqList<StringList> constraints_ = new EqList<StringList>();
        for (int i = CustList.FIRST_INDEX; i < len_; i++) {
            String n_ = _id.getClassNames().get(i).getName();
            constraints_.add(new StringList(n_));
        }
        FctConstraints id_ = new FctConstraints(_id.getName(),constraints_);
        return ProcessXmlMethod.instanceArgument(_class, _global, id_, _args, _cont);
    }

    @Ignore
    @Test
    public void calculateArgumentTmp2Test() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='exmethsec()+1i'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";

        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='adding(p;.,0)'/>\n";
        xml_ += "<line expression='adding(p;.,2)'/>\n";
//        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<do>\n";
        xml_ += "<affect left='t;.' oper='++'/>\n";
        xml_ += "</do>\n";
        xml_ += "<while condition='exmethparam(p;.)'/>\n";
        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
        xml_ += "<if condition='i;%2=0i'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
        xml_ += "</else>\n";
        xml_ += "</foreach>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
        xml_ += "<line expression='t;.add(8i)'/>\n";
//        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
        xml_ += "<line expression='t;.add(2i)'/>\n";
        xml_ += "<line expression='t;.add(1i)'/>\n";
        xml_ += "<return expression='t;.'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='factrec' class='"+PrimitiveTypeUtil.PRIM_INT+"' class0='"+PrimitiveTypeUtil.PRIM_INT+"' var0='l'>\n";
        xml_ += "<if condition='l;.;&lt;=0'>\n";
        xml_ += "\t<return expression='1i'/>\n";
        xml_ += "</if>\n";
        xml_ += "<return expression='l;.;*factrec(l;.;-1i)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='addelt' class='"+OperationNode.VOID_RETURN+"' class0='"+CUST+"' var0='l' class1='java.lang.Object' var1='e'>\n";
        xml_ += "<line expression='l;.;add(e;.;)'/>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='catching' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_INT+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='0i'/>\n";
        xml_ += "<try>\n";
        xml_ += "<try>\n";
        xml_ += "<return expression='badMethod()'/>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.NullPointerException'>\n";
        xml_ += "<affect left='t;.' oper='=' right='1i'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</try>\n";
        xml_ += "<catch var='e' class='java.lang.Exception'>\n";
        xml_ += "<return expression='1i+t;.'/>\n";
        xml_ += "</catch>\n";
        xml_ += "</method>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='badMethod' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<return expression='1i/0i'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("catching");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(2, (Number)ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }

    @Ignore
    @Test(timeout=1000)
    public void calculateArgumentTmpTest() {
        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
        xml_ += "<line expression='p;.getList().add(0)'/>\n";
        xml_ += "<line expression='p;.getList().add(2)'/>\n";
        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
        xml_ += "<if condition='true'>\n";
        xml_ += "<continue/>\n";
        xml_ += "</if>\n";
        xml_ += "<else>\n";
        xml_ += "<continue/>\n";
        xml_ += "</else>\n";
//        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "&quot;<toto/>\n";
        xml_ += "</while>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<elseif condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</elseif>\n";
        xml_ += "<if condition='t;.%2=0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='8'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</if>\n";
        xml_ += "<else condition='t;.&lt;0'>\n";
        xml_ += "<affect left='t;.' oper='+=' right='2'/>\n";
        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</else>\n";
//        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
//        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
        xml_ += "</method>\n";
        xml_ += "</class>\n";
        StringMap<String> files_ = new StringMap<String>();
        ContextEl cont_ = new ContextEl();
        cont_.setAccessValue(new AccessValueEx());
        files_.put("pkg/Ex."+Classes.EXT, xml_);
        Classes.validateAll(files_, cont_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        classes_.validateEl(cont_);
//        cont_.setClasses(classes_);
        CustList<Argument> args_ = new CustList<Argument>();
        MethodId id_ = getMethodId("exmeth");
        Argument ret_ = new Argument();
        ret_ = calculateArgument("pkg.Ex", id_, args_, cont_);
        assertEq(17,(Number) ret_.getObject());
        assertEq(PrimitiveTypeUtil.PRIM_INT, ret_.getArgClassName());
    }
//    @Ignore
//    @Test(timeout=1000)
//    public void calculateArgument1DebTest() {
//        String xml_ = "<class access='"+PUBLIC_ACCESS+"' name='Ex' package='pkg'>\n";
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmeth' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
//        xml_ += "<return expression='exmethsec()+1i'/>\n";
//        xml_ += "</method>\n";
//
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethsec' class='"+PrimitiveTypeUtil.PRIM_INT+"'>\n";
//        xml_ += "<declare var='t' class='"+PrimitiveTypeUtil.PRIM_LONG+"'/>\n";
//        xml_ += "<affect left='t;.' oper='=' right='8'/>\n";
//        xml_ += "<declareset var='p' class='"+PICKABLE_LIST+"' expression='^new."+PICKABLE_LIST+"()'/>\n";
//        xml_ += "<line expression='adding(p;.,0)'/>\n";
//        xml_ += "<line expression='adding(p;.,2)'/>\n";
////        xml_ += "<while condition='p;.removeAndExistAfter(1i)'>\n";
//        xml_ += "<while condition='exmethparam(p;.)'>\n";
//        xml_ += "<continue/>\n";
//        xml_ += "</while>\n";
//        xml_ += "<foreach class='"+PrimitiveTypeUtil.PRIM_INT+"' var='i' expression='exmethlist()'>\n";
//        xml_ += "<if condition='i;%2=0i'>\n";
//        xml_ += "<affect left='t;.' oper='+=' right='i;'/>\n";
//        xml_ += "</if>\n";
//        xml_ += "<else>\n";
//        xml_ += "<affect left='t;.' oper='+=' right='i;+1'/>\n";
//        xml_ += "</else>\n";
//        xml_ += "</foreach>\n";
////        xml_ += "<return expression='1i+class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)'/>\n";
//        xml_ += "<return expression='1i+^class(&quot;"+PrimitiveTypeUtil.PRIM_INT+"&quot;,t;.)+p;.getList().size()'/>\n";
//        xml_ += "</method>\n";
//
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='adding' class='"+OperationNode.VOID_RETURN+"' class0='"+PICKABLE_LIST+"' var0='l' class1='java.lang.Object' var1='o'>\n";
//        xml_ += "<line expression='l;.;getList().add(o;.;)'/>\n";
//        xml_ += "</method>\n";
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethlist' class='"+NUMBERS+"'>\n";
//        xml_ += "<declare var='t' class='"+NUMBERS+"'/>\n";
//        xml_ += "<affect left='t;.' oper='=' right='^new."+NUMBERS+"()'/>\n";
////        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,8i))'/>\n";
//        xml_ += "<line expression='t;.add(8i)'/>\n";
////        xml_ += "<line expression='t;.add(class(&quot;java.lang.Object&quot;,2i))'/>\n";
//        xml_ += "<line expression='t;.add(2i)'/>\n";
//        xml_ += "<line expression='t;.add(1i)'/>\n";
//        xml_ += "<return expression='t;.'/>\n";
//        xml_ += "</method>\n";
//        xml_ += "<method access='"+PUBLIC_ACCESS+"' modifier='static' name='exmethparam' class='"+PrimitiveTypeUtil.PRIM_BOOLEAN+"' class0='"+PICKABLE_LIST+"' var0='l'>\n";
//        xml_ += "<return expression='l;.;removeAndExistAfter(1i)'/>\n";
//        xml_ += "</method>\n";
//        xml_ += "</class>\n";
//        StringMap<String> files_ = new StringMap<String>();
//        ContextEl cont_ = new ContextEl();
//        cont_.setAccessValue(new AccessValueEx());
//        files_.put("pkg/Ex."+Classes.EXT, xml_);
//        Classes classes_ = new Classes(files_, cont_);
//        classes_.validateClassBodies(cont_);
//        classes_.validateClassNames(cont_);
//        classes_.validateMethodNames(cont_);
//        classes_.validateMethodsId(cont_);
//        classes_.validateLocalVariableNamesId(cont_);
//        cont_.setClasses(classes_);
//        classes_.validateEl(cont_);
//        MethodId idtmp_ = getMethodId("exmethsec");
//        Block blTmp_ = classes_.getMethodBody("pkg.Ex", idtmp_);
//        CustList<Block> chSort_ = TreeRetrieving.<Block>getDirectChildren(blTmp_);
//        CustList<Block> ch_ = new CustList<Block>();
//        for (Block s: chSort_) {
//            ch_.add((Block) s);
//        }
//        BlockGroup bg_ = new BlockGroup(0, ch_, null, blTmp_, false);
//        for (BlockGroup s: TreeRetrieving.<BlockGroup>getSortedDescNodes(bg_)) {
//            BlockGroup b_ = (BlockGroup) s;
//            if (b_.getBlockGroup().isEmpty()) {
//                continue;
//            }
//            System.out.println(b_.getParent() != null);
//            System.out.println(b_.isOkReturn()+" exit");
//            boolean foundReturn_ = false;
//            for (Block b: b_.getBlockGroup()) {
//                if (b instanceof ReturnMehod) {
//                    foundReturn_ = true;
//                }
//                if (b instanceof Throwing) {
//                    foundReturn_ = true;
//                }
//            }
//            if (foundReturn_) {
//                System.out.println("found "+b_.getBlockGroup().first().getParent().getAssociateElement().getNodeName());
//            }
////            if (b_.getNextSibling() == null) {
//////                System.out.println("=========== "+b_.getBlockGroup().first().getParent().getAssociateElement().getNodeName());
////                System.out.println("=========== "+b_.getBlockGroup().first().getAssociateElement().getNodeName());
////            }
//            System.out.println("=========== "+b_.getBlockGroup().first().getParent().getAssociateElement().getNodeName());
//            System.out.println(TreeRetrieving.getDirectChildren(b_).size());
//            for (Block b: b_.getBlockGroup()) {
//                System.out.println(b.getAssociateElement().getNodeName());
//            }
//        }
//    }
    private static MethodId getMethodId(String _name, String..._classNames) {
        EqList<ClassName> cl_ = new EqList<ClassName>();
        for (String c: _classNames) {
            cl_.add(new ClassName(c, false));
        }
        return new MethodId(_name, cl_);
    }

    private static MethodId getMethodId(String _name, boolean _vararg, String..._classNames) {
        EqList<ClassName> cl_ = new EqList<ClassName>();
        for (String c: _classNames) {
            boolean var_ = _vararg && _classNames.length == cl_.size() + 1;
            cl_.add(new ClassName(c, var_));
        }
        return new MethodId(_name, cl_);
    }

    private static ConstructorId getConstructorId(String _name, String..._classNames) {
        EqList<ClassName> cl_ = new EqList<ClassName>();
        for (String c: _classNames) {
            cl_.add(new ClassName(c, false));
        }
        return new ConstructorId(_name, cl_);
    }

    private static ConstructorId getConstructorId(String _name, boolean _vararg, String..._classNames) {
        EqList<ClassName> cl_ = new EqList<ClassName>();
        for (String c: _classNames) {
            boolean var_ = _vararg && _classNames.length == cl_.size() + 1;
            cl_.add(new ClassName(c, var_));
        }
        return new ConstructorId(_name, cl_);
    }
}
