package code.formathtml;

import code.bean.Bean;
import code.bean.translator.Translator;
import code.expressionlanguage.AnalyzedPageEl;
import code.expressionlanguage.structs.Struct;
import code.formathtml.classes.MyTranslator;
import code.sml.Document;
import code.sml.DocumentBuilder;
import code.util.StringMap;
import org.junit.Test;

import static code.formathtml.EquallableExUtil.assertEq;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public final class RenderImportTest extends CommonRender {
    @Test
    public void process0Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"><c:package name='pkg'><c:class name='BeanTwo'><c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><ul><c:for var=\"s\" list=\"arrayBis\" className='$int'><li>{s;}</li></c:for></ul></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne{");
        file_.append(" $public $int[] array={1,2}:");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body><ul><li>3</li><li>4</li></ul></body></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process1Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><td>Content</td></body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process2Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:if condition='$true'>Next</c:if>After</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><td>Content</td>NextAfter</body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process3Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:for var=\"t\" list=\"$new java.lang.Integer[]{1}\" className='$int'>{t;}</c:for>After</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><td>Content</td>1After</body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process4Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:for var=\"t\" list=\"$new java.lang.Integer[]{1}\" className='$int'>{t;}</c:for>{2/0}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        FormatHtml.getRes(rendDocumentBlock_,conf_);
        assertNotNull(conf_.getException());
    }
    @Test
    public void process5Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:for var=\"t\" list=\"$new java.lang.Integer[]{1}\" className='$int'>{t;}</c:for><c:set className='$int' value='i=1/0'/></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        FormatHtml.getRes(rendDocumentBlock_,conf_);
        assertNotNull(conf_.getException());
    }
    @Test
    public void process6Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:switch value='1'><c:case value='1'>Next</c:case></c:switch>After</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><td>Content</td>NextAfter</body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process7Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html><body><pre> </pre></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><pre> </pre></body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process8Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"><c:package name='pkg'><c:class name='BeanTwo'><c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><ul><c:for var=\"s\" list=\"arrayBis\" className='$int'><li>{s;}</li></c:for></ul></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body><ul><li>3</li><li>4</li></ul></body></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process9Test() {
        String folder_ = "messages";
        String relative_ = "sample/file";
        String html_ = "<html><body><c:try><c:import page=\"page2.html\"/></c:try><c:catch className='java.lang.Object' var='e'>Exc</c:catch></body></html>";
        String htmlTwo_ = "<html><body><td>Content</td><c:for var=\"t\" list=\"$new java.lang.Integer[]{1}\" className='$int'>{t;}</c:for><c:set className='$int' value='i=1/0'/>Not displayed</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put("page1.html", html_);
        files_.put("page2.html", htmlTwo_);
        Configuration conf_ = contextElThird();
        conf_.setBeans(new StringMap<Bean>());
        conf_.setMessagesFolder(folder_);
        conf_.setProperties(new StringMap<String>());
        conf_.getProperties().put("msg_example", relative_);
        conf_.setTranslators(new StringMap<Translator>());
        conf_.getTranslators().put("trans", new MyTranslator());
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document secDoc_ = DocumentBuilder.parseSax(htmlTwo_);
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", doc_);
        RendDocumentBlock rendSecDocumentBlock_ = RendBlock.newRendDocumentBlock(conf_, "c:", secDoc_);
        conf_.getRenders().put("page1.html",rendDocumentBlock_);
        conf_.getRenders().put("page2.html",rendSecDocumentBlock_);
        conf_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(conf_);
        rendSecDocumentBlock_.buildFctInstructions(conf_);
        assertTrue(conf_.getClasses().isEmptyErrors());
        assertEq("<html><body><td>Content</td>1Exc</body></html>",FormatHtml.getRes(rendDocumentBlock_,conf_));
        assertNull(conf_.getException());
    }
    @Test
    public void process10Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body>3</body></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process11Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3/0'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        FormatHtml.getRes(rendDocumentBlock_, context_);
        assertNotNull(context_.getException());
    }
    @Test
    public void process12Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  nb=1/0:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        FormatHtml.getRes(rendDocumentBlock_, context_);
        assertNotNull(context_.getException());
    }
    @Test
    public void process13Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\">\n<c:package name='pkg'>\n<c:class name='BeanTwo'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class>\n<c:class name='BeanOne'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><ul><c:for var=\"s\" list=\"arrayBis\" className='$int'><li>{s;}</li></c:for></ul></body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body><ul><li>3</li><li>4</li></ul></body></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process14Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\">\n<c:package name='pkg'>\n<c:class name='BeanTwo'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class>\n<c:class name='BeanOne'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body/></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body/></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process15Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\">\n<c:package name='pkg'>\n<c:class name='BeanTwo'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class>\n<c:class name='BeanOne'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'/>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body/></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process16Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page3.html\">\n<c:package name='pkg'>\n<c:class name='BeanTwo'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class>\n<c:class name='BeanOne'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'/>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        assertEq("<html><body/></html>",FormatHtml.getRes(rendDocumentBlock_, context_));
        assertNull(context_.getException());
    }
    @Test
    public void process17Test() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"{1/0}\">\n<c:package name='pkg'>\n<c:class name='BeanTwo'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class>\n<c:class name='BeanOne'>\n<c:field prepare='$intern.array=$new $int[]{3,4}'/></c:class></c:package></c:import></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'/>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        assertTrue(context_.getClasses().isEmptyErrors());
        FormatHtml.getRes(rendDocumentBlock_, context_);
        assertNotNull(context_.getException());
    }
    @Test
    public void process1FailTest() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:class name='BeanThree'/><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(!context_.getClasses().isEmptyErrors());
    }
    @Test
    public void process2FailTest() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:field name='BeanThree'/><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(!context_.getClasses().isEmptyErrors());
    }
    @Test
    public void process3FailTest() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:package name='BeanThree'/><c:import page=\"page3.html\"><c:package name='pkg'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(!context_.getClasses().isEmptyErrors());
    }
    @Test
    public void process4FailTest() {
        String locale_ = "en";
        String folder_ = "messages";
        String relative_ = "sample/file";
        String content_ = "one=Description one\ntwo=Description two\nthree=desc &lt;{0}&gt;";

        String html_ = "<html c:bean='bean_one'><body><c:import page=\"page2.html\"/></body></html>";
        String htmlTwo_ = "<html c:bean='bean_two'><body><c:import page=\"page3.html\"><c:package name='pk'><c:class name='BeanThree'><c:field prepare='$intern.nb=3'/></c:class></c:package></c:import></body></html>";
        String htmlThree_ = "<html c:bean='bean_three'><body>{nb}</body></html>";
        StringMap<String> files_ = new StringMap<String>();
        files_.put(EquallableExUtil.formatFile(folder_,locale_,relative_), content_);
        Document doc_ = DocumentBuilder.parseSax(html_);
        Document docSec_ = DocumentBuilder.parseSax(htmlTwo_);
        Document docThird_ = DocumentBuilder.parseSax(htmlThree_);
        StringMap<String> filesSec_ = new StringMap<String>();
        StringBuilder file_ = new StringBuilder();
        file_.append("$public $class pkg.BeanOne:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  array={1,2}:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanTwo:code.bean.Bean{");
        file_.append(" $public $int[] array:");
        file_.append(" $public $int[] arrayBis:");
        file_.append(" $public $void beforeDisplaying(){");
        file_.append("  arrayBis=array:");
        file_.append(" }");
        file_.append("}");
        file_.append("$public $class pkg.BeanThree:code.bean.Bean{");
        file_.append(" $public $int nb:");
        file_.append("}");
        filesSec_.put("my_file",file_.toString());
        Configuration context_ = contextElThird(filesSec_);
        addImportingPage(context_);
        Struct bean_ = ElRenderUtil.processEl("$new pkg.BeanOne()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_one",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanTwo()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_two",bean_);
        bean_ = ElRenderUtil.processEl("$new pkg.BeanThree()", 0, context_).getStruct();
        context_.getBuiltBeans().put("bean_three",bean_);
        context_.setMessagesFolder(folder_);
        context_.setProperties(new StringMap<String>());
        context_.getProperties().put("msg_example", relative_);
        context_.setTranslators(new StringMap<Translator>());
        context_.getTranslators().put("trans", new MyTranslator());
        context_.clearPages();
        RendDocumentBlock rendDocumentBlock_ = RendBlock.newRendDocumentBlock(context_, "c:", doc_);
        RendDocumentBlock rendDocumentBlockSec_ = RendBlock.newRendDocumentBlock(context_, "c:", docSec_);
        RendDocumentBlock rendDocumentBlockThird_ = RendBlock.newRendDocumentBlock(context_, "c:", docThird_);
        context_.getRenders().put("page1.html",rendDocumentBlock_);
        context_.getRenders().put("page2.html",rendDocumentBlockSec_);
        context_.getRenders().put("page3.html",rendDocumentBlockThird_);
        context_.getContext().setAnalyzing(new AnalyzedPageEl());
        context_.getAnalyzing().setEnabledInternVars(false);
        rendDocumentBlock_.buildFctInstructions(context_);
        rendDocumentBlockSec_.buildFctInstructions(context_);
        rendDocumentBlockThird_.buildFctInstructions(context_);
        assertTrue(!context_.getClasses().isEmptyErrors());
    }
}
