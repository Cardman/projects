package aiki.db;

import aiki.fight.abilities.AbilityData;
import aiki.fight.effects.EffectWhileSendingSimple;
import aiki.fight.enums.Statistic;
import aiki.fight.items.Berry;
import aiki.fight.items.ItemForBattle;
import aiki.fight.moves.MoveData;
import aiki.fight.moves.StatusMoveData;
import aiki.fight.moves.effects.*;
import aiki.fight.moves.effects.enums.ConstValuesType;
import aiki.fight.moves.effects.enums.ExchangeType;
import aiki.fight.moves.effects.enums.MoveItemType;
import aiki.fight.moves.effects.enums.PointViewChangementType;
import aiki.fight.moves.enums.TargetChoice;
import aiki.fight.pokemon.PokemonData;
import aiki.fight.pokemon.enums.GenderRepartition;
import aiki.fight.pokemon.evolution.*;
import aiki.fight.status.StatusBeginRoundAutoDamage;
import aiki.fight.status.StatusSimple;
import aiki.fight.status.StatusType;
import aiki.fight.status.effects.EffectPartnerStatus;
import aiki.fight.util.*;
import aiki.instances.Instances;
import aiki.map.DataMap;
import aiki.map.levels.enums.EnvironmentType;
import aiki.map.places.Place;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import aiki.map.util.MiniMapCoords;
import aiki.map.util.TileMiniMap;
import code.maths.LgInt;
import code.maths.Rate;
import code.util.*;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public final class DataBaseValidationCoreTest extends DataBaseValidationCommon {

    @Test
    public void fail1Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        PokemonData pkData_ = Instances.newPokemonData();
        pkData_.setGenderRep(GenderRepartition.MIXED);
        pkData_.setHeight(Rate.newRate("-1"));
        pkData_.setWeight(Rate.newRate("-1"));
        pkData_.setHatchingSteps(LgInt.newLgInt("-1"));
        pkData_.setHappiness((short)-1);
        pkData_.setHappinessHatch((short)-1);
        pkData_.setCatchingRate((short)-1);
        pkData_.setExpRate(-1);
        pkData_.setTechnicalMoves(new Shorts((short)100));
        pkData_.setHiddenMoves(new Shorts((short)100));
        pkData_.setMoveTutors(new StringList(NULL_REF));
        EvolutionStoneGender evGend_ = Instances.newEvolutionStoneGender();
        pkData_.getEvolutions().addEntry(PIKACHU2, evGend_);
        pkData_.getEvolutions().addEntry(PIKACHU3,Instances.newEvolutionTeam());
        data_.completeMembers(PIKACHU,pkData_);
        pkData_ = Instances.newPokemonData();
        pkData_.setGenderRep(GenderRepartition.MIXED);
        pkData_.setTypes(new StringList(NULL_REF));
        pkData_.setAbilities(new StringList(NULL_REF));
        pkData_.getStatistics().addEntry(Statistic.ACCURACY,new StatBaseEv((short)-1,(short)-1));
        pkData_.getLevMoves().add(new LevelMove((short)-1,NULL_REF));
        pkData_.getLevMoves().add(new LevelMove((short)1,NULL_REF));
        pkData_.getLevMoves().add(new LevelMove((short)0,NULL_REF));
        pkData_.getEvolutions().addEntry(NULL_REF,Instances.newEvolutionItem());
        EvolutionLevelGender lv_ = Instances.newEvolutionLevelGender();
        lv_.setLevel((short) -1);
        pkData_.getEvolutions().addEntry(PIKACHU2, lv_);
        EvolutionLevelSimple lvTwo_ = Instances.newEvolutionLevelSimple();
        lvTwo_.setLevel((short)300);
        pkData_.getEvolutions().addEntry(PIKACHU3, lvTwo_);
        EvolutionTeam evTeam_ = Instances.newEvolutionTeam();
        evTeam_.setPokemon(PIKACHU3);
        pkData_.getEvolutions().addEntry(PIKACHU, evTeam_);
        pkData_.setBaseEvo(PIKACHU3);
        data_.completeMembers(PIKACHU2,pkData_);
        pkData_ = Instances.newPokemonData();
        pkData_.setGenderRep(GenderRepartition.LEGENDARY);
        pkData_.setMoveTutors(new StringList(NULL_REF));
        pkData_.getLevMoves().add(new LevelMove((short)1,NULL_REF));
        pkData_.getLevMoves().add(new LevelMove((short)0,NULL_REF));
        pkData_.getEvolutions().addEntry(NULL_REF,Instances.newEvolutionMoveType());
        pkData_.getEvolutions().addEntry(PIKACHU3,Instances.newEvolutionStoneSimple());
        EvolutionMove evoMv_ = Instances.newEvolutionMove();
        evoMv_.setMove(LUTTE);
        pkData_.getEvolutions().addEntry(PIKACHU, evoMv_);
        data_.completeMembers(PIKACHU3,pkData_);
        data_.sortEndRound();
        data_.getMap().setPlaces(new ShortMap<Place>());
        data_.getMap().setMiniMap(new ObjectMap<MiniMapCoords,TileMiniMap>());
        data_.getMap().setUnlockedCity(NULL_REF);
        data_.getMap().setSideLength(2);
        DataMap map_ = data_.getMap();
        WildPk pkm_ = new WildPk();
        pkm_.setName(PIKACHU);
        pkm_.setAbility(PARATONNERRE);
        pkm_.setGender(Gender.NO_GENDER);
        pkm_.setItem(NULL_REF);
        pkm_.setLevel((short) 7);
        map_.setFirstPokemon(pkm_);
        map_.setBegin(newCoords(0, 0, 0, 0));
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail2Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        PokemonData pkData_ = Instances.newPokemonData();
        pkData_.setMoveTutors(new StringList(LUTTE));
        pkData_.getLevMoves().add(new LevelMove((short)2,LUTTE));
        data_.completeMembers(PIKACHU,pkData_);
        data_.sortEndRound();
        data_.getMap().setPlaces(new ShortMap<Place>());
        data_.getMap().setMiniMap(new ObjectMap<MiniMapCoords,TileMiniMap>());
        data_.getMap().setUnlockedCity(NULL_REF);
        data_.getMap().setSideLength(2);
        DataMap map_ = data_.getMap();
        WildPk pkm_ = new WildPk();
        pkm_.setName(PIKACHU);
        pkm_.setAbility(PARATONNERRE);
        pkm_.setGender(Gender.NO_GENDER);
        pkm_.setItem(NULL_REF);
        pkm_.setLevel((short) 7);
        map_.setFirstPokemon(pkm_);
        map_.setBegin(newCoords(0, 0, 0, 0));
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail3Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newDamagingMoveData();
        mvDam_.getRepeatRoundLaw().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        mvDam_.setPp((short) -1);
        mvDam_.setNbPrepaRound((short) -1);
        mvDam_.setAchieveDisappearedPkUsingMove(new StringList(NULL_REF));
        data_.completeMembers(CHARGE,mvDam_);
        StatusMoveData mvStatus_ = Instances.newStatusMoveData();
        mvStatus_.getRepeatRoundLaw().addEvent(Rate.newRate("0"),LgInt.newLgInt("-1"));
        mvStatus_.getRepeatRoundLaw().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        mvStatus_.setPp((short)200);
        mvStatus_.setTypes(new StringList(NULL_REF));
        mvStatus_.setBoostedTypes(new StringList(NULL_REF));
        mvStatus_.setDeletedStatus(new StringList(NULL_REF));
        mvStatus_.setRequiredStatus(new StringList(NULL_REF));
        mvStatus_.getTypesByOwnedItem().addEntry(ELECTRICK,ELECTRICK);
        mvStatus_.getSecEffectsByItem().addEntry(ELECTRICK,new Ints());
        mvStatus_.getTypesByWeather().addEntry(ELECTRICK,ELECTRICK);
        data_.completeMembers(TREMPETTE,mvStatus_);
        mvDam_ = Instances.newDamagingMoveData();
        mvDam_.setTargetChoice(TargetChoice.ANY_FOE);
        EffectStatistic effectStatis_ = Instances.newEffectStatistic();
        effectStatis_.setTargetChoice(TargetChoice.LANCEUR);
        effectStatis_.getRequiredSuccessfulEffects().add(6);
        effectStatis_.getRequiredSuccessfulEffects().add(-2);
        mvDam_.getEffects().add(effectStatis_);
        EffectDamageRate effectDamageRate_ = Instances.newEffectDamageRate();
        effectDamageRate_.getRequiredSuccessfulEffects().add(6);
        effectDamageRate_.getRequiredSuccessfulEffects().add(-2);
        mvDam_.getEffects().add(effectDamageRate_);
        EffectDamage effectDamage_ = Instances.newEffectDamage();
        effectDamage_.setTargetChoice(TargetChoice.ANY_FOE);
        effectDamage_.getRequiredSuccessfulEffects().add(360);
        effectDamage_.getRequiredSuccessfulEffects().add(-2);
        mvDam_.getEffects().add(effectDamage_);
        effectStatis_ = Instances.newEffectStatistic();
        effectStatis_.setTargetChoice(TargetChoice.TOUS_ADV);
        effectStatis_.getRequiredSuccessfulEffects().add(3);
        effectStatis_.getRequiredSuccessfulEffects().add(-2);
        mvDam_.getEffects().add(effectStatis_);
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.getMultDamageAgainst().addEntry(CHARGE,Rate.newRate("-1"));
        effectDamage_.getDamageLaw().addEvent(NULL_REF,LgInt.newLgInt("-1"));
        effectDamage_.setPower(CHARGE);
        effectDamage_.getHitsLaw().addEvent(Rate.newRate("0"),LgInt.newLgInt("-1"));
        effectDamage_.setTargetChoice(TargetChoice.ANY_FOE);
        effectDamage_.getRequiredSuccessfulEffects().add(6);
        effectDamage_.getRequiredSuccessfulEffects().add(-2);
        mvDam_.getEffects().add(effectDamage_);
        EffectInvoke eff_ = Instances.newEffectInvoke();
        eff_.setMovesNotToBeInvoked(new StringList(NULL_REF));
        eff_.getMoveFctEnv().addEntry(EnvironmentType.ROAD,ELECTRICK);
        eff_.getInvokingMoveByUserTypes().addEntry(ELECTRICK,ELECTRICK);
        eff_.setRateInvokationMove(Rate.newRate("-1"));
        mvDam_.getEffects().add(eff_);
        mvDam_.getEffects().add(Instances.newEffectSwitchPosition());
        mvDam_.getEffects().add(Instances.newEffectOrder());
        EffectProtection prot_ = Instances.newEffectProtection();
        prot_.setProtSingleAgainstKo(Rate.newRate("-1"));
        mvDam_.getEffects().add(prot_);
        mvDam_.getEffects().add(Instances.newEffectProtection());
        mvDam_.getEffects().add(Instances.newEffectBatonPass());
        EffectSwitchPointView sw_ = Instances.newEffectSwitchPointView();
        sw_.setPointViewChangement(PointViewChangementType.MIRROR_AGAINST_THROWER);
        mvDam_.getEffects().add(sw_);
        sw_ = Instances.newEffectSwitchPointView();
        sw_.setPointViewChangement(PointViewChangementType.THIEF_BONUSES);
        sw_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(sw_);
        mvDam_.getEffects().add(Instances.newEffectSwitchPointView());
        EffectCopyMove effectCopyMove_ = Instances.newEffectCopyMove();
        effectCopyMove_.setMovesNotToBeCopied(new StringList(NULL_REF));
        effectCopyMove_.setTargetChoice(TargetChoice.LANCEUR);
        effectCopyMove_.setCopyingMoveForUserDef(true);
        effectCopyMove_.setCopyingMoveForUser((short)1);
        mvDam_.getEffects().add(effectCopyMove_);
        effectCopyMove_ = Instances.newEffectCopyMove();
        effectCopyMove_.setMovesNotToBeCopied(new StringList(NULL_REF));
        effectCopyMove_.setTargetChoice(TargetChoice.LANCEUR);
        effectCopyMove_.setCopyingMoveForUser((short)1);
        mvDam_.getEffects().add(effectCopyMove_);
        EffectCopyFighter effCpy_ = Instances.newEffectCopyFighter();
        effCpy_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effCpy_);
        EffectGlobal effectGlobal_ = Instances.newEffectGlobal();
        effectGlobal_.getCancelChgtStat().add(Statistic.HP);
        effectGlobal_.setImmuneTypes(new StringList(NULL_REF));
        effectGlobal_.setHealingEndRound(Rate.newRate("-1"));
        effectGlobal_.setHealingEndRoundGround(Rate.newRate("-1"));
        effectGlobal_.setDamageEndRound(Rate.newRate("-1"));
        effectGlobal_.getMultDamageTypesMoves().addEntry(ELECTRICK,Rate.newRate("-1"));
        effectGlobal_.getMultDamagePrepaRound().addEntry(ELECTRICK,Rate.newRate("-1"));
        effectGlobal_.getMultPowerMoves().addEntry(ELECTRICK,Rate.newRate("-1"));
        effectGlobal_.getEfficiencyMoves().addEntry(new TypesDuo(ELECTRICK,ELECTRICK),Rate.newRate("-1"));
        effectGlobal_.getMultStatIfContainsType().addEntry(new StatisticType(Statistic.HP,ELECTRICK),Rate.newRate("-1"));
        effectGlobal_.setDisableImmuAgainstTypes(new StringList(NULL_REF));
        effectGlobal_.setCancelProtectingAbilities(new StringList(NULL_REF));
        effectGlobal_.setPreventStatus(new StringList(NULL_REF));
        effectGlobal_.setUnusableMoves(new StringList(NULL_REF));
        effectGlobal_.setMovesUsedByTargetedFighters(new StringList(NULL_REF));
        effectGlobal_.setCancelEffects(new StringList(NULL_REF));
        effectGlobal_.setChangedTypesTerrain(new StringList(NULL_REF));
        effectGlobal_.setInvokedMoveTerrain(ELECTRICK);
        effectGlobal_.setMultAccuracy(Rate.newRate("-2"));
        effectGlobal_.setMultEffectLovingAlly(Rate.newRate("-2"));
        mvDam_.getEffects().add(effectGlobal_);
        effectGlobal_ = Instances.newEffectGlobal();
        mvDam_.getEffects().add(effectGlobal_);
        EffectEndRoundFoe endRoundFoe_ = Instances.newEffectEndRoundFoe();
        endRoundFoe_.setInflictedRateHpTarget(Rate.newRate("0"));
        mvDam_.getEffects().add(endRoundFoe_);
        endRoundFoe_ = Instances.newEffectEndRoundFoe();
        endRoundFoe_.setInflictedRateHpTarget(Rate.newRate("-1"));
        mvDam_.getEffects().add(endRoundFoe_);
        mvDam_.getEffects().add(Instances.newEffectEndRoundGlobal());
        EffectEndRoundPositionRelation effectEndRoundPositionRelation_ = Instances.newEffectEndRoundPositionRelation();
        effectEndRoundPositionRelation_.setHealHp(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundPositionRelation_);
        effectEndRoundPositionRelation_ = Instances.newEffectEndRoundPositionRelation();
        effectEndRoundPositionRelation_.setHealHp(Rate.newRate("0"));
        mvDam_.getEffects().add(effectEndRoundPositionRelation_);
        EffectEndRoundPositionTargetRelation tar_ = Instances.newEffectEndRoundPositionTargetRelation();
        tar_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(tar_);
        mvDam_.getEffects().add(Instances.newEffectEndRoundSingleStatus());
        data_.completeMembers(CHARGE2,mvDam_);
        mvDam_ = Instances.newDamagingMoveData();
        effectStatis_ = Instances.newEffectStatistic();
        effectStatis_.setTargetChoice(TargetChoice.ANY_FOE);
        mvDam_.getEffects().add(effectStatis_);
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.getChLaw().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        effectDamage_.getHitsLaw().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        effectDamage_.getHitsLaw().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        effectDamage_.getBoostStatisOnceKoFoe().addEntry(Statistic.HP, (byte) -1);
        effectDamage_.setTargetChoice(TargetChoice.LANCEUR);
        effectDamage_.getIgnVarStatUserNeg().add(Statistic.HP);
        effectDamage_.getIgnVarStatTargetPos().add(Statistic.HP);
        effectDamage_.setStatisAtt(Statistic.SPEED);
        effectDamage_.setStatisDef(Statistic.SPEED);
        effectDamage_.setConstDamage(true);
        mvDam_.getEffects().add(effectDamage_);
        mvDam_.setTargetChoice(TargetChoice.ANY_FOE);
        data_.completeMembers(CHARGE3,mvDam_);
        mvDam_ = Instances.newDamagingMoveData();
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.setTargetChoice(TargetChoice.ALLIE);
        effectDamage_.getDamageLaw().addEvent(CHARGE,LgInt.newLgInt("-1"));
        effectDamage_.setPower(CHARGE);
        mvDam_.getEffects().add(effectDamage_);
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.setTargetChoice(TargetChoice.ALLIES);
        mvDam_.getEffects().add(effectDamage_);
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.setTargetChoice(TargetChoice.GLOBALE);
        mvDam_.getEffects().add(effectDamage_);
        effectDamage_ = Instances.newEffectDamage();
        effectDamage_.setTargetChoice(TargetChoice.UNIQUE_IMPORTE);
        mvDam_.getEffects().add(effectDamage_);
        mvDam_.setTargetChoice(TargetChoice.ANY_FOE);
        data_.completeMembers(CHARGE4,mvDam_);
        mvStatus_ = Instances.newStatusMoveData();
        mvStatus_.setCounterableMove(true);
        mvStatus_.setTargetChoice(TargetChoice.LANCEUR);
        mvStatus_.getEffects().add(Instances.newEffectTeam());
        mvStatus_.getEffects().add(Instances.newEffectStatistic());
        data_.completeMembers(TREMPETTE2,mvStatus_);
        mvStatus_ = Instances.newStatusMoveData();
        mvStatus_.setThievableMove(true);
        mvStatus_.setTargetChoice(TargetChoice.ANY_FOE);
        mvStatus_.getEffects().add(Instances.newEffectDamage());
        mvStatus_.getEffects().add(Instances.newEffectDamageRate());
        mvStatus_.getEffects().add(Instances.newEffectBatonPass());
        mvStatus_.getEffects().add(Instances.newEffectProtection());
        mvStatus_.getEffects().add(Instances.newEffectInvoke());
        mvStatus_.getEffects().add(Instances.newEffectGlobal());
        mvStatus_.getEffects().add(Instances.newEffectSwitchPosition());
        mvStatus_.getEffects().add(Instances.newEffectCopyMove());
        mvStatus_.getEffects().add(Instances.newEffectOrder());
        mvStatus_.getEffects().add(Instances.newEffectSwitchPointView());
        mvStatus_.getEffects().add(Instances.newEffectEndRoundGlobal());
        data_.completeMembers(TREMPETTE3,mvStatus_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail4Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newStatusMoveData();
        EffectStatistic effectStatistic_ = Instances.newEffectStatistic();
        effectStatistic_.getLawBoost().addEvent(Statistic.HP,LgInt.newLgInt("-1"));
        effectStatistic_.getLawBoost().addEvent(Statistic.ATTACK,LgInt.newLgInt("-1"));
        effectStatistic_.setEvtRate(Rate.newRate("-1"));
        effectStatistic_.getStatisVarRank().addEntry(Statistic.HP, (byte) 1);
        effectStatistic_.getStatisVarRank().addEntry(Statistic.PV_RESTANTS, (byte) 1);
        effectStatistic_.getLocalFailStatis().addEntry(Statistic.HP,NULL_REF);
        effectStatistic_.getLocalFailSwapBoostStatis().addEntry(Statistic.HP,NULL_REF);
        effectStatistic_.getCopyBoost().add(Statistic.HP);
        effectStatistic_.getSwapBoostStatis().add(Statistic.HP);
        effectStatistic_.getCancelChgtStat().add(Statistic.HP);
        effectStatistic_.getCancelLowStat().add(Statistic.HP);
        mvDam_.getEffects().add(effectStatistic_);
        effectStatistic_ = Instances.newEffectStatistic();
        effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
        effectStatistic_.getCopyBoost().add(Statistic.HP);
        effectStatistic_.getSwapBoostStatis().add(Statistic.HP);
        effectStatistic_.getCancelChgtStat().add(Statistic.HP);
        effectStatistic_.getCancelLowStat().add(Statistic.HP);
        mvDam_.getEffects().add(effectStatistic_);
        effectStatistic_ = Instances.newEffectStatistic();
        effectStatistic_.setTargetChoice(TargetChoice.LANCEUR);
        effectStatistic_.getSwapBoostStatis().add(Statistic.HP);
        effectStatistic_.getCancelChgtStat().add(Statistic.HP);
        effectStatistic_.getCancelLowStat().add(Statistic.HP);
        mvDam_.getEffects().add(effectStatistic_);
        data_.completeMembers(TREMPETTE,mvDam_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail5Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newStatusMoveData();
        EffectTeam effectTeam_ = Instances.newEffectTeam();
        effectTeam_.getUnusableMoves().add(NULL_REF);
        effectTeam_.getProtectAgainstStatus().add(NULL_REF);
        effectTeam_.getDisableFoeTeamEffects().add(NULL_REF);
        effectTeam_.getDisableFoeTeamStatus().add(NULL_REF);
        effectTeam_.getMultDamage().addEntry(new CategoryMult(ELECTRICK,(short)0),Rate.newRate("-1"));
        effectTeam_.getMultDamage().addEntry(new CategoryMult(NULL_REF,(short)10),Rate.newRate("-1"));
        effectTeam_.getMultDamage().addEntry(new CategoryMult(NULL_REF,(short)0),Rate.newRate("-1"));
        effectTeam_.getMultDamage().addEntry(new CategoryMult(ELECTRICK,(short)10),Rate.newRate("-1"));
        effectTeam_.getMultStatisticFoe().addEntry(Statistic.HP,Rate.newRate("-1"));
        effectTeam_.getMultStatistic().addEntry(Statistic.HP,Rate.newRate("-1"));
        effectTeam_.getProtectAgainstLowStat().add(Statistic.HP);
        effectTeam_.getForbiddenBoost().add(Statistic.HP);
        effectTeam_.getCancelChgtStatFoeTeam().add(Statistic.HP);
        effectTeam_.getCancelChgtStatTeam().add(Statistic.HP);
        mvDam_.getEffects().add(effectTeam_);
        data_.completeMembers(TREMPETTE,mvDam_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail6Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newStatusMoveData();
        EffectStatus effectStatus_ = Instances.newEffectStatus();
        effectStatus_.getLawStatus().addEvent(CHARGE,LgInt.newLgInt("-1"));
        effectStatus_.getLawStatus().addEvent(ELECTRICK,LgInt.newLgInt("-1"));
        effectStatus_.getLocalFailStatus().addEntry(ELECTRICK,NULL_REF);
        effectStatus_.getDeletedStatus().add(ELECTRICK);
        effectStatus_.setStatusFromUser(true);
        mvDam_.getEffects().add(effectStatus_);
        effectStatus_ = Instances.newEffectStatus();
        effectStatus_.setKoUserHealSubst(true);
        effectStatus_.getLawStatus().addEvent(CHARGE,LgInt.newLgInt("-1"));
        effectStatus_.getLawStatus().addEvent(ELECTRICK,LgInt.newLgInt("-1"));
        effectStatus_.getLocalFailStatus().addEntry(ELECTRICK,NULL_REF);
        effectStatus_.getDeletedStatus().add(ELECTRICK);
        effectStatus_.setStatusFromUser(true);
        mvDam_.getEffects().add(effectStatus_);
        effectStatus_ = Instances.newEffectStatus();
        effectStatus_.setTargetChoice(TargetChoice.LANCEUR);
        effectStatus_.getLawStatus().addEvent(CHARGE,LgInt.newLgInt("-1"));
        effectStatus_.getLawStatus().addEvent(ELECTRICK,LgInt.newLgInt("-1"));
        effectStatus_.getLocalFailStatus().addEntry(ELECTRICK,NULL_REF);
        effectStatus_.setStatusFromUser(true);
        mvDam_.getEffects().add(effectStatus_);
        effectStatus_ = Instances.newEffectStatus();
        effectStatus_.setTargetChoice(TargetChoice.LANCEUR);
        effectStatus_.getLawStatus().addEvent(CHARGE,LgInt.newLgInt("-1"));
        effectStatus_.getLawStatus().addEvent(ELECTRICK,LgInt.newLgInt("-1"));
        mvDam_.getEffects().add(effectStatus_);
        effectStatus_ = Instances.newEffectStatus();
        effectStatus_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectStatus_);
        data_.completeMembers(TREMPETTE,mvDam_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail7Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newStatusMoveData();
        EffectSwitchTypes effectSwitchTypes_ = Instances.newEffectSwitchTypes();
        effectSwitchTypes_.getConstTypes().add(ELECTRICK);
        effectSwitchTypes_.getAddedTypes().add(ELECTRICK);
        effectSwitchTypes_.setConstValuesType(ConstValuesType.LANCEUR_ATTAQUES_TYPES);
        effectSwitchTypes_.getChgtTypeByEnv().addEntry(EnvironmentType.ROAD,ELECTRICK);
        mvDam_.getEffects().add(effectSwitchTypes_);
        effectSwitchTypes_ = Instances.newEffectSwitchTypes();
        effectSwitchTypes_.getAddedTypes().add(ELECTRICK);
        effectSwitchTypes_.setExchangeTypes(ExchangeType.GIVE_CONST);
        effectSwitchTypes_.setConstValuesType(ConstValuesType.LANCEUR_ATTAQUES_TYPES);
        mvDam_.getEffects().add(effectSwitchTypes_);
        effectSwitchTypes_ = Instances.newEffectSwitchTypes();
        effectSwitchTypes_.getConstTypes().add(ELECTRICK);
        effectSwitchTypes_.getAddedTypes().add(ELECTRICK);
        effectSwitchTypes_.setExchangeTypes(ExchangeType.GIVE_TO_TARGET);
        effectSwitchTypes_.setConstValuesType(ConstValuesType.LANCEUR_ATTAQUES_TYPES);
        effectSwitchTypes_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectSwitchTypes_);
        data_.completeMembers(TREMPETTE,mvDam_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail8Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        MoveData mvDam_ = Instances.newStatusMoveData();
        EffectCounterAttack effectCounterAttack_ = Instances.newEffectCounterAttack();
        effectCounterAttack_.getDroppedStatDirectMove().addEntry(Statistic.HP, (byte) 1);
        effectCounterAttack_.getSufferingDamageTypes().addEntry(CHARGE,Rate.newRate("0"));
        effectCounterAttack_.getSufferingDamageTypes().addEntry(CHARGE2,Rate.newRate("-2"));
        effectCounterAttack_.setSufferingDamageDirectMove(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectCounterAttack_);
        EffectTeamWhileSendFoe effectTeamWhileSendFoe_ = Instances.newEffectTeamWhileSendFoe();
        effectTeamWhileSendFoe_.getDeletedByFoeTypes().add(ELECTRICK);
        effectTeamWhileSendFoe_.getStatusByNbUses().addEntry((short) 0,ELECTRICK);
        effectTeamWhileSendFoe_.getStatusByNbUses().addEntry((short) 1,CHARGE4);
        effectTeamWhileSendFoe_.getStatistics().addEntry(Statistic.HP,(byte)0);
        mvDam_.getEffects().add(effectTeamWhileSendFoe_);
        EffectEndRoundMultiRelation effectEndRoundMultiRelation_ = Instances.newEffectEndRoundMultiRelation();
        effectEndRoundMultiRelation_.getDamageByStatus().addEntry(ELECTRICK,Rate.newRate("0"));
        effectEndRoundMultiRelation_.getDamageByStatus().addEntry(CHARGE4,Rate.newRate("0"));
        mvDam_.getEffects().add(effectEndRoundMultiRelation_);
        EffectEndRoundIndividual effectEndRoundIndividual_ = Instances.newEffectEndRoundIndividual();
        effectEndRoundIndividual_.getMultDamageStatus().addEntry(ELECTRICK,Rate.newRate("0"));
        effectEndRoundIndividual_.getMultDamageStatus().addEntry(CHARGE4,Rate.newRate("0"));
        effectEndRoundIndividual_.getHealHpByOwnerTypes().addEntry(ELECTRICK,Rate.newRate("-1"));
        effectEndRoundIndividual_.setDeleteAllStatus(Rate.newRate("-1"));
        effectEndRoundIndividual_.setHealHp(Rate.newRate("-1"));
        effectEndRoundIndividual_.setRecoilDamage(Rate.newRate("-1"));
        effectEndRoundIndividual_.setUserStatusEndRound(CHARGE);
        mvDam_.getEffects().add(effectEndRoundIndividual_);
        mvDam_.getEffects().add(Instances.newEffectEndRoundIndividual());
        EffectUnprotectFromTypes effectUnprotectFromTypes_ = Instances.newEffectUnprotectFromTypes();
        effectUnprotectFromTypes_.getTypes().add(new TypesDuo(ELECTRICK,ELECTRICK));
        effectUnprotectFromTypes_.getDisableImmuAgainstTypes().add(ELECTRICK);
        effectUnprotectFromTypes_.getDisableImmuFromMoves().add(ELECTRICK);
        effectUnprotectFromTypes_.getAttackTargetWithTypes().add(ELECTRICK);
        mvDam_.getEffects().add(effectUnprotectFromTypes_);
        EffectProtectFromTypes effectProtectFromTypes_ = Instances.newEffectProtectFromTypes();
        effectProtectFromTypes_.getImmuAgainstTypes().add(ELECTRICK);
        mvDam_.getEffects().add(effectProtectFromTypes_);
        effectProtectFromTypes_ = Instances.newEffectProtectFromTypes();
        mvDam_.getEffects().add(effectProtectFromTypes_);
        EffectSwitchAbilities effectSwitchAbilities_ = Instances.newEffectSwitchAbilities();
        effectSwitchAbilities_.setConstAbility(ELECTRICK);
        effectSwitchAbilities_.setExchangeAbility(ExchangeType.GIVE_TO_THROWER);
        effectSwitchAbilities_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectSwitchAbilities_);
        EffectSwitchMoveTypes effectSwitchMoveTypes_ = Instances.newEffectSwitchMoveTypes();
        effectSwitchMoveTypes_.getChangeTypes().addEntry(ELECTRICK,ELECTRICK);
        effectSwitchMoveTypes_.getReplacingTypes().add(ELECTRICK);
        mvDam_.getEffects().add(effectSwitchMoveTypes_);
        EffectCommonStatistics effectCommonStatistics_ = Instances.newEffectCommonStatistics();
        effectCommonStatistics_.getCommonValue().addEntry(Statistic.HP,NULL_REF);
        effectCommonStatistics_.getCommonValue().addEntry(Statistic.ACCURACY,NULL_REF);
        effectCommonStatistics_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectCommonStatistics_);
        EffectFullHpRate effectFullHpRate_ = Instances.newEffectFullHpRate();
        effectFullHpRate_.setLeftUserHp(Rate.newRate("-1"));
        effectFullHpRate_.setClosestFoeDamageRateHp(Rate.newRate("-1"));
        effectFullHpRate_.setRestoredHp(CHARGE);
        mvDam_.getEffects().add(effectFullHpRate_);
        EffectClone effectClone_ = Instances.newEffectClone();
        effectClone_.setHpRateClone(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectClone_);
        effectClone_ = Instances.newEffectClone();
        effectClone_.setHpRateClone(Rate.newRate("0"));
        mvDam_.getEffects().add(effectClone_);
        EffectSwitchItems effectSwitchItems_ = Instances.newEffectSwitchItems();
        mvDam_.getEffects().add(effectSwitchItems_);
        effectSwitchItems_ = Instances.newEffectSwitchItems();
        effectSwitchItems_.setMoveObject(MoveItemType.TAKE_OBJET);
        effectSwitchItems_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectSwitchItems_);
        EffectAlly effectAlly_ = Instances.newEffectAlly();
        effectAlly_.setMultAllyDamage(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectAlly_);
        EffectMultSufferedMovePower effectMultSufferedMovePower_ = Instances.newEffectMultSufferedMovePower();
        effectMultSufferedMovePower_.getMultMovePowerFctType().addEntry(ELECTRICK,Rate.newRate("-1"));
        mvDam_.getEffects().add(effectMultSufferedMovePower_);
        EffectMultUsedMovePower effectMultUsedMovePower_ = Instances.newEffectMultUsedMovePower();
        effectMultUsedMovePower_.getMultMovePowerFctType().addEntry(ELECTRICK,Rate.newRate("-1"));
        mvDam_.getEffects().add(effectMultUsedMovePower_);
        EffectWinMoney effectWinMoney_ = Instances.newEffectWinMoney();
        effectWinMoney_.setWinningRateBySumTargetUser(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectWinMoney_);
        effectWinMoney_ = Instances.newEffectWinMoney();
        effectWinMoney_.setWinningRateBySumTargetUser(Rate.newRate("0"));
        mvDam_.getEffects().add(effectWinMoney_);
        mvDam_.getEffects().add(Instances.newEffectVarPP());
        mvDam_.getEffects().add(Instances.newEffectRemainedHpRate());
        EffectRestriction effectRestriction_ = Instances.newEffectRestriction();
        effectRestriction_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectRestriction_);
        EffectAccuracy effectAccuracy_ = Instances.newEffectAccuracy();
        effectAccuracy_.setTargetChoice(TargetChoice.LANCEUR);
        mvDam_.getEffects().add(effectAccuracy_);
        EffectEndRoundTeam effectEndRoundTeam_ = Instances.newEffectEndRoundTeam();
        effectEndRoundTeam_.setDeleteAllStatusAlly(Rate.newRate("-1"));
        effectEndRoundTeam_.setDeleteAllStatus(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundTeam_);
        EffectEndRoundStatusRelation effectEndRoundStatusRelation_ = Instances.newEffectEndRoundStatusRelation();
        effectEndRoundStatusRelation_.setThievedHpRateTargetToUser(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundStatusRelation_);
        effectEndRoundStatusRelation_ = Instances.newEffectEndRoundStatusRelation();
        effectEndRoundStatusRelation_.setInflictedRateHpTarget(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundStatusRelation_);
        effectEndRoundStatusRelation_ = Instances.newEffectEndRoundStatusRelation();
        mvDam_.getEffects().add(effectEndRoundStatusRelation_);
        effectEndRoundStatusRelation_ = Instances.newEffectEndRoundStatusRelation();
        effectEndRoundStatusRelation_.setThievedHpRateTargetToUser(Rate.newRate("-1"));
        effectEndRoundStatusRelation_.setInflictedRateHpTarget(Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundStatusRelation_);
        EffectEndRoundSingleRelation effectEndRoundSingleRelation_ = Instances.newEffectEndRoundSingleRelation();
        effectEndRoundSingleRelation_.getLawForEnablingEffect().addEvent(Rate.newRate("0"),LgInt.newLgInt("-1"));
        effectEndRoundSingleRelation_.getLawForEnablingEffect().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        mvDam_.getEffects().add(effectEndRoundSingleRelation_);
        effectEndRoundSingleRelation_ = Instances.newEffectEndRoundSingleRelation();
        effectEndRoundSingleRelation_.setTargetChoice(TargetChoice.LANCEUR);
        effectEndRoundSingleRelation_.getLawForEnablingEffect().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        effectEndRoundSingleRelation_.getLawForEnablingEffect().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        mvDam_.getEffects().add(effectEndRoundSingleRelation_);
        effectEndRoundSingleRelation_ = Instances.newEffectEndRoundSingleRelation();
        effectEndRoundSingleRelation_.getRateDamageFunctionOfNbRounds().addEntry(0L,Rate.newRate("-1"));
        mvDam_.getEffects().add(effectEndRoundSingleRelation_);
        data_.completeMembers(TREMPETTE,mvDam_);
        StatusSimple statusSimple_ = Instances.newStatusSimple();
        statusSimple_.setStatusType(StatusType.RELATION_UNIQUE);
        data_.completeMembers(CHARGE4,statusSimple_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        EffectCombo effectCombo_ = Instances.newEffectCombo();
        effectCombo_.getRepeatedRoundsLaw().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        effectCombo_.getRepeatedRoundsLaw().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        effectCombo_.setMultEvtRateSecEff(Rate.newRate("-1"));
        data_.getCombos().getEffects().addEntry(new StringList(), effectCombo_);
        effectCombo_ = Instances.newEffectCombo();
        effectCombo_.getRepeatedRoundsLaw().addEvent(Rate.newRate("0"),LgInt.newLgInt("-1"));
        effectCombo_.getRepeatedRoundsLaw().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        effectCombo_.setMultEvtRateSecEff(Rate.newRate("-1"));
        data_.getCombos().getEffects().addEntry(new StringList(ELECTRICK), effectCombo_);
        effectCombo_ = Instances.newEffectCombo();
        effectCombo_.getEffectEndRound().add(Instances.newEffectEndRoundFoe());
        effectCombo_.getEffectEndRound().add(Instances.newEffectEndRoundFoe());
        effectCombo_.getTeamMove().add(Instances.newEffectTeam());
        effectCombo_.getTeamMove().add(Instances.newEffectTeam());
        data_.getCombos().getEffects().addEntry(new StringList(TREMPETTE), effectCombo_);
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail9Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        AbilityData abilityData_ = Instances.newAbilityData();
        EffectWhileSendingSimple effectWhileSendingSimple_ = Instances.newEffectWhileSendingSimple();
        effectWhileSendingSimple_.setMultWeight(Rate.newRate("-1"));
        effectWhileSendingSimple_.setEnabledWeather(ELECTRICK);
        abilityData_.getEffectSending().add(effectWhileSendingSimple_);
        effectWhileSendingSimple_ = Instances.newEffectWhileSendingSimple();
        effectWhileSendingSimple_.setDisableWeather(true);
        effectWhileSendingSimple_.setMultWeight(Rate.newRate("-1"));
        effectWhileSendingSimple_.setEnabledWeather(ELECTRICK);
        abilityData_.getEffectSending().add(effectWhileSendingSimple_);
        abilityData_.setMaxHpForUsingBerry(Rate.newRate("-1"));
        abilityData_.getSingleStatus().addEvent(ELECTRICK,LgInt.newLgInt("-1"));
        abilityData_.getFailStatus().addEntry(TREMPETTE,NULL_REF);
        abilityData_.getHealHpByTypeIfWeather().addEntry(new WeatherType(ELECTRICK,ELECTRICK),Rate.newRate("-1"));
        abilityData_.getHealHpByTypeIfWeather().addEntry(new WeatherType(ELECTRICK,CHARGE),Rate.newRate("0"));
        abilityData_.getMultStatIfCat().addEntry(new StatisticCategory(Statistic.HP,ELECTRICK),Rate.newRate("-1"));
        abilityData_.getMultStatIfCat().addEntry(new StatisticCategory(Statistic.HP,CHARGE),Rate.newRate("-1"));
        abilityData_.getImmuLowStatIfStatus().add(new StatisticStatus(Statistic.HP,ELECTRICK));
        abilityData_.getBreakFoeImmune().add(new TypesDuo(ELECTRICK,ELECTRICK));
        abilityData_.getImmuWeather().add(ELECTRICK);
        abilityData_.getChgtTypeByWeather().addEntry(ELECTRICK,ELECTRICK);
        abilityData_.getImmuStatus().addEntry(ELECTRICK,new StringList(ELECTRICK));
        abilityData_.getImmuMoveTypesByWeather().addEntry(ELECTRICK,new StringList(ELECTRICK));
        abilityData_.getImmuStatusTypes().addEntry(ELECTRICK,new StringList(ELECTRICK));
        abilityData_.getHealHpByWeather().addEntry(ELECTRICK,Rate.newRate("0"));
        abilityData_.getImmuStatusBeginRound().add(ELECTRICK);
        abilityData_.getDivideStatusRound().addEntry(ELECTRICK,Rate.newRate("0"));
        abilityData_.getDivideStatusRound().addEntry(TREMPETTE,Rate.newRate("-1"));
        abilityData_.getImmuAbility().add(ELECTRICK);
        abilityData_.getIgnAbility().add(ELECTRICK);
        abilityData_.getImmuMove().add(ELECTRICK);
        abilityData_.getImmuAllyFromMoves().add(ELECTRICK);
        abilityData_.getIgnFoeTeamMove().add(ELECTRICK);
        abilityData_.setTypeForMoves(ELECTRICK);
        abilityData_.getMultDamageFoe().addEntry(ELECTRICK,Rate.newRate("0"));
        abilityData_.getMultDamageFoe().addEntry(TREMPETTE,Rate.newRate("-1"));
        abilityData_.setMultVarBoost(Rate.newRate("-1"));
        abilityData_.setMultDamageCh(Rate.newRate("-1"));
        abilityData_.setMultAllyDamage(Rate.newRate("-1"));
        abilityData_.setMultEvtRateCh(Rate.newRate("-1"));
        abilityData_.setMultStab(Rate.newRate("-1"));
        abilityData_.setRecoilDamageFoe(Rate.newRate("-1"));
        abilityData_.setRecoilDamageFoeByKoOwner(Rate.newRate("-1"));
        abilityData_.setMultEvtRateSecEffectOwner(Rate.newRate("-1"));
        abilityData_.setMultSufferedDamageSuperEff(Rate.newRate("-1"));
        abilityData_.setHealedHpRateBySwitch(Rate.newRate("-1"));
        abilityData_.setNbUsedPp(-1);
        abilityData_.getImmuLowStat().add(Statistic.HP);
        abilityData_.getMultStatAlly().addEntry(Statistic.HP,Rate.newRate("-1"));
        abilityData_.getMultStatAlly().addEntry(Statistic.ATTACK,Rate.newRate("0"));
        abilityData_.getMultStat().addEntry(Statistic.HP,NULL_REF);
        abilityData_.getForwardStatus().addEntry(ELECTRICK,ELECTRICK);
        abilityData_.getIncreasedPrioTypes().addEntry(ELECTRICK,(short)0);
        abilityData_.getIncreasedPrio().addEntry(ELECTRICK,(short)0);
        abilityData_.getMaxStatisticsIfCh().add(Statistic.HP);
        abilityData_.getBonusStatRank().addEntry(Statistic.HP,(byte)0);
        abilityData_.getBoostStatRankEndRound().addEntry(Statistic.HP,(byte)0);
        abilityData_.getBoostStatRankProtected().addEntry(Statistic.HP,(byte)0);
        abilityData_.getMultStatIfLowStat().addEntry(Statistic.HP,(byte)0);
        abilityData_.getMultStatIfKoFoe().addEntry(Statistic.HP,(byte)0);
        abilityData_.getLowStatFoeHit().addEntry(Statistic.HP,(byte)0);
        abilityData_.getMultStatIfDamageCat().addEntry(new StatisticCategory(Statistic.HP,ELECTRICK),(byte)0);
        abilityData_.getMultStatIfDamageCat().addEntry(new StatisticCategory(Statistic.HP,NULL_REF),(byte)0);
        abilityData_.getMultStatIfStatutRank().addEntry(new StatisticStatus(Statistic.HP,ELECTRICK),(byte)0);
        abilityData_.getMultStatIfDamgeType().addEntry(new StatisticType(Statistic.HP,ELECTRICK),(byte)0);
        abilityData_.getMultPowerMovesTypesGlobal().addEntry(ELECTRICK,Rate.newRate("-1"));
        abilityData_.getChangingBoostTypes().addEntry(ELECTRICK,new TypeDamageBoost(ELECTRICK,Rate.newRate("0")));
        abilityData_.getImmuLowStatisTypes().addEntry(ELECTRICK,new EnumList<Statistic>());
        abilityData_.setHealHpWhileUsingBerry(Rate.newRate("-1"));
        abilityData_.setDecreaseNecStepsHatch(-1);
        abilityData_.getEffectEndRound().add(Instances.newEffectEndRoundGlobal());
        data_.completeMembers(CHARGE,abilityData_);
        abilityData_ = Instances.newAbilityData();
        abilityData_.setMaxHpForUsingBerry(Rate.newRate("2"));
        effectWhileSendingSimple_ = Instances.newEffectWhileSendingSimple();
        effectWhileSendingSimple_.setDisableWeather(true);
        effectWhileSendingSimple_.setMultWeight(Rate.newRate("-1"));
        effectWhileSendingSimple_.setEnabledWeather(ELECTRICK);
        abilityData_.getEffectSending().add(effectWhileSendingSimple_);
        data_.completeMembers(CHARGE2,abilityData_);
        data_.sortEndRound();
        data_.completeVariables();
        initConstants(data_);
        data_.setRateBoost("-2");
        initRandomLaws(data_);
        initExpPoints(data_);
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail10Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        StatusBeginRoundAutoDamage statusBeginRoundAutoDamage_ = Instances.newStatusBeginRoundAutoDamage();
        statusBeginRoundAutoDamage_.setPower(Rate.newRate("-1"));
        statusBeginRoundAutoDamage_.setAttack(Statistic.PV_RESTANTS);
        statusBeginRoundAutoDamage_.setDefense(Statistic.PV_RESTANTS);
        statusBeginRoundAutoDamage_.setCatchingRate(Rate.newRate("-1"));
        statusBeginRoundAutoDamage_.getEffectEndRound().add(Instances.newEffectEndRoundSingleStatus());
        statusBeginRoundAutoDamage_.getEffectEndRound().add(Instances.newEffectEndRoundSingleStatus());
        EffectPartnerStatus e_ = Instances.newEffectPartnerStatus();
        e_.setMultDamageAgainstFoe(Rate.newRate("-1"));
        e_.setRestoredHpRateLovedAlly(Rate.newRate("-1"));
        statusBeginRoundAutoDamage_.getEffectsPartner().add(e_);
        statusBeginRoundAutoDamage_.getEffectsPartner().add(Instances.newEffectPartnerStatus());
        statusBeginRoundAutoDamage_.setStatusType(StatusType.RELATION_UNIQUE);
        data_.completeMembers(CHARGE,statusBeginRoundAutoDamage_);
        statusBeginRoundAutoDamage_ = Instances.newStatusBeginRoundAutoDamage();
        statusBeginRoundAutoDamage_.getMultStat().addEntry(Statistic.HP,Rate.newRate("-1"));
        statusBeginRoundAutoDamage_.getMultStat().addEntry(Statistic.ATTACK,Rate.newRate("0"));
        statusBeginRoundAutoDamage_.getLawForUsingAMove().addEvent(true,LgInt.newLgInt("-1"));
        statusBeginRoundAutoDamage_.getLawForUsingAMoveIfFoe().addEvent(true,LgInt.newLgInt("-1"));
        statusBeginRoundAutoDamage_.getLawForFullHealIfMove().addEvent(true,LgInt.newLgInt("-1"));
        statusBeginRoundAutoDamage_.getLawForUsingAMoveNbRound().addEvent(Rate.newRate("-1"),LgInt.newLgInt("-1"));
        statusBeginRoundAutoDamage_.getLawForUsingAMoveNbRound().addEvent(Rate.newRate("1/2"),LgInt.newLgInt("-1"));
        statusBeginRoundAutoDamage_.getEffectEndRound().add(Instances.newEffectEndRoundStatusRelation());
        statusBeginRoundAutoDamage_.setStatusType(StatusType.INDIVIDUEL);
        data_.completeMembers(CHARGE2,statusBeginRoundAutoDamage_);
        data_.sortEndRound();
        data_.completeVariables();
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
    }

    @Test
    public void fail11Test() {
        DataBase data_ =new DataBase();
        data_.setLanguage(LANGUAGE);
        data_.setLanguages(new StringList(LANGUAGE));
        data_.initializeMembers();
        ItemForBattle itemForBattle_ = Instances.newItemForBattle();
        itemForBattle_.getLawForAttackFirst().addEvent(true,LgInt.newLgInt("-1"));
        itemForBattle_.getEffectEndRound().add(Instances.newEffectEndRoundGlobal());
        itemForBattle_.getEffectEndRound().add(Instances.newEffectEndRoundGlobal());
        itemForBattle_.getEffectSending().add(Instances.newEffectWhileSendingSimple());
        itemForBattle_.getEffectSending().add(Instances.newEffectWhileSendingSimple());
        itemForBattle_.getMultStatPokemonRank().addEntry(new StatisticPokemon(Statistic.HP,ELECTRICK), (byte) 0);
        itemForBattle_.getMultStatPokemonRank().addEntry(new StatisticPokemon(Statistic.HP,CHARGE4), (byte) 0);
        itemForBattle_.getMultStatPokemonRank().addEntry(new StatisticPokemon(Statistic.ATTACK,ELECTRICK), (byte) 0);
        itemForBattle_.getMultStatPokemonRank().addEntry(new StatisticPokemon(Statistic.ATTACK,CHARGE4), (byte) 0);
        itemForBattle_.getMultStatRank().addEntry(Statistic.HP, (byte) 0);
        itemForBattle_.getMultStat().addEntry(Statistic.HP, NULL_REF);
        itemForBattle_.getIncreasingMaxNbRoundGlobalMove().addEntry(ELECTRICK, (short) -1);
        itemForBattle_.getIncreasingMaxNbRoundTeamMove().addEntry(ELECTRICK, (short) -1);
        itemForBattle_.getIncreasingMaxNbRoundTrap().addEntry(ELECTRICK, (short) -1);
        itemForBattle_.getTypesPk().add(ELECTRICK);
        itemForBattle_.getImmuMoves().add(ELECTRICK);
        itemForBattle_.getImmuTypes().add(ELECTRICK);
        itemForBattle_.getImmuStatus().add(ELECTRICK);
        itemForBattle_.getImmuWeather().add(ELECTRICK);
        itemForBattle_.getBoostStatisSuperEff().addEntry(Statistic.HP, (byte) 0);
        EnumMap<Statistic, Byte> v_ = new EnumMap<Statistic, Byte>();
        v_.addEntry(Statistic.HP, (byte) 0);
        itemForBattle_.getBoostStatisTypes().addEntry(ELECTRICK, v_);
        itemForBattle_.getSynchroStatus().add(ELECTRICK);
        itemForBattle_.getFailStatus().addEntry(CHARGE4,NULL_REF);
        itemForBattle_.getWinEvFight().addEntry(Statistic.ACCURACY, (short) -1);
        itemForBattle_.setDamageRecoil(Rate.newRate("-1"));
        itemForBattle_.setDrainedHpByDamageRate(Rate.newRate("-1"));
        itemForBattle_.setMultWinningHappiness(Rate.newRate("-1"));
        itemForBattle_.setMultDrainedHp(Rate.newRate("-1"));
        itemForBattle_.setMultWinningEv(Rate.newRate("-1"));
        itemForBattle_.setMultWinningMoney(Rate.newRate("-1"));
        itemForBattle_.setMultWinningExp(Rate.newRate("-1"));
        itemForBattle_.setMultTrappingDamage(Rate.newRate("-1"));
        itemForBattle_.setProtectAgainstKo(Rate.newRate("-1"));
        itemForBattle_.setProtectAgainstKoIfFullHp(Rate.newRate("-1"));
        data_.completeMembers(CHARGE,itemForBattle_);
        Berry berry_ = Instances.newBerry();
        berry_.getHealStatus().add(ELECTRICK);
        berry_.getMultStat().addEntry(Statistic.HP,new BoostHpRate((byte) -1,Rate.newRate("-1")));
        berry_.getBoostStatis().addEntry(Statistic.HP, (byte) 0);
        berry_.getMultFoesDamage().addEntry(ELECTRICK,new EfficiencyRate(Rate.newRate("-1"),Rate.newRate("-1")));
        berry_.getDamageRateRecoilFoe().addEntry(ELECTRICK,Rate.newRate("-1"));
        berry_.setCategoryBoosting(ELECTRICK);
        berry_.setHealHp(Rate.newRate("-1"));
        berry_.setHealHpRate(Rate.newRate("-1"));
        berry_.setHealHpBySuperEffMove(Rate.newRate("-1"));
        berry_.setMaxHpHealingHp(Rate.newRate("-1"));
        berry_.setMaxHpHealingHpRate(Rate.newRate("-1"));
        berry_.setHealPp(-1);
        data_.completeMembers(CHARGE2,berry_);
        data_.sortEndRound();
        data_.completeVariables();
        data_.initCombosTest();
        data_.validateCore(new PerCentImpl());
        assertTrue(data_.isError());
        assertTrue(!new StatisticPokemon(Statistic.HP,ELECTRICK).eq(new StatisticPokemon(Statistic.HP,CHARGE4)));
    }
}
