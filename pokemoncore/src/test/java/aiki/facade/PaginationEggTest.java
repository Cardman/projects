package aiki.facade;
import static aiki.db.EquallablePkUtil.assertEq;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import aiki.db.DataBase;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import org.junit.Before;
import org.junit.Test;

import aiki.game.fight.InitializationDataBase;
import aiki.game.params.Difficulty;
import aiki.game.player.Player;
import aiki.map.pokemon.Egg;
import aiki.util.SortingEgg;
import code.util.CustList;
import aiki.facade.enums.SearchingMode;
import aiki.facade.enums.SelectedBoolean;


public class PaginationEggTest extends InitializationDataBase {

    private DataBase data;
    @Before
    public void initTests() {
        data = initDb();
    }
    @Test
    public void match1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setMinSteps(1L);
        Egg egg_;
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 15);
        assertTrue(!pagination_.match(egg_));
    }

    @Test
    public void match2Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setContentOfName("P*");
        Egg egg_;
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 15);
        assertTrue(!pagination_.match(egg_));
    }

    @Test
    public void match3Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCriteria().setMinSteps(1L);
        Egg egg_;
        egg_ = new Egg(NUCLEOS);
        assertTrue(!pagination_.match(egg_));
    }

    @Test
    public void match4Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        Egg egg_;
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 15);
        assertTrue(pagination_.match(egg_));
    }

    @Test
    public void sortable1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        assertTrue(pagination_.sortable());
    }

    @Test
    public void sortable2Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCmpName().setPriority(1);
        assertTrue(pagination_.sortable());
    }

    @Test
    public void sortable3Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCmpSteps().setPriority(1);
        assertTrue(pagination_.sortable());
    }

    @Test
    public void sortable4Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpSteps().setPriority(1);
        assertTrue(!pagination_.sortable());
    }

    @Test
    public void sort1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.sort();
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(20, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(10, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(30, egg_.getSteps());
    }

    @Test
    public void sort2Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.sort();
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(20, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(30, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(10, egg_.getSteps());
    }

    @Test
    public void sort3Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.YES);
        pagination_.sort();
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PTITARD, egg_.getName());
        assertEq(10, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(20, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(30, egg_.getSteps());
    }

    @Test
    public void sort4Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(30, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(LIMAGMA, egg_.getName());
        assertEq(20, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(10, egg_.getSteps());
    }

    @Test
    public void calculateRendered1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(2);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        assertEq(LIMAGMA, sorted_.get(0).getName());
        assertEq(30, sorted_.get(0).getSteps());
        assertEq(3, sorted_.get(0).getIndex());
        assertEq(LIMAGMA, sorted_.get(1).getName());
        assertEq(20, sorted_.get(1).getSteps());
        assertEq(0, sorted_.get(1).getIndex());
    }

    @Test
    public void calculateRendered2Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(1);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(1, sorted_.size());
        assertEq(LIMAGMA, sorted_.get(0).getName());
        assertEq(30, sorted_.get(0).getSteps());
        assertEq(3, sorted_.get(0).getIndex());
    }

    @Test
    public void calculateRendered3Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(3);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(3, sorted_.size());
        assertEq(LIMAGMA, sorted_.get(0).getName());
        assertEq(30, sorted_.get(0).getSteps());
        assertEq(3, sorted_.get(0).getIndex());
        assertEq(LIMAGMA, sorted_.get(1).getName());
        assertEq(20, sorted_.get(1).getSteps());
        assertEq(0, sorted_.get(1).getIndex());
        assertEq(PIKACHU, sorted_.get(2).getName());
        assertEq(15, sorted_.get(2).getSteps());
        assertEq(1, sorted_.get(2).getIndex());
    }

    @Test
    public void calculateRendered4Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(5);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(4, sorted_.size());
        assertEq(LIMAGMA, sorted_.get(0).getName());
        assertEq(30, sorted_.get(0).getSteps());
        assertEq(3, sorted_.get(0).getIndex());
        assertEq(LIMAGMA, sorted_.get(1).getName());
        assertEq(20, sorted_.get(1).getSteps());
        assertEq(0, sorted_.get(1).getIndex());
        assertEq(PIKACHU, sorted_.get(2).getName());
        assertEq(15, sorted_.get(2).getSteps());
        assertEq(1, sorted_.get(2).getIndex());
        assertEq(PTITARD, sorted_.get(3).getName());
        assertEq(10, sorted_.get(3).getSteps());
        assertEq(2, sorted_.get(3).getIndex());
    }

    @Test
    public void calculateRendered5Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(2);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.setNumberPage(1);
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        assertEq(PIKACHU, sorted_.get(0).getName());
        assertEq(15, sorted_.get(0).getSteps());
        assertEq(1, sorted_.get(0).getIndex());
        assertEq(PTITARD, sorted_.get(1).getName());
        assertEq(10, sorted_.get(1).getSteps());
        assertEq(2, sorted_.get(1).getIndex());
    }

    @Test
    public void calculateRendered6Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(2);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(0, sorted_.size());
    }

    @Test
    public void calculateRendered7Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(2);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.setNumberPage(1);
        pagination_.calculateRendered();
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(0, sorted_.size());
    }

    @Test
    public void pages1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(1);
        assertEq(0, pagination_.pages());
    }

    @Test
    public void pages2Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(5);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        assertEq(1, pagination_.pages());
    }

    @Test
    public void pages3Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(3);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        assertEq(2, pagination_.pages());
    }

    @Test
    public void pages4Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setNbResultsPerPage(2);
        SortingEgg sorting_;
        Egg egg_;
        sorting_ = new SortingEgg();
        sorting_.setName(PIKACHU);
        sorting_.setIndex(1);
        sorting_.setSteps(15);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(0);
        sorting_.setSteps(20);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 20);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(PTITARD);
        sorting_.setIndex(2);
        sorting_.setSteps(10);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 10);
        pagination_.getResults().put(sorting_, egg_);
        sorting_ = new SortingEgg();
        sorting_.setName(LIMAGMA);
        sorting_.setIndex(3);
        sorting_.setSteps(30);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 30);
        pagination_.getResults().put(sorting_, egg_);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.sort();
        pagination_.calculateRendered();
        assertEq(2, pagination_.pages());
    }

    @Test
    public void search1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(3, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(2).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        assertEq(PIKACHU, sorted_.get(0).getName());
        assertEq(PIKACHU, sorted_.get(0).getKeyName());
        assertEq(15, sorted_.get(0).getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        assertEq(PTITARD, sorted_.get(1).getName());
        assertEq(30, sorted_.get(1).getSteps());
        assertEq(4, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void search2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        assertEq(PIKACHU, sorted_.get(0).getName());
        assertEq(15, sorted_.get(0).getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        assertEq(PTITARD, sorted_.get(1).getName());
        assertEq(30, sorted_.get(1).getSteps());
        assertEq(4, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void search3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void search4Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*Z*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
        assertEq(-1, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void search5Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        Pokemon pk_ = new WildPk();
        pk_.setName(NUCLEOS);
        pk_.setGender(Gender.NO_GENDER);
        pk_.setLevel((short) 2);
        pk_.setAbility(ABSORB_EAU);
        pk_.setItem(NULL_REF);
        PokemonPlayer pkPlayer_ = new PokemonPlayer(pk_, data);
        player_.getBox().add(pkPlayer_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*Z*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
        assertEq(-1, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void search6Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES_AND_NO);
        pagination_.getCmpSteps().setPriority(2);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.YES_AND_NO);
        pagination_.search(player_.getBox());
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }
    @Test
    public void checkLine1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(1);
        assertEq(1, pagination_.getLine());
    }

    @Test
    public void checkLine2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(1);
        pagination_.checkLine(1);
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void checkLine3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(1);
        pagination_.checkLine(2);
        assertEq(2, pagination_.getLine());
    }

    @Test
    public void changePage1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.changePage(1);
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(1).getIndex());
        assertEq(1, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void changePage2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(0);
        pagination_.changePage(1);
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(1).getIndex());
        assertEq(1, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void changePage3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(0);
        pagination_.changePage(0);
        assertEq(4, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(2));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(2).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(3));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(5, sorted_.get(3).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PIKACHU, egg_.getName());
        assertEq(15, egg_.getSteps());
        assertEq(0, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(0, pagination_.getLine());
    }

    @Test
    public void currentIndex1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertEq(-1, pagination_.currentIndex());
    }

    @Test
    public void currentIndex2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(0);
        assertEq(0, pagination_.currentIndex());
    }

    @Test
    public void currentIndex3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(1);
        assertEq(2, pagination_.currentIndex());
    }

    @Test
    public void currentObject1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertNull(pagination_.currentObject());
    }

    @Test
    public void currentObject2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(0);
        assertSame(player_.getBox().get(0), pagination_.currentObject());
    }

    @Test
    public void currentObject3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.checkLine(1);
        assertSame(player_.getBox().get(2), pagination_.currentObject());
    }

    @Test
    public void enabledPrevious1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertTrue(!pagination_.enabledPrevious());
    }

    @Test
    public void enabledPrevious2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.changePage(1);
        assertTrue(pagination_.enabledPrevious());
    }

    @Test
    public void enabledPrevious3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("B*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertTrue(!pagination_.enabledPrevious());
    }

    @Test
    public void enabledNext1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertTrue(pagination_.enabledNext());
    }

    @Test
    public void enabledNext2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.changePage(1);
        assertTrue(!pagination_.enabledNext());
    }

    @Test
    public void enabledNext3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("B*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        assertTrue(!pagination_.enabledNext());
    }

    @Test
    public void next1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.next();
        assertEq(1, pagination_.getNumberPage());
    }

    @Test
    public void previous1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.next();
        pagination_.previous();
        assertEq(0, pagination_.getNumberPage());
    }

    @Test
    public void begin1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.next();
        pagination_.next();
        pagination_.begin();
        assertEq(0, pagination_.getNumberPage());
    }

    @Test
    public void end1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.end();
        assertEq(2, pagination_.getNumberPage());
    }

    @Test
    public void nextDelta1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.setDelta(3);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.nextDelta();
        assertEq(3, pagination_.getNumberPage());
    }

    @Test
    public void nextDelta2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.setDelta(3);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.nextDelta();
        pagination_.nextDelta();
        assertEq(4, pagination_.getNumberPage());
    }

    @Test
    public void previousDelta1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.setDelta(3);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.nextDelta();
        pagination_.nextDelta();
        pagination_.previousDelta();
        assertEq(1, pagination_.getNumberPage());
    }

    @Test
    public void previousDelta2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.setDelta(3);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.nextDelta();
        pagination_.nextDelta();
        pagination_.previousDelta();
        pagination_.previousDelta();
        assertEq(0, pagination_.getNumberPage());
    }

    @Test
    public void changeNbResultsPerPage1Test() {
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.changeNbResultsPerPage(3);
        assertEq(1, pagination_.getDelta());
        assertEq(3, pagination_.getNbResultsPerPage());
        assertEq(-1, pagination_.getLine());
        assertEq(-1, pagination_.getNumberPage());
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
    }

    @Test
    public void changeNbResultsPerPage2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("B*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.changeNbResultsPerPage(3);
        assertEq(1, pagination_.getDelta());
        assertEq(3, pagination_.getNbResultsPerPage());
        assertEq(-1, pagination_.getLine());
        assertEq(-1, pagination_.getNumberPage());
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
    }

    @Test
    public void changeNbResultsPerPage3Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.setNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.next();
        pagination_.next();
        pagination_.changeNbResultsPerPage(3);
        assertEq(1, pagination_.getDelta());
        assertEq(3, pagination_.getNbResultsPerPage());
        assertEq(-1, pagination_.getLine());
        assertEq(0, pagination_.getNumberPage());
        assertEq(5, pagination_.getResults().size());
        assertEq(3, pagination_.getRendered().size());
    }

    @Test
    public void newSearch1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.changeNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.getCriteria().setContentOfName("*T*");
        pagination_.newSearch();
        assertEq(2, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = new CustList<SortingEgg>(pagination_.getResults().getKeys());
        egg_ = pagination_.getResults().getVal(sorted_.get(0));
        assertEq(PTITARD, egg_.getName());
        assertEq(30, egg_.getSteps());
        assertEq(4, sorted_.get(0).getIndex());
        egg_ = pagination_.getResults().getVal(sorted_.get(1));
        assertEq(PTITARD, egg_.getName());
        assertEq(5, egg_.getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        sorted_ = pagination_.getRendered();
        assertEq(2, sorted_.size());
        assertEq(PTITARD, sorted_.get(0).getName());
        assertEq(30, sorted_.get(0).getSteps());
        assertEq(4, sorted_.get(0).getIndex());
        assertEq(PTITARD, sorted_.get(1).getName());
        assertEq(5, sorted_.get(1).getSteps());
        assertEq(2, sorted_.get(1).getIndex());
        assertEq(0, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void newSearch2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.changeNbResultsPerPage(2);
        pagination_.getCriteria().setContentOfName("*P*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCriteria().setMinSteps(1L);
        pagination_.getCmpName().setPriority(2);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.getCriteria().setContentOfName("*L*");
        pagination_.newSearch();
        assertEq(0, pagination_.getResults().size());
        CustList<SortingEgg> sorted_;
        sorted_ = pagination_.getRendered();
        assertEq(0, sorted_.size());
        assertEq(-1, pagination_.getNumberPage());
        assertEq(-1, pagination_.getLine());
    }

    @Test
    public void clear1Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.changeNbResultsPerPage(2);
        pagination_.setDelta(3);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.clear();
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.getNumberPage());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.getLine());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.currentIndex());
    }

    @Test
    public void clear2Test() {
        Difficulty diff_ = new Difficulty();
        diff_.setIvPlayer((byte) 31);
        Player player_ = new Player(NICKNAME, null, diff_, true, data);
        Egg egg_;
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 15);
        player_.getBox().add(egg_);
        egg_ = new Egg(PIKACHU);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        egg_.versEclosion((short) 8);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 5);
        player_.getBox().add(egg_);
        egg_ = new Egg(NUCLEOS);
        egg_.versEclosion((short) 10);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        egg_.versEclosion((short) 30);
        player_.getBox().add(egg_);
        egg_ = new Egg(PTITARD);
        player_.getBox().add(egg_);
        egg_ = new Egg(LIMAGMA);
        player_.getBox().add(egg_);
        PaginationEgg pagination_;
        pagination_ = new PaginationEgg();
        pagination_.setTranslation(data, LANGUAGE);
        pagination_.changeNbResultsPerPage(3);
        pagination_.setDelta(1);
        pagination_.getCriteria().setContentOfName("L*");
        pagination_.getCriteria().setSearchModeName(SearchingMode.META_CHARACTER);
        pagination_.getCmpName().setPriority(1);
        pagination_.getCmpName().setIncreasing(SelectedBoolean.YES);
        pagination_.getCmpSteps().setPriority(1);
        pagination_.getCmpSteps().setIncreasing(SelectedBoolean.NO);
        pagination_.search(player_.getBox());
        pagination_.clear();
        assertEq(0, pagination_.getResults().size());
        assertEq(0, pagination_.getRendered().size());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.getNumberPage());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.getLine());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, pagination_.currentIndex());
    }

}
