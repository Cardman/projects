package aiki.game.fight;
import static aiki.EquallablePkUtil.assertEq;
import static code.util.opers.EquallableUtil.assertEq;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import aiki.game.fight.enums.FightState;
import aiki.game.params.Difficulty;
import aiki.game.player.Player;
import aiki.map.characters.Ally;
import aiki.map.characters.DualFight;
import aiki.map.characters.GymLeader;
import aiki.map.characters.GymTrainer;
import aiki.map.characters.TempTrainer;
import aiki.map.characters.TrainerLeague;
import aiki.map.characters.TrainerMultiFights;
import aiki.map.pokemon.Egg;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.PokemonTeam;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import code.util.CustList;
import code.util.EqList;
import code.util.StringList;

@SuppressWarnings("static-method")
public class FightInitializationTest extends InitializationDataBase {

    @Test
    public void initMultiplicity1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 4);
        assertTrue(fight_.getAcceptableChoices());
        assertEq(FightState.ATTAQUES, fight_.getState());
        assertEq(4, fight_.getMult());
        assertEq(4, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(0, fight_.getTeams().size());
        assertEq(2, fight_.getKos().size());
        assertTrue(!fight_.getKos().getVal(Fight.FOE));
        assertTrue(!fight_.getKos().getVal(Fight.PLAYER));
//        assertEq(2, fight_.getKos().getKeys(false).size());
//        assertTrue(fight_.getKos().contains(Fight.FOE));
//        assertTrue(fight_.getKos().contains(Fight.PLAYER));
    }

    @Test
    public void initUserTeam1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        assertEq(2, fight_.getUserTeam().getMembers().size());
    }

    @Test
    public void initUserTeam2Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> ally_ = new CustList<PkTrainer>();
        PkTrainer pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(ARTIKODIN);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(PIKACHU);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        DualFight dual_ = new DualFight();
        Ally allyTrainer_ = new Ally();
        allyTrainer_.setTeam(ally_);
        dual_.setAlly(allyTrainer_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 2);
        FightInitialization.initUserTeam(fight_,player_, diff_, dual_, _data_);
        assertEq(4, fight_.getUserTeam().getMembers().size());
    }

    @Test
    public void initEquipeDresseurHorsLigue1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        PokemonTeam foeTeamList_ = new PokemonTeam();
        foeTeamList_.setTeam(foeTeam_);
        foeTeamList_.setReward((short) 200);
        TrainerMultiFights trainer_ = new TrainerMultiFights();
        trainer_.setTeamsRewards(new CustList<PokemonTeam>(foeTeamList_));
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        FightInitialization.initEquipeDresseurHorsLigue(fight_,player_, diff_, trainer_, 0, _data_);
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initEquipeTrainerGym1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymTrainer trainer_ = new GymTrainer();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        FightInitialization.initEquipeTrainerGym(fight_,player_, diff_, trainer_, _data_);
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initEquipeLeaderGym1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        FightInitialization.initEquipeLeaderGym(fight_,player_, diff_, trainer_, _data_);
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initEquipeDresseurLigue1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        TrainerLeague trainer_ = new TrainerLeague();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        FightInitialization.initEquipeDresseurLigue(fight_,player_, diff_, trainer_, _data_);
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initEquipeTmpTrainer1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        DualFight dual_ = new DualFight();
        Ally allyTrainer_ = new Ally();
        CustList<PkTrainer> ally_ = new CustList<PkTrainer>();
        PkTrainer pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(ARTIKODIN);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(PIKACHU);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        allyTrainer_.setTeam(ally_);
        dual_.setAlly(allyTrainer_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        TempTrainer tempTrainer_ = new TempTrainer();
        tempTrainer_.setTeam(foeTeam_);
        tempTrainer_.setReward((short)200);
        dual_.setFoeTrainer(tempTrainer_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,dual_.getFoeTrainer().getMultiplicityFight());
        FightInitialization.initUserTeam(fight_,player_, diff_, dual_, _data_);
        FightInitialization.initEquipeTmpTrainer(fight_,player_, diff_, dual_, _data_);
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(1, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initWildPokemon1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        WildPk wildPokemon_ = new WildPk();
        wildPokemon_.setName(PIKACHU);
        wildPokemon_.setItem(MAGNET);
        wildPokemon_.setAbility(PARATONNERRE);
        wildPokemon_.setGender(Gender.NO_GENDER);
        wildPokemon_.setLevel((short) 3);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initMultiplicity(fight_,(byte) 1);
        FightInitialization.initUserTeam(fight_,player_, diff_, _data_);
        FightInitialization.initWildPokemon(fight_,player_, diff_, wildPokemon_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(1, fight_.getFoeTeam().getMembers().size());
    }

    @Test
    public void initFightGymLeader1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initFightGymTrainer1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymTrainer trainer_ = new GymTrainer();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initFightTrainerMultiFights1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        PokemonTeam foeTeamList_ = new PokemonTeam();
        foeTeamList_.setTeam(foeTeam_);
        foeTeamList_.setReward((short) 200);
        TrainerMultiFights trainer_ = new TrainerMultiFights();
        trainer_.setTeamsRewards(new CustList<PokemonTeam>(foeTeamList_));
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, 0, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initFightTrainerLeague1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        TrainerLeague trainer_ = new TrainerLeague();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(Fighter.BACK, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initFightDualFight1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        DualFight dual_ = new DualFight();
        Ally allyTrainer_ = new Ally();
        CustList<PkTrainer> ally_ = new CustList<PkTrainer>();
        PkTrainer pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(ARTIKODIN);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(PIKACHU);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        allyTrainer_.setTeam(ally_);
        dual_.setAlly(allyTrainer_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        TempTrainer tempTrainer_ = new TempTrainer();
        tempTrainer_.setTeam(foeTeam_);
        tempTrainer_.setReward((short)200);
        dual_.setFoeTrainer(tempTrainer_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_,player_, diff_, dual_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(4, fight_.getUserTeam().getMembers().size());
        assertEq(2, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(1, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getGroundPlace());
    }

    @Test
    public void initFightPokemon1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        WildPk foePokemon_ = new WildPk();
        foePokemon_.setName(ARTIKODIN);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, foePokemon_, _data_);
        assertEq(1, fight_.getPlayerMaxNumberFrontFighters());
        assertEq(2, fight_.getUserTeam().getMembers().size());
        assertEq(1, fight_.getFoeTeam().getMembers().size());
        assertEq(0, fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getGroundPlace());
        assertEq(0, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getGroundPlace());
        assertEq(1, fight_.getMult());
    }

    @Test
    public void initPositionsForUserTeam1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, pokemon_, _data_);
        FightInitialization.initPositionsForUserTeam(fight_);
        assertEq(2, fight_.getFirstPositPlayerFighters().size());
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 0));
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 1));
        assertEq(0, fight_.getFirstPositPlayerFighters().getVal((byte) 0).intValue());
        assertEq(Fighter.BACK, fight_.getFirstPositPlayerFighters().getVal((byte) 1).intValue());
    }

    @Test
    public void initPositionsForUserTeam2Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setMultiplicityFight((byte) 2);
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        FightInitialization.initPositionsForUserTeam(fight_);
        assertEq(2, fight_.getFirstPositPlayerFighters().size());
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 0));
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 1));
        assertEq(0, fight_.getFirstPositPlayerFighters().getVal((byte) 0).intValue());
        assertEq(1, fight_.getFirstPositPlayerFighters().getVal((byte) 1).intValue());
    }

    @Test
    public void initPositionsForUserTeam3Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> ally_ = new CustList<PkTrainer>();
        PkTrainer pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(ARTIKODIN);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        pokemonAlly_ = new PkTrainer();
        pokemonAlly_.setName(PIKACHU);
        pokemonAlly_.setItem(MAGNET);
        pokemonAlly_.setAbility(PARATONNERRE);
        pokemonAlly_.setGender(Gender.NO_GENDER);
        pokemonAlly_.setLevel((short) 3);
        pokemonAlly_.setMoves(new StringList(JACKPOT));
        ally_.add(pokemonAlly_);
        DualFight dual_ = new DualFight();
        Ally allyTrainer_ = new Ally();
        allyTrainer_.setTeam(ally_);
        dual_.setAlly(allyTrainer_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        TempTrainer trainer_ = new TempTrainer();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        dual_.setFoeTrainer(trainer_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, dual_, _data_);
        FightInitialization.initPositionsForUserTeam(fight_);
        assertEq(4, fight_.getFirstPositPlayerFighters().size());
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 0));
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 1));
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 2));
        assertTrue(fight_.getFirstPositPlayerFighters().contains((byte) 3));
        assertEq(0, fight_.getFirstPositPlayerFighters().getVal((byte) 0).intValue());
        assertEq(Fighter.BACK, fight_.getFirstPositPlayerFighters().getVal((byte) 1).intValue());
        assertEq(1, fight_.getFirstPositPlayerFighters().getVal((byte) 2).intValue());
        assertEq(Fighter.BACK, fight_.getFirstPositPlayerFighters().getVal((byte) 3).intValue());
    }

    @Test
    public void initPositionsForFoeTeam1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setMultiplicityFight((byte) 2);
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        FightInitialization.initPositionsForFoeTeam(fight_);
        assertEq(3, fight_.getFirstPositFoeFighters().size());
        assertTrue(fight_.getFirstPositFoeFighters().contains((byte) 0));
        assertTrue(fight_.getFirstPositFoeFighters().contains((byte) 1));
        assertTrue(fight_.getFirstPositFoeFighters().contains((byte) 2));
        assertEq(0, fight_.getFirstPositFoeFighters().getVal((byte) 0).intValue());
        assertEq(1, fight_.getFirstPositFoeFighters().getVal((byte) 1).intValue());
        assertEq(Fighter.BACK, fight_.getFirstPositFoeFighters().getVal((byte) 2).intValue());
    }

    @Test
    public void initGlobalMoves1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, pokemon_, _data_);
        FightInitialization.initPositionsForUserTeam(fight_);
        FightInitialization.initGlobalMoves(fight_,_data_);
        assertEq(12, fight_.getEnabledMoves().size());
        assertTrue(fight_.getEnabledMoves().contains(REQUIEM));
        assertTrue(fight_.getEnabledMoves().contains(ORAGE));
        assertTrue(fight_.getEnabledMoves().contains(ORAGE_BIS));
        assertTrue(fight_.getEnabledMoves().contains(DANSE_PLUIE));
        assertTrue(fight_.getEnabledMoves().contains(ZENITH));
        assertTrue(fight_.getEnabledMoves().contains(GRAVITE));
        assertTrue(fight_.getEnabledMoves().contains(BROUHAHA));
        assertTrue(fight_.getEnabledMoves().contains(ZONE_ETRANGE));
        assertTrue(fight_.getEnabledMoves().contains(DISTORSION));
        assertTrue(fight_.getEnabledMoves().contains(ZONE_MAGIQUE));
        assertTrue(fight_.getEnabledMoves().contains(TEMPETESABLE));
        assertTrue(fight_.getEnabledMoves().contains(CHAMP_BRUMEUX));
        ActivityOfMove activity_ = fight_.getEnabledMoves().getVal(REQUIEM);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(ORAGE);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(ORAGE_BIS);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(ZENITH);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(GRAVITE);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(CHAMP_BRUMEUX);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(BROUHAHA);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(ZONE_ETRANGE);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(DISTORSION);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(ZONE_MAGIQUE);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
        activity_ = fight_.getEnabledMoves().getVal(TEMPETESABLE);
        assertEq(0, activity_.getNbTurn());
        assertTrue(!activity_.isEnabled());
        assertTrue(activity_.isIncrementCount());
    }

    @Test
    public void initRelationships1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(MAGNET);
        pokemon_.setAbility(PARATONNERRE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(PARATONNERRE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 2);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        FightInitialization.initPositionsForUserTeam(fight_);
        FightInitialization.initGlobalMoves(fight_,_data_);
        FightInitialization.initRelationships(fight_,_data_);
        assertEq(8, fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().size());
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertEq(8, fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().size());
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertEq(8, fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().size());
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertEq(8, fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().size());
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(TIPHON,POKEMON_FOE_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_PLAYER_FIGHTER_ONE)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ZERO)));
        assertTrue(fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).getTrappingMoves().contains(new MoveTeamPosition(SIPHON,POKEMON_FOE_FIGHTER_ONE)));
    }

    @Test
    public void initFight1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(MULTITYPE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 1);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        FightInitialization.initFight(fight_,_data_);
        assertTrue(!fight_.getEnabledMoves().getVal(ZENITH).isEnabled());
        StringList list_ = fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTypes();
        assertEq(1, list_.size());
        assertTrue(list_.containsObj(ELECTRIQUE));
    }

    @Test
    public void sortedTeamMembersByPosition1Test() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,true,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(MULTITYPE);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        Egg egg_ = new Egg(PIKACHU);
        player_.getTeam().add(egg_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(PIKACHU);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 1);
        Fight fight_ = FightFacade.newFight();
        FightInitialization.initFight(fight_, player_, diff_, trainer_, _data_);
        FightInitialization.initFight(fight_,_data_);
        EqList<TeamPosition> userTeam_ = fight_.sortedTeamMembersByPosition(Fight.PLAYER);
        assertEq(3, userTeam_.size());
        assertEq(POKEMON_PLAYER_FIGHTER_ZERO, userTeam_.get(0));
        assertEq(POKEMON_PLAYER_FIGHTER_ONE, userTeam_.get(1));
        assertEq(POKEMON_PLAYER_FIGHTER_THREE, userTeam_.get(2));
    }

}
