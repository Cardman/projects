package aiki.game.fight;
import static aiki.db.EquallablePkUtil.assertEq;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import aiki.fight.pokemon.NameLevel;
import aiki.game.fight.actions.ActionMove;
import aiki.game.params.Difficulty;
import aiki.map.levels.enums.EnvironmentType;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import aiki.util.Coords;
import aiki.util.LevelPoint;
import aiki.util.Point;
import code.maths.Rate;
import code.util.CustList;
import code.util.EqList;
import code.util.NumberMap;
import code.util.Numbers;
import code.util.PairNumber;
import code.util.StringList;
import code.util.StringMap;
import code.util.TreeMap;


public class FightSimulationTest extends InitializationDataBase {

    @Test
    public void initializeFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(6, 0, 4, 4), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
//        assertEq(2, foeNumbers_.last().size());
//        assertEq(TARTARD, foeNumbers_.last().first().getName());
//        assertEq(ATTENTION, foeNumbers_.last().first().getAbility());
//        assertEq(NULL_REF, foeNumbers_.last().first().getItem());
//        assertEq(35, foeNumbers_.last().first().getLevel());
//        assertEq(1, foeNumbers_.last().first().getMoves().size());
//        assertEq(PISTOLET_A_O, foeNumbers_.last().first().getMoves().first());
//        assertEq(TARTARD, foeNumbers_.last().last().getName());
//        assertEq(ATTENTION, foeNumbers_.last().last().getAbility());
//        assertEq(NULL_REF, foeNumbers_.last().last().getItem());
//        assertEq(38, foeNumbers_.last().last().getLevel());
//        assertEq(1, foeNumbers_.last().last().getMoves().size());
//        assertEq(PISTOLET_A_O, foeNumbers_.last().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
//        assertEq(1, mult_.get(1).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
//        assertEq(1, maxActions_.get(1).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
//        assertEq(0, objects_.get(1).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
//        assertEq(0, usedStones_.get(1).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
        assertEq(2, fightSimulation_.getFoeTeam().size());
        assertEq(1, fightSimulation_.getFirstMult());
        assertEq(2, fightSimulation_.nbRounds());
    }

    @Test
    public void initializeFight2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 0, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(0, 0, 1, 1), fightSimulation_.getFoeCoords());
        assertEq(0, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(3, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(4, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
    }

    @Test
    public void initializeFight3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(2, 0, 2, 0), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(2, 0, 2, 0), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(5, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(8, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(2, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(2, allyNumbers_.size());
        assertEq(PIKACHU, allyNumbers_.first().getName());
        assertEq(ATTENTION, allyNumbers_.first().getAbility());
        assertEq(NULL_REF, allyNumbers_.first().getItem());
        assertEq(25, allyNumbers_.first().getLevel());
        assertEq(2, allyNumbers_.first().getMoves().size());
        assertTrue(allyNumbers_.first().getMoves().containsObj(CHARGE));
        assertTrue(allyNumbers_.first().getMoves().containsObj(JACKPOT));
        assertEq(PIKACHU, allyNumbers_.last().getName());
        assertEq(ATTENTION, allyNumbers_.last().getAbility());
        assertEq(NULL_REF, allyNumbers_.last().getItem());
        assertEq(28, allyNumbers_.last().getLevel());
        assertEq(1, allyNumbers_.last().getMoves().size());
        assertEq(TONNERRE, allyNumbers_.last().getMoves().first());
    }

    @Test
    public void initializeFight4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 1, 7), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(1, 0, 5, 1, 1, 7), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(3, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(4, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
    }

    @Test
    public void initializeFight5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(1, 0, 5, 1, 4, 1), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(1, 0, 5, 1, 4, 1), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(5, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(8, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
    }

    @Test
    public void initializeFight6Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(0, 0, 1, 1), 1, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(0, 0, 1, 1), fightSimulation_.getFoeCoords());
        assertEq(1, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(13, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(14, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
    }

    @Test
    public void initializeFight7Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 1, 4, 4), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertTrue(!fightSimulation_.isFreeTeams());
        assertEq(newCoords(6, 1, 4, 4), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(TARTARD, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().first().getMoves().first());
        assertEq(TARTARD, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.first().last().getMoves().first());
//        assertEq(2, foeNumbers_.last().size());
//        assertEq(TARTARD, foeNumbers_.last().first().getName());
//        assertEq(ATTENTION, foeNumbers_.last().first().getAbility());
//        assertEq(NULL_REF, foeNumbers_.last().first().getItem());
//        assertEq(35, foeNumbers_.last().first().getLevel());
//        assertEq(1, foeNumbers_.last().first().getMoves().size());
//        assertEq(PISTOLET_A_O, foeNumbers_.last().first().getMoves().first());
//        assertEq(TARTARD, foeNumbers_.last().last().getName());
//        assertEq(ATTENTION, foeNumbers_.last().last().getAbility());
//        assertEq(NULL_REF, foeNumbers_.last().last().getItem());
//        assertEq(38, foeNumbers_.last().last().getLevel());
//        assertEq(1, foeNumbers_.last().last().getMoves().size());
//        assertEq(PISTOLET_A_O, foeNumbers_.last().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
//        assertEq(1, mult_.get(1).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
//        assertEq(1, maxActions_.get(1).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
//        assertEq(0, objects_.get(1).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
//        assertEq(0, usedStones_.get(1).size());
        CustList<PkTrainer> allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
    }

    @Test
    public void setTeams1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PICHU);
        pk_.setAbility(ATTENTION);
        foeTeam_.add(new PkTrainer(pk_, new StringList(CHARGE)));
        fightSimulation_.setTeams(new CustList<PkTrainer>(), foeTeam_, 1, 1, EnvironmentType.ROCK, _data_.getMap().getBegin());
        assertTrue(fightSimulation_.isFreeTeams());
        CustList<PkTrainer> allyNumbers_;
        allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(0, allyNumbers_.size());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(1, foeNumbers_.first().size());
        assertEq(PICHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(1, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(CHARGE, foeNumbers_.first().first().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        assertEq(EnvironmentType.ROCK, fightSimulation_.getEnvironment());
    }

    @Test
    public void setTeams2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        CustList<PkTrainer> foeTeam_;
        foeTeam_ = new CustList<PkTrainer>();
        Pokemon pk_ = new WildPk();
        pk_.setName(PICHU);
        pk_.setAbility(ATTENTION);
        foeTeam_.add(new PkTrainer(pk_, new StringList(CHARGE)));
        CustList<PkTrainer> allyTeam_;
        allyTeam_ = new CustList<PkTrainer>();
        pk_ = new WildPk();
        pk_.setName(PIKACHU);
        pk_.setAbility(ATTENTION);
        allyTeam_.add(new PkTrainer(pk_, new StringList(CHARGE)));
        fightSimulation_.setTeams(allyTeam_, foeTeam_, 2, 1, EnvironmentType.ROCK, _data_.getMap().getBegin());
        assertTrue(fightSimulation_.isFreeTeams());
        CustList<PkTrainer> allyNumbers_;
        allyNumbers_ = fightSimulation_.getAllyTeam();
        assertEq(1, allyNumbers_.size());
        assertEq(PIKACHU, allyNumbers_.first().getName());
        assertEq(ATTENTION, allyNumbers_.first().getAbility());
        assertEq(NULL_REF, allyNumbers_.first().getItem());
        assertEq(1, allyNumbers_.first().getLevel());
        assertEq(1, allyNumbers_.first().getMoves().size());
        assertEq(CHARGE, allyNumbers_.first().getMoves().first());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(1, foeNumbers_.first().size());
        assertEq(PICHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(1, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(CHARGE, foeNumbers_.first().first().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(2, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        assertEq(EnvironmentType.ROCK, fightSimulation_.getEnvironment());
    }

    @Test
    public void initializeFights1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertEq(newCoords(6, 0, 4, 8), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(2, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(35, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(38, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        assertEq(2, foeNumbers_.last().size());
        assertEq(TARTARD, foeNumbers_.last().first().getName());
        assertEq(ATTENTION, foeNumbers_.last().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.last().first().getItem());
        assertEq(35, foeNumbers_.last().first().getLevel());
        assertEq(1, foeNumbers_.last().first().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.last().first().getMoves().first());
        assertEq(TARTARD, foeNumbers_.last().last().getName());
        assertEq(ATTENTION, foeNumbers_.last().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.last().last().getItem());
        assertEq(38, foeNumbers_.last().last().getLevel());
        assertEq(1, foeNumbers_.last().last().getMoves().size());
        assertEq(PISTOLET_A_O, foeNumbers_.last().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(2, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        assertEq(1, mult_.get(1).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(2, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        assertEq(1, maxActions_.get(1).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(2, objects_.size());
        assertEq(0, objects_.get(0).size());
        assertEq(0, objects_.get(1).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(2, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
        assertEq(0, usedStones_.get(1).size());
    }

    @Test
    public void initializeFights2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, _data_);
        assertEq(newCoords(0, 0, 1, 1), fightSimulation_.getFoeCoords());
        assertEq(0, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(3, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(4, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
    }

    @Test
    public void initializeFights3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertEq(newCoords(2, 0, 2, 0), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(5, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(8, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(2, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
    }

    @Test
    public void initializeFights4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 1, 7), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertEq(newCoords(1, 0, 5, 1, 1, 7), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(3, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(4, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
    }

    @Test
    public void initializeFights5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(1, 0, 5, 1, 4, 1), CustList.INDEX_NOT_FOUND_ELT, _data_);
        assertEq(newCoords(1, 0, 5, 1, 4, 1), fightSimulation_.getFoeCoords());
        assertEq(CustList.INDEX_NOT_FOUND_ELT, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(5, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(8, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
    }

    @Test
    public void initializeFights6Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 1, _data_);
        assertEq(newCoords(0, 0, 1, 1), fightSimulation_.getFoeCoords());
        assertEq(1, fightSimulation_.getNoFight());
        CustList<CustList<PkTrainer>> foeNumbers_;
        Numbers<Byte> mult_;
        Numbers<Integer> maxActions_;
        EqList<StringList> objects_;
        CustList<EqList<StringList>> usedStones_;
        foeNumbers_ = fightSimulation_.getFoeTeams();
        assertEq(1, foeNumbers_.size());
        assertEq(2, foeNumbers_.first().size());
        assertEq(PIKACHU, foeNumbers_.first().first().getName());
        assertEq(ATTENTION, foeNumbers_.first().first().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().first().getItem());
        assertEq(13, foeNumbers_.first().first().getLevel());
        assertEq(1, foeNumbers_.first().first().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().first().getMoves().first());
        assertEq(PIKACHU, foeNumbers_.first().last().getName());
        assertEq(ATTENTION, foeNumbers_.first().last().getAbility());
        assertEq(NULL_REF, foeNumbers_.first().last().getItem());
        assertEq(14, foeNumbers_.first().last().getLevel());
        assertEq(1, foeNumbers_.first().last().getMoves().size());
        assertEq(JACKPOT, foeNumbers_.first().last().getMoves().first());
        mult_ = fightSimulation_.getMult();
        assertEq(1, mult_.size());
        assertEq(1, mult_.get(0).intValue());
        maxActions_ = fightSimulation_.getMaxActions();
        assertEq(1, maxActions_.size());
        assertEq(1, maxActions_.get(0).intValue());
        objects_ = fightSimulation_.getItems();
        assertEq(1, objects_.size());
        assertEq(0, objects_.get(0).size());
        usedStones_ = fightSimulation_.getUsedStones();
        assertEq(1, usedStones_.size());
        assertEq(0, usedStones_.get(0).size());
    }

    @Test
    public void possiblesInitialMoves1Test() {
        String name_ = PTITARD;
        short level_ = 3;
        StringList list_ = FightSimulation.possiblesInitialMoves(name_, level_, _data_);
        assertEq(25, list_.size());
        assertTrue(list_.containsObj(BALL_GLACE));
        assertTrue(list_.containsObj(BLABLA_DODO));
        assertTrue(list_.containsObj(BOUL_ARMURE));
        assertTrue(list_.containsObj(BRUME));
        assertTrue(list_.containsObj(BUEE_NOIRE));
        assertTrue(list_.containsObj(BULLES_D_O));
        assertTrue(list_.containsObj(CHARGE));
        assertTrue(list_.containsObj(CLONAGE));
        assertTrue(list_.containsObj(COPIE));
        assertTrue(list_.containsObj(COUP_D_BOULE));
        assertTrue(list_.containsObj(DAMOCLES));
        assertTrue(list_.containsObj(ECLAIR));
        assertTrue(list_.containsObj(EFFORT));
        assertTrue(list_.containsObj(ENCORE));
        assertTrue(list_.containsObj(LIRE_ESPRIT));
        assertTrue(list_.containsObj(PLAQUAGE));
        assertTrue(list_.containsObj(PLONGEE));
        assertTrue(list_.containsObj(REGENERATION));
        assertTrue(list_.containsObj(RONFLEMENT));
        assertTrue(list_.containsObj(TENACITE));
        assertTrue(list_.containsObj(TIR_DE_BOUE));
        assertTrue(list_.containsObj(TOURNIQUET));
        assertTrue(list_.containsObj(TREMPETTE));
        assertTrue(list_.containsObj(VANTARDISE));
        assertTrue(list_.containsObj(VENT_GLACE));
    }

    @Test
    public void possiblesInitialMoves2Test() {
        String name_ = TETARTE;
        short level_ = 24;
        StringList list_ = FightSimulation.possiblesInitialMoves(name_, level_, _data_);
        assertEq(36, list_.size());
        assertTrue(list_.containsObj(BALL_GLACE));
        assertTrue(list_.containsObj(BLABLA_DODO));
        assertTrue(list_.containsObj(BOUL_ARMURE));
        assertTrue(list_.containsObj(BRUME));
        assertTrue(list_.containsObj(BUEE_NOIRE));
        assertTrue(list_.containsObj(BULLES_D_O));
        assertTrue(list_.containsObj(CHARGE));
        assertTrue(list_.containsObj(CLONAGE));
        assertTrue(list_.containsObj(COPIE));
        assertTrue(list_.containsObj(COUD_BOUE));
        assertTrue(list_.containsObj(COUP_D_BOULE));
        assertTrue(list_.containsObj(DAMOCLES));
        assertTrue(list_.containsObj(DANSE_PLUIE));
        assertTrue(list_.containsObj(ECLAIR));
        assertTrue(list_.containsObj(ECUME));
        assertTrue(list_.containsObj(EFFORT));
        assertTrue(list_.containsObj(ENCORE));
        assertTrue(list_.containsObj(FRAPPE_ATLAS));
        assertTrue(list_.containsObj(HYPNOSE));
        assertTrue(list_.containsObj(LIRE_ESPRIT));
        assertTrue(list_.containsObj(METRONOME));
        assertTrue(list_.containsObj(PISTOLET_A_O));
        assertTrue(list_.containsObj(PLAQUAGE));
        assertTrue(list_.containsObj(PLONGEE));
        assertTrue(list_.containsObj(POINGLACE));
        assertTrue(list_.containsObj(REGENERATION));
        assertTrue(list_.containsObj(RIPOSTE));
        assertTrue(list_.containsObj(RONFLEMENT));
        assertTrue(list_.containsObj(TENACITE));
        assertTrue(list_.containsObj(TORGNOLES));
        assertTrue(list_.containsObj(TOURNIQUET));
        assertTrue(list_.containsObj(TREMPETTE));
        assertTrue(list_.containsObj(ULTIMAPOING));
        assertTrue(list_.containsObj(ULTIMAWASHI));
        assertTrue(list_.containsObj(VANTARDISE));
        assertTrue(list_.containsObj(VENT_GLACE));
    }

    @Test
    public void possiblesInitialMoves3Test() {
        String name_ = TETARTE;
        short level_ = 25;
        StringList list_ = FightSimulation.possiblesInitialMoves(name_, level_, _data_);
        assertEq(37, list_.size());
        assertTrue(list_.containsObj(BALL_GLACE));
        assertTrue(list_.containsObj(BLABLA_DODO));
        assertTrue(list_.containsObj(BOUL_ARMURE));
        assertTrue(list_.containsObj(BRUME));
        assertTrue(list_.containsObj(BUEE_NOIRE));
        assertTrue(list_.containsObj(BULLES_D_O));
        assertTrue(list_.containsObj(CHARGE));
        assertTrue(list_.containsObj(CLONAGE));
        assertTrue(list_.containsObj(COPIE));
        assertTrue(list_.containsObj(COUD_BOUE));
        assertTrue(list_.containsObj(COUP_D_BOULE));
        assertTrue(list_.containsObj(DAMOCLES));
        assertTrue(list_.containsObj(DANSE_PLUIE));
        assertTrue(list_.containsObj(ECLAIR));
        assertTrue(list_.containsObj(ECUME));
        assertTrue(list_.containsObj(EFFORT));
        assertTrue(list_.containsObj(ENCORE));
        assertTrue(list_.containsObj(FRAPPE_ATLAS));
        assertTrue(list_.containsObj(HYPNOSE));
        assertTrue(list_.containsObj(LIRE_ESPRIT));
        assertTrue(list_.containsObj(METRONOME));
        assertTrue(list_.containsObj(PISTOLET_A_O));
        assertTrue(list_.containsObj(PLAQUAGE));
        assertTrue(list_.containsObj(PLONGEE));
        assertTrue(list_.containsObj(POINGLACE));
        assertTrue(list_.containsObj(REGENERATION));
        assertTrue(list_.containsObj(RIPOSTE));
        assertTrue(list_.containsObj(RONFLEMENT));
        assertTrue(list_.containsObj(TENACITE));
        assertTrue(list_.containsObj(TIR_DE_BOUE));
        assertTrue(list_.containsObj(TORGNOLES));
        assertTrue(list_.containsObj(TOURNIQUET));
        assertTrue(list_.containsObj(TREMPETTE));
        assertTrue(list_.containsObj(ULTIMAPOING));
        assertTrue(list_.containsObj(ULTIMAWASHI));
        assertTrue(list_.containsObj(VANTARDISE));
        assertTrue(list_.containsObj(VENT_GLACE));
    }

    @Test
    public void possiblesInitialMoves4Test() {
        String name_ = TETARTE;
        short level_ = 100;
        StringList list_ = FightSimulation.possiblesInitialMoves(name_, level_, _data_);
        assertEq(41, list_.size());
        assertTrue(list_.containsObj(BALL_GLACE));
        assertTrue(list_.containsObj(BLABLA_DODO));
        assertTrue(list_.containsObj(BOUL_ARMURE));
        assertTrue(list_.containsObj(BRUME));
        assertTrue(list_.containsObj(BOUE_BOMBE));
        assertTrue(list_.containsObj(BUEE_NOIRE));
        assertTrue(list_.containsObj(BULLES_D_O));
        assertTrue(list_.containsObj(CHARGE));
        assertTrue(list_.containsObj(CLONAGE));
        assertTrue(list_.containsObj(COGNOBIDON));
        assertTrue(list_.containsObj(COPIE));
        assertTrue(list_.containsObj(COUD_BOUE));
        assertTrue(list_.containsObj(COUP_D_BOULE));
        assertTrue(list_.containsObj(DAMOCLES));
        assertTrue(list_.containsObj(DANSE_PLUIE));
        assertTrue(list_.containsObj(ECLAIR));
        assertTrue(list_.containsObj(ECUME));
        assertTrue(list_.containsObj(EFFORT));
        assertTrue(list_.containsObj(ENCORE));
        assertTrue(list_.containsObj(FRAPPE_ATLAS));
        assertTrue(list_.containsObj(HYDROCANON));
        assertTrue(list_.containsObj(HYPNOSE));
        assertTrue(list_.containsObj(LIRE_ESPRIT));
        assertTrue(list_.containsObj(METRONOME));
        assertTrue(list_.containsObj(PISTOLET_A_O));
        assertTrue(list_.containsObj(PLAQUAGE));
        assertTrue(list_.containsObj(PLONGEE));
        assertTrue(list_.containsObj(POINGLACE));
        assertTrue(list_.containsObj(REGENERATION));
        assertTrue(list_.containsObj(REVEIL_FORCE));
        assertTrue(list_.containsObj(RIPOSTE));
        assertTrue(list_.containsObj(RONFLEMENT));
        assertTrue(list_.containsObj(TENACITE));
        assertTrue(list_.containsObj(TIR_DE_BOUE));
        assertTrue(list_.containsObj(TORGNOLES));
        assertTrue(list_.containsObj(TOURNIQUET));
        assertTrue(list_.containsObj(TREMPETTE));
        assertTrue(list_.containsObj(ULTIMAPOING));
        assertTrue(list_.containsObj(ULTIMAWASHI));
        assertTrue(list_.containsObj(VANTARDISE));
        assertTrue(list_.containsObj(VENT_GLACE));
    }

    @Test
    public void possiblesInitialMoves5Test() {
        String name_ = PTITARD;
        short level_ = 100;
        StringList list_ = FightSimulation.possiblesInitialMoves(name_, level_, _data_);
        assertEq(34, list_.size());
        assertTrue(list_.containsObj(BALL_GLACE));
        assertTrue(list_.containsObj(BLABLA_DODO));
        assertTrue(list_.containsObj(BOUE_BOMBE));
        assertTrue(list_.containsObj(BOUL_ARMURE));
        assertTrue(list_.containsObj(BRUME));
        assertTrue(list_.containsObj(BUEE_NOIRE));
        assertTrue(list_.containsObj(BULLES_D_O));
        assertTrue(list_.containsObj(CHARGE));
        assertTrue(list_.containsObj(CLONAGE));
        assertTrue(list_.containsObj(COGNOBIDON));
        assertTrue(list_.containsObj(COPIE));
        assertTrue(list_.containsObj(COUP_D_BOULE));
        assertTrue(list_.containsObj(DAMOCLES));
        assertTrue(list_.containsObj(DANSE_PLUIE));
        assertTrue(list_.containsObj(ECLAIR));
        assertTrue(list_.containsObj(ECUME));
        assertTrue(list_.containsObj(EFFORT));
        assertTrue(list_.containsObj(ENCORE));
        assertTrue(list_.containsObj(HYDROCANON));
        assertTrue(list_.containsObj(HYPNOSE));
        assertTrue(list_.containsObj(LIRE_ESPRIT));
        assertTrue(list_.containsObj(PISTOLET_A_O));
        assertTrue(list_.containsObj(PLAQUAGE));
        assertTrue(list_.containsObj(PLONGEE));
        assertTrue(list_.containsObj(REGENERATION));
        assertTrue(list_.containsObj(REVEIL_FORCE));
        assertTrue(list_.containsObj(RONFLEMENT));
        assertTrue(list_.containsObj(TENACITE));
        assertTrue(list_.containsObj(TIR_DE_BOUE));
        assertTrue(list_.containsObj(TORGNOLES));
        assertTrue(list_.containsObj(TOURNIQUET));
        assertTrue(list_.containsObj(TREMPETTE));
        assertTrue(list_.containsObj(VANTARDISE));
        assertTrue(list_.containsObj(VENT_GLACE));
    }

    @Test
    public void addPokemonPlayer1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        assertEq(1, fightSimulation_.getTeam().size());
        PokemonPlayer pk_ = fightSimulation_.getTeam().first();
        assertEq(PTITARD, pk_.getName());
        assertEq(Gender.NO_GENDER, pk_.getGender());
        assertEq(3, pk_.getLevel());
        assertEq(MULTI_EXP, pk_.getItem());
        assertEq(ABSORB_EAU, pk_.getAbility());
        assertEq(1, pk_.getMoves().size());
        assertEq(30, pk_.getMoves().getVal(CHARGE).getCurrent());
        assertEq(30, pk_.getMoves().getVal(CHARGE).getMax());
        assertEq(2, fightSimulation_.getItems().size());
        assertEq(1, fightSimulation_.getItems().first().size());
        assertEq(MULTI_EXP, fightSimulation_.getItems().first().first());
        assertEq(1, fightSimulation_.getItems().last().size());
        assertEq(MULTI_EXP, fightSimulation_.getItems().first().first());
    }

    @Test
    public void setPokemonPlayerObject1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObject(0, OEUF_CHANCE);
        assertEq(1, fightSimulation_.getTeam().size());
        PokemonPlayer pk_ = fightSimulation_.getTeam().first();
        assertEq(PTITARD, pk_.getName());
        assertEq(Gender.NO_GENDER, pk_.getGender());
        assertEq(3, pk_.getLevel());
        assertEq(OEUF_CHANCE, pk_.getItem());
        assertEq(ABSORB_EAU, pk_.getAbility());
        assertEq(1, pk_.getMoves().size());
        assertEq(30, pk_.getMoves().getVal(CHARGE).getCurrent());
        assertEq(30, pk_.getMoves().getVal(CHARGE).getMax());
        assertEq(2, fightSimulation_.getItems().size());
        assertEq(1, fightSimulation_.getItems().first().size());
        assertEq(OEUF_CHANCE, fightSimulation_.getItems().first().first());
        assertEq(1, fightSimulation_.getItems().last().size());
        assertEq(OEUF_CHANCE, fightSimulation_.getItems().first().first());
    }

    @Test
    public void setInitialMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObject(0, OEUF_CHANCE);
        fightSimulation_.setInitialMoves(0, new StringList(CHARGEUR),_data_);
        assertEq(1, fightSimulation_.getTeam().size());
        PokemonPlayer pk_ = fightSimulation_.getTeam().first();
        assertEq(PTITARD, pk_.getName());
        assertEq(Gender.NO_GENDER, pk_.getGender());
        assertEq(3, pk_.getLevel());
        assertEq(OEUF_CHANCE, pk_.getItem());
        assertEq(ABSORB_EAU, pk_.getAbility());
        assertEq(1, pk_.getMoves().size());
        assertEq(20, pk_.getMoves().getVal(CHARGEUR).getCurrent());
        assertEq(20, pk_.getMoves().getVal(CHARGEUR).getMax());
        assertEq(2, fightSimulation_.getItems().size());
        assertEq(1, fightSimulation_.getItems().first().size());
        assertEq(OEUF_CHANCE, fightSimulation_.getItems().first().first());
        assertEq(1, fightSimulation_.getItems().last().size());
        assertEq(OEUF_CHANCE, fightSimulation_.getItems().first().first());
    }

    @Test
    public void removePokemonPlayer1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObject(0, OEUF_CHANCE);
        fightSimulation_.removePokemonPlayer(0);
        assertEq(0, fightSimulation_.getTeam().size());
    }
    @Test
    public void getFirstNextEvolutions1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        CustList<StringMap<Short>> list_;
        list_ = fightSimulation_.getFirstNextEvolutions(_data_);
        assertEq(1, list_.size());
        assertEq(1, list_.first().size());
        assertEq(25, list_.first().getVal(TETARTE).intValue());
    }

    @Test
    public void getFirstNextEvolutions2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 26);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        CustList<StringMap<Short>> list_;
        list_ = fightSimulation_.getFirstNextEvolutions(_data_);
        assertEq(1, list_.size());
        assertEq(0, list_.first().size());
    }

    @Test
    public void setNextEvolutions1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(1, list_.first().size());
        assertEq(TETARTE, list_.first().first().getName());
        assertEq(26, list_.first().first().getLevel());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(2, available_.first().size());
        assertEq(26, available_.first().getVal(TARTARD).intValue());
        assertEq(26, available_.first().getVal(TARPAUD).intValue());
    }

    @Test
    public void setNextEvolutions2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, NULL_REF, (short) 26, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(0, list_.first().size());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(1, available_.first().size());
        assertEq(25, available_.first().getVal(TETARTE).intValue());
    }

    @Test
    public void setNextEvolutions3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(2, list_.first().size());
        assertEq(TETARTE, list_.first().first().getName());
        assertEq(26, list_.first().first().getLevel());
        assertEq(TARTARD, list_.first().get(1).getName());
        assertEq(26, list_.first().get(1).getLevel());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(0, available_.first().size());
    }

    @Test
    public void setNextEvolutions4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 27, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(2, list_.first().size());
        assertEq(TETARTE, list_.first().first().getName());
        assertEq(26, list_.first().first().getLevel());
        assertEq(TARTARD, list_.first().get(1).getName());
        assertEq(27, list_.first().get(1).getLevel());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(0, available_.first().size());
    }

    @Test
    public void cancelEvolutions1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.cancelEvolutions(0, 0, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(0, list_.first().size());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(1, available_.first().size());
        assertEq(25, available_.first().getVal(TETARTE).intValue());
    }

    @Test
    public void cancelEvolutions2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 27, _data_);
        fightSimulation_.cancelEvolutions(0, 1, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(1, list_.first().size());
        assertEq(TETARTE, list_.first().first().getName());
        assertEq(26, list_.first().first().getLevel());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(2, available_.first().size());
        assertEq(26, available_.first().getVal(TARTARD).intValue());
        assertEq(26, available_.first().getVal(TARPAUD).intValue());
    }

    @Test
    public void cancelEvolutions3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.cancelEvolutions(0, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(0, list_.first().size());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(1, available_.first().size());
        assertEq(25, available_.first().getVal(TETARTE).intValue());
    }

    @Test
    public void cancelEvolutions4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 27, _data_);
        fightSimulation_.cancelEvolutions(0, _data_);
        CustList<EqList<NameLevel>> list_;
        list_ = fightSimulation_.getEvolutions();
        assertEq(1, list_.size());
        assertEq(1, list_.first().size());
        assertEq(TETARTE, list_.first().first().getName());
        assertEq(26, list_.first().first().getLevel());
        CustList<StringMap<Short>> available_;
        available_ = fightSimulation_.getAvailableEvolutions();
        assertEq(1, available_.size());
        assertEq(2, available_.first().size());
        assertEq(26, available_.first().getVal(TARTARD).intValue());
        assertEq(26, available_.first().getVal(TARPAUD).intValue());
    }

    @Test
    public void nbRound1Test() {
        assertEq(3, FightSimulation.nbRound((byte) 1, 3));
        assertEq(2, FightSimulation.nbRound((byte) 2, 4));
        assertEq(3, FightSimulation.nbRound((byte) 2, 5));
    }

    @Test
    public void initializeFrontFighters1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        CustList<CustList<NumberMap<Byte,Byte>>> list_;
        list_ = fightSimulation_.getFrontFighters();
        assertEq(2, list_.size());
        assertEq(2, list_.first().size());
        assertEq(1, list_.first().first().size());
        assertEq(Fighter.BACK, list_.first().first().getVal((byte) 0).intValue());
        assertEq(1, list_.first().last().size());
        assertEq(Fighter.BACK, list_.first().last().getVal((byte) 0).intValue());
        assertEq(2, list_.last().size());
        assertEq(1, list_.last().first().size());
        assertEq(Fighter.BACK, list_.last().first().getVal((byte) 0).intValue());
        assertEq(1, list_.last().last().size());
        assertEq(Fighter.BACK, list_.last().last().getVal((byte) 0).intValue());
    }

    @Test
    public void validFrontFighters1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)0);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte) 0, (byte) 0);
        fightSimulation_.getFrontFighters().first().first().put((byte) 1, (byte) 1);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte) 0, (byte) 0);
        fightSimulation_.getFrontFighters().first().first().put((byte) 1, (byte) 1);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 30);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)1);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, (byte)0);
        assertTrue(fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters6Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, (byte)0);
        assertTrue(fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters7Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 30);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)1);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters8Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 30);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)2);
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void validFrontFighters9Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 30);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)1);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)0);
        assertTrue(!fightSimulation_.validFrontFighters());
    }
    @Test
    public void validFrontFighters10Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(2, 0, 2, 0), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 30);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.initializeFrontFighters();
        assertTrue(!fightSimulation_.validFrontFighters());
    }

    @Test
    public void indexesFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        Numbers<Byte> indexes_ = fightSimulation_.indexesFight((byte) 0);
        assertEq(2, indexes_.size());
        assertEq(1, indexes_.get(0).intValue());
        assertEq(0, indexes_.get(1).intValue());
        indexes_ = fightSimulation_.indexesFight((byte) 1);
        assertEq(2, indexes_.size());
        assertEq(0, indexes_.get(0).intValue());
        assertEq(1, indexes_.get(1).intValue());
    }

    @Test
    public void indexesFight2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, Fighter.BACK);
        Numbers<Byte> indexes_ = fightSimulation_.indexesFight((byte) 0);
        assertEq(3, indexes_.size());
        assertEq(2, indexes_.get(0).intValue());
        assertEq(0, indexes_.get(1).intValue());
        assertEq(1, indexes_.get(2).intValue());
        indexes_ = fightSimulation_.indexesFight((byte) 1);
        assertEq(3, indexes_.size());
        assertEq(1, indexes_.get(0).intValue());
        assertEq(0, indexes_.get(1).intValue());
        assertEq(2, indexes_.get(2).intValue());
    }

    @Test
    public void indexesFight3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        Numbers<Byte> indexes_ = fightSimulation_.indexesFight((byte) 0);
        assertEq(3, indexes_.size());
        assertEq(0, indexes_.get(0).intValue());
        assertEq(1, indexes_.get(1).intValue());
        assertEq(2, indexes_.get(2).intValue());
        indexes_ = fightSimulation_.indexesFight((byte) 1);
        assertEq(3, indexes_.size());
        assertEq(1, indexes_.get(0).intValue());
        assertEq(0, indexes_.get(1).intValue());
        assertEq(2, indexes_.get(2).intValue());
    }

    @Test
    public void indexesFight4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
//        pokemon_ = new WildPk();
//        pokemon_.setLevel((short) 3);
//        pokemon_.setName(NINGALE);
//        pokemon_.setAbility(OEIL_COMPOSE);
//        pokemon_.setItem(NULL_REF);
//        pokemon_.setGender(Gender.NO_GENDER);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 25, _data_);
//        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 25, data);
//        fightSimulation_.setNextEvolutions(1, TARPAUD, (short) 25, data);
//        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, data);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
//        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
//        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().first().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
//        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        Numbers<Byte> indexes_ = fightSimulation_.indexesFight((byte) 0);
        assertEq(1, indexes_.size());
        assertEq(0, indexes_.get(0).intValue());
//        assertEq(1, indexes_.get(1).intValue());
//        assertEq(2, indexes_.get(2).intValue());
//        indexes_ = fightSimulation_.indexesFight((byte) 1);
//        assertEq(3, indexes_.size());
//        assertEq(1, indexes_.get(0).intValue());
//        assertEq(0, indexes_.get(1).intValue());
//        assertEq(2, indexes_.get(2).intValue());
    }

    @Test
    public void movesToBeChosen1Test() {
        StringList moves_ = new StringList(CHARGE,ENVOL,SEISME,ORAGE);
        StringList currentMoves_ = new StringList(CHARGE,ENVOL,ORAGE);
        StringMap<Boolean> map_;
        map_ = FightSimulation.movesToBeChosen(moves_, currentMoves_, _data_.getNbMaxMoves());
        assertEq(4, map_.size());
        assertTrue(map_.getVal(CHARGE));
        assertTrue(map_.getVal(ENVOL));
        assertTrue(map_.getVal(SEISME));
        assertTrue(map_.getVal(ORAGE));
    }

    @Test
    public void movesToBeChosen2Test() {
        StringList moves_ = new StringList(CHARGE,ENVOL,SEISME,ORAGE,PISTOLET_A_O);
        StringList currentMoves_ = new StringList(CHARGE,ENVOL,ORAGE);
        StringMap<Boolean> map_;
        map_ = FightSimulation.movesToBeChosen(moves_, currentMoves_, _data_.getNbMaxMoves());
        assertEq(5, map_.size());
        assertTrue(map_.getVal(CHARGE));
        assertTrue(map_.getVal(ENVOL));
        assertTrue(map_.getVal(ORAGE));
        assertTrue(!map_.getVal(SEISME));
        assertTrue(!map_.getVal(PISTOLET_A_O));
    }

    @Test
    public void prepareMovesToBeLearntOneFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertEq(3, fightSimulation_.getCurrentFights().size());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)0).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)1).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)2).intValue());
//        assertEq(3, fightSimulation_.getCurrentFights().getKeys((byte) 0).size());
        StringList abilities_;
//        StringList moves_;
        assertEq(3, fightSimulation_.getAbilities().size());
        assertEq(2, fightSimulation_.getAbilities().getVal((byte) 0).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(0, fightSimulation_.getAbilities().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getAbilities().getVal((byte) 2).size());
//        abilities_ = fightSimulation_.getAbilities().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1));
//        assertEq(1, abilities_.size());
//        assertEq(GARDE_MYSTIK, abilities_.get(0));
//        assertEq(3, fightSimulation_.getAbilitiesBetweenFights().size());
//        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).size());
//        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).first().size());
//        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).last().size());
//        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).size());
//        assertEq(1, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).first().size());
//        abilities_ = fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).first().first();
//        assertEq(2, abilities_.size());
//        assertEq(ABSORB_EAU, abilities_.get(0));
//        assertEq(MOITEUR, abilities_.get(1));
//        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).last().size());
//        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).size());
//        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).first().size());
//        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getKeptAbilities().size());
        assertEq(2, fightSimulation_.getKeptAbilities().getVal((byte) 0).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).isEmpty());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).isEmpty());
        assertEq(0, fightSimulation_.getKeptAbilities().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getKeptAbilities().getVal((byte) 2).size());
//        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).isEmpty());
//        assertEq(3, fightSimulation_.getKeptAbilitiesBetweenFights().size());
//        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).size());
//        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).first().size());
//        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).last().size());
//        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).size());
//        assertEq(1, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).first().size());
//        assertTrue(!fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).first().first().isEmpty());
//        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).last().size());
//        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).size());
//        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).first().size());
//        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getAvailableMoves().size());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 2).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        //assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(3, fightSimulation_.getKeptMoves().size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
//        assertEq(3, fightSimulation_.getKeptMovesBetweenFights().size());
//        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).first().size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).last().size());
//        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
//        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).first().size());
//        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getEvolutionsWhileFight().size());
        assertEq(2, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).size());
        assertEq(TETARTE, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)));
        assertEq(TARPAUD, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)));
        assertEq(0, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).size());
//        assertEq(MUNJA, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)));
//        assertEq(3, fightSimulation_.getEvolutionsBetweenFights().size());
//        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).size());
//        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).first().size());
//        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).last().size());
//        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).size());
//        assertEq(1, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).first().size());
//        assertEq(TARTARD, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).first().first());
//        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).last().size());
//        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).size());
//        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).first().size());
//        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).last().size());
//        assertEq(2, fightSimulation_.getUsedStones().size());
//        assertEq(3, fightSimulation_.getUsedStones().first().size());
//        assertEq(0, fightSimulation_.getUsedStones().first().get(0).size());
//        assertEq(1, fightSimulation_.getUsedStones().first().get(1).size());
//        assertEq(PIERRE_EAU, fightSimulation_.getUsedStones().first().get(1).first());
//        assertEq(0, fightSimulation_.getUsedStones().first().get(2).size());
//        assertEq(3, fightSimulation_.getUsedStones().last().size());
//        assertEq(0, fightSimulation_.getUsedStones().last().get(0).size());
//        assertEq(0, fightSimulation_.getUsedStones().last().get(1).size());
//        assertEq(0, fightSimulation_.getUsedStones().last().get(2).size());
        assertEq(3, fightSimulation_.getMoves().size());
        assertEq(2, fightSimulation_.getMoves().getVal((byte) 0).size());
        assertEq(13, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(BOUE_BOMBE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(0));
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(1));
        assertEq(COGNOBIDON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(2));
        assertEq(DANSE_PLUIE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(3));
        assertEq(ECUME, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(4));
        assertEq(HYDROCANON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(5));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(6));
        assertEq(PISTOLET_A_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(7));
        assertEq(PLAQUAGE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(8));
        assertEq(REVEIL_FORCE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(9));
        assertEq(TIR_DE_BOUE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(10));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(11));
        assertEq(TOURNIQUET, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(12));
        assertEq(7, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(0));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(1));
        assertEq(MEGAPHONE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(2));
        assertEq(REBOND, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(3));
        assertEq(REQUIEM, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(4));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(5));
        assertEq(VANTARDISE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(6));
//        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new Pair<>((byte)1,(byte)1)).size());
//        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new Pair<>((byte)1,(byte)0)).size());
        assertEq(2, fightSimulation_.getMoves().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
//        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new Pair<>((byte)1,(byte)1)).size());
//        assertEq(2, fightSimulation_.getMoves().getVal((byte) 1).getVal(new Pair<>((byte)1,(byte)0)).size());
//        assertEq(DYNAMOPOING, fightSimulation_.getMoves().getVal((byte) 1).getVal(new Pair<>((byte)1,(byte)0)).get(0));
//        assertEq(LIRE_ESPRIT, fightSimulation_.getMoves().getVal((byte) 1).getVal(new Pair<>((byte)1,(byte)0)).get(1));
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(2, fightSimulation_.getMoves().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
//        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)0)).size());
//        assertEq(15, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).size());
//        assertEq(ANTI_SOIN, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(0));
//        assertEq(ARMURE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(1));
//        assertEq(BALL_OMBRE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(2));
//        assertEq(COMBO_GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(3));
//        assertEq(COUD_BOUE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(4));
//        assertEq(DEPIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(5));
//        assertEq(FAUX_CHAGE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(6));
//        assertEq(GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(7));
//        assertEq(GRIFFE_ACIER, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(8));
//        assertEq(JET_DE_SABLE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(9));
//        assertEq(LIRE_ESPRIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(10));
//        assertEq(OMBRE_PORTEE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(11));
//        assertEq(ONDE_FOLIE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(12));
//        assertEq(TUNNEL, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(13));
//        assertEq(VAMPIRISME, fightSimulation_.getMoves().getVal((byte) 2).getVal(new Pair<>((byte)1,(byte)1)).get(14));
//        assertEq(3, fightSimulation_.getMovesBetweenFights().size());
//        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).size());
//        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).first().size());
//        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).last().size());
//        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).size());
//        assertEq(1, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).first().size());
//        moves_ = fightSimulation_.getMovesBetweenFights().getVal((byte) 1).first().first();
//        assertEq(4, moves_.size());
//        assertEq(BULLES_D_O, moves_.get(0));
//        assertEq(HYPNOSE, moves_.get(1));
//        assertEq(SACRIFICE, moves_.get(2));
//        assertEq(TORGNOLES, moves_.get(3));
//        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).last().size());
//        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).size());
//        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).first().size());
//        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getInfosRealEvolutions().size());
        assertEq(2, fightSimulation_.getInfosRealEvolutions().get(0).size());
        assertEq(TETARTE, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getName());
        assertEq(88, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getLevel());
        assertEq(TARPAUD, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getName());
        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getLevel());
        assertEq(0, fightSimulation_.getInfosRealEvolutions().get(1).size());
//        assertEq(TARTARD, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getFirst());
//        assertEq(25, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getSecond().intValue());
        assertEq(0, fightSimulation_.getInfosRealEvolutions().get(2).size());
//        assertEq(MUNJA, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getFirst());
//        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getSecond().intValue());
    }

    @Test
    public void prepareMovesToBeLearntOneFight2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertTrue(!fightSimulation_.isOk());
    }
    @Test
    public void prepareMovesToBeLearnt1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(0, 0, 1, 1), 0, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(MULTI_EXP);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 26, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 26, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, (byte)0);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        assertEq(0, fightSimulation_.getCurrentFights().size());
    }

    @Test
    public void prepareMovesToBeLearnt2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.getItems().add(new StringList(OEUF_CHANCE,OEUF_CHANCE,NULL_REF));
        //fightSimulation_.getItems().get(0).add(NULL_REF);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.getItems().get(1).add(NULL_REF);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        //fightSimulation_.getItems().get(2).add(NULL_REF);
//        pokemon_ = new WildPk();
//        pokemon_.setLevel((short) 3);
//        pokemon_.setName(NUCLEOS);
//        pokemon_.setAbility(GARDE_MAGIK);
//        pokemon_.setItem(NULL_REF);
//        pokemon_.setGender(Gender.NO_GENDER);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        //fightSimulation_.setNextEvolutions(3, NUCLEOS, (short) 32, data);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        //fightSimulation_.getFrontFighters().first().first().put((byte)3, new Pair<>(Fighter.BACK,Fighter.BACK));
        fightSimulation_.getFrontFighters().first().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        //fightSimulation_.getFrontFighters().first().last().put((byte)3, new Pair<>(Fighter.BACK,Fighter.BACK));
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        //1::fightSimulation_.getFrontFighters().last().first().put((byte)0, new Pair<>(Fighter.BACK,Fighter.BACK));
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        assertEq(3, fightSimulation_.getCurrentFights().size());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)0).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)1).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)2).intValue());
//        assertEq(3, fightSimulation_.getCurrentFights().getKeys((byte) 0).size());
        StringList abilities_;
        StringList moves_;
        assertEq(3, fightSimulation_.getAbilities().size());
        assertEq(1, fightSimulation_.getAbilities().getVal((byte) 0).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(2, fightSimulation_.getAbilities().getVal((byte) 1).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(1, fightSimulation_.getAbilities().getVal((byte) 2).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1));
        assertEq(1, abilities_.size());
        assertEq(GARDE_MYSTIK, abilities_.get(0));
        assertEq(3, fightSimulation_.getAbilitiesBetweenFights().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).first().size());
        abilities_ = fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).first().first();
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getKeptAbilities().size());
        assertEq(1, fightSimulation_.getKeptAbilities().getVal((byte) 0).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).isEmpty());
        assertEq(2, fightSimulation_.getKeptAbilities().getVal((byte) 1).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).isEmpty());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).isEmpty());
        assertEq(1, fightSimulation_.getKeptAbilities().getVal((byte) 2).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).isEmpty());
        assertEq(3, fightSimulation_.getKeptAbilitiesBetweenFights().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).first().size());
        assertTrue(!fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).first().first().isEmpty());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getAvailableMoves().size());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 2).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(3, fightSimulation_.getKeptMoves().size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(3, fightSimulation_.getKeptMovesBetweenFights().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getEvolutionsWhileFight().size());
        assertEq(1, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).size());
        assertEq(TETARTE, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)));
        assertEq(2, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 1).size());
        assertEq(TETARTE, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)));
        assertEq(TARPAUD, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)));
        assertEq(1, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).size());
        assertEq(MUNJA, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)));
        assertEq(3, fightSimulation_.getEvolutionsBetweenFights().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).first().size());
        assertEq(TARTARD, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).first().first());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).last().size());
        assertEq(2, fightSimulation_.getUsedStones().size());
        assertEq(3, fightSimulation_.getUsedStones().first().size());
        assertEq(1, fightSimulation_.getUsedStones().first().get(0).size());
        assertEq(PIERRE_EAU, fightSimulation_.getUsedStones().first().get(0).first());
        assertEq(0, fightSimulation_.getUsedStones().first().get(1).size());
        assertEq(0, fightSimulation_.getUsedStones().first().get(2).size());
        assertEq(3, fightSimulation_.getUsedStones().last().size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(0).size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(1).size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(2).size());
        assertEq(3, fightSimulation_.getMoves().size());
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(13, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(BOUE_BOMBE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(0));
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(1));
        assertEq(COGNOBIDON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(2));
        assertEq(DANSE_PLUIE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(3));
        assertEq(ECUME, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(4));
        assertEq(HYDROCANON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(5));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(6));
        assertEq(PISTOLET_A_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(7));
        assertEq(PLAQUAGE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(8));
        assertEq(REVEIL_FORCE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(9));
        assertEq(TIR_DE_BOUE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(10));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(11));
        assertEq(TOURNIQUET, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(12));
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(7, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(0));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(1));
        assertEq(MEGAPHONE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(2));
        assertEq(REBOND, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(3));
        assertEq(REQUIEM, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(4));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(5));
        assertEq(VANTARDISE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(6));
        assertEq(13, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(BOUE_BOMBE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(0));
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(1));
        assertEq(COGNOBIDON, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(2));
        assertEq(DANSE_PLUIE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(3));
        assertEq(ECUME, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(4));
        assertEq(HYDROCANON, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(5));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(6));
        assertEq(PISTOLET_A_O, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(7));
        assertEq(PLAQUAGE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(8));
        assertEq(REVEIL_FORCE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(9));
        assertEq(TIR_DE_BOUE, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(10));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(11));
        assertEq(TOURNIQUET, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(12));
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(15, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(ANTI_SOIN, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(0));
        assertEq(ARMURE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(1));
        assertEq(BALL_OMBRE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(2));
        assertEq(COMBO_GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(3));
        assertEq(COUD_BOUE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(4));
        assertEq(DEPIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(5));
        assertEq(FAUX_CHAGE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(6));
        assertEq(GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(7));
        assertEq(GRIFFE_ACIER, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(8));
        assertEq(JET_DE_SABLE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(9));
        assertEq(LIRE_ESPRIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(10));
        assertEq(OMBRE_PORTEE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(11));
        assertEq(ONDE_FOLIE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(12));
        assertEq(TUNNEL, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(13));
        assertEq(VAMPIRISME, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(14));
        assertEq(3, fightSimulation_.getMovesBetweenFights().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).first().size());
        moves_ = fightSimulation_.getMovesBetweenFights().getVal((byte) 0).first().first();
        assertEq(6, moves_.size());
        assertEq(BULLES_D_O, moves_.get(0));
        assertEq(DYNAMOPOING, moves_.get(1));
        assertEq(HYPNOSE, moves_.get(2));
        assertEq(LIRE_ESPRIT, moves_.get(3));
        assertEq(SACRIFICE, moves_.get(4));
        assertEq(TORGNOLES, moves_.get(5));
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getInfosRealEvolutions().size());
        assertEq(2, fightSimulation_.getInfosRealEvolutions().get(0).size());
        assertEq(TETARTE, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getName());
        assertEq(88, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getLevel());
        assertEq(TARTARD, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getName());
        assertEq(88, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getLevel());
        assertEq(2, fightSimulation_.getInfosRealEvolutions().get(1).size());
        assertEq(TETARTE, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getName());
        assertEq(92, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getLevel());
        assertEq(TARPAUD, fightSimulation_.getInfosRealEvolutions().get(1).get(1).getName());
        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(1).get(1).getLevel());
        assertEq(1, fightSimulation_.getInfosRealEvolutions().get(2).size());
        assertEq(MUNJA, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getName());
        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getLevel());
    }

    @Test
    public void prepareMovesToBeLearnt3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        assertEq(3, fightSimulation_.getCurrentFights().size());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)0).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)1).intValue());
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte)2).intValue());
//        assertEq(3, fightSimulation_.getCurrentFights().getKeys((byte) 0).size());
        StringList abilities_;
        StringList moves_;
        assertEq(3, fightSimulation_.getAbilities().size());
        assertEq(2, fightSimulation_.getAbilities().getVal((byte) 0).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1));
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(0, fightSimulation_.getAbilities().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getAbilities().getVal((byte) 2).size());
        abilities_ = fightSimulation_.getAbilities().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1));
        assertEq(1, abilities_.size());
        assertEq(GARDE_MYSTIK, abilities_.get(0));
        assertEq(3, fightSimulation_.getAbilitiesBetweenFights().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).first().size());
        abilities_ = fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).first().first();
        assertEq(2, abilities_.size());
        assertEq(ABSORB_EAU, abilities_.get(0));
        assertEq(MOITEUR, abilities_.get(1));
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getKeptAbilities().size());
        assertEq(2, fightSimulation_.getKeptAbilities().getVal((byte) 0).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).isEmpty());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).isEmpty());
        assertEq(0, fightSimulation_.getKeptAbilities().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptAbilities().getVal((byte) 2).size());
        assertTrue(!fightSimulation_.getKeptAbilities().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).isEmpty());
        assertEq(3, fightSimulation_.getKeptAbilitiesBetweenFights().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).first().size());
        assertTrue(!fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).first().first().isEmpty());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getAvailableMoves().size());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 2).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 2).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(3, fightSimulation_.getKeptMoves().size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(CHARGE, fightSimulation_.getKeptMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).first());
        assertEq(3, fightSimulation_.getKeptMovesBetweenFights().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getEvolutionsWhileFight().size());
        assertEq(2, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).size());
        assertEq(TETARTE, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)));
        assertEq(TARPAUD, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)));
        assertEq(0, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).size());
        assertEq(MUNJA, fightSimulation_.getEvolutionsWhileFight().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)));
        assertEq(3, fightSimulation_.getEvolutionsBetweenFights().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).first().size());
        assertEq(TARTARD, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).first().first());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getEvolutionsBetweenFights().getVal((byte) 2).last().size());
        assertEq(2, fightSimulation_.getUsedStones().size());
        assertEq(3, fightSimulation_.getUsedStones().first().size());
        assertEq(0, fightSimulation_.getUsedStones().first().get(0).size());
        assertEq(1, fightSimulation_.getUsedStones().first().get(1).size());
        assertEq(PIERRE_EAU, fightSimulation_.getUsedStones().first().get(1).first());
        assertEq(0, fightSimulation_.getUsedStones().first().get(2).size());
        assertEq(3, fightSimulation_.getUsedStones().last().size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(0).size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(1).size());
        assertEq(0, fightSimulation_.getUsedStones().last().get(2).size());
        assertEq(3, fightSimulation_.getMoves().size());
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 0).size());
        assertEq(13, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(BOUE_BOMBE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(0));
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(1));
        assertEq(COGNOBIDON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(2));
        assertEq(DANSE_PLUIE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(3));
        assertEq(ECUME, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(4));
        assertEq(HYDROCANON, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(5));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(6));
        assertEq(PISTOLET_A_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(7));
        assertEq(PLAQUAGE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(8));
        assertEq(REVEIL_FORCE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(9));
        assertEq(TIR_DE_BOUE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(10));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(11));
        assertEq(TOURNIQUET, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).get(12));
        assertEq(7, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(BULLES_D_O, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(0));
        assertEq(HYPNOSE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(1));
        assertEq(MEGAPHONE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(2));
        assertEq(REBOND, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(3));
        assertEq(REQUIEM, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(4));
        assertEq(TORGNOLES, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(5));
        assertEq(VANTARDISE, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).get(6));
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 1).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(2, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(DYNAMOPOING, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(0));
        assertEq(LIRE_ESPRIT, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).get(1));
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(4, fightSimulation_.getMoves().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertEq(0, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertEq(15, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).size());
        assertEq(ANTI_SOIN, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(0));
        assertEq(ARMURE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(1));
        assertEq(BALL_OMBRE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(2));
        assertEq(COMBO_GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(3));
        assertEq(COUD_BOUE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(4));
        assertEq(DEPIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(5));
        assertEq(FAUX_CHAGE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(6));
        assertEq(GRIFFE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(7));
        assertEq(GRIFFE_ACIER, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(8));
        assertEq(JET_DE_SABLE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(9));
        assertEq(LIRE_ESPRIT, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(10));
        assertEq(OMBRE_PORTEE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(11));
        assertEq(ONDE_FOLIE, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(12));
        assertEq(TUNNEL, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(13));
        assertEq(VAMPIRISME, fightSimulation_.getMoves().getVal((byte) 2).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)1)).get(14));
        assertEq(3, fightSimulation_.getMovesBetweenFights().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).first().size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).last().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).first().size());
        moves_ = fightSimulation_.getMovesBetweenFights().getVal((byte) 1).first().first();
        assertEq(4, moves_.size());
        assertEq(BULLES_D_O, moves_.get(0));
        assertEq(HYPNOSE, moves_.get(1));
        assertEq(SACRIFICE, moves_.get(2));
        assertEq(TORGNOLES, moves_.get(3));
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).last().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).first().size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).last().size());
        assertEq(3, fightSimulation_.getInfosRealEvolutions().size());
        assertEq(2, fightSimulation_.getInfosRealEvolutions().get(0).size());
        assertEq(TETARTE, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getName());
        assertEq(88, fightSimulation_.getInfosRealEvolutions().get(0).get(0).getLevel());
        assertEq(TARPAUD, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getName());
        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(0).get(1).getLevel());
        assertEq(1, fightSimulation_.getInfosRealEvolutions().get(1).size());
        assertEq(TARTARD, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getName());
        assertEq(25, fightSimulation_.getInfosRealEvolutions().get(1).get(0).getLevel());
        assertEq(1, fightSimulation_.getInfosRealEvolutions().get(2).size());
        assertEq(MUNJA, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getName());
        assertEq(100, fightSimulation_.getInfosRealEvolutions().get(2).get(0).getLevel());
    }

    @Test
    public void addMove1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        assertTrue(fightSimulation_.isAvailableMoves(0));
        fightSimulation_.addMove(0, PLAQUAGE);
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte)0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
    }

    @Test
    public void isAvailableMovesTest() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 100);
        pokemon_.setName(TARTARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        assertTrue(!fightSimulation_.isAvailableMoves(0));
    }
    @Test
    public void deleteMove1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.deleteMove(0, CHARGE);
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PLAQUAGE));
    }
    @Test
    public void cancelEvolutionsAll1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.cancelEvolutions();
        assertEq(0, fightSimulation_.getAvailableEvolutions().size());
    }

    @Test
    public void keepMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.isAvailableAbilities((byte) 0));
        assertEq(2, fightSimulation_.getAvailableAbilities((byte) 0).size());
        fightSimulation_.keepMoves(0, new StringList(CHARGE, PLAQUAGE, BULLES_D_O, PISTOLET_A_O), _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PISTOLET_A_O));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(10, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REQUIEM));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(MEGAPHONE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(VANTARDISE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REBOND));
    }

    @Test
    public void keepMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        fightSimulation_.keepMoves(0, new StringList(CHARGE, PLAQUAGE, BULLES_D_O, PISTOLET_A_O), _data_);
        fightSimulation_.keepMoves(0, new StringList(TORGNOLES, PLAQUAGE, BULLES_D_O, PISTOLET_A_O), _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PISTOLET_A_O));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(TORGNOLES));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
    }

    @Test
    public void keepMoves3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pk_ = new WildPk();
        pk_.setName(PICHU);
        pk_.setAbility(ATTENTION);
        fightSimulation_.getFoeTeams().last().add(new PkTrainer(pk_, new StringList(CHARGE)));
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 89, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        fightSimulation_.keepMoves(0, new StringList(CHARGE), _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
    }

    @Test
    public void validateKeptMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        byte currentFight_ = fightSimulation_.getCurrentFights().getVal((byte) 1);
        PairNumber<Byte,Byte> key_;
        key_ = fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey();
        PairNumber<Byte,Byte> nextKey_;
        nextKey_ = new PairNumber<Byte,Byte>(key_);
        nextKey_.setSecond((byte) (nextKey_.getSecond()+1));
        TreeMap<PairNumber<Byte,Byte>, StringList> tree_;
        tree_ = fightSimulation_.getMoves().getVal((byte) 1);
        EqList<StringList> list_ = fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(currentFight_);
        list_.add(new StringList(BALL_OMBRE,TUNNEL,BULLES_D_O,TONNERRE));
        //by evolving twice between fights
        fightSimulation_.validateKeptMoves(1, _data_, currentFight_, nextKey_, tree_);
        assertEq(0, fightSimulation_.getActionsSubstitutingFront().size());
        assertEq(0, fightSimulation_.getActionsSubstitutingBack().size());
        assertEq(0, fightSimulation_.getActionsBeforeRound().size());
        assertEq(0, fightSimulation_.getMovesAbilities().size());
        assertEq(3, fightSimulation_.getKeptAbilitiesBetweenFights().size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).get(0).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 0).get(1).size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).get(0).size());
        assertEq(MOITEUR, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).get(0).first());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 1).get(1).size());
        assertEq(2, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).get(0).size());
        assertEq(0, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte) 2).get(1).size());
        assertEq(3, fightSimulation_.getMovesBetweenFights().size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).get(0).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 0).get(1).size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).size());
        assertEq(4, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).first().size());
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).first().containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).first().containsObj(HYPNOSE));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).first().containsObj(SACRIFICE));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).first().containsObj(TORGNOLES));
        assertEq(4, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).last().size());
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).last().containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).last().containsObj(TUNNEL));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).last().containsObj(BALL_OMBRE));
        assertTrue(fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(0).last().containsObj(TONNERRE));
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 1).get(1).size());
        assertEq(2, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).get(0).size());
        assertEq(0, fightSimulation_.getMovesBetweenFights().getVal((byte) 2).get(1).size());
        assertEq(1, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(7, fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).size());
        //the current moves are currently available
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BULLES_D_O));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(SACRIFICE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TUNNEL));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BALL_OMBRE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TONNERRE));
    }

//    @Test
//    public void validateMovesOneFight1Test() {
//        Difficulty diff_ = new Difficulty();
//        FightSimulation fightSimulation_ = new FightSimulation(diff_, data);
//        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, data);
//        Pokemon pokemon_ = new WildPk();
//        pokemon_.setLevel((short) 3);
//        pokemon_.setName(PTITARD);
//        pokemon_.setAbility(ABSORB_EAU);
//        pokemon_.setItem(OEUF_CHANCE);
//        pokemon_.setGender(Gender.NO_GENDER);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
//        pokemon_ = new WildPk();
//        pokemon_.setLevel((short) 25);
//        pokemon_.setName(TETARTE);
//        pokemon_.setAbility(ABSORB_EAU);
//        pokemon_.setItem(OEUF_CHANCE);
//        pokemon_.setGender(Gender.NO_GENDER);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
//        pokemon_ = new WildPk();
//        pokemon_.setLevel((short) 3);
//        pokemon_.setName(NINGALE);
//        pokemon_.setAbility(OEIL_COMPOSE);
//        pokemon_.setItem(NULL_REF);
//        pokemon_.setGender(Gender.NO_GENDER);
//        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), data);
//        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
//        fightSimulation_.setFirstEvolutions(data);
//        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, data);
//        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, data);
//        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, data);
//        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, data);
//        fightSimulation_.initializeFrontFighters();
//        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
//        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
//        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
//        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
//        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
////        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
////        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
////        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
////        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
////        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
////        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
//        fightSimulation_.prepareMovesToBeLearntOneFight(data);
//        fightSimulation_.addMove(0, PLAQUAGE);
//        fightSimulation_.addMove(0, BULLES_D_O);
//        fightSimulation_.addMove(0, PISTOLET_A_O);
//        fightSimulation_.validateMovesOneFight(0, data);
//        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getFirst().getFirst().intValue());
//        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getFirst().getSecond().intValue());
//        assertEq(10, fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().size());
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(CHARGE));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(PLAQUAGE));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(BULLES_D_O));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(PISTOLET_A_O));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(REQUIEM));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(HYPNOSE));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(MEGAPHONE));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(TORGNOLES));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(VANTARDISE));
//        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(REBOND));
//        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
//        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
//        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)0)).size());
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)0)).containsObj(CHARGE));
//        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)1)).size());
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)1)).containsObj(CHARGE));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)1)).containsObj(PLAQUAGE));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)1)).containsObj(BULLES_D_O));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
//    }

    @Test
    public void cancelMovesOneFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
//        fightSimulation_.addMove(0, PLAQUAGE);
//        fightSimulation_.addMove(0, BULLES_D_O);
//        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.keepMoves(0, new StringList(CHARGE, PLAQUAGE, BULLES_D_O, PISTOLET_A_O), _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(PISTOLET_A_O));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
        fightSimulation_.cancelMovesOneFight(0, _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)0)).containsObj(PLAQUAGE));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)0)).containsObj(BULLES_D_O));
//        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new Pair<>((byte)0,(byte)0)).containsObj(PISTOLET_A_O));
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(PLAQUAGE));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(BULLES_D_O));
//        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getSecond().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
        assertEq(0, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        //assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
    }

    @Test
    public void cancelMovesOneFight2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pk_ = new WildPk();
        pk_.setName(PICHU);
        pk_.setAbility(ATTENTION);
        fightSimulation_.getFoeTeams().last().add(new PkTrainer(pk_, new StringList(CHARGE)));
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 89, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().get(1).put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        fightSimulation_.keepMoves(0, new StringList(CHARGE), _data_);
        assertEq(2, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        fightSimulation_.keepMoves(0, new StringList(ECUME, PLAQUAGE, BULLES_D_O, PISTOLET_A_O), _data_);
        assertEq(3, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(ECUME));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).containsObj(ECUME));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).containsObj(PISTOLET_A_O));
        fightSimulation_.cancelMovesOneFight(0, _data_);
        assertEq(3, fightSimulation_.getKeptMoves().getVal((byte) 0).size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)).containsObj(CHARGE));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(ECUME));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
        assertEq(0, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)2)).size());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(14, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TIR_DE_BOUE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TOURNIQUET));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYDROCANON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REVEIL_FORCE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(ECUME));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(COGNOBIDON));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(DANSE_PLUIE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BOUE_BOMBE));
    }


    @Test
    public void validateMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(10, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REQUIEM));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(MEGAPHONE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(VANTARDISE));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(REBOND));
        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(PISTOLET_A_O));
    }

    @Test
    public void validateMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, MEGAPHONE);
        fightSimulation_.validateMoves(0, _data_);
        assertEq(1, fightSimulation_.getCurrentFights().getVal((byte) 0).intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 0).getKey().getSecond().intValue());
        assertEq(4, fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(MEGAPHONE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PLAQUAGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(BULLES_D_O));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 0).getMoves().getVal(PISTOLET_A_O));
        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(MEGAPHONE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(PLAQUAGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 0).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(PISTOLET_A_O));
    }

    @Test
    public void validateMoves3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte) 1).intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(0, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
    }

    @Test
    public void validateMoves4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte) 1).intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(1, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(5, fightSimulation_.getAvailableMovesBetweenFights().getVal((byte)1).size());
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(CHARGE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(SACRIFICE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TORGNOLES));
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().size());
        assertEq(CHARGE, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().first());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
    }

    @Test
    public void addMoveBetweenFights1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte) 1).intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(1, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(5, fightSimulation_.getAvailableMovesBetweenFights().getVal((byte)1).size());
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(SACRIFICE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TORGNOLES));
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().size());
        assertEq(CHARGE, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().first());
        assertEq(BULLES_D_O, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().get(1));
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
    }

    @Test
    public void deleteMoveBetweenFights1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.deleteMoveBetweenFights(1, 0, CHARGE);
        assertEq(0, fightSimulation_.getCurrentFights().getVal((byte) 1).intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertEq(1, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(5, fightSimulation_.getAvailableMovesBetweenFights().getVal((byte)1).size());
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(HYPNOSE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(SACRIFICE));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TORGNOLES));
        assertEq(1, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)1)).containsObj(CHARGE));
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().size());
        assertEq(BULLES_D_O, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().first());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
    }

    @Test
    public void validateMoves5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        assertEq(1, fightSimulation_.getCurrentFights().getVal((byte) 1).intValue());
        assertEq(1, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getFirst().intValue());
        assertEq(0, fightSimulation_.getAvailableMoves().getVal((byte) 1).getKey().getSecond().intValue());
        assertEq(6, fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().size());
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(BULLES_D_O));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(SACRIFICE));
        assertTrue(fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(TORGNOLES));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(LIRE_ESPRIT));
        assertTrue(!fightSimulation_.getAvailableMoves().getVal((byte) 1).getMoves().getVal(DYNAMOPOING));
        assertEq(1, fightSimulation_.getAvailableMovesBetweenFights().size());
        assertEq(5, fightSimulation_.getAvailableMovesBetweenFights().getVal((byte)1).size());
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(CHARGE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(BULLES_D_O));
        assertTrue(!fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(HYPNOSE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(SACRIFICE));
        assertTrue(fightSimulation_.getAvailableMovesBetweenFights().getVal((byte) 1).getVal(TORGNOLES));
        assertEq(4, fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).size());
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(SACRIFICE));
        assertTrue(fightSimulation_.getKeptMoves().getVal((byte) 1).getVal(new PairNumber<Byte,Byte>((byte)1,(byte)0)).containsObj(TORGNOLES));
        assertEq(2, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).size());
        assertEq(1, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().size());
        assertEq(4, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().size());
        assertTrue(fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().containsObj(CHARGE));
        assertTrue(fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().containsObj(BULLES_D_O));
        assertTrue(fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().containsObj(SACRIFICE));
        assertTrue(fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().containsObj(TORGNOLES));
        assertEq(CHARGE, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).first().first().first());
        assertEq(0, fightSimulation_.getKeptMovesBetweenFights().getVal((byte) 1).last().size());
    }

    @Test
    public void setAbilityBetweenFights1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.setAbilityBetweenFights(1, 0, 0, ABSORB_EAU);
        assertEq(ABSORB_EAU, fightSimulation_.getKeptAbilitiesBetweenFights().getVal((byte)1).first().first());
    }

    @Test
    public void setAbilityWhileFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.setAbilityWhileFight(0, 0, 0, ABSORB_EAU);
        assertEq(ABSORB_EAU, fightSimulation_.getKeptAbilities().getVal((byte)0).getVal(new PairNumber<Byte,Byte>((byte)0,(byte)0)));
    }

    @Test
    public void validMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.deleteMove(0, CHARGE);
        assertTrue(!fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.addMove(0, HYPNOSE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        assertTrue(!fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validMoves3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMoveBetweenFights(1, 0, CHARGE);
        assertTrue(!fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validMoves4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, HYPNOSE);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        assertTrue(!fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validMoves5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        assertTrue(!fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validMoves6Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        assertTrue(fightSimulation_.validMoves(_data_));
    }

    @Test
    public void validateAllMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateAllMoves(_data_);
        assertEq(0, fightSimulation_.getMovesAbilities().size());
    }

    @Test
    public void validateAllMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        assertEq(2, fightSimulation_.getActionsSubstitutingFront().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().first().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().first().first().size());
        assertEq(0, fightSimulation_.getActionsSubstitutingFront().first().first().first().getSubstitute());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().last().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().last().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingFront().last().first().first().getSubstitute());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingBack().first().size());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().first().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().first().first().first().getSubstitute());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().first().first().last().getSubstitute());
        assertEq(1, fightSimulation_.getActionsSubstitutingBack().last().size());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().last().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().last().first().first().getSubstitute());
        assertEq(0, fightSimulation_.getActionsSubstitutingBack().last().first().last().getSubstitute());
        assertEq(2, fightSimulation_.getActionsBeforeRound().size());
        assertEq(2, fightSimulation_.getActionsBeforeRound().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().first().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().first().last().size());
        assertEq(2, fightSimulation_.getActionsBeforeRound().last().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().last().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().last().last().size());
        ChoiceOfEvolutionAndMoves choice_;
        assertEq(2, fightSimulation_.getMovesAbilities().size());
        assertEq(2, fightSimulation_.getMovesAbilities().first().size());
        assertEq(3, fightSimulation_.getMovesAbilities().first().first().size());
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)0);
        assertEq(TETARTE, choice_.getName());
        assertEq(ABSORB_EAU, choice_.getAbility());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(3, fightSimulation_.getMovesAbilities().first().last().size());
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)0);
        assertEq(TARPAUD, choice_.getName());
        assertEq(ABSORB_EAU, choice_.getAbility());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(2, fightSimulation_.getMovesAbilities().last().size());
        assertEq(3, fightSimulation_.getMovesAbilities().last().first().size());
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)0);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertTrue(choice_.getKeptMoves().containsObj(SACRIFICE));
        assertTrue(choice_.getKeptMoves().containsObj(TORGNOLES));
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(3, fightSimulation_.getMovesAbilities().last().last().size());
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)0);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertTrue(choice_.getKeptMoves().containsObj(SACRIFICE));
        assertTrue(choice_.getKeptMoves().containsObj(TORGNOLES));
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)2);
        assertEq(MUNJA, choice_.getName());
        assertEq(GARDE_MYSTIK, choice_.getAbility());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(BALL_OMBRE));
        assertTrue(choice_.getKeptMoves().containsObj(TUNNEL));
        assertTrue(choice_.getKeptMoves().containsObj(OMBRE_PORTEE));
        assertTrue(choice_.getKeptMoves().containsObj(GRIFFE_ACIER));
    }

    @Test
    public void initializeAllMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.initializeAllMoves(_data_);
        assertEq(2, fightSimulation_.getActionsSubstitutingFront().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().first().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().first().first().size());
        assertEq(0, fightSimulation_.getActionsSubstitutingFront().first().first().first().getSubstitute());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().last().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingFront().last().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingFront().last().first().first().getSubstitute());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().size());
        assertEq(1, fightSimulation_.getActionsSubstitutingBack().first().size());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().first().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().first().first().first().getSubstitute());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().first().first().last().getSubstitute());
        assertEq(1, fightSimulation_.getActionsSubstitutingBack().last().size());
        assertEq(2, fightSimulation_.getActionsSubstitutingBack().last().first().size());
        assertEq(Fighter.BACK, fightSimulation_.getActionsSubstitutingBack().last().first().first().getSubstitute());
        assertEq(0, fightSimulation_.getActionsSubstitutingBack().last().first().last().getSubstitute());
        assertEq(2, fightSimulation_.getActionsBeforeRound().size());
        assertEq(2, fightSimulation_.getActionsBeforeRound().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().first().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().first().last().size());
        assertEq(2, fightSimulation_.getActionsBeforeRound().last().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().last().first().size());
        assertEq(1, fightSimulation_.getActionsBeforeRound().last().last().size());
        ChoiceOfEvolutionAndMoves choice_;
        assertEq(2, fightSimulation_.getMovesAbilities().size());
        assertEq(2, fightSimulation_.getMovesAbilities().first().size());
        assertEq(3, fightSimulation_.getMovesAbilities().first().first().size());
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)0);
        assertEq(TETARTE, choice_.getName());
        assertEq(ABSORB_EAU, choice_.getAbility());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().first().first().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(3, fightSimulation_.getMovesAbilities().first().last().size());
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)0);
        assertEq(TARPAUD, choice_.getName());
        assertEq(ABSORB_EAU, choice_.getAbility());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().first().last().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(2, fightSimulation_.getMovesAbilities().last().size());
        assertEq(3, fightSimulation_.getMovesAbilities().last().first().size());
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)0);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertTrue(choice_.getKeptMoves().containsObj(SACRIFICE));
        assertTrue(choice_.getKeptMoves().containsObj(TORGNOLES));
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(4, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(PLAQUAGE));
        assertTrue(choice_.getKeptMoves().containsObj(REVEIL_FORCE));
        assertTrue(choice_.getKeptMoves().containsObj(BULLES_D_O));
        assertTrue(choice_.getKeptMoves().containsObj(PISTOLET_A_O));
        choice_ = fightSimulation_.getMovesAbilities().last().first().getVal((byte)2);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        assertEq(3, fightSimulation_.getMovesAbilities().last().last().size());
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)0);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)1);
        assertEq(NULL_REF, choice_.getName());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
        choice_ = fightSimulation_.getMovesAbilities().last().last().getVal((byte)2);
        assertEq(MUNJA, choice_.getName());
        assertEq(GARDE_MYSTIK, choice_.getAbility());
        assertEq(1, choice_.getKeptMoves().size());
        assertTrue(choice_.getKeptMoves().containsObj(CHARGE));
    }
    @Test
    public void possibleMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        assertEq(0, fightSimulation_.possibleMoves(1, 0, 0).size());
    }

    @Test
    public void possibleMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        StringList possibleMoves_ = fightSimulation_.possibleMoves(1, 0, 1);
        assertEq(4, possibleMoves_.size());
        assertTrue(possibleMoves_.containsObj(BULLES_D_O));
        assertTrue(possibleMoves_.containsObj(CHARGE));
        assertTrue(possibleMoves_.containsObj(SACRIFICE));
        assertTrue(possibleMoves_.containsObj(TORGNOLES));
    }

    @Test
    public void possibleMoves3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        StringList possibleMoves_ = fightSimulation_.possibleMoves(1, 1, 2);
        assertEq(1, possibleMoves_.size());
        assertTrue(possibleMoves_.containsObj(CHARGE));
    }

    @Test
    public void possibleMoves4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        StringList possibleMoves_ = fightSimulation_.possibleMoves(0, 0, 0);
        assertEq(1, possibleMoves_.size());
        assertTrue(possibleMoves_.containsObj(CHARGE));
    }

    @Test
    public void possibleMoves5Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateAllMoves(_data_);
        StringList possibleMoves_ = fightSimulation_.possibleMoves(1, 0, 2);
        assertEq(1, possibleMoves_.size());
        assertTrue(possibleMoves_.containsObj(CHARGE));
    }

    @Test
    public void chooseMove1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMove(1, 0, 1, BULLES_D_O, POKEMON_FOE_TARGET_ZERO, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(1).first().first();
        assertEq(BULLES_D_O, action_.getFirstChosenMove());
        assertEq(1, action_.getChosenTargets().size());
        assertEq(POKEMON_FOE_TARGET_ZERO, action_.getChosenTargets().first());
    }

    @Test
    public void chooseMove2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMove(1, 0, 1, BULLES_D_O, POKEMON_FOE_TARGET_ZERO, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(1).first().first();
        assertEq(BULLES_D_O, action_.getFirstChosenMove());
        assertEq(1, action_.getChosenTargets().size());
        assertEq(POKEMON_FOE_TARGET_ZERO, action_.getChosenTargets().first());
    }

    @Test
    public void chooseMove3Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(BROUHAHA), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        fightSimulation_.validateMovesOneFight(1, _data_);
//        fightSimulation_.validateMoves(1, data);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
//        fightSimulation_.validateMoves(1, data);
//        fightSimulation_.validateMoves(1, data);
//        fightSimulation_.deleteMove(0, CHARGE);
//        fightSimulation_.addMove(0, PLAQUAGE);
//        fightSimulation_.addMove(0, REVEIL_FORCE);
//        fightSimulation_.addMove(0, BULLES_D_O);
//        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, PISTOLET_A_O, BULLES_D_O, PLAQUAGE), _data_);
        //fightSimulation_.validateMovesOneFight(0, data);
//        fightSimulation_.validateMoves(0, data);
//        fightSimulation_.validateMoves(0, data);
        fightSimulation_.validateMovesOneFight(2, _data_);
//        fightSimulation_.validateMoves(2, data);
//        fightSimulation_.validateMoves(2, data);
//        fightSimulation_.deleteMove(2, CHARGE);
//        fightSimulation_.addMove(2, BALL_OMBRE);
//        fightSimulation_.addMove(2, TUNNEL);
//        fightSimulation_.addMove(2, OMBRE_PORTEE);
//        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMove(0, 0, 0, BROUHAHA, POKEMON_FOE_TARGET_ZERO, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(0).first().first();
        assertEq(BROUHAHA, action_.getFirstChosenMove());
        assertEq(0, action_.getChosenTargets().size());
        //assertEq(POKEMON_FOE_TARGET_ZERO, action_.getChosenTargets().first());
    }

    @Test
    public void chooseMove4Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFight(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        //fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
//        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
//        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
//        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearntOneFight(_data_);
        fightSimulation_.validateMoves(1, _data_);
//        fightSimulation_.validateMoves(1, data);
//        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
//        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
//        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
//        fightSimulation_.validateMoves(1, data);
//        fightSimulation_.validateMoves(1, data);
        fightSimulation_.keepMoves(0, new StringList(BROUHAHA, PISTOLET_A_O, BULLES_D_O, PLAQUAGE), _data_);
//        fightSimulation_.deleteMove(0, CHARGE);
//        fightSimulation_.addMove(0, PLAQUAGE);
//        fightSimulation_.addMove(0, REVEIL_FORCE);
//        fightSimulation_.addMove(0, BULLES_D_O);
//        fightSimulation_.addMove(0, PISTOLET_A_O);
//        fightSimulation_.validateMoves(0, data);
//        fightSimulation_.validateMoves(0, data);
//        fightSimulation_.validateMoves(0, data);
        fightSimulation_.validateMoves(2, _data_);
//        fightSimulation_.validateMoves(2, data);
//        fightSimulation_.validateMoves(2, data);
//        fightSimulation_.deleteMove(2, CHARGE);
//        fightSimulation_.addMove(2, BALL_OMBRE);
//        fightSimulation_.addMove(2, TUNNEL);
//        fightSimulation_.addMove(2, OMBRE_PORTEE);
//        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMove(0, 0, 0, BULLES_D_O, POKEMON_FOE_TARGET_ZERO, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(0).first().first();
        assertEq(BULLES_D_O, action_.getFirstChosenMove());
        assertEq(1, action_.getChosenTargets().size());
        assertEq(POKEMON_FOE_TARGET_ZERO, action_.getChosenTargets().first());
    }

    @Test
    public void chooseMoveFirstFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMoveFirstFight(0, 0, BULLES_D_O, false,0, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(0).first().first();
        assertEq(BULLES_D_O, action_.getFirstChosenMove());
        assertEq(1, action_.getChosenTargets().size());
        assertEq(POKEMON_FOE_TARGET_ZERO, action_.getChosenTargets().first());
    }

    @Test
    public void chooseMoveFirstFight2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMoveFirstFight(0, 0, BULLES_D_O, true,0, _data_);
        ActionMove action_;
        action_ = fightSimulation_.getActionsBeforeRound().get(0).first().first();
        assertEq(BULLES_D_O, action_.getFirstChosenMove());
        assertEq(1, action_.getChosenTargets().size());
        assertEq(POKEMON_PLAYER_TARGET_ZERO, action_.getChosenTargets().first());
    }
    @Test
    public void cancelAllMovesOneFight1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.cancelAllMovesOneFight(0,_data_);
        StringList action_;
        action_ = fightSimulation_.getKeptMoves().getValue(0).getValue(0);
        assertEq(1, action_.size());
        assertEq(CHARGE, action_.first());
    }
    @Test
    public void validChoicesMoves1Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        assertTrue(!fightSimulation_.validChoicesMoves());
    }

    @Test
    public void validChoicesMoves2Test() {
        Difficulty diff_ = new Difficulty();
        FightSimulation fightSimulation_ = new FightSimulation(diff_, _data_);
        fightSimulation_.initializeFights(newCoords(6, 0, 4, 8), CustList.INDEX_NOT_FOUND_ELT, _data_);
        WildPk pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(PTITARD);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 25);
        pokemon_.setName(TETARTE);
        pokemon_.setAbility(ABSORB_EAU);
        pokemon_.setItem(OEUF_CHANCE);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        pokemon_ = new WildPk();
        pokemon_.setLevel((short) 3);
        pokemon_.setName(NINGALE);
        pokemon_.setAbility(OEIL_COMPOSE);
        pokemon_.setItem(NULL_REF);
        pokemon_.setGender(Gender.NO_GENDER);
        fightSimulation_.addPokemonPlayer(pokemon_, new StringList(CHARGE), (byte) 70, Rate.zero(), _data_);
        fightSimulation_.setPokemonPlayerObjectAfterFight(0, 2, PLAQUE_DRACO);
        fightSimulation_.setFirstEvolutions(_data_);
        fightSimulation_.setNextEvolutions(0, TETARTE, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(0, TARPAUD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(1, TARTARD, (short) 25, _data_);
        fightSimulation_.setNextEvolutions(2, MUNJA, (short) 20, _data_);
        fightSimulation_.initializeFrontFighters();
        fightSimulation_.getFrontFighters().first().first().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().first().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)0, (byte)0);
        fightSimulation_.getFrontFighters().first().last().put((byte)1, Fighter.BACK);
        fightSimulation_.getFrontFighters().first().last().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)1, (byte)0);
        fightSimulation_.getFrontFighters().last().first().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().first().put((byte)2, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)2, (byte)0);
        fightSimulation_.getFrontFighters().last().last().put((byte)0, Fighter.BACK);
        fightSimulation_.getFrontFighters().last().last().put((byte)1, Fighter.BACK);
        fightSimulation_.prepareMovesToBeLearnt(_data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.addMoveBetweenFights(1, 0, BULLES_D_O);
        fightSimulation_.addMoveBetweenFights(1, 0, SACRIFICE);
        fightSimulation_.addMoveBetweenFights(1, 0, TORGNOLES);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.validateMoves(1, _data_);
        fightSimulation_.deleteMove(0, CHARGE);
        fightSimulation_.addMove(0, PLAQUAGE);
        fightSimulation_.addMove(0, REVEIL_FORCE);
        fightSimulation_.addMove(0, BULLES_D_O);
        fightSimulation_.addMove(0, PISTOLET_A_O);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(0, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.validateMoves(2, _data_);
        fightSimulation_.deleteMove(2, CHARGE);
        fightSimulation_.addMove(2, BALL_OMBRE);
        fightSimulation_.addMove(2, TUNNEL);
        fightSimulation_.addMove(2, OMBRE_PORTEE);
        fightSimulation_.addMove(2, GRIFFE_ACIER);
        fightSimulation_.validateAllMoves(_data_);
        fightSimulation_.chooseMove(0, 0, 0, CHARGE, POKEMON_FOE_TARGET_ZERO, _data_);
        fightSimulation_.chooseMove(0, 1, 0, PLAQUAGE, POKEMON_FOE_TARGET_ZERO, _data_);
        fightSimulation_.chooseMove(1, 0, 1, BULLES_D_O, POKEMON_FOE_TARGET_ZERO, _data_);
        fightSimulation_.chooseMove(1, 1, 2, BALL_OMBRE, POKEMON_FOE_TARGET_ZERO, _data_);
        assertTrue(fightSimulation_.validChoicesMoves());
    }

    private static Coords newCoords(int _place, int _level, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Coords newCoords(int _place, int _level, int _xi, int _yi, int _x, int _y) {
        Coords begin_ = new Coords();
        begin_.setNumberPlace((short) _place);
        begin_.setInsideBuilding(newPoint(_xi, _yi));
        begin_.setLevel(new LevelPoint());
        begin_.getLevel().setLevelIndex((byte) _level);
        begin_.getLevel().setPoint(newPoint(_x, _y));
        return begin_;
    }

    private static Point newPoint(int _x,int _y) {
        return new Point((short)_x, (short)_y);
    }
}
