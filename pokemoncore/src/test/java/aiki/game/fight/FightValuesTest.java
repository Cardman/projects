package aiki.game.fight;
import static aiki.EquallablePkUtil.assertEq;

import org.junit.Test;

import aiki.DataBase;
import aiki.fight.enums.Statistic;
import aiki.game.params.Difficulty;
import aiki.game.player.Player;
import aiki.map.characters.GymLeader;
import aiki.map.levels.enums.EnvironmentType;
import aiki.map.pokemon.PkTrainer;
import aiki.map.pokemon.Pokemon;
import aiki.map.pokemon.PokemonPlayer;
import aiki.map.pokemon.WildPk;
import aiki.map.pokemon.enums.Gender;
import code.maths.LgInt;
import code.maths.Rate;
import code.util.CustList;
import code.util.StringList;
import code.util.StringMap;

@SuppressWarnings("static-method")
public class FightValuesTest extends InitializationDataBase {

    private static final String PIKA = "PIKA";
    private static final String SEPARATOR_SET = ";";

    private static Fight calculateValuesFighter() {
        Difficulty diff_= new Difficulty();
        Player player_ = new Player(NICKNAME,null,diff_,false,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(YANMA);
        pokemon_.setItem(NULL_REF);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 32);
        StringMap<Short> moves_ = new StringMap<Short>();
        moves_.put(A_LA_QUEUE, (short) 10);
        moves_.put(APRES_VOUS, (short) 10);
        moves_.put(SEISME, (short) 10);
        moves_.put(BROUHAHA, (short) 10);
        PokemonPlayer pokemonUser_ = new PokemonPlayer(pokemon_, _data_, moves_);
        pokemonUser_.initIv(new Difficulty());
        pokemonUser_.setNickname(PIKA);
        pokemonUser_.setUsedBallCatching(SUPER_BALL);
        pokemonUser_.setHappiness((short) 140);
        pokemonUser_.setWonExpSinceLastLevel(new Rate("3167"));
        player_.getTeam().add(pokemonUser_);
        pokemonUser_ = new PokemonPlayer(pokemon_, _data_, moves_);
        pokemonUser_.initIv(new Difficulty());
        pokemonUser_.setNickname(PIKA);
        pokemonUser_.setUsedBallCatching(SUPER_BALL);
        pokemonUser_.setHappiness((short) 140);
        pokemonUser_.setWonExpSinceLastLevel(new Rate("3167"));
        player_.getTeam().add(pokemonUser_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 1);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_,player_, diff_, trainer_, _data_);
        fight_.setEnvType(EnvironmentType.ROAD);
        return fight_;
    }

    @Test
    public void calculateValuesFighter1Test() {
        Fight fight_ = calculateValuesFighter();
        FightRound.initRound(fight_);
        StringMap<String> map_ = FightValues.calculateValuesFighter(fight_,POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(YANMA, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NOM));
        assertEq("38", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_MASSE));
        assertEq("6/5", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TAILLE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_GENRE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_OBJET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_FIGHTER));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DER_JOUE));
        assertEq("32", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NIVEAU));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq("10", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+PROVOC));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+TOURMENTE));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("75", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_EAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_DE_FEU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_HERBE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(NULL_REF);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATUTS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(INSECTE,VOL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(NULL_REF);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValuesFighter2Test() {
        Fight fight_ = calculateValuesFighter();
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).variationBoostStatistique(Statistic.EVASINESS, (byte) 1);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(BRULURE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setActed(true);
        StringMap<String> map_ = FightValues.calculateValuesFighter(fight_,POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(YANMA, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NOM));
        assertEq("38", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_MASSE));
        assertEq("6/5", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TAILLE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_GENRE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_OBJET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_CLONE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_FIGHTER));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DER_JOUE));
        assertEq("32", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NIVEAU));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq("10", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+PROVOC));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+TOURMENTE));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("75", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_EAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_DE_FEU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_HERBE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(BRULURE);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATUTS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(INSECTE,VOL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(NULL_REF);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValuesFighter3Test() {
        Fight fight_ = calculateValuesFighter();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).variationBoostStatistique(Statistic.EVASINESS, (byte) 1);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(BRULURE);
        StringMap<String> map_ = FightValues.calculateValuesFighter(fight_,POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(YANMA, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NOM));
        assertEq("38", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_MASSE));
        assertEq("6/5", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TAILLE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_GENRE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_OBJET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_FIGHTER));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DER_JOUE));
        assertEq("32", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NIVEAU));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq("10", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+PROVOC));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+TOURMENTE));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("75", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_EAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_DE_FEU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_HERBE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(BRULURE);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATUTS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(INSECTE,VOL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(NULL_REF);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValuesFighter4Test() {
        Fight fight_ = calculateValuesFighter();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).variationBoostStatistique(Statistic.EVASINESS, (byte) 1);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(BRULURE);
        StringMap<String> map_ = FightValues.calculateValuesFighter(fight_,POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(YANMA, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NOM));
        assertEq("38", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_MASSE));
        assertEq("6/5", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TAILLE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_GENRE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_OBJET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_FIGHTER));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DER_JOUE));
        assertEq("32", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NIVEAU));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("140", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq("10", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+PROVOC));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+TOURMENTE));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("75", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("45", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("65", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_EAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_DE_FEU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_HERBE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(BRULURE);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_STATUTS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(INSECTE,VOL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(NULL_REF);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValuesFighter5Test() {
        Fight fight_ = calculateValuesFighter();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).variationBoostStatistique(Statistic.EVASINESS, (byte) 1);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(BRULURE);
        StringMap<String> map_ = FightValues.calculateValuesFighter(fight_,POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(TARTARD, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NOM));
        assertEq("54", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_MASSE));
        assertEq("13/10", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_TAILLE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_GENRE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_OBJET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_CLONE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_FIGHTER));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DER_JOUE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_NIVEAU));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BONHEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.FIGHTER_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_PP+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+PROVOC));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR+DataBase.SEP_BETWEEN_KEYS+TOURMENTE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.FIGHTER_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_EAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_DE_FEU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Team.NB_UTILI_ATT_EQ_TOUR+DataBase.SEP_BETWEEN_KEYS+AIRE_D_HERBE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_FIGHTER));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
    }

    private static Fight calculateValues() {
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        Player player_ = new Player(NICKNAME,null,diff_,false,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        StringMap<Short> moves_ = new StringMap<Short>();
        moves_.put(SEISME, (short) 10);
        moves_.put(A_LA_QUEUE, (short) 10);
        moves_.put(APRES_VOUS, (short) 10);
        moves_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 3);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_,player_, diff_, trainer_, _data_);
        return fight_;
    }

    @Test
    public void calculateValues1Test() {
        Fight fight_ = calculateValues();
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        StringMap<String> map_ = FightValues.calculateValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.RATE_EFF_MOVE_AGAINST_TARGET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("6", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_CIBLE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_CIBLE));
        assertEq(ZENITH, map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_RESTANTS));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_MAX));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_RESTANTS));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_MAX));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_GENRE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_GENRE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_NIVEAU));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_NIVEAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_CLONE));
        assertEq(METEO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CAPACITE));
        assertEq(MULTITYPE, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_CAPACITE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_OBJET));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_OBJET));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUE_CHOISIE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_CIBLE));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TYPES));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TYPES));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATUTS));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATUTS));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("80", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("85", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_MASSE));
        assertEq("1/10", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TAILLE));
        assertEq("54", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_MASSE));
        assertEq("13/10", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TAILLE));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValues2Test() {
        Fight fight_ = calculateValues();
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).variationBoostStatistique(Statistic.ATTACK, (byte) 1);
        StringMap<String> map_ = FightValues.calculateValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.RATE_EFF_MOVE_AGAINST_TARGET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("6", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_LANCEUR));
        assertEq(ZENITH, map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_RESTANTS));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_MAX));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_GENRE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_NIVEAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CLONE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_OBJET));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_LANCEUR));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TYPES));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATUTS));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("80", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_MASSE));
        assertEq("1/10", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TAILLE));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValues3Test() {
        Fight fight_ = calculateValues();
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.ATTACK, (byte) 1);
        StringMap<String> map_ = FightValues.calculateValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.RATE_EFF_MOVE_AGAINST_TARGET));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("6", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_CIBLE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_CIBLE));
        assertEq(ZENITH, map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_RESTANTS));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_MAX));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_RESTANTS));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_MAX));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_GENRE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_GENRE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_NIVEAU));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_NIVEAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_CLONE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_OBJET));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_OBJET));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUE_CHOISIE));
        assertEq(NULL_REF, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_LANCEUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_CIBLE));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TYPES));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TYPES));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATUTS));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATUTS));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("80", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("85", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_MASSE));
        assertEq("1/10", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TAILLE));
        assertEq("54", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_MASSE));
        assertEq("13/10", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TAILLE));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValues4Test() {
        Fight fight_ = calculateValues();
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_TWO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_TWO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_TWO).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setActed(true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_TWO).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.ATTACK, (byte) 1);
        StringMap<String> map_ = FightValues.calculateValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.RATE_EFF_MOVE_AGAINST_TARGET));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("6", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_CIBLE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_CIBLE));
        assertEq(ZENITH, map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_RESTANTS));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_MAX));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_RESTANTS));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_MAX));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_GENRE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_GENRE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_NIVEAU));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_NIVEAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_CLONE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_OBJET));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_OBJET));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUE_CHOISIE));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_LANCEUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_CIBLE));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TYPES));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TYPES));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATUTS));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATUTS));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("80", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("85", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_MASSE));
        assertEq("1/10", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TAILLE));
        assertEq("54", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_MASSE));
        assertEq("13/10", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TAILLE));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    @Test
    public void calculateValues5Test() {
        Fight fight_ = calculateValues();
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ONE).setGroundPlace(Fighter.BACK);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setGroundPlace(Fighter.BACK);
        fight_.getFighter(POKEMON_FOE_FIGHTER_TWO).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_TWO).setRemainingHp(Rate.zero());
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setDisappeared(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setActed(true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.ATTACK, (byte) 1);
        StringMap<String> map_ = FightValues.calculateValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(EnvironmentType.ROAD.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LIEU_COMBAT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.RATE_EFF_MOVE_AGAINST_TARGET));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.TEMPS_TOUR));
        assertEq("2", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_COMBATTANTS_TERRAIN));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_LANCEUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_CIBLE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_KO_EQUIPE_ADV_CIBLE));
        assertEq(ZENITH, map_.getVal(DataBase.VAR_PREFIX+Fight.CLIMATS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.NB_TOUR_GLOBAL+DataBase.SEP_BETWEEN_KEYS+GRAVITE));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_RESTANTS));
        assertEq("1873/100", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_PV_MAX));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_RESTANTS));
        assertEq("92/5", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_PV_MAX));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_GENRE));
        assertEq(Gender.NO_GENDER.name(), map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_GENRE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_NIVEAU));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_NIVEAU));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.CIBLE_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+GARDE_LARGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+STOCKAGE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+ABRI));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+TENACITE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+DETECTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+BOUL_ARMURE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fighter.LANCEUR_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PREVENTION));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_CLONE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_CLONE));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_OBJET));
        assertEq(PLAQUE_DRACO, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_OBJET));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUE_CHOISIE));
        assertEq(SEISME, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUE_CHOISIE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOTAL_TOUR));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DISPARAIT));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DISPARAIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_JOUE));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_JOUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_LANCEUR));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.SOMME_BOOST_POS_CIBLE));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TYPES));
        assertEq(EAU, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TYPES));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATUTS));
        assertEq(SOMMEIL+SEPARATOR_SET+VAMPIGRAINE, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATUTS));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("50", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("80", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("85", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("95", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("70", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("90", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_STATIS+DataBase.SEP_BETWEEN_KEYS+Statistic.HP));
        assertEq("1", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_ATTACK));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPECIAL_DEFENSE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.SPEED));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.ACCURACY));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.EVASINESS));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_BOOST+DataBase.SEP_BETWEEN_KEYS+Statistic.CRITICAL_HIT));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_DEGATS_RECUS+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+PHYSIQUE));
        assertEq("0", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_DEGATS_RECUS_TOUR+DataBase.SEP_BETWEEN_KEYS+SPECIALE));
        assertEq("3", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_MASSE));
        assertEq("1/10", map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_TAILLE));
        assertEq("54", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_MASSE));
        assertEq("13/10", map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_TAILLE));
        StringList expectedList_;
        StringList resultList_;
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
        expectedList_ = new StringList(TENEBRE,SOL,NORMAL);
        resultList_ = StringList.splitChars(map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_ATTAQUES_TYPES), _data_.getSepartorSetChar());
        expectedList_.sort();
        resultList_.sort();
        assertEq(expectedList_,resultList_);
    }

    private static Fight calculateBasicBooleanValues(byte _mult) {
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        Player player_ = new Player(NICKNAME,null,diff_,false,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        StringMap<Short> moves_ = new StringMap<Short>();
        moves_.put(SEISME, (short) 10);
        moves_.put(A_LA_QUEUE, (short) 10);
        moves_.put(APRES_VOUS, (short) 10);
        moves_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight(_mult);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_,player_, diff_, trainer_, _data_);
        return fight_;
    }

    @Test
    public void calculateBasicBooleanValues1Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues2Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues3Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues4Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues5Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        FightRound.initRound(fight_);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues6Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).usePowerPointsByMove(new Difficulty(), SEISME, (short) 1);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).successUsingMove();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.ATTACK, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.DEFENSE, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.SPECIAL_ATTACK, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.SPECIAL_DEFENSE, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.SPEED, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.ACCURACY, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.EVASINESS, (byte) _data_.getMaxBoost());
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).variationBoostStatistique(Statistic.CRITICAL_HIT, (byte) _data_.getMaxBoost());
        StringMap<String> map_;
        map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues7Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(NULL_REF);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues8Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setLastSufferedMoveTypes(new StringList(ROCHE));
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues9Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(ATTERRISSAGE);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues10Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setSuccessfulMove(false);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues11Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues12Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues13Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 2);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setRemainingHp(Rate.zero());
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues14Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 2);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setNbRounds(LgInt.one());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_TWO).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setCurrentGender(Gender.FEMALE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentGender(Gender.NO_GENDER);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues15Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 2);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaque(EMBARGO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueAntiImmu(ANTI_AIR);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueImmu(VOL_MAGNETIK, _data_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueFinTourIndividuel(ANNEAU_HYDRO);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).activerAttaqueBlocantLanceur(ROULADE);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).refPartAttaquesSurCombatAtt(new MoveTeamPosition(ENCORE, POKEMON_FOE_FIGHTER_ZERO)).setMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setFirstChosenMove(SEISME);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setNbRounds(LgInt.one());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ONE).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_TWO).setRemainingHp(Rate.zero());
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setCurrentGender(Gender.MALE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentGender(Gender.FEMALE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getEnabledMovesForAlly().put(COUP_D_MAIN, true);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues16Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).successUsingMove();
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues17Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).successUsingMove();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setSuccessfulMove(false);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues18Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(NULL_REF);
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBasicBooleanValues19Test() {
        Fight fight_ = calculateBasicBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setLastSufferedMoveTypes(new StringList(ROCHE));
        StringMap<String> map_ = FightValues.calculateBasicBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, _data_);
        assertEq(42, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    private static Fight calculateBooleanValues(byte _mult) {
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        Player player_ = new Player(NICKNAME,null,diff_,false,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        StringMap<Short> moves_ = new StringMap<Short>();
        moves_.put(SEISME, (short) 10);
        moves_.put(A_LA_QUEUE, (short) 10);
        moves_.put(APRES_VOUS, (short) 10);
        moves_.put(BROUHAHA, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(A_LA_QUEUE,APRES_VOUS,SEISME,BROUHAHA));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight(_mult);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_,player_, diff_, trainer_, _data_);
        return fight_;
    }

    @Test
    public void calculateBooleanValues1Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, SEISME, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBooleanValues2Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, PICS_TOXIK, 0, _data_);
        assertEq(45, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_COMBATTANT_ENTRANT+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBooleanValues3Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, PICS_TOXIK, 0, _data_);
        assertEq(45, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_COMBATTANT_ENTRANT+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBooleanValues4Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ATTERRISSAGE);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(NULL_REF);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, COPIE, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
        /*map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, FORCE_NATURE, 0, data);
        assertEq(40, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));*/
    }

    @Test
    public void calculateBooleanValues5Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setLastSufferedMoveTypes(new StringList(ROCHE));
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, GRIBOUILLE, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
        /*map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, MOI_D_ABORD, 0, data);
        assertEq(40, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));*/
    }

    @Test
    public void calculateBooleanValues6Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(ANNEAU_HYDRO);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, COPIE, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBooleanValues7Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setLastUsedMove(NULL_REF);
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, FORCE_NATURE, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateBooleanValues8Test() {
        Fight fight_ = calculateBooleanValues((byte) 3);
        fight_.setEnvType(EnvironmentType.ROAD);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterTypes(EAU);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterStatut(SOMMEIL);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_FOE_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).affecterPseudoStatut(POKEMON_PLAYER_FIGHTER_ZERO, VAMPIGRAINE);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setCurrentAbility(LEVITATION);
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).getTrackingMoves().getVal(new MoveTeamPosition(ENCORE, POKEMON_PLAYER_FIGHTER_ZERO)).getActivity().enable();
        fight_.getFighter(POKEMON_FOE_FIGHTER_ZERO).setFirstChosenMove(ANNEAU_HYDRO);
        FightRound.initRound(fight_);
        fight_.getFighter(POKEMON_PLAYER_FIGHTER_ZERO).setLastSufferedMoveTypes(new StringList(ROCHE));
        StringMap<String> map_ = FightValues.calculateBooleanValues(fight_,POKEMON_PLAYER_FIGHTER_ZERO, POKEMON_FOE_FIGHTER_ZERO, MOI_D_ABORD, 0, _data_);
        assertEq(44, map_.size());
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.AUCUN_BOOST_POSSIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ATTERRISSAGE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ENTRAVE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+REFLET_MAGIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_FOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+AMOUR_TRES_MOU));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+CAUCHEMAR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+COUP_DE_BEC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_BLANCHE_BIS));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+NUIT_NOIRE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+PRISE_DE_TETE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.CIBLE_POSSEDE_STATUT_RELATION+DataBase.SEP_BETWEEN_KEYS+VAMPIGRAINE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.EXISTE_GENRE_ASSEXUE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.GENRES_EGAUX));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.IMMU_TYPE_ATT_CIBLE+DataBase.SEP_BETWEEN_KEYS+SOL));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANNEAU_HYDRO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ANTI_AIR));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+COUP_D_MAIN));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+EMBARGO));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ENCORE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+RACINES));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+ROULADE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+SEISME));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.LANCEUR_EFFET+DataBase.SEP_BETWEEN_KEYS+VOL_MAGNETIK));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUES_COPIABLES));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_ATTAQUE_INVOC));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_ARRIERE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PARTENAIRE_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_PP_ATTAQUE_CIBLE));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_TOUR_TERRAIN));
        assertEq(V, map_.getVal(DataBase.VAR_PREFIX+Fight.PAS_UTILIS_ATTAQUE_CIBLE));
        assertEq(F, map_.getVal(DataBase.VAR_PREFIX+Fight.TYPES_ATTAQUES_RES_VIDE));
    }

    @Test
    public void calculateSendingVariables1Test() {
        Difficulty diff_= new Difficulty();
        diff_.setEnabledClosing(true);
        Player player_ = new Player(NICKNAME,null,diff_,false,_data_);
        Pokemon pokemon_ = new WildPk();
        pokemon_.setName(ARTIKODIN);
        pokemon_.setItem(PLAQUE_DRACO);
        pokemon_.setAbility(METEO);
        pokemon_.setGender(Gender.NO_GENDER);
        pokemon_.setLevel((short) 3);
        StringMap<Short> moves_ = new StringMap<Short>();
        moves_.put(SEISME, (short) 10);
        moves_.put(COPIE, (short) 10);
        moves_.put(GLAS_DE_SOIN, (short) 10);
        moves_.put(INTERVERSION, (short) 10);
        PokemonPlayer lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        lasPk_ = new PokemonPlayer(pokemon_,_data_, moves_);
        lasPk_.initIv(diff_);
        lasPk_.initPvRestants(_data_);
        player_.getTeam().add(lasPk_);
        CustList<PkTrainer> foeTeam_ = new CustList<PkTrainer>();
        PkTrainer foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(PLAQUE_DRACO);
        foePokemon_.setAbility(MULTITYPE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 3);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        foePokemon_ = new PkTrainer();
        foePokemon_.setName(TARTARD);
        foePokemon_.setItem(MAGNET);
        foePokemon_.setAbility(SECHERESSE);
        foePokemon_.setGender(Gender.NO_GENDER);
        foePokemon_.setLevel((short) 4);
        foePokemon_.setMoves(new StringList(JACKPOT,PAR_ICI,COPIE));
        foeTeam_.add(foePokemon_);
        GymLeader trainer_ = new GymLeader();
        trainer_.setTeam(foeTeam_);
        trainer_.setReward((short) 200);
        trainer_.setMultiplicityFight((byte) 3);
        Fight fight_ = FightFacade.newFight();
        FightFacade.initFight(fight_,player_, diff_, trainer_, _data_);
        fight_.setEnvType(EnvironmentType.ROAD);
        StringMap<String> map_ = FightValues.calculateSendingVariables(fight_,POKEMON_PLAYER_FIGHTER_ZERO, _data_);
        assertEq("0",map_.getVal(DataBase.VAR_PREFIX+Fight.COMBATTANT_ENTRANT_CLONE));
        assertEq(ELECTRIQUE,map_.getVal(DataBase.VAR_PREFIX+Fight.COMBATTANT_ENTRANT_TYPES));
        assertEq("1",map_.getVal(DataBase.VAR_PREFIX+Fight.COEFF_EFF_BASE_TYPES_COMBATTANT_ENTRANT+DataBase.SEP_BETWEEN_KEYS+ROCHE));
        assertEq("0",map_.getVal(DataBase.VAR_PREFIX+Fight.EQUIPE_ADV_COMBATTANT_ENTRANT_NB_UTILISATION+DataBase.SEP_BETWEEN_KEYS+PICOTS));
    }

}
