package aiki.game.fight;
import aiki.db.DataBase;
import aiki.fight.effects.EffectWhileSending;
import aiki.fight.effects.EffectWhileSendingSimple;
import aiki.fight.enums.Statistic;
import aiki.fight.items.Ball;
import aiki.fight.items.Berry;
import aiki.fight.items.Boost;
import aiki.fight.items.EvolvingItem;
import aiki.fight.items.EvolvingStone;
import aiki.fight.items.Fossil;
import aiki.fight.items.HealingHp;
import aiki.fight.items.HealingHpStatus;
import aiki.fight.items.HealingItem;
import aiki.fight.items.HealingPp;
import aiki.fight.items.HealingSimpleItem;
import aiki.fight.items.HealingSimpleStatus;
import aiki.fight.items.HealingStatus;
import aiki.fight.items.ItemForBattle;
import aiki.fight.items.Repel;
import aiki.fight.items.SellingItem;
import aiki.fight.moves.effects.EffectEndRound;
import aiki.fight.moves.effects.EffectEndRoundIndividual;
import aiki.fight.moves.enums.TargetChoice;
import aiki.fight.util.BoostHpRate;
import aiki.fight.util.EfficiencyRate;
import aiki.fight.util.StatisticPokemon;
import code.maths.LgInt;
import code.maths.Rate;
import code.maths.montecarlo.MonteCarloBoolean;
import code.util.CustList;
import code.util.EnumMap;
import code.util.*;
import code.util.ObjectMap;
import code.util.StringList;
import code.util.StringMap;

final class InitializationItems {

    static final String ROCHE_LISSE = "ROCHE_LISSE";
    static final String HERBEBLANCHE = "HERBEBLANCHE";
    static final String HUILE_MAX = "HUILE_MAX";
    static final String BALLON = "BALLON";
    static final String LAVA = "LAVA";
    static final String VIEIL_AMBRE = "VIEIL_AMBRE";
    static final String GRELOT_COQUE = "GRELOT_COQUE";
    static final String VIVE_GRIFFE_FALSE = "VIVE_GRIFFE_FALSE";
    static final String VIVE_GRIFFE_TRUE_FALSE = "VIVE_GRIFFE_TRUE_FALSE";
    static final String VIVE_GRIFFE_TRUE = "VIVE_GRIFFE_TRUE";
    static final String VIVE_GRIFFE = "VIVE_GRIFFE";
    static final String OEUF_CHANCE = "OEUF_CHANCE";
    static final String BAIE_JABOCA = "BAIE_JABOCA";
    static final String ENCENS_PUR = "ENCENS_PUR";
    static final String ACCRO_GRIFFE = "ACCRO_GRIFFE";
    static final String GRELOT_ZEN = "GRELOT_ZEN";
    static final String BAIE_CERIZ = "BAIE_CERIZ";
    static final String HERBE_POUV = "HERBE_POUV";
    static final String BAIE_LANSAT = "BAIE_LANSAT";
    static final String BAIE_PITAYE = "BAIE_PITAYE";
    static final String BANDEAU = "BANDEAU";
    static final String ELIXIR = "ELIXIR";
    static final String ENCENS_VAGUE = "ENCENS_VAGUE";
    static final String HERBE_MENTAL = "HERBE_MENTAL";
    static final String BOUE_BLANCHE = "BOUE_BLANCHE";
    static final String BOUE_NOIRE = "BOUE_NOIRE";
    static final String POUDRE_ATTAQUE = "POUDRE_ATTAQUE";
    static final String POUDRE_VITE = "POUDRE_VITE";
    static final String PIERRE_GLACE = "PIERRE_GLACE";
    static final String PIERRE_SOLEIL = "PIERRE_SOLEIL";
    static final String PIERRE_LUNE = "PIERRE_LUNE";
    static final String PIERRE_EAU = "PIERRE_EAU";
    static final String ROCHE_ROYALE = "ROCHE_ROYALE";
    static final String PAS_DE_BALL = "PAS_DE_BALL";
    static final String BANDEAU_ETREINTE = "BANDEAU_ETREINTE";
    static final String CARTE_ROUGE = "CARTE_ROUGE";
    static final String BATON = "BATON";
    static final String CEINT_POUV = "CEINT_POUV";
    static final String BAIE_CHERIM = "BAIE_CHERIM";
    static final String CABLE = "CABLE";
    static final String PIERRALLEGEE = "PIERRALLEGEE";
    static final String PIECE_RUNE = "PIECE_RUNE";
    static final String PIQUANTS = "PIQUANTS";
    static final String REVEIL = "REVEIL";
    static final String TOTAL_SOIN = "TOTAL_SOIN";
    static final String PT_DE_MIRE = "PT_DE_MIRE";
    static final String BAIE_MEPO = "BAIE_MEPO";
    static final String BOLT = "BOLT";
    static final String MUSCLE = "MUSCLE";
    static final String PP_PLUS_BIS = "PP_PLUS_BIS";
    static final String PP_PLUS = "PP_PLUS";
    static final String ORBE_FLAMME = "ORBE_FLAMME";
    static final String BAIE_GOWAV = "BAIE_GOWAV";
    static final String PV_PLUS = "PV_PLUS";
    static final String MAX_REPOUSSE = "MAX_REPOUSSE";
    static final String CEINTURE_PRO = "CEINTURE_PRO";
    static final String ENCENS_PLEIN = "ENCENS_PLEIN";
    static final String BAIE_ORAN = "BAIE_ORAN";
    static final String BAIE_MICLE = "BAIE_MICLE";
    static final String BRAC_MACHO = "BRAC_MACHO";
    static final String GRAIN_MIRACL = "GRAIN_MIRACL";
    static final String PIERRE_STASE = "PIERRE_STASE";
    static final String MULTI_EXP = "MULTI_EXP";
    static final String LENTILSCOPE = "LENTILSCOPE";
    static final String CEINT_FORCE = "CEINT_FORCE";
    static final String RESTES = "RESTES";
    static final String HAPPY_POTION = "HAPPY_POTION";
    static final String POTION = "POTION";
    static final String EAU_FRAICHE = "EAU_FRAICHE";
    static final String HYPER_BALL = "HYPER_BALL";
    static final String SUPER_BALL = "SUPER_BALL";
    static final String POKE_BALL = "POKE_BALL";
    static final String MASTER_BALL = "MASTER_BALL";
    static final String LUXE_BALL = "LUXE_BALL";
    static final String ORBE_VIE = "ORBE_VIE";
    static final String PLAQUE_DRACO = "PLAQUE_DRACO";
    static final String BOUTON_FUITE = "BOUTON_FUITE";
    static final String POTION_MAX = "POTION_MAX";
    static final String RAPPEL = "RAPPEL";
    static final String PETIT_RAPPEL = "PETIT_RAPPEL";
    static final String GRAND_RAPPEL = "GRAND_RAPPEL";
    static final String LUMARGILE = "LUMARGILE";
    static final String NOEUD_DESTIN = "NOEUD_DESTIN";
    static final String BAIE_MANGA = "BAIE_MANGA";
    static final String BAIE_LAMPOU = "BAIE_LAMPOU";
    static final String CENDRESACREE = "CENDRESACREE";
    static final String MAX_ELIXIR = "MAX_ELIXIR";
    static final String BAIE_ENIGMA = "BAIE_ENIGMA";
    static final String BLACK_BERRY = "BLACK_BERRY";
    static final String RASP_BERRY = "RASP_BERRY";
    static final String HUILE = "HUILE";
    static final String VULNE_ASSURANCE = "VULNE_ASSURANCE";
    static final String LICHEN_LUMINEUX = "LICHEN_LUMINEUX";
    static final String LUNETTES_FILTRE = "LUNETTES_FILTRE";
    static final String GRELOT = "GRELOT";
    static final String GROSSERACINE = "GROSSERACINE";
    static final String MAGNET = "MAGNET";
    static final String PEPITE = "PEPITE";
    static final String REPOUSSE = "REPOUSSE";
    static final String METRONOME_OBJ = "METRONOME_OBJ";


    private static final String TENEBRE = InitializationDataBase.TENEBRE;

    private static final String SOL = InitializationDataBase.SOL;

    private static final String EAU = InitializationDataBase.EAU;

    private static final String DRAGON = InitializationDataBase.DRAGON;

    private static final String POISON = InitializationDataBase.POISON;

    private static final String CARAPUCE = InitializationPokedex.CARAPUCE;
    private static final String LIMAGMA = InitializationPokedex.LIMAGMA;
    private static final String BABIMANTA = InitializationPokedex.BABIMANTA;
    private static final String ORAGE_BIS = InitializationMoves.ORAGE_BIS;
    private static final String TEMPETESABLE = InitializationMoves.TEMPETESABLE;
    private static final String PROTECTION = InitializationMoves.PROTECTION;
    private static final String POUDRE_TOXIK = InitializationMoves.POUDRE_TOXIK;
    private static final String MUR_LUMIERE = InitializationMoves.MUR_LUMIERE;
    private static final String SIPHON = InitializationMoves.SIPHON;
    private static final String SPECIALE = InitializationMoves.SPECIALE;
    private static final String PHYSIQUE = InitializationMoves.PHYSIQUE;
    private static final String SOMMEIL_REPOS = InitializationStatus.SOMMEIL_REPOS;
    private static final String SOMMEIL = InitializationStatus.SOMMEIL;
    private static final String PARALYSIE = InitializationStatus.PARALYSIE;
    private static final String BRULURE = InitializationStatus.BRULURE;
    private static final String GEL = InitializationStatus.GEL;
    private static final String AMOUR = InitializationStatus.AMOUR;
    private static final String POISON_GRAVE = InitializationStatus.POISON_GRAVE;
    private static final String POISON_ST = InitializationStatus.POISON_ST;
    private static final String NULL_REF = InitializationDataBase.NULL_REF;
    private InitializationItems() {
    }

    static void initAllItems(DataBase _data) {
        EvolvingItem objetEvo_;
        HealingHpStatus soinPVStatut_;
        Berry baie_;
        ItemForBattle objetAttachableCombat_;
        EvolvingStone pierreEvo_;
        Ball ball_;
        HealingHp soinPV_;
        SellingItem revente_;
        HealingPp soinPP_;
        HealingItem soin_;
        EffectEndRoundIndividual effectEndRoundIndividual_;
        HealingStatus soinStatut_;
        Repel repousse_;
        Boost boost_;
        Fossil fossile_;
        EffectWhileSending effectWhileSending_;
        repousse_ = defaultRepousse();
        repousse_.setSteps(100);
        repousse_.setPrice(300);
        _data.completeMembers(REPOUSSE,repousse_);
        revente_ = defaultSellingItem();
        revente_.setPrice(5000);
        _data.completeMembers(PEPITE,revente_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(MAGNET,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(METRONOME_OBJ,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultDrainedHp(new Rate("2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(GROSSERACINE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultWinningHappiness(new Rate(2));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(GRELOT,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getImmuMoves().add(POUDRE_TOXIK);
        objetAttachableCombat_.getImmuWeather().add(TEMPETESABLE);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(LUNETTES_FILTRE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getBoostStatisTypes().put(EAU, new EnumMap<Statistic,Byte>());
        objetAttachableCombat_.getBoostStatisTypes().getVal(EAU).put(Statistic.SPECIAL_DEFENSE, (byte) 1);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(LICHEN_LUMINEUX,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getBoostStatisSuperEff().put(Statistic.ATTACK, (byte)1);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(VULNE_ASSURANCE,objetAttachableCombat_);
        soinPP_ = defaultHealingPp();
        soinPP_.setHealedMovePp(10);
        soinPP_.setPrice(500);
        _data.completeMembers(HUILE,soinPP_);
        baie_ = defaultBaie();
        baie_.setPrice(9);
        baie_.setHealHp(new Rate("20"));
        baie_.setMaxHpHealingHp(new Rate("1/2"));
        _data.completeMembers(RASP_BERRY,baie_);
        baie_.setPrice(8);
        baie_.setHealPp(7);
        _data.completeMembers(BLACK_BERRY,baie_);
        baie_ = defaultBaie();
        baie_.setHealHpBySuperEffMove(new Rate("1/4"));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_ENIGMA,baie_);
        soinPP_ = defaultHealingPp();
        soinPP_.setHealingAllMovesPp(true);
        soinPP_.setPrice(3000);
        _data.completeMembers(MAX_ELIXIR,soinPP_);
        soin_ = defaultHealingItem();
        soin_.setHealingTeam(true);
        soin_.setPrice(20000);
        _data.completeMembers(CENDRESACREE,soin_);
        baie_ = defaultBaie();
        baie_.getMultFoesDamage().put(TENEBRE,new EfficiencyRate(new Rate("1"),new Rate("1/2")));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_LAMPOU,baie_);
        baie_ = defaultBaie();
        baie_.setCategoryBoosting(SPECIALE);
        baie_.getBoostStatis().put(Statistic.SPECIAL_DEFENSE, (byte) 1);
        baie_.getMultFoesDamage().put(TENEBRE,new EfficiencyRate(new Rate("1"),new Rate("1/2")));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_MANGA,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getSynchroStatus().add(AMOUR);
        objetAttachableCombat_.getFailStatus().put(AMOUR, "VAR__EXISTE_GENRE_ASSEXUE|VAR__GENRES_EGAUX|VAR__CIBLE_POSSEDE_STATUT_RELATION__AMOUR");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(NOEUD_DESTIN,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getIncreasingMaxNbRoundTeamMove().put(PROTECTION,(short)3);
        objetAttachableCombat_.getIncreasingMaxNbRoundTeamMove().put(MUR_LUMIERE,(short)3);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(LUMARGILE,objetAttachableCombat_);
        soinPVStatut_ = defaultHealingHpStatus();
        soinPVStatut_.setHealedHpRate(new Rate("3/4"));
        soinPVStatut_.setHealingKo(true);
        soinPVStatut_.setPrice(3000);
        soinPVStatut_.getStatus().add(SOMMEIL);
        _data.completeMembers(GRAND_RAPPEL,soinPVStatut_);
        soinPVStatut_ = defaultHealingHpStatus();
        soinPVStatut_.setHealedHpRate(new Rate("1/8"));
        soinPVStatut_.setPrice(3);
        _data.completeMembers(PETIT_RAPPEL,soinPVStatut_);
        soinPVStatut_ = defaultHealingHpStatus();
        soinPVStatut_.setHealedHpRate(new Rate("1/2"));
        soinPVStatut_.setHealingKo(true);
        soinPVStatut_.setPrice(1500);
        _data.completeMembers(RAPPEL,soinPVStatut_);
        //inserted lines
        soinPVStatut_ = defaultHealingHpStatus();
        soinPVStatut_.setHealedHpRate(new Rate("1"));
        soinPVStatut_.setPrice(2500);
        _data.completeMembers(POTION_MAX,soinPVStatut_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setSwitchPossibleSiTouche(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BOUTON_FUITE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getTypesPk().add(DRAGON);
        objetAttachableCombat_.setMultPower("6/5*cardinal(inter({VAR__ATTAQUE_TYPES},{DRAGON}))+cardinal(complementaire({DRAGON},{VAR__ATTAQUE_TYPES}))");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(PLAQUE_DRACO,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultDamage("13/10");
        objetAttachableCombat_.setPrice(1000);
        effectEndRoundIndividual_ = defaultEffectEndRoundIndividual();
        effectEndRoundIndividual_.setRecoilDamage(new Rate("1/10"));
//        effectEndRoundIndividual_.setEndRoundRank(34);
        effectEndRoundIndividual_.setEndRoundRank(55);
        effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
        objetAttachableCombat_.getEffectEndRound().add(effectEndRoundIndividual_);
        _data.completeMembers(ORBE_VIE,objetAttachableCombat_);
        soinPV_ = defaultHealingHp();
        soinPV_.setHp(new Rate("50"));
        //validate soinPV_.getHappiness().put("FAIBLO_BALL",(short)1);
        //validate soinPV_.getHappiness().put("SCUBA_BALL",(short)1);
        //validate soinPV_.getHappiness().put("BIS_BALL",(short)1);
        //validate soinPV_.getHappiness().put("HONOR_BALL",(short)1);
        //validate soinPV_.getHappiness().put("LUNE_BALL",(short)1);
        //validate soinPV_.getHappiness().put("SPEED_BALL",(short)1);
        soinPV_.getHappiness().put(LUXE_BALL,(short)2);
        //validate soinPV_.getHappiness().put("SOIN_BALL",(short)1);
        soinPV_.getHappiness().put(MASTER_BALL,(short)1);
        soinPV_.getHappiness().put(POKE_BALL,(short)1);
        //validate soinPV_.getHappiness().put("CHRONO_BALL",(short)1);
        soinPV_.getHappiness().put(SUPER_BALL,(short)1);
        //validate soinPV_.getHappiness().put("RAPIDE_BALL",(short)1);
        //validate soinPV_.getHappiness().put("NIVEAU_BALL",(short)1);
        //validate soinPV_.getHappiness().put("SOMBRE_BALL",(short)1);
        soinPV_.getHappiness().put(HYPER_BALL,(short)1);
        //validate soinPV_.getHappiness().put("MASSE_BALL",(short)1);
        //validate soinPV_.getHappiness().put("COMPET_BALL",(short)1);
        //validate soinPV_.getHappiness().put("LOVE_BALL",(short)1);
        //validate soinPV_.getHappiness().put("APPAT_BALL",(short)1);
        //validate soinPV_.getHappiness().put("COPAIN_BALL",(short)1);
        //validate soinPV_.getHappiness().put("FILET_BALL",(short)1);
        soinPV_.setPrice(200);
        _data.completeMembers(EAU_FRAICHE,soinPV_);
        soinPV_ = defaultHealingHp();
        soinPV_.setPrice(3);
        soinPV_.setHp(new Rate(20));
        _data.completeMembers(POTION, soinPV_);
        soinPV_ = defaultHealingHp();
        soinPV_.setPrice(4);
        soinPV_.setHp(new Rate(20));
        soinPV_.getHappiness().put(POKE_BALL, (short) 2);
        _data.completeMembers(HAPPY_POTION, soinPV_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectEndRoundIndividual_ = defaultEffectEndRoundIndividual();
        effectEndRoundIndividual_.setHealHp(new Rate("1/16"));
        effectEndRoundIndividual_.setEndRoundRank(30);
        effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
        objetAttachableCombat_.getEffectEndRound().add(effectEndRoundIndividual_);
        _data.completeMembers(RESTES,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setProtectAgainstKoIfFullHp(new Rate("1"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(CEINT_FORCE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getMultStatRank().put(Statistic.CRITICAL_HIT,(byte)1);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(LENTILSCOPE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setBoostExp(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(MULTI_EXP,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setAgainstEvo(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(PIERRE_STASE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultPower("6/5*cardinal(inter({VAR__ATTAQUE_TYPES},{PLANTE}))+cardinal(complementaire({PLANTE},{VAR__ATTAQUE_TYPES}))");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(GRAIN_MIRACL,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultWinningEv(new Rate("2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BRAC_MACHO,objetAttachableCombat_);
        baie_ = defaultBaie();
        baie_.setWithoutFail(true);
        baie_.setPrice(200);
        _data.completeMembers(BAIE_MICLE,baie_);
        baie_ = defaultBaie();
        baie_.setHealHp(new Rate("10"));
        baie_.setMaxHpHealingHp(new Rate("1/4"));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_ORAN,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setAttackLast(true);
        //objetAttachableCombat_.getHatching().add(GOINFREX);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(ENCENS_PLEIN,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultDamage("1/5*caracdroiteouvert(VAR__COEFF_EFF,1)+1");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(CEINTURE_PRO,objetAttachableCombat_);
        repousse_ = defaultRepousse();
        repousse_.setSteps(500);
        repousse_.setPrice(800);
        _data.completeMembers(MAX_REPOUSSE,repousse_);
        boost_ = defaultBoost();
        initHappinessBall(boost_);
        boost_.getEvs().put(Statistic.HP,(short)10);
        boost_.setPrice(9800);
        _data.completeMembers(PV_PLUS,boost_);
        baie_ = defaultBaie();
        baie_.setHealHpRate(new Rate("1/8"));
        baie_.setMaxHpHealingHpRate(new Rate("1/4"));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_GOWAV,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectEndRoundIndividual_ = defaultEffectEndRoundIndividual();
        effectEndRoundIndividual_.setUserStatusEndRound(BRULURE);
        effectEndRoundIndividual_.setEndRoundRank(34);
        effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
        objetAttachableCombat_.getEffectEndRound().add(effectEndRoundIndividual_);
        _data.completeMembers(ORBE_FLAMME,objetAttachableCombat_);
        boost_ = defaultBoost();
        boost_.setWinPp(new Rate("3"));
        initHappinessBall(boost_);
        boost_.setPrice(9800);
        _data.completeMembers(PP_PLUS,boost_);
        boost_ = defaultBoost();
        initHappinessBall(boost_);
        boost_.setPrice(9800);
        _data.completeMembers(PP_PLUS_BIS,boost_);
        boost_ = defaultBoost();
        boost_.getEvs().put(Statistic.ATTACK, (short) 2);
        _data.completeMembers(MUSCLE, boost_);
        boost_ = defaultBoost();
        boost_.setPrice(15);
        boost_.getHappiness().put(POKE_BALL, (short) 2);
        boost_.getEvs().put(Statistic.SPEED, (short) 3);
        _data.completeMembers(BOLT, boost_);
        baie_ = defaultBaie();
        baie_.setHealPp(10);
        baie_.setPrice(200);
        _data.completeMembers(BAIE_MEPO,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setCancelImmuType(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(PT_DE_MIRE,objetAttachableCombat_);
        soinStatut_ = defaultSoinStatut();
        soinStatut_.getStatus().add(SOMMEIL);
        soinStatut_.getStatus().add(SOMMEIL_REPOS);
        soinStatut_.getStatus().add(PARALYSIE);
        soinStatut_.getStatus().add(POISON_ST);
        soinStatut_.getStatus().add(POISON_GRAVE);
        soinStatut_.getStatus().add(BRULURE);
        soinStatut_.getStatus().add(GEL);
        soinStatut_.setPrice(600);
        _data.completeMembers(TOTAL_SOIN,soinStatut_);
        soinStatut_ = defaultSoinStatut();
        soinStatut_.getStatus().add(SOMMEIL);
        soinStatut_.getStatus().add(SOMMEIL_REPOS);
        soinStatut_.setPrice(100);
        _data.completeMembers(REVEIL,soinStatut_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setDamageRecoil(new Rate("1/8"));
        //objetAttachableCombat_.getSansEffetCapacite().add("GARDE_MYSTIK");
        objetAttachableCombat_.setTransfertObjSiContact(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(PIQUANTS,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultWinningMoney(new Rate("2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(PIECE_RUNE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectWhileSending_ = defaultEffectWhileSending();
        effectWhileSending_.setMultWeight(new Rate("1/2"));
        objetAttachableCombat_.getEffectSending().add(effectWhileSending_);
        _data.completeMembers(PIERRALLEGEE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectWhileSending_ = defaultEffectWhileSending();
        effectWhileSending_.setEnabledWeather(ORAGE_BIS);
        objetAttachableCombat_.getEffectSending().add(effectWhileSending_);
        _data.completeMembers(CABLE,objetAttachableCombat_);
        baie_ = defaultBaie();
        baie_.setLawForAttackFirst(true);
        baie_.setPrice(200);
        _data.completeMembers(BAIE_CHERIM,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getWinEvFight().put(Statistic.DEFENSE,(short)4);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(CEINT_POUV,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getMultStatPokemonRank().put(new StatisticPokemon(Statistic.CRITICAL_HIT,CARAPUCE),(byte)2);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BATON,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setSwitchForceAdvSiTouche(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(CARTE_ROUGE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultTrappingDamage(new Rate("2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BANDEAU_ETREINTE,objetAttachableCombat_);
        ball_ = defaultBall();
        ball_.setCatchingRate("2");
        ball_.setPrice(1000);
        _data.completeMembers(HYPER_BALL,ball_);
        ball_ = defaultBall();
        ball_.setPrice(1000);
        _data.completeMembers(MASTER_BALL,ball_);
        ball_ = defaultBall();
        ball_.setCatchingRate("1");
        _data.completeMembers(SUPER_BALL,ball_);
        ball_ = defaultBall();
        ball_.setCatchingRate("1");
        _data.completeMembers(POKE_BALL,ball_);
        ball_ = defaultBall();
        ball_.setCatchingRate("1");
        _data.completeMembers(LUXE_BALL,ball_);
        ball_ = defaultBall();
        ball_.setCatchingRate("0");
        _data.completeMembers(PAS_DE_BALL,ball_);
        //validate objetEvo_ = defaultObjetEvo();
        //validate objetEvo_.setPrice(1000);
        //validate _data.completeMembers("DENT_OCEAN",objetEvo_);
        objetEvo_ = defaultObjetEvo();
        objetEvo_.setPrice(1000);
        _data.completeMembers(ROCHE_ROYALE,objetEvo_);
        pierreEvo_ = defaultPierreEvo();
        pierreEvo_.setPrice(1000);
        _data.completeMembers(PIERRE_EAU,pierreEvo_);
        pierreEvo_ = defaultPierreEvo();
        pierreEvo_.setPrice(6);
        _data.completeMembers(PIERRE_LUNE,pierreEvo_);
        pierreEvo_ = defaultPierreEvo();
        pierreEvo_.setPrice(6);
        _data.completeMembers(PIERRE_SOLEIL,pierreEvo_);
        pierreEvo_ = defaultPierreEvo();
        pierreEvo_.setPrice(6);
        _data.completeMembers(PIERRE_GLACE,pierreEvo_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getMultStat().put(Statistic.SPEED,"3/2*cardinal(inter({VAR__FIGHTER_NOM},{METAMORPH}))+cardinal(complementaire({METAMORPH},{VAR__FIGHTER_NOM}))");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(POUDRE_VITE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getMultStat().put(Statistic.ATTACK,"2");
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(POUDRE_ATTAQUE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectEndRoundIndividual_ = defaultEffectEndRoundIndividual();
        effectEndRoundIndividual_.getHealHpByOwnerTypes().put(NULL_REF,new Rate("-1/8"));
        effectEndRoundIndividual_.getHealHpByOwnerTypes().put(POISON,new Rate("1/8"));
        effectEndRoundIndividual_.setEndRoundRank(31);
        effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
        objetAttachableCombat_.getEffectEndRound().add(effectEndRoundIndividual_);
        _data.completeMembers(BOUE_NOIRE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setPrice(1000);
        effectEndRoundIndividual_ = defaultEffectEndRoundIndividual();
        effectEndRoundIndividual_.getHealHpByOwnerTypes().put(POISON,new Rate("1/8"));
//        effectEndRoundIndividual_.setEndRoundRank(31);
        effectEndRoundIndividual_.setEndRoundRank(58);
        effectEndRoundIndividual_.setTargetChoice(TargetChoice.LANCEUR);
        objetAttachableCombat_.getEffectEndRound().add(effectEndRoundIndividual_);
        _data.completeMembers(BOUE_BLANCHE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getImmuStatus().add(AMOUR);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(HERBE_MENTAL,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultPower("11/10*cardinal(inter({VAR__ATTAQUE_TYPES},{EAU}))+cardinal(complementaire({EAU},{VAR__ATTAQUE_TYPES}))");
        objetAttachableCombat_.getHatching().add(BABIMANTA);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(ENCENS_VAGUE,objetAttachableCombat_);
        soinPP_ = defaultHealingPp();
        soinPP_.setHealingAllMovesFullpp(10);
        soinPP_.setPrice(1000);
        _data.completeMembers(ELIXIR,soinPP_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setProtectAgainstKo(new Rate("1"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BANDEAU,objetAttachableCombat_);
        baie_ = defaultBaie();
        baie_.getMultStat().put(Statistic.SPECIAL_ATTACK,new BoostHpRate((byte)1,new Rate("1/3")));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_PITAYE,baie_);
        baie_ = defaultBaie();
        baie_.getMultStat().put(Statistic.CRITICAL_HIT,new BoostHpRate((byte)1, new Rate("1/3")));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_LANSAT,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setAttacksSoon(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(HERBE_POUV,objetAttachableCombat_);
        baie_ = defaultBaie();
        baie_.getHealStatus().add(PARALYSIE);
        baie_.setPrice(200);
        _data.completeMembers(BAIE_CERIZ,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultWinningHappiness(new Rate("2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(GRELOT_ZEN,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("VORTEX_MAGMA",(short)0);
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("CLAQUOIR",(short)0);
        objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put(SIPHON,(short)0);
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("LIGOTAGE",(short)0);
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("ETREINTE",(short)0);
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("TOURBI_SABLE",(short)0);
        //validate objetAttachableCombat_.getIncreasingMaxNbRoundTrap().put("DANSEFLAMME",(short)0);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(ACCRO_GRIFFE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setRepellingWildPk(true);
        //objetAttachableCombat_.getHatching().add(KORILLON);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(ENCENS_PUR,objetAttachableCombat_);
        baie_ = defaultBaie();
        baie_.getDamageRateRecoilFoe().put(PHYSIQUE,new Rate("1/8"));
        baie_.setPrice(200);
        _data.completeMembers(BAIE_JABOCA,baie_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setMultWinningExp(new Rate("3/2"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(OEUF_CHANCE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getLawForAttackFirst().addEvent(false,new LgInt("4"));
        objetAttachableCombat_.getLawForAttackFirst().addEvent(true,new LgInt("1"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(VIVE_GRIFFE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getLawForAttackFirst().addEvent(true,new LgInt("1"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(VIVE_GRIFFE_TRUE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getLawForAttackFirst().addEvent(true,new LgInt("1"));
        objetAttachableCombat_.getLawForAttackFirst().addEvent(false,new LgInt("0"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(VIVE_GRIFFE_TRUE_FALSE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getLawForAttackFirst().addEvent(false,new LgInt("4"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(VIVE_GRIFFE_FALSE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setDrainedHpByDamageRate(new Rate("1/8"));
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(GRELOT_COQUE,objetAttachableCombat_);
        fossile_ = defaultFossile();
        //validate fossile_.setPokemon("PTERA");
        fossile_.setPokemon(LIMAGMA);
        fossile_.setLevel((short)10);
        fossile_.setPrice(1500);
        _data.completeMembers(VIEIL_AMBRE,fossile_);
        fossile_ = defaultFossile();
        fossile_.setPokemon(LIMAGMA);
        fossile_.setLevel((short)2);
        fossile_.setPrice(100);
        _data.completeMembers(LAVA,fossile_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getImmuTypes().add(SOL);
        objetAttachableCombat_.setDetruitSiContact(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(BALLON,objetAttachableCombat_);
        soinPP_ = defaultHealingPp();
        soinPP_.setHealingMoveFullpp(true);
        soinPP_.setPrice(1100);
        _data.completeMembers(HUILE_MAX,soinPP_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.setImmuLowStatis(true);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(HERBEBLANCHE,objetAttachableCombat_);
        objetAttachableCombat_ = defaultObjetAttachableCombat();
        objetAttachableCombat_.getIncreasingMaxNbRoundGlobalMove().put(TEMPETESABLE,(short)3);
        objetAttachableCombat_.setPrice(1000);
        _data.completeMembers(ROCHE_LISSE,objetAttachableCombat_);
    }

    private static void initHappinessBall(Boost _boost) {
        //validate _boost.getHappiness().put("FAIBLO_BALL",(short)2);
        //validate _boost.getHappiness().put("SCUBA_BALL",(short)2);
        //validate _boost.getHappiness().put("BIS_BALL",(short)2);
        //validate _boost.getHappiness().put("HONOR_BALL",(short)2);
        //validate _boost.getHappiness().put("LUNE_BALL",(short)2);
        //validate _boost.getHappiness().put("SPEED_BALL",(short)2);
        _boost.getHappiness().put(LUXE_BALL,(short)6);
        //validate _boost.getHappiness().put("SOIN_BALL",(short)2);
        _boost.getHappiness().put(MASTER_BALL,(short)2);
        _boost.getHappiness().put(POKE_BALL,(short)2);
        //validate _boost.getHappiness().put("CHRONO_BALL",(short)2);
        _boost.getHappiness().put(SUPER_BALL,(short)2);
        //validate _boost.getHappiness().put("RAPIDE_BALL",(short)2);
        //validate _boost.getHappiness().put("NIVEAU_BALL",(short)2);
        //validate _boost.getHappiness().put("SOMBRE_BALL",(short)2);
        _boost.getHappiness().put(HYPER_BALL,(short)2);
        //validate _boost.getHappiness().put("MASSE_BALL",(short)2);
        //validate _boost.getHappiness().put("COMPET_BALL",(short)2);
        //validate _boost.getHappiness().put("LOVE_BALL",(short)2);
        //validate _boost.getHappiness().put("APPAT_BALL",(short)2);
        //validate _boost.getHappiness().put("COPAIN_BALL",(short)2);
        //validate _boost.getHappiness().put("FILET_BALL",(short)2);
    }

    private static EvolvingItem defaultObjetEvo() {
        EvolvingItem object_ = new EvolvingItem();
        return object_;
    }

    private static HealingHpStatus defaultHealingHpStatus() {
        HealingHpStatus object_ = new HealingHpStatus();
        object_.setHealedHpRate(Rate.zero());
        object_.setStatus(new StringList());
        object_.setHappiness(new StringMap<Short>());
        return object_;
    }

    private static Berry defaultBaie() {
        Berry object_ = new Berry();
        object_.setHealHpBySuperEffMove(Rate.zero());
        object_.setMultFoesDamage(new StringMap<EfficiencyRate>());
        object_.setMultStat(new EnumMap<Statistic,BoostHpRate>());
        object_.setHealHp(Rate.zero());
        object_.setMaxHpHealingHp(Rate.zero());
        object_.setHealStatus(new StringList());
        object_.setHealHpRate(Rate.zero());
        object_.setMaxHpHealingHpRate(Rate.zero());
        object_.setDamageRateRecoilFoe(new StringMap<Rate>());
        object_.setBoostStatis(new EnumMap<Statistic,Byte>());
        object_.setCategoryBoosting(NULL_REF);
        return object_;
    }

    private static ItemForBattle defaultObjetAttachableCombat() {
        ItemForBattle object_ = new ItemForBattle();
        object_.setTypesPk(new StringList());
        object_.setImmuMoves(new StringList());
        object_.setImmuWeather(new StringList());
        object_.setImmuStatus(new StringList());
        object_.setIncreasingMaxNbRoundTrap(new StringMap<Short>());
        object_.setSynchroStatus(new StringList());
        object_.setFailStatus(new StringMap<String>());
        object_.setProtectAgainstKo(Rate.zero());
        object_.setProtectAgainstKoIfFullHp(Rate.zero());
        object_.setDrainedHpByDamageRate(Rate.zero());
        object_.setWinEvFight(new EnumMap<Statistic,Short>());
        object_.setLawForAttackFirst(new MonteCarloBoolean());
        object_.setMultTrappingDamage(Rate.zero());
        object_.setMultWinningMoney(Rate.zero());
        object_.setMultWinningHappiness(Rate.zero());
        object_.setMultWinningEv(Rate.zero());
        object_.setMultWinningExp(Rate.zero());
        object_.setMultPower(NULL_REF);
        object_.setMultDamage(NULL_REF);
        object_.setMultDrainedHp(Rate.zero());
        object_.setDamageRecoil(Rate.zero());
        object_.setMultStatRank(new EnumMap<Statistic,Byte>());
        object_.setMultStatPokemonRank(new ObjectMap<StatisticPokemon,Byte>());
        object_.setMultStat(new EnumMap<Statistic,String>());
        object_.setIncreasingMaxNbRoundGlobalMove(new StringMap<Short>());
        object_.setIncreasingMaxNbRoundTeamMove(new StringMap<Short>());
        object_.setHatching(new StringList());
        object_.setImmuTypes(new StringList());
        object_.setBoostStatisTypes(new StringMap<EnumMap<Statistic,Byte>>());
        object_.setBoostStatisSuperEff(new EnumMap<Statistic,Byte>());
        //object_.setSansEffetCapacite(new StringList());
        object_.setEffectEndRound(new CustList<EffectEndRound>());
        object_.setEffectSending(new CustList<EffectWhileSending>());
        return object_;
    }

    private static EvolvingStone defaultPierreEvo() {
        EvolvingStone object_ = new EvolvingStone();
        return object_;
    }

    private static Ball defaultBall() {
        Ball object_ = new Ball();
        object_.setCatchingRate(NULL_REF);
        return object_;
    }

    private static HealingHp defaultHealingHp() {
        HealingHp object_ = new HealingHp();
        object_.setHp(Rate.zero());
        object_.setHappiness(new StringMap<Short>());
        return object_;
    }

    private static SellingItem defaultSellingItem() {
        SellingItem object_ = new SellingItem();
        return object_;
    }

    private static HealingPp defaultHealingPp() {
        HealingPp object_ = new HealingPp();
        object_.setHappiness(new StringMap<Short>());
        return object_;
    }

    private static HealingItem defaultHealingItem() {
        HealingItem object_ = new HealingSimpleItem();
        object_.setHappiness(new StringMap<Short>());
        return object_;
    }

    private static EffectEndRoundIndividual defaultEffectEndRoundIndividual() {
        EffectEndRoundIndividual object_ = new EffectEndRoundIndividual();
        object_.setDeleteAllStatus(Rate.zero());
        object_.setRecoilDamage(Rate.zero());
        object_.setHealHp(Rate.zero());
        object_.setHealHpByOwnerTypes(new StringMap<Rate>());
        object_.setMultDamageStatus(new StringMap<Rate>());
        object_.setUserStatusEndRound(NULL_REF);
        object_.setTargetChoice(TargetChoice.NOTHING);
        object_.setFail(NULL_REF);
        object_.setRequiredSuccessfulEffects(new Ints());
        object_.setFailEndRound(NULL_REF);
        return object_;
    }

    private static HealingStatus defaultSoinStatut() {
        HealingStatus object_ = new HealingSimpleStatus();
        object_.setStatus(new StringList());
        object_.setHappiness(new StringMap<Short>());
        return object_;
    }

    private static Repel defaultRepousse() {
        Repel object_ = new Repel();
        return object_;
    }

    private static Boost defaultBoost() {
        Boost object_ = new Boost();
        object_.setWinPp(Rate.zero());
        object_.setHappiness(new StringMap<Short>());
        object_.setEvs(new EnumMap<Statistic,Short>());
        return object_;
    }

    private static Fossil defaultFossile() {
        Fossil object_ = new Fossil();
        object_.setPokemon(NULL_REF);
        return object_;
    }

    private static EffectWhileSending defaultEffectWhileSending() {
        EffectWhileSending object_ = new EffectWhileSendingSimple();
        object_.setEnabledWeather(NULL_REF);
        object_.setMultWeight(Rate.zero());
        return object_;
    }
}
