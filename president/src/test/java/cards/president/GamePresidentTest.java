package cards.president;
import static cards.president.EquallablePresidentUtil.assertEq;
import static code.util.opers.EquallableUtil.assertEq;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import code.util.EqList;
import code.util.Numbers;
import code.util.consts.Constants;
import cards.consts.GameType;
import cards.president.enumerations.CardPresident;
import cards.president.enumerations.EqualtyPlaying;
import cards.president.enumerations.Playing;

@SuppressWarnings("static-method")
public class GamePresidentTest {

    @Test
    public void getWinners1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        assertEq(0, g_.getWinners().size());
    }

    @Test
    public void getWinners2Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        rk_.add((byte) 4);
        rk_.add((byte) 1);
        rk_.add((byte) 3);
        rk_.add((byte) 2);
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        Numbers<Byte> ws_ = g_.getWinners();
        assertEq(2, ws_.size());
        assertEq(1, ws_.get(0).intValue());
        assertEq(3, ws_.get(1).intValue());
    }


    @Test
    public void getLoosers1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        assertEq(0, g_.getLoosers().size());
    }

    @Test
    public void getLoosers2Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        rk_.add((byte) 4);
        rk_.add((byte) 1);
        rk_.add((byte) 3);
        rk_.add((byte) 2);
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        Numbers<Byte> ws_ = g_.getLoosers();
        assertEq(2, ws_.size());
        assertEq(0, ws_.get(0).intValue());
        assertEq(2, ws_.get(1).intValue());
    }

    @Test
    public void getStatus1Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.SKIPPED, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus2Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.HAS_TO_EQUAL, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus3Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        assertEq(Playing.PASS, g_.getStatus((byte) 2));
    }

    @Test
    public void getStatus4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus6Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.PASS, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus7Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.PASS, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus8Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus9Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus10Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus11Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 3));
    }

    @Test
    public void getStatus12Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 0));
    }

    @Test
    public void getStatus13Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        assertEq(Playing.CAN_PLAY, g_.getStatus((byte) 0));
    }

    @Test
    public void cartesJouables1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident hPl_ = g_.getDistribution().main((byte) 1);
        HandPresident playable_ = g_.cartesJouables((byte) 1, hPl_, Constants.getLanguage());
        assertEq(13, playable_.total());
    }

    @Test
    public void cartesJouables2Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.FORBIDDEN);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        HandPresident hPl_ = g_.getDistribution().main((byte) 2);
        HandPresident playable_ = g_.cartesJouables((byte) 2, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(7, playable_.total());
        assertEq(CardPresident.HEART_9, playable_.carte(0));
        assertEq(CardPresident.HEART_10, playable_.carte(1));
        assertEq(CardPresident.SPADE_QUEEN, playable_.carte(2));
        assertEq(CardPresident.CLUB_QUEEN, playable_.carte(3));
        assertEq(CardPresident.HEART_KING, playable_.carte(4));
        assertEq(CardPresident.SPADE_2, playable_.carte(5));
        assertEq(CardPresident.CLUB_2, playable_.carte(6));
    }

    @Test
    public void cartesJouables3Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        HandPresident hPl_ = g_.getDistribution().main((byte) 2);
        HandPresident playable_ = g_.cartesJouables((byte) 2, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(8, playable_.total());
        assertEq(CardPresident.HEART_7, playable_.carte(0));
        assertEq(CardPresident.HEART_9, playable_.carte(1));
        assertEq(CardPresident.HEART_10, playable_.carte(2));
        assertEq(CardPresident.SPADE_QUEEN, playable_.carte(3));
        assertEq(CardPresident.CLUB_QUEEN, playable_.carte(4));
        assertEq(CardPresident.HEART_KING, playable_.carte(5));
        assertEq(CardPresident.SPADE_2, playable_.carte(6));
        assertEq(CardPresident.CLUB_2, playable_.carte(7));
    }

    @Test
    public void cartesJouables4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        HandPresident hPl_ = g_.getDistribution().main((byte) 2);
        HandPresident playable_ = g_.cartesJouables((byte) 2, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(8, playable_.total());
        assertEq(CardPresident.HEART_7, playable_.carte(0));
        assertEq(CardPresident.HEART_9, playable_.carte(1));
        assertEq(CardPresident.HEART_10, playable_.carte(2));
        assertEq(CardPresident.SPADE_QUEEN, playable_.carte(3));
        assertEq(CardPresident.CLUB_QUEEN, playable_.carte(4));
        assertEq(CardPresident.HEART_KING, playable_.carte(5));
        assertEq(CardPresident.SPADE_2, playable_.carte(6));
        assertEq(CardPresident.CLUB_2, playable_.carte(7));
    }

    @Test
    public void cartesJouables5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        HandPresident hPl_ = g_.getDistribution().main((byte) 3);
        HandPresident playable_ = g_.cartesJouables((byte) 3, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(0, playable_.total());
    }

    @Test
    public void cartesJouables6Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        HandPresident hPl_ = g_.getDistribution().main((byte) 3);
        HandPresident playable_ = g_.cartesJouables((byte) 3, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(1, playable_.total());
        assertEq(CardPresident.DIAMOND_7, playable_.carte(0));
    }

    @Test
    public void cartesJouables7Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        HandPresident hPl_ = g_.getDistribution().main((byte) 3);
        HandPresident playable_ = g_.cartesJouables((byte) 3, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(0, playable_.total());
    }

    @Test
    public void cartesJouables8Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        HandPresident hPl_ = g_.getDistribution().main((byte) 3);
        HandPresident playable_ = g_.cartesJouables((byte) 3, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(0, playable_.total());
    }

    @Test
    public void cartesJouables9Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        HandPresident hPl_ = g_.getDistribution().main((byte) 3);
        HandPresident playable_ = g_.cartesJouables((byte) 3, hPl_, Constants.getLanguage());
        playable_.sortCards(false, g_.isReversed());
        assertEq(0, playable_.total());
    }

    @Test
    public void canPass1Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(false);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        assertTrue(g_.canPass((byte) 2, Constants.getLanguage()));
    }

    @Test
    public void canPass2Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        assertTrue(!g_.canPass((byte) 2, Constants.getLanguage()));
    }

    @Test
    public void canPass3Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 2);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_1);
        played_.ajouter(CardPresident.CLUB_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        assertTrue(g_.canPass((byte) 0, Constants.getLanguage()));
    }

    @Test
    public void canPass4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(true);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        assertTrue(g_.canPass((byte) 1, Constants.getLanguage()));
    }

    @Test
    public void canPass5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(true);
        r_.setLoosingIfFinishByBestCards(false);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        assertTrue(!g_.canPass((byte) 1, Constants.getLanguage()));
    }

    @Test
    public void canPass6Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setHasToPlay(true);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 2);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        g_.getDistribution().main((byte) 2).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        g_.getDistribution().main((byte) 3).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 1);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        g_.getDistribution().main((byte) 1).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getTricks().add(g_.getProgressingTrick());
        g_.initializeTrick((byte) 0);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        g_.getDistribution().main((byte) 0).supprimerCartes(played_);
        assertTrue(!g_.canPass((byte) 1, Constants.getLanguage()));
    }

    @Test
    public void keepPlayingCurrentTrick1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        assertTrue(g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick2Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        assertTrue(g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick3Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertTrue(g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick4Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        assertTrue(g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick5Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(0, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        assertTrue(!g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick6Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        assertTrue(g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick7Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(1, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        assertTrue(!g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick8Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(1, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
//        played_ = new HandPresident();
//        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        assertTrue(!g_.keepPlayingCurrentTrick());
    }

    @Test
    public void keepPlayingCurrentTrick9Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.getProgressingTrick().ajouter(played_, (byte) 0);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(1, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 1);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(2, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 2);
        played_ = new HandPresident();
        g_.getPassOrFinish().set(3, true);
        g_.getProgressingTrick().ajouter(played_, (byte) 3);
        assertTrue(!g_.keepPlayingCurrentTrick());
    }

    @Test
    public void addCardsToCurrentTrick1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(1, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(12, g_.getDistribution().main((byte) 1).total());
    }

    @Test
    public void addCardsToCurrentTrick2Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_2);
        g_.addCardsToCurrentTrick((byte) 2, played_);
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(1, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(1, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_2, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(2, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(12, g_.getDistribution().main((byte) 2).total());
    }

    @Test
    public void addCardsToCurrentTrick3Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrick((byte) 2, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(1, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.HEART_9, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(12, g_.getDistribution().main((byte) 2).total());
    }

    @Test
    public void addCardsToCurrentTrick4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(2, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.getProgressingTrick().carte(0).carte(1));
        assertEq(2, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.getProgressingTrick().carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(2, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(2, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick6Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(false);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal2();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(9, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick7Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal2();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(9, g_.getDistribution().main((byte) 0).total());
        assertTrue(g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick8Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        r_.setPossibleReversing(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(2, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.getProgressingTrick().carte(0).carte(1));
        assertEq(2, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.getProgressingTrick().carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick9Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(2, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(2, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick10Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_8);
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(2, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(1, g_.unionPlis().get(1).total());
        assertEq(4, g_.unionPlis().get(1).carte(0).total());
        assertEq(CardPresident.CLUB_8, g_.unionPlis().get(1).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_8, g_.unionPlis().get(1).carte(0).carte(1));
        assertEq(CardPresident.SPADE_8, g_.unionPlis().get(1).carte(0).carte(2));
        assertEq(CardPresident.HEART_8, g_.unionPlis().get(1).carte(0).carte(3));
        assertEq(5, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick11Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(1).total());
        assertEq(13, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick12Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(3, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(1).total());
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(13, g_.getDistribution().main((byte) 2).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick13Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        g_.getPassOrFinish().set(3, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 3, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(4, g_.unionPlis().get(0).total());
        assertEq(1, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(0, g_.unionPlis().get(0).carte(1).total());
        assertEq(0, g_.unionPlis().get(0).carte(2).total());
        assertEq(0, g_.unionPlis().get(0).carte(3).total());
        assertEq(13, g_.getDistribution().main((byte) 3).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrick14Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_8);
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        g_.getPassOrFinish().set(3, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 3, played_);
        g_.getPassOrFinish().set(0, false);
        g_.getPassOrFinish().set(1, false);
        g_.getPassOrFinish().set(2, false);
        g_.getPassOrFinish().set(3, false);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        g_.getPassOrFinish().set(3, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 3, played_);
        g_.getPassOrFinish().set(0, false);
        g_.getPassOrFinish().set(1, false);
        g_.getPassOrFinish().set(2, false);
        g_.getPassOrFinish().set(3, false);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        g_.getPassOrFinish().set(3, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 3, played_);
        g_.getPassOrFinish().set(0, false);
        g_.getPassOrFinish().set(1, false);
        g_.getPassOrFinish().set(2, false);
        g_.getPassOrFinish().set(3, false);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        g_.getPassOrFinish().set(1, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 1, played_);
        g_.getPassOrFinish().set(2, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 2, played_);
        g_.getPassOrFinish().set(3, true);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrick((byte) 3, played_);
        g_.getPassOrFinish().set(0, false);
        g_.getPassOrFinish().set(1, false);
        g_.getPassOrFinish().set(2, false);
        g_.getPassOrFinish().set(3, false);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrick((byte) 0, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(8, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(6).total());
        assertEq(1, g_.unionPlis().get(6).carte(0).total());
        assertEq(CardPresident.HEART_2, g_.unionPlis().get(6).carte(0).carte(0));
//        assertEq(2, g_.unionPlis().get(7).total());
        assertEq(1, g_.unionPlis().get(7).total());
        assertEq(0, g_.unionPlis().get(7).carte(0).total());
//        assertEq(0, g_.unionPlis().get(7).carte(1).total());
        assertEq(Playing.FINISH, g_.getStatus((byte) 0));
        assertEq(0, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
    }

    @Test
    public void addCardsToCurrentTrickAndLoop1Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(1, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(12, g_.getDistribution().main((byte) 1).total());
        assertEq(2, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop2Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(1, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(1, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_2, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(2, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(12, g_.getDistribution().main((byte) 2).total());
        assertEq(2, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop3Test() {
        RulesPresident r_ = new RulesPresident(4);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_7, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(1, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.HEART_9, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(12, g_.getDistribution().main((byte) 2).total());
        assertEq(3, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(3, g_.getProgressingTrick().total());
        assertEq(2, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.getProgressingTrick().carte(0).carte(1));
        assertEq(2, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.getProgressingTrick().carte(1).carte(1));
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(3, g_.getNextPlayer());
        assertEq(3, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.SKIPPED, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(2, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(2, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(1, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop6Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(false);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal2();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(9, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop7Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal2();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(9, g_.getDistribution().main((byte) 0).total());
        assertTrue(g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop8Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        r_.setPossibleReversing(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(3, g_.getProgressingTrick().total());
        assertEq(2, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.getProgressingTrick().carte(0).carte(1));
        assertEq(2, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.getProgressingTrick().carte(1).carte(1));
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(3, g_.getNextPlayer());
        assertEq(3, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.SKIPPED, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop9Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(2, g_.unionPlis().get(0).total());
        assertEq(2, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(2, g_.unionPlis().get(0).carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(1).carte(1));
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(1, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop10Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_8);
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(2, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(0).total());
        assertEq(4, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.unionPlis().get(0).carte(0).carte(1));
        assertEq(CardPresident.SPADE_4, g_.unionPlis().get(0).carte(0).carte(2));
        assertEq(CardPresident.HEART_4, g_.unionPlis().get(0).carte(0).carte(3));
        assertEq(1, g_.unionPlis().get(1).total());
        assertEq(4, g_.unionPlis().get(1).carte(0).total());
        assertEq(CardPresident.CLUB_8, g_.unionPlis().get(1).carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_8, g_.unionPlis().get(1).carte(0).carte(1));
        assertEq(CardPresident.SPADE_8, g_.unionPlis().get(1).carte(0).carte(2));
        assertEq(CardPresident.HEART_8, g_.unionPlis().get(1).carte(0).carte(3));
        assertEq(5, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop11Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(1).total());
        assertEq(13, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(2, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.PASS, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop12Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(3, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(1).total());
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(13, g_.getDistribution().main((byte) 2).total());
        assertTrue(!g_.isReversed());
        assertEq(3, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.PASS, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop13Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(1, g_.unionPlis().size());
        assertEq(4, g_.unionPlis().get(0).total());
        assertEq(1, g_.unionPlis().get(0).carte(0).total());
        assertEq(CardPresident.CLUB_3, g_.unionPlis().get(0).carte(0).carte(0));
        assertEq(0, g_.unionPlis().get(0).carte(1).total());
        assertEq(0, g_.unionPlis().get(0).carte(2).total());
        assertEq(0, g_.unionPlis().get(0).carte(3).total());
        assertEq(13, g_.getDistribution().main((byte) 3).total());
        assertTrue(!g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop14Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_8);
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(8, g_.unionPlis().size());
        assertEq(1, g_.unionPlis().get(6).total());
        assertEq(1, g_.unionPlis().get(6).carte(0).total());
        assertEq(CardPresident.HEART_2, g_.unionPlis().get(6).carte(0).carte(0));
//        assertEq(2, g_.unionPlis().get(7).total());
        assertEq(1, g_.unionPlis().get(7).total());
        assertEq(0, g_.unionPlis().get(7).carte(0).total());
//        assertEq(0, g_.unionPlis().get(7).carte(1).total());
        assertEq(Playing.FINISH, g_.getStatus((byte) 0));
        assertEq(0, g_.getDistribution().main((byte) 0).total());
        assertTrue(!g_.isReversed());
        assertEq(1, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.FINISH, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop15Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_ALWAYS_NEXT);
        r_.setPossibleReversing(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        assertEq(0, g_.getProgressingTrick().getEntameur());
        assertEq(4, g_.getProgressingTrick().total());
        assertEq(2, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.CLUB_4, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(CardPresident.DIAMOND_4, g_.getProgressingTrick().carte(0).carte(1));
        assertEq(2, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.SPADE_4, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(CardPresident.HEART_4, g_.getProgressingTrick().carte(1).carte(1));
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(0, g_.getProgressingTrick().carte(3).total());
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertTrue(!g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.PASS, g_.getLastStatus().getVal((byte) 3));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop16Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(3, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.SPADE_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(1, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.HEART_3, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(2).total());
        assertEq(13, g_.getDistribution().main((byte) 3).total());
        assertTrue(!g_.isReversed());
        assertEq(0, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.DO_NOT_EQUAL, g_.getLastStatus().getVal((byte) 3));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 0));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop17Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(2, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.SPADE_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(1, g_.getProgressingTrick().carte(1).total());
        assertEq(CardPresident.HEART_3, g_.getProgressingTrick().carte(1).carte(0));
        assertEq(12, g_.getDistribution().main((byte) 2).total());
        assertTrue(!g_.isReversed());
        assertEq(3, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.HAS_TO_EQUAL, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop18Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        //
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(6, g_.getProgressingTrick().total());
        assertEq(1, g_.getProgressingTrick().carte(0).total());
        assertEq(CardPresident.SPADE_3, g_.getProgressingTrick().carte(0).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(1).total());
        assertEq(1, g_.getProgressingTrick().carte(2).total());
        assertEq(CardPresident.DIAMOND_3, g_.getProgressingTrick().carte(2).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(3).total());
        assertEq(1, g_.getProgressingTrick().carte(4).total());
        assertEq(CardPresident.CLUB_7, g_.getProgressingTrick().carte(4).carte(0));
        assertEq(0, g_.getProgressingTrick().carte(5).total());
        assertEq(11, g_.getDistribution().main((byte) 1).total());
        assertEq(13, g_.getDistribution().main((byte) 2).total());
        assertTrue(!g_.isReversed());
        assertEq(3, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop19Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal4();
        DealPresident d_ = new DealPresident(hs_, (byte) 3);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_5);
        played_.ajouter(CardPresident.HEART_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_JACK);
        played_.ajouter(CardPresident.DIAMOND_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        //
        assertEq(2, g_.getProgressingTrick().getEntameur());
        assertEq(0, g_.getProgressingTrick().total());
        assertEq(0, g_.getDistribution().main((byte) 0).total());
        assertEq(0, g_.getDistribution().main((byte) 1).total());
        assertEq(13, g_.getDistribution().main((byte) 2).total());
        assertEq(13, g_.getDistribution().main((byte) 3).total());
        assertTrue(!g_.isReversed());
        assertEq(2, g_.getNextPlayer());
        assertEq(4, g_.getLastStatus().size());
        assertEq(Playing.FINISH, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.FINISH, g_.getLastStatus().getVal((byte) 1));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 2));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 3));
    }

    @Test
    public void addCardsToCurrentTrickAndLoop20Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        //
        assertEq(1, g_.getProgressingTrick().getEntameur());
        assertEq(8, g_.getProgressingTrick().total());
        assertEq(3, g_.getDistribution().main((byte) 0).total());
        assertEq(3, g_.getDistribution().main((byte) 1).total());
        assertEq(6, g_.getDistribution().main((byte) 2).total());
        assertEq(6, g_.getDistribution().main((byte) 3).total());
        assertTrue(!g_.isReversed());
        assertEq(1, g_.getNextPlayer());
        assertEq(2, g_.getLastStatus().size());
        assertEq(Playing.PASS, g_.getLastStatus().getVal((byte) 0));
        assertEq(Playing.CAN_PLAY, g_.getLastStatus().getVal((byte) 1));
    }

    @Test
    public void getNewRanks1Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 2, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_5);
        played_.ajouter(CardPresident.HEART_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_6);
        played_.ajouter(CardPresident.CLUB_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_2);
        played_.ajouter(CardPresident.CLUB_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(4, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(3, ranks_.get(1).intValue());
        assertEq(4, ranks_.get(2).intValue());
        assertEq(2, ranks_.get(3).intValue());
    }

    @Test
    public void getNewRanks2Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setLoosingIfFinishByBestCards(false);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 2, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_5);
        played_.ajouter(CardPresident.HEART_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_6);
        played_.ajouter(CardPresident.CLUB_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_2);
        played_.ajouter(CardPresident.CLUB_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(4, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(2, ranks_.get(1).intValue());
        assertEq(3, ranks_.get(2).intValue());
        assertEq(4, ranks_.get(3).intValue());
    }

    @Test
    public void getNewRanks3Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal1();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 2, played_);
//        played_ = new HandPresident();
//        g_.addCardsToCurrentTrick((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_5);
        played_.ajouter(CardPresident.HEART_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_6);
        played_.ajouter(CardPresident.CLUB_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_2);
        played_.ajouter(CardPresident.CLUB_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(4, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(2, ranks_.get(1).intValue());
        assertEq(4, ranks_.get(2).intValue());
        assertEq(3, ranks_.get(3).intValue());
    }

    @Test
    public void getNewRanks4Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setLoosingIfFinishByBestCards(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        played_.ajouter(CardPresident.DIAMOND_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
//        CheckerGamePresidentWithRules.check(g_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_1);
        played_.ajouter(CardPresident.CLUB_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(4, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(2, ranks_.get(1).intValue());
        assertEq(4, ranks_.get(2).intValue());
        assertEq(3, ranks_.get(3).intValue());
    }

    @Test
    public void getNewRanks5Test() {
        RulesPresident r_ = new RulesPresident(4);
        r_.setPossibleReversing(true);
        r_.setLoosingIfFinishByBestCards(true);
        r_.setEqualty(EqualtyPlaying.SKIP_DIFF_NEXT_STOP);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal3();
        DealPresident d_ = new DealPresident(hs_, (byte) 0);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        //
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        played_.ajouter(CardPresident.DIAMOND_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_4);
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_10);
        played_.ajouter(CardPresident.SPADE_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_1);
        played_.ajouter(CardPresident.CLUB_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);

        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);

        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(4, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(2, ranks_.get(1).intValue());
        assertEq(4, ranks_.get(2).intValue());
        assertEq(3, ranks_.get(3).intValue());
    }

    @Test
    public void getNewRanks6Test() {
        RulesPresident r_ = new RulesPresident(13);
        r_.setLoosingIfFinishByBestCards(true);
        Numbers<Byte> rk_ = new Numbers<Byte>();
        EqList<HandPresident> hs_ = deal5();
        DealPresident d_ = new DealPresident(hs_, (byte) 12);
        GamePresident g_ = new GamePresident(GameType.EDIT, d_, r_, rk_);
        g_.initCartesEchanges();
        HandPresident played_;
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_2);
        played_.ajouter(CardPresident.DIAMOND_2);
        played_.ajouter(CardPresident.SPADE_2);
        played_.ajouter(CardPresident.CLUB_2);
        g_.addCardsToCurrentTrickAndLoop((byte) 0, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_1);
        played_.ajouter(CardPresident.HEART_1);
        played_.ajouter(CardPresident.SPADE_1);
        played_.ajouter(CardPresident.CLUB_1);
        g_.addCardsToCurrentTrickAndLoop((byte) 1, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_KING);
        played_.ajouter(CardPresident.CLUB_KING);
        played_.ajouter(CardPresident.HEART_KING);
        played_.ajouter(CardPresident.DIAMOND_KING);
        g_.addCardsToCurrentTrickAndLoop((byte) 2, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_QUEEN);
        played_.ajouter(CardPresident.CLUB_QUEEN);
        played_.ajouter(CardPresident.HEART_QUEEN);
        played_.ajouter(CardPresident.DIAMOND_QUEEN);
        g_.addCardsToCurrentTrickAndLoop((byte) 3, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.CLUB_JACK);
        played_.ajouter(CardPresident.SPADE_JACK);
        played_.ajouter(CardPresident.HEART_JACK);
        played_.ajouter(CardPresident.DIAMOND_JACK);
        g_.addCardsToCurrentTrickAndLoop((byte) 4, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_10);
        played_.ajouter(CardPresident.SPADE_10);
        played_.ajouter(CardPresident.CLUB_10);
        played_.ajouter(CardPresident.DIAMOND_10);
        g_.addCardsToCurrentTrickAndLoop((byte) 5, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_9);
        played_.ajouter(CardPresident.HEART_9);
        played_.ajouter(CardPresident.DIAMOND_9);
        played_.ajouter(CardPresident.CLUB_9);
        g_.addCardsToCurrentTrickAndLoop((byte) 6, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_8);
        played_.ajouter(CardPresident.HEART_8);
        played_.ajouter(CardPresident.SPADE_8);
        played_.ajouter(CardPresident.CLUB_8);
        g_.addCardsToCurrentTrickAndLoop((byte) 7, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_7);
        played_.ajouter(CardPresident.CLUB_7);
        played_.ajouter(CardPresident.HEART_7);
        played_.ajouter(CardPresident.DIAMOND_7);
        g_.addCardsToCurrentTrickAndLoop((byte) 8, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.SPADE_6);
        played_.ajouter(CardPresident.CLUB_6);
        played_.ajouter(CardPresident.HEART_6);
        played_.ajouter(CardPresident.DIAMOND_6);
        g_.addCardsToCurrentTrickAndLoop((byte) 9, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.HEART_5);
        played_.ajouter(CardPresident.CLUB_5);
        played_.ajouter(CardPresident.DIAMOND_5);
        played_.ajouter(CardPresident.SPADE_5);
        g_.addCardsToCurrentTrickAndLoop((byte) 10, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_4);
        played_.ajouter(CardPresident.SPADE_4);
        played_.ajouter(CardPresident.HEART_4);
        played_.ajouter(CardPresident.CLUB_4);
        g_.addCardsToCurrentTrickAndLoop((byte) 11, played_);
        played_ = new HandPresident();
        played_.ajouter(CardPresident.DIAMOND_3);
        played_.ajouter(CardPresident.CLUB_3);
        played_.ajouter(CardPresident.HEART_3);
        played_.ajouter(CardPresident.SPADE_3);
        g_.addCardsToCurrentTrickAndLoop((byte) 12, played_);

        //
        Numbers<Byte> ranks_ = g_.getNewRanks();
        //
        assertEq(13, ranks_.size());
        assertEq(1, ranks_.get(0).intValue());
        assertEq(2, ranks_.get(1).intValue());
        assertEq(3, ranks_.get(2).intValue());
        assertEq(4, ranks_.get(3).intValue());
        assertEq(5, ranks_.get(4).intValue());
        assertEq(6, ranks_.get(5).intValue());
        assertEq(7, ranks_.get(6).intValue());
        assertEq(8, ranks_.get(7).intValue());
        assertEq(9, ranks_.get(8).intValue());
        assertEq(10, ranks_.get(9).intValue());
        assertEq(11, ranks_.get(10).intValue());
        assertEq(12, ranks_.get(11).intValue());
        assertEq(13, ranks_.get(12).intValue());
    }

    static EqList<HandPresident> deal1() {
        EqList<HandPresident> hs_ = new EqList<HandPresident>();
        HandPresident h_;
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.CLUB_4);
        h_.ajouter(CardPresident.DIAMOND_4);
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.DIAMOND_8);
        h_.ajouter(CardPresident.HEART_8);
        h_.ajouter(CardPresident.CLUB_9);
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.CLUB_JACK);
        h_.ajouter(CardPresident.SPADE_JACK);
        h_.ajouter(CardPresident.SPADE_KING);
        h_.ajouter(CardPresident.DIAMOND_1);
        h_.ajouter(CardPresident.HEART_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_3);
        h_.ajouter(CardPresident.SPADE_4);
        h_.ajouter(CardPresident.HEART_4);
        h_.ajouter(CardPresident.CLUB_7);
        h_.ajouter(CardPresident.SPADE_8);
        h_.ajouter(CardPresident.CLUB_8);
        h_.ajouter(CardPresident.SPADE_9);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.HEART_JACK);
        h_.ajouter(CardPresident.DIAMOND_JACK);
        h_.ajouter(CardPresident.CLUB_KING);
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.DIAMOND_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_5);
        h_.ajouter(CardPresident.HEART_5);
        h_.ajouter(CardPresident.SPADE_6);
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.HEART_9);
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.SPADE_QUEEN);
        h_.ajouter(CardPresident.CLUB_QUEEN);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.SPADE_2);
        h_.ajouter(CardPresident.CLUB_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_3);
        h_.ajouter(CardPresident.CLUB_5);
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        h_.ajouter(CardPresident.DIAMOND_7);
        h_.ajouter(CardPresident.DIAMOND_9);
        h_.ajouter(CardPresident.DIAMOND_10);
        h_.ajouter(CardPresident.HEART_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_KING);
        h_.ajouter(CardPresident.SPADE_1);
        h_.ajouter(CardPresident.CLUB_1);
        hs_.add(h_);
        return hs_;
    }

    static EqList<HandPresident> deal2() {
        EqList<HandPresident> hs_ = new EqList<HandPresident>();
        HandPresident h_;
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.CLUB_4);
        h_.ajouter(CardPresident.DIAMOND_4);
        h_.ajouter(CardPresident.SPADE_4);
        h_.ajouter(CardPresident.HEART_4);
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.CLUB_9);
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.CLUB_JACK);
        h_.ajouter(CardPresident.SPADE_JACK);
        h_.ajouter(CardPresident.SPADE_KING);
        h_.ajouter(CardPresident.DIAMOND_1);
        h_.ajouter(CardPresident.HEART_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_3);
        h_.ajouter(CardPresident.CLUB_7);
        h_.ajouter(CardPresident.DIAMOND_8);
        h_.ajouter(CardPresident.HEART_8);
        h_.ajouter(CardPresident.SPADE_8);
        h_.ajouter(CardPresident.CLUB_8);
        h_.ajouter(CardPresident.SPADE_9);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.HEART_JACK);
        h_.ajouter(CardPresident.DIAMOND_JACK);
        h_.ajouter(CardPresident.CLUB_KING);
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.DIAMOND_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_5);
        h_.ajouter(CardPresident.HEART_5);
        h_.ajouter(CardPresident.SPADE_6);
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.HEART_9);
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.SPADE_QUEEN);
        h_.ajouter(CardPresident.CLUB_QUEEN);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.SPADE_2);
        h_.ajouter(CardPresident.CLUB_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_3);
        h_.ajouter(CardPresident.SPADE_5);
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        h_.ajouter(CardPresident.DIAMOND_7);
        h_.ajouter(CardPresident.DIAMOND_9);
        h_.ajouter(CardPresident.DIAMOND_10);
        h_.ajouter(CardPresident.HEART_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_KING);
        h_.ajouter(CardPresident.SPADE_1);
        h_.ajouter(CardPresident.CLUB_1);
        hs_.add(h_);
        return hs_;
    }

    static EqList<HandPresident> deal3() {
        EqList<HandPresident> hs_ = new EqList<HandPresident>();
        HandPresident h_;
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.CLUB_4);
        h_.ajouter(CardPresident.DIAMOND_4);
        h_.ajouter(CardPresident.SPADE_4);
        h_.ajouter(CardPresident.HEART_4);
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.DIAMOND_8);
        h_.ajouter(CardPresident.HEART_8);
        h_.ajouter(CardPresident.SPADE_8);
        h_.ajouter(CardPresident.CLUB_8);
        h_.ajouter(CardPresident.SPADE_KING);
        h_.ajouter(CardPresident.DIAMOND_1);
        h_.ajouter(CardPresident.HEART_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_3);
        h_.ajouter(CardPresident.CLUB_7);
        h_.ajouter(CardPresident.SPADE_9);
        h_.ajouter(CardPresident.CLUB_9);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.CLUB_JACK);
        h_.ajouter(CardPresident.SPADE_JACK);
        h_.ajouter(CardPresident.HEART_JACK);
        h_.ajouter(CardPresident.DIAMOND_JACK);
        h_.ajouter(CardPresident.CLUB_KING);
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.DIAMOND_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_5);
        h_.ajouter(CardPresident.HEART_5);
        h_.ajouter(CardPresident.SPADE_6);
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.HEART_9);
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.SPADE_QUEEN);
        h_.ajouter(CardPresident.CLUB_QUEEN);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.SPADE_2);
        h_.ajouter(CardPresident.CLUB_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_3);
        h_.ajouter(CardPresident.CLUB_5);
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        h_.ajouter(CardPresident.DIAMOND_7);
        h_.ajouter(CardPresident.DIAMOND_9);
        h_.ajouter(CardPresident.DIAMOND_10);
        h_.ajouter(CardPresident.HEART_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_KING);
        h_.ajouter(CardPresident.SPADE_1);
        h_.ajouter(CardPresident.CLUB_1);
        hs_.add(h_);
        return hs_;
    }

    static EqList<HandPresident> deal4() {
        EqList<HandPresident> hs_ = new EqList<HandPresident>();
        HandPresident h_;
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.CLUB_4);
        h_.ajouter(CardPresident.DIAMOND_4);
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.DIAMOND_8);
        h_.ajouter(CardPresident.HEART_8);
        h_.ajouter(CardPresident.CLUB_9);
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.CLUB_JACK);
        h_.ajouter(CardPresident.SPADE_JACK);
        h_.ajouter(CardPresident.SPADE_KING);
        h_.ajouter(CardPresident.DIAMOND_1);
        h_.ajouter(CardPresident.HEART_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_4);
        h_.ajouter(CardPresident.SPADE_5);
        h_.ajouter(CardPresident.HEART_5);
        h_.ajouter(CardPresident.CLUB_7);
        h_.ajouter(CardPresident.SPADE_8);
        h_.ajouter(CardPresident.CLUB_8);
        h_.ajouter(CardPresident.SPADE_9);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.HEART_JACK);
        h_.ajouter(CardPresident.DIAMOND_JACK);
        h_.ajouter(CardPresident.CLUB_KING);
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.DIAMOND_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.HEART_4);
        h_.ajouter(CardPresident.SPADE_6);
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.HEART_9);
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.SPADE_QUEEN);
        h_.ajouter(CardPresident.CLUB_QUEEN);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.SPADE_2);
        h_.ajouter(CardPresident.CLUB_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_3);
        h_.ajouter(CardPresident.CLUB_5);
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        h_.ajouter(CardPresident.DIAMOND_7);
        h_.ajouter(CardPresident.DIAMOND_9);
        h_.ajouter(CardPresident.DIAMOND_10);
        h_.ajouter(CardPresident.HEART_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_KING);
        h_.ajouter(CardPresident.SPADE_1);
        h_.ajouter(CardPresident.CLUB_1);
        hs_.add(h_);
        return hs_;
    }

    static EqList<HandPresident> deal5() {
        EqList<HandPresident> hs_ = new EqList<HandPresident>();
        HandPresident h_;
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_2);
        h_.ajouter(CardPresident.DIAMOND_2);
        h_.ajouter(CardPresident.SPADE_2);
        h_.ajouter(CardPresident.CLUB_2);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_1);
        h_.ajouter(CardPresident.HEART_1);
        h_.ajouter(CardPresident.SPADE_1);
        h_.ajouter(CardPresident.CLUB_1);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_KING);
        h_.ajouter(CardPresident.CLUB_KING);
        h_.ajouter(CardPresident.HEART_KING);
        h_.ajouter(CardPresident.DIAMOND_KING);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_QUEEN);
        h_.ajouter(CardPresident.CLUB_QUEEN);
        h_.ajouter(CardPresident.HEART_QUEEN);
        h_.ajouter(CardPresident.DIAMOND_QUEEN);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.CLUB_JACK);
        h_.ajouter(CardPresident.SPADE_JACK);
        h_.ajouter(CardPresident.HEART_JACK);
        h_.ajouter(CardPresident.DIAMOND_JACK);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_10);
        h_.ajouter(CardPresident.SPADE_10);
        h_.ajouter(CardPresident.CLUB_10);
        h_.ajouter(CardPresident.DIAMOND_10);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_9);
        h_.ajouter(CardPresident.HEART_9);
        h_.ajouter(CardPresident.DIAMOND_9);
        h_.ajouter(CardPresident.CLUB_9);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_8);
        h_.ajouter(CardPresident.HEART_8);
        h_.ajouter(CardPresident.SPADE_8);
        h_.ajouter(CardPresident.CLUB_8);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_7);
        h_.ajouter(CardPresident.CLUB_7);
        h_.ajouter(CardPresident.HEART_7);
        h_.ajouter(CardPresident.DIAMOND_7);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.SPADE_6);
        h_.ajouter(CardPresident.CLUB_6);
        h_.ajouter(CardPresident.HEART_6);
        h_.ajouter(CardPresident.DIAMOND_6);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.HEART_5);
        h_.ajouter(CardPresident.CLUB_5);
        h_.ajouter(CardPresident.DIAMOND_5);
        h_.ajouter(CardPresident.SPADE_5);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_4);
        h_.ajouter(CardPresident.SPADE_4);
        h_.ajouter(CardPresident.HEART_4);
        h_.ajouter(CardPresident.CLUB_4);
        hs_.add(h_);
        h_ = new HandPresident();
        h_.ajouter(CardPresident.DIAMOND_3);
        h_.ajouter(CardPresident.CLUB_3);
        h_.ajouter(CardPresident.HEART_3);
        h_.ajouter(CardPresident.SPADE_3);
        hs_.add(h_);
        return hs_;
    }
}
