package cards.tarot;

import cards.consts.Suit;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import code.util.*;
import org.junit.Test;

import static cards.tarot.EquallableTarotUtil.assertEq;
import static org.junit.Assert.assertTrue;

public final class GameTarotCommonPlayingTest extends CommonGameTarot {
    @Test
    public void appeleConnuDefenseur1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        team_.faireConfiance((byte)3,(byte)4);
        assertTrue(playing_.appeleConnuDefenseur((byte) 3,new EnumMap<Suit, EqList<HandTarot>>()));
    }
    @Test
    public void appeleConnuDefenseur2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3,new EnumMap<Suit, EqList<HandTarot>>()));
    }
    @Test
    public void appeleConnuDefenseur3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        team_.faireConfiance((byte)3,(byte)4);
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hands_ = new EqList<HandTarot>();
        hands_.add(new HandTarot());
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        team_.faireConfiance((byte)3,(byte)4);
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hands_ = new EqList<HandTarot>();
        HandTarot takerHand_ = new HandTarot();
        takerHand_.ajouter(CardTarot.CLUB_QUEEN);
        hands_.add(takerHand_);
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hands_ = new EqList<HandTarot>();
        hands_.add(new HandTarot());
        HandTarot calledHand_ = new HandTarot();
        calledHand_.ajouter(CardTarot.CLUB_KING);
        hands_.add(calledHand_);
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        hands_.add(new HandTarot());
        rep_.put(Suit.CLUB, hands_);
        assertTrue(!playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void appeleConnuDefenseur6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotCommonPlaying playing_ = new GameTarotCommonPlaying(info_, team_);
        team_.faireConfiance((byte)3,(byte)2);
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        assertTrue(playing_.appeleConnuDefenseur((byte) 3, rep_));
    }
    @Test
    public void strictCouleursMaitres1Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres2Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_8);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres3Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void strictCouleursMaitres4Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(1, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
    }
    @Test
    public void strictCouleursMaitres5Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.strictCouleursMaitres(seqs_, repPlayed_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
    }
    @Test
    public void couleursMaitres1Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres2Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_8);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres3Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres4Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(2, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void couleursMaitres5Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.SPADE_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        EnumList<Suit> suits_ = GameTarotCommonPlaying.couleursMaitres(seqs_, played_, rep_, (byte) 2);
        assertEq(3, suits_.size());
        assertTrue(suits_.containsObj(Suit.HEART));
        assertTrue(suits_.containsObj(Suit.SPADE));
        assertTrue(suits_.containsObj(Suit.CLUB));
    }
    @Test
    public void strictMaitreAtout1Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout2Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hand_.ajouter(CardTarot.TRUMP_4);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout3Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout4Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_21);
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_4);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout5Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout6Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_8);
        hand_.ajouter(CardTarot.TRUMP_9);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_7);
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout7Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void strictMaitreAtout8Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.EXCUSE);
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.strictMaitreAtout(rep_, (byte) 2, suites_,played_));
    }
    @Test
    public void maitreAtout1Test() {
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }
    @Test
    public void maitreAtout2Test() {
        HandTarot curHand_ = new HandTarot();
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }
    @Test
    public void maitreAtout3Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_20);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout4Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_19);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout5Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout6Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(GameTarotCommonPlaying.maitreAtout(suites_,played_,true));
    }
    @Test
    public void maitreAtout7Test() {
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouter(CardTarot.TRUMP_21);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_6);
        played_.ajouter(CardTarot.TRUMP_5);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_16);
        played_.ajouter(CardTarot.TRUMP_15);
        played_.ajouter(CardTarot.TRUMP_14);
        played_.ajouter(CardTarot.TRUMP_13);
        played_.ajouter(CardTarot.TRUMP_12);
        played_.ajouter(CardTarot.TRUMP_11);
        played_.ajouter(CardTarot.TRUMP_10);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EqList<HandTarot> suites_ = curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_, Suit.TRUMP);
        assertTrue(!GameTarotCommonPlaying.maitreAtout(suites_,played_,false));
    }

    @Test
    public void cartesRelativementMaitreEncours1Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours2Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.SPADE_4);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours3Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_QUEEN);
        curHand_.ajouter(CardTarot.SPADE_7);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.SPADE);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.SPADE, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_KING));
        assertTrue(handsTarot_.get(0).contient(CardTarot.SPADE_QUEEN));
        assertEq(1, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.SPADE_7));
    }

    @Test
    public void cartesRelativementMaitreEncours4Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hand_.ajouter(CardTarot.SPADE_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_2);
        hand_.ajouter(CardTarot.SPADE_1);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        seqs_.put(Suit.TRUMP,curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_,Suit.TRUMP));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours5Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_4);
        hand_.ajouter(CardTarot.TRUMP_3);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        seqs_.put(Suit.TRUMP,curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_,Suit.TRUMP));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours6Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        seqs_.put(Suit.TRUMP,curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_,Suit.TRUMP));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }

    @Test
    public void cartesRelativementMaitreEncours7Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        seqs_.put(Suit.TRUMP,curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_,Suit.TRUMP));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.SPADE, repSure_, CardTarot.SPADE_6);
        assertEq(3, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
        assertEq(2, handsTarot_.get(2).total());
        assertTrue(handsTarot_.get(2).contient(CardTarot.TRUMP_2));
        assertTrue(handsTarot_.get(2).contient(CardTarot.TRUMP_1));
    }

    @Test
    public void cartesRelativementMaitreEncours8Test() {
        EnumMap<Suit, EqList<HandTarot>> rep_ = new EnumMap<Suit, EqList<HandTarot>>();
        EqList<HandTarot> hypos_ = new EqList<HandTarot>();
        HandTarot hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        rep_.put(Suit.TRUMP,hypos_);
        EnumMap<Suit, EqList<HandTarot>> repSure_ = new EnumMap<Suit, EqList<HandTarot>>();
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.HEART,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_KNIGHT);
        hand_.ajouter(CardTarot.SPADE_JACK);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.SPADE_10);
        hand_.ajouter(CardTarot.SPADE_9);
        hand_.ajouter(CardTarot.SPADE_8);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.SPADE,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.DIAMOND_KING);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.DIAMOND,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.CLUB_6);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.CLUB,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.UNDEFINED,hypos_);
        hypos_ = new EqList<HandTarot>();
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_6);
        hand_.ajouter(CardTarot.TRUMP_5);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_14);
        hand_.ajouter(CardTarot.TRUMP_13);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hand_.ajouter(CardTarot.TRUMP_16);
        hand_.ajouter(CardTarot.TRUMP_15);
        hypos_.add(hand_);
        hand_ = new HandTarot();
        hypos_.add(hand_);
        repSure_.put(Suit.TRUMP,hypos_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        HandTarot played_ = new HandTarot();
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.HEART));
        played_.ajouter(CardTarot.SPADE_4);
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.CLUB));
        played_.ajouterCartes(HandTarot.couleurComplete(Suit.DIAMOND));
        played_.removeCardIfPresent(CardTarot.CLUB_6);
        played_.removeCardIfPresent(CardTarot.DIAMOND_1);
        played_.removeCardIfPresent(CardTarot.DIAMOND_KING);
        played_.ajouter(CardTarot.EXCUSE);
        played_.ajouter(CardTarot.TRUMP_19);
        played_.ajouter(CardTarot.TRUMP_18);
        played_.ajouter(CardTarot.TRUMP_3);
        played_.ajouter(CardTarot.TRUMP_4);
        played_.ajouter(CardTarot.SPADE_KING);
        played_.ajouter(CardTarot.SPADE_QUEEN);
        played_.ajouter(CardTarot.SPADE_7);
        played_.ajouter(CardTarot.SPADE_6);
        played_.ajouter(CardTarot.SPADE_5);
        played_.ajouter(CardTarot.SPADE_3);
        played_.ajouter(CardTarot.SPADE_2);
        played_.ajouter(CardTarot.SPADE_1);
        played_.ajouter(CardTarot.TRUMP_17);
        played_.ajouter(CardTarot.TRUMP_9);
        played_.ajouter(CardTarot.TRUMP_8);
        played_.ajouter(CardTarot.TRUMP_7);
        played_.ajouter(CardTarot.TRUMP_2);
        played_.ajouter(CardTarot.TRUMP_1);
        EnumMap<Suit, HandTarot> repPlayed_ = played_.couleurs();
        EnumMap<Suit,EqList<HandTarot>> seqs_ = new EnumMap<Suit, EqList<HandTarot>>();
        seqs_.put(Suit.HEART,curHand_.couleur(Suit.HEART).eclaterEnCours(repPlayed_,Suit.HEART));
        seqs_.put(Suit.SPADE,curHand_.couleur(Suit.SPADE).eclaterEnCours(repPlayed_,Suit.SPADE));
        seqs_.put(Suit.DIAMOND,curHand_.couleur(Suit.DIAMOND).eclaterEnCours(repPlayed_,Suit.DIAMOND));
        seqs_.put(Suit.CLUB,curHand_.couleur(Suit.CLUB).eclaterEnCours(repPlayed_,Suit.CLUB));
        seqs_.put(Suit.TRUMP,curHand_.couleur(Suit.TRUMP).eclaterEnCours(repPlayed_,Suit.TRUMP));
        Numbers<Byte> players_ = new Numbers<Byte>();
        players_.add((byte) 0);
        players_.add((byte) 1);
        EqList<HandTarot> seq_ = seqs_.getVal(Suit.TRUMP);
        EqList<HandTarot> handsTarot_ = GameTarotCommonPlaying.cartesRelativementMaitreEncours(seq_, rep_, players_, Suit.TRUMP, Suit.TRUMP, repSure_, CardTarot.TRUMP_10);
        assertEq(2, handsTarot_.size());
        assertEq(2, handsTarot_.get(0).total());
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(handsTarot_.get(0).contient(CardTarot.TRUMP_20));
        assertEq(2, handsTarot_.get(1).total());
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(handsTarot_.get(1).contient(CardTarot.TRUMP_11));
    }
}
