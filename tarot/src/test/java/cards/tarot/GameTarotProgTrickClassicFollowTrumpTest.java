package cards.tarot;

import cards.consts.PossibleTrickWinner;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.Handfuls;
import code.util.CustList;
import code.util.EnumList;
import org.junit.Test;

import static org.junit.Assert.assertSame;

public final class GameTarotProgTrickClassicFollowTrumpTest extends CommonGameTarot {
    @Test
    public void followTrumpFoeTest() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.FOE_TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.followTrumpFoe(infoTr_));
    }
    @Test
    public void followTrumpTeam1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.followTrumpTeam(infoTr_));
    }
    @Test
    public void followTrumpTeam2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_6);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_5);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        g_.getDeclaresHandfuls().get(1).add(Handfuls.FOUR);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_18);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_16);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_12);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_11);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_10);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_9);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_7);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_3);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.followTrumpTeam(infoTr_));
    }
    @Test
    public void followTrumpTeam3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_1);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_4);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_21);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_20, gbt_.followTrumpTeam(infoTr_));
    }
    @Test
    public void followTrumpTeam4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_2);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_5);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_21);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.followTrumpTeam(infoTr_));
    }
    @Test
    public void followTrumpDefault1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.DIAMOND_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.DIAMOND_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_11, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        removePossibleCard(infoTr_,3,CardTarot.TRUMP_20);
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_8, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.EXCUSE);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_20, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.EXCUSE);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_20, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.EXCUSE);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.DIAMOND_10);
        pr_.ajouter(CardTarot.TRUMP_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_8, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_3);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.TRUMP_12);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_21, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_8, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.TRUMP_13);
        pr_.ajouter(CardTarot.TRUMP_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_14, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_21, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.TRUMP_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_8, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.TRUMP_13);
        pr_.ajouter(CardTarot.TRUMP_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_14, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void followTrumpDefault15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_12);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_14, gbt_.followTrumpDefault(infoTr_));
    }
    @Test
    public void fournirAtoutClassique1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.TRUMP_5, gbt_.fournirAtoutClassique(infoTr_));
    }
    @Test
    public void fournirAtoutClassique2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.TRUMP_1, gbt_.fournirAtoutClassique(infoTr_));
    }
    @Test
    public void fournirAtoutClassique3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.DIAMOND_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.TRUMP_2, gbt_.fournirAtoutClassique(infoTr_));
    }
}
