package cards.tarot;

import cards.consts.PossibleTrickWinner;
import cards.consts.Status;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import code.util.CustList;
import code.util.EnumList;
import org.junit.Test;

import static org.junit.Assert.assertSame;

public final class GameTarotProgTrickClassicTest extends CommonGameTarot {
    @Test
    public void tryPlayExcuseOrLead1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.DIAMOND_6, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_5);
        pr_.ajouter(CardTarot.DIAMOND_7);
        pr_.ajouter(CardTarot.DIAMOND_8);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.CLUB_3);
        last_.ajouter(CardTarot.CLUB_2);
        last_.ajouter(CardTarot.CLUB_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.HEART_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 4, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.DIAMOND_KING);
        curHand_.ajouter(CardTarot.DIAMOND_QUEEN);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.HEART_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.WHITE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_9);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.DIAMOND_6, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.HEART_5);
        last_.ajouter(CardTarot.HEART_7);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_6);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_9);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_5);
        pr_.ajouter(CardTarot.DIAMOND_7);
        pr_.ajouter(CardTarot.DIAMOND_8);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_10);
        pr_.ajouter(CardTarot.HEART_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.CLUB_3);
        last_.ajouter(CardTarot.CLUB_2);
        last_.ajouter(CardTarot.CLUB_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.HEART_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.CLUB_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_16);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_17);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_QUEEN);
        t_.ajouter(CardTarot.CLUB_8);
        t_.ajouter(CardTarot.CLUB_9);
        t_.ajouter(CardTarot.CLUB_10);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KNIGHT);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_8);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.SPADE_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        t_.ajouter(CardTarot.DIAMOND_8);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 4, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
    @Test
    public void tryPlayExcuseOrLead10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.SPADE_3);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_9);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        faireConfiance(g_, (byte) 1);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(CardTarot.EXCUSE, gbt_.tryPlayExcuseOrLead(infoTr_,curHand_));
    }
}
