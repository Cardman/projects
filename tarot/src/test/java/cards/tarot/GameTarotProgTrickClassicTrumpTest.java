package cards.tarot;

import cards.consts.PossibleTrickWinner;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.Handfuls;
import cards.tarot.enumerations.Miseres;
import code.util.CustList;
import code.util.EnumList;
import org.junit.Test;

import static org.junit.Assert.assertSame;

public final class GameTarotProgTrickClassicTrumpTest extends CommonGameTarot {
    @Test
    public void underTrumpFoeTest() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 3, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.FOE_TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.underTrumpFoe(infoTr_));
    }
    @Test
    public void underTrumpPartners1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.underTrumpPartners(infoTr_));
    }
    @Test
    public void underTrumpPartners2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_6);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        g_.getDeclaresHandfuls().get(1).add(Handfuls.FOUR);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_18);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_16);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_12);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_11);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_10);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_9);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_7);
        g_.getHandfuls().get(1).ajouter(CardTarot.TRUMP_3);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.underTrumpPartners(infoTr_));
    }
    @Test
    public void underTrumpPartners3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_1);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_21);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_20, gbt_.underTrumpPartners(infoTr_));
    }
    @Test
    public void underTrumpPartners4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_2);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_21);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.TEAM, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.underTrumpPartners(infoTr_));
    }
    @Test
    public void underTrump1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.underTrump(infoTr_));
    }
    @Test
    public void underTrump2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.underTrump(infoTr_));
    }
    @Test
    public void underTrump3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_4);
        pr_.ajouter(CardTarot.TRUMP_12);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.underTrump(infoTr_));
    }
    @Test
    public void underTrump4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_4);
        pr_.ajouter(CardTarot.TRUMP_12);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.underTrump(infoTr_));
    }
    @Test
    public void underTrump5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.SPADE_8);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.underTrump(infoTr_));
    }
    @Test
    public void underTrump6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_11);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.WHITE, gbt_.underTrump(infoTr_));
    }
    @Test
    public void trumpFirstRound1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.TRUMP_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_QUEEN);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 1, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.TRUMP_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_21, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_1);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_21, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.TRUMP);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.TRUMP_8);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_14);
        curHand_.ajouter(CardTarot.TRUMP_15);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_13);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_11);
        curHand_.ajouter(CardTarot.TRUMP_1);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_5);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        g_.getDeclaresMiseres().get(3).add(Miseres.TRUMP);
        g_.getDeclaresMiseres().get(4).add(Miseres.TRUMP);
        g_.getDeclaresMiseres().get(0).add(Miseres.TRUMP);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_20, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_10);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_5, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.HEART_4);
        curHand_.ajouter(CardTarot.HEART_3);
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.CLUB_5);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.CLUB_3);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_10);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_10);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_4);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.SPADE_7);
        pr_.ajouter(CardTarot.SPADE_8);
        pr_.ajouter(CardTarot.SPADE_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound22Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_KING);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_19);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_10);
        t_.ajouter(CardTarot.DIAMOND_3);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.DIAMOND_2);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.SPADE_7);
        pr_.ajouter(CardTarot.SPADE_8);
        pr_.ajouter(CardTarot.SPADE_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpFirstRound23Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.HEART_KING);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.HEART_5);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        pr_.ajouter(CardTarot.DIAMOND_1);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 2, last_);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_1, gbt_.trumpFirstRound(infoTr_));
    }
    @Test
    public void trumpNoAce1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_10);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.DIAMOND_JACK);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_4, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        pr_.ajouter(CardTarot.DIAMOND_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.SPADE_2);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_10);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_2, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_10);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_4, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_10);
        pr_.ajouter(CardTarot.TRUMP_3);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.EXCUSE, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_8);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_KING);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.DIAMOND_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        pr_.ajouter(CardTarot.DIAMOND_JACK);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_12, gbt_.trumpNoAce(infoTr_));
    }
    @Test
    public void trumpNoAce12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.SPADE_QUEEN);
        last_.ajouter(CardTarot.SPADE_10);
        last_.ajouter(CardTarot.SPADE_1);
        RulesTarot r_ = new RulesTarot();
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_QUEEN);
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_JACK);
        curHand_.ajouter(CardTarot.SPADE_9);
        curHand_.ajouter(CardTarot.TRUMP_20);
        curHand_.ajouter(CardTarot.TRUMP_12);
        curHand_.ajouter(CardTarot.TRUMP_9);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_1);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_16);
        byte d_ = 2;
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD);
        bids_.add(BidTarot.FOLD);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,d_,bids_),false);
        t_.ajouter(CardTarot.SPADE_QUEEN);
        t_.ajouter(CardTarot.SPADE_10);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(d_),true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.DIAMOND_QUEEN);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_10);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_1);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_KING);
        pr_.ajouter(CardTarot.DIAMOND_KNIGHT);
        pr_.ajouter(CardTarot.EXCUSE);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, d_, bids_, calledCards_, 0, last_);
        faireConfiance(g_,(byte)0);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        GameTarotProgTrickClassic gbt_ = new GameTarotProgTrickClassic(info_,team_,calledCards_,curHand_);
        TarotInfoPliEnCours infoTr_ = gbt_.initInformations();
        assertSame(PossibleTrickWinner.UNKNOWN, GameTarotTrickHypothesis.equipeQuiVaFairePli(infoTr_));
        assertSame(CardTarot.TRUMP_16, gbt_.trumpNoAce(infoTr_));
    }
}
