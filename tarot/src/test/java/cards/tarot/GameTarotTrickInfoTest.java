package cards.tarot;

import cards.consts.GameType;
import cards.consts.Suit;
import cards.tarot.enumerations.*;
import code.util.CustList;
import code.util.EnumList;
import code.util.EqList;
import code.util.Numbers;
import org.junit.Test;

import static cards.tarot.EquallableTarotUtil.assertEq;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public final class GameTarotTrickInfoTest {
    @Test
    public void coupeTarot1Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.SPADE, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot2Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.CLUB, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot3Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.DIAMOND, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot4Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.HEART, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot5Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot6Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 3,tricks_));
    }
    @Test
    public void coupeTarot7Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)1,tricks_));
    }
    @Test
    public void coupeTarot8Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)2,tricks_));
    }
    @Test
    public void coupeTarot9Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)2,tricks_));
    }
    @Test
    public void coupeTarot10Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)1,tricks_));
    }
    @Test
    public void coupeTarot11Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.SPADE, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot12Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_10);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot13Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 4,tricks_));
    }
    @Test
    public void defausseTarot1Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot2Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.CLUB,tricks_));
    }
    @Test
    public void defausseTarot3Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot4Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.HEART,tricks_));
    }
    @Test
    public void defausseTarot5Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot6Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot7Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot8Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot9Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot10Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte)1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot11Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot12Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte)1,Suit.CLUB,tricks_));
    }
    @Test
    public void defausseTarot13Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot14Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot15Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot16Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot17Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,tricks_));
    }
    @Test
    public void defausseTarot18Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,tricks_));
    }
    @Test
    public void defausseTarot19Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot20Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot21Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void defausseTarot22Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void defausseTarot23Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot24Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void coupeTarot14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 1, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 1, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.TRUMP_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(2, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
    }
    @Test
    public void sousCoupeTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        possible_.ajouter(CardTarot.TRUMP_1);
        HandTarot h_ = info_.sousCoupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_1));
    }
    @Test
    public void sousCoupeTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void joueCarteBasseTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        possible_.ajouter(CardTarot.HEART_3);
        HandTarot h_ = info_.joueCarteBasseTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(2, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
    }
    @Test
    public void joueCarteBasseTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        possible_.ajouter(CardTarot.HEART_3);
        HandTarot h_ = info_.joueCarteBasseTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot(g_.getTeamsRelation(), (byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void playCharacterCardTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 4,  Suit.HEART, possible_, trs_);
        assertEq(1, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
    }
    @Test
    public void playCharacterCardTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 3,  Suit.HEART, possible_, trs_);
        assertEq(1, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
    }
    @Test
    public void playCharacterCardTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 3,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 1,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 1,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot(g_.getTeamsRelation(), (byte) 4,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void atoutsPossibles1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(2).total());
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(4, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(2).total());
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.TRUMP_10);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.CLUB_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertEq(10, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.CLUB_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.TRUMP_21);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(15, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(15, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(14, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(12, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(14, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_12);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(14, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        g_.getDeclaresMiseres().get(4).add(Miseres.POINT);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(3, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        g_.getDeclaresMiseres().get(4).add(Miseres.TRUMP);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 0,last_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(10, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(7, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_4);
        last_.ajouter(CardTarot.TRUMP_2);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 3,last_);
        assertEq(6, h_.size());
        assertEq(16, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(15, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(15, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(1, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_2));
    }
    @Test
    public void atoutsPossibles15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_4);
        last_.ajouter(CardTarot.TRUMP_2);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 3,last_);
        assertEq(6, h_.size());
        assertEq(17, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(17, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
    }
    @Test
    public void atoutsPossibles16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_6);
        last_.ajouter(CardTarot.TRUMP_7);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        CustList<HandTarot> h_ = info_.atoutsPossibles(g_.getTeamsRelation(),curHand_, (byte) 3,last_);
        assertEq(6, h_.size());
        assertEq(13, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(3, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
    }
    private GameTarot newGameTarotWithourDecl(RulesTarot _r, CustList<TrickTarot> _trs,TrickTarot _prog,
                                   int _dealer,
                                   EnumList<BidTarot> _bids, HandTarot _calledCards, int _call, HandTarot _lastHand) {
        int nbPl_ = _r.getRepartition().getNombreJoueurs();
        EqList<EnumList<Miseres>> m_ = new EqList<EnumList<Miseres>>();
        EqList<HandTarot> h_ = new EqList<HandTarot>();
        for (int i = 0; i < nbPl_; i++) {
            m_.add(new EnumList<Miseres>());
            h_.add(new HandTarot());
        }
        return newGameTarot(_r,_trs,_prog,m_,h_,_dealer,_bids,_calledCards,_call,_lastHand);
    }
    private GameTarot newGameTarot(RulesTarot _r, CustList<TrickTarot> _trs,TrickTarot _prog,
                                   EqList<EnumList<Miseres>> _m, EqList<HandTarot> _h, int _dealer,
                                   EnumList<BidTarot> _bids, HandTarot _calledCards, int _call, HandTarot _lastHand) {
        EqList<HandTarot> deal_ = new EqList<HandTarot>();
        deal_.add(_lastHand);
        GameTarot g_ = new GameTarot(GameType.RANDOM,new DealTarot(deal_, (byte) _dealer),_r);
        g_.setProgressingTrick(_prog);
        g_.setTricks(_trs);
        g_.setHandfuls(_h);
        g_.setDeclaresMiseres(_m);
        g_.setBids(_bids);
        g_.setCalledCards(_calledCards);
        if (_call > -1) {
            g_.getAppele().add((byte) _call);
        }
        byte player_ = g_.playerAfter((byte) _dealer);
        int taker_ = getTaker(_r,_dealer,_bids);
        BidTarot bid_ = BidTarot.FOLD;
        for (BidTarot b: _bids) {
            if (b.strongerThan(bid_)) {
                bid_ = b;
            }
            player_ = g_.playerAfter(player_);
        }
        g_.setPreneur((byte) taker_);
        g_.setContrat(bid_);
        if (!g_.avecContrat() || !bid_.isJouerDonne()) {
            g_.initEquipeDetermineeSansPreneur();
        } else if (_r.getRepartition().getAppel() == CallingCard.DEFINED) {
            g_.initEquipeDeterminee();
        } else if (_r.getRepartition().getAppel() == CallingCard.WITHOUT) {
            g_.initDefense();
        }
        CustList<TrickTarot> tricks_ = g_.unionPlis(false);
        byte starter_;
        byte trickWinner_;
        if (!tricks_.isEmpty()) {
            starter_ = _prog.getEntameur();
            trickWinner_ = _prog.getEntameur();
            for (TrickTarot t: tricks_) {
                if (!t.getVuParToutJoueur()) {
                    continue;
                }
                g_.retrieveCalledPlayers(t);
            }
            g_.retrieveCalledPlayers(_prog);
        } else if (_prog.getVuParToutJoueur()) {
            starter_ = _prog.getEntameur();
            trickWinner_ = _prog.getEntameur();
            g_.retrieveCalledPlayers(_prog);
        } else if (!g_.avecContrat()) {
            starter_ = g_.playerAfter((byte) _dealer);
            trickWinner_ = g_.getEntameur();
        } else if (g_.contrats() < g_.getNombreDeJoueurs()) {
            starter_ = g_.playerAfter((byte) _dealer);
            trickWinner_ = g_.getEntameur();
        } else if (g_.pasJeuApresPasse()) {
            //if existePreneur()
            starter_ = g_.getPreneur();
            trickWinner_ = g_.getPreneur();
        } else {
            starter_ = g_.playerAfter((byte) _dealer);
            trickWinner_ = g_.getEntameur();
        }
        g_.getAppele().removeDuplicates();
        if (g_.getAppele().size() > 1) {
            fail("Bad callee player");
        }
        for (int i: g_.getAppele()) {
            g_.getConfidence().get(i).set(g_.getPreneur(),true);
        }
        g_.setStarter(starter_);
        g_.setTrickWinner(trickWinner_);
        return g_;
    }

    private int getTaker(RulesTarot _g, int _dealer, CustList<BidTarot> _bids) {
        byte player_ = _g.getRepartition().getNextPlayer(_dealer);
        int taker_ = CustList.INDEX_NOT_FOUND_ELT;
        BidTarot bid_ = BidTarot.FOLD;
        for (BidTarot b: _bids) {
            if (b.strongerThan(bid_)) {
                taker_ = player_;
                bid_ = b;
            }
            player_ = _g.getRepartition().getNextPlayer(player_);
        }
        return taker_;
    }
    private GameTarotTrickInfo newGameTarotTrickInfo(GameTarot _g) {
        Numbers<Integer> handLengths_ = new Numbers<Integer>();
        int nombreCartesParJoueur_ = _g.getRegles().getRepartition().getNombreCartesParJoueur();
        int nbPl_ = _g.getRegles().getRepartition().getNombreJoueurs();
        for (int i = 0; i < nbPl_; i++) {
            handLengths_.add(nombreCartesParJoueur_);
        }
        handLengths_.add(_g.getRegles().getRepartition().getNombreCartesChien());
        int nbTr_ = _g.getTricks().size();
        for (int i = 0; i < nbTr_; i++) {
            handLengths_.set(i,handLengths_.get(i)-nbTr_);
        }
        for (int i: _g.getProgressingTrick().joueursAyantJoue((byte) nbPl_)) {
            handLengths_.set(i, handLengths_.get(i)-1);
        }
        return new GameTarotTrickInfo(_g.getProgressingTrick(), _g.getTricks(),
                _g.getDeclaresMiseres(),
                _g.getHandfuls(), _g.getContrat(), _g.getCalledCards(),
                handLengths_);
    }
}
