package cards.tarot;

import cards.consts.Hypothesis;
import cards.consts.Suit;
import cards.tarot.enumerations.BidTarot;
import cards.tarot.enumerations.CardTarot;
import cards.tarot.enumerations.Handfuls;
import cards.tarot.enumerations.Miseres;
import code.util.CustList;
import code.util.EnumList;
import code.util.EnumMap;
import code.util.EqList;
import org.junit.Test;

import static cards.tarot.EquallableTarotUtil.assertEq;
import static org.junit.Assert.assertTrue;

public final class GameTarotTrickInfoTest extends CommonGameTarot {
    @Test
    public void coupeTarot1Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.SPADE, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot2Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.CLUB, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot3Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.DIAMOND, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot4Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.HEART, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot5Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot6Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 3,tricks_));
    }
    @Test
    public void coupeTarot7Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)1,tricks_));
    }
    @Test
    public void coupeTarot8Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)2,tricks_));
    }
    @Test
    public void coupeTarot9Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)2,tricks_));
    }
    @Test
    public void coupeTarot10Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte)1,tricks_));
    }
    @Test
    public void coupeTarot11Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.SPADE, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot12Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.TRUMP_7);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_9);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_10);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 1,tricks_));
    }
    @Test
    public void coupeTarot13Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.coupeTarot(Suit.TRUMP, (byte) 4,tricks_));
    }
    @Test
    public void defausseTarot1Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot2Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.CLUB,tricks_));
    }
    @Test
    public void defausseTarot3Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot4Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.HEART,tricks_));
    }
    @Test
    public void defausseTarot5Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot6Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot7Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot8Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot9Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,Suit.DIAMOND,tricks_));
    }
    @Test
    public void defausseTarot10Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte)1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot11Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,Suit.SPADE,tricks_));
    }
    @Test
    public void defausseTarot12Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte)1,Suit.CLUB,tricks_));
    }
    @Test
    public void defausseTarot13Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot14Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot15Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot16Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot17Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,tricks_));
    }
    @Test
    public void defausseTarot18Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.CLUB_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 4,tricks_));
    }
    @Test
    public void defausseTarot19Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot20Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot21Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void defausseTarot22Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void defausseTarot23Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_KING);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_6);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_JACK);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.SPADE_5);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 1,true);
        t_.ajouter(CardTarot.HEART_6);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_6);
        tricks_.add(t_);
        assertTrue(!GameTarotTrickInfo.defausseTarot((byte) 1,tricks_));
    }
    @Test
    public void defausseTarot24Test() {
        CustList<TrickTarot> tricks_ = new CustList<TrickTarot>();
        TrickTarot t_ = new TrickTarot((byte) 2,false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_1);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 3,true);
        t_.ajouter(CardTarot.SPADE_7);
        t_.ajouter(CardTarot.SPADE_9);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_10);
        tricks_.add(t_);
        t_ = new TrickTarot((byte) 0,true);
        t_.ajouter(CardTarot.DIAMOND_4);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.DIAMOND_5);
        t_.ajouter(CardTarot.DIAMOND_6);
        t_.ajouter(CardTarot.DIAMOND_7);
        tricks_.add(t_);
        assertTrue(GameTarotTrickInfo.defausseTarot((byte)1,tricks_));
    }
    @Test
    public void coupeTarot14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.TRUMP_14);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 1, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 1, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
    }
    @Test
    public void coupeTarot18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_13);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.DIAMOND_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.SPADE_1);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 1, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.TRUMP_2);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_17);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_16);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(4, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_16));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void coupeTarot21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_3);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot out_ = info_.coupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, out_.total());
        assertTrue(out_.contient(CardTarot.TRUMP_11));
        assertTrue(out_.contient(CardTarot.TRUMP_12));
        assertTrue(out_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(2, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
    }
    @Test
    public void sousCoupeTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot((byte) 0, curHand_, (byte) 4, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void sousCoupeTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.SPADE_8);
        t_.ajouter(CardTarot.SPADE_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        possible_.ajouter(CardTarot.TRUMP_1);
        HandTarot h_ = info_.sousCoupeTarot((byte) 0, curHand_, (byte) 2, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_1));
    }
    @Test
    public void sousCoupeTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.TRUMP_11);
        possible_.ajouter(CardTarot.TRUMP_12);
        possible_.ajouter(CardTarot.TRUMP_7);
        HandTarot h_ = info_.sousCoupeTarot((byte) 0, curHand_, (byte) 4, possible_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.TRUMP_11));
        assertTrue(h_.contient(CardTarot.TRUMP_12));
        assertTrue(h_.contient(CardTarot.TRUMP_7));
    }
    @Test
    public void joueCarteBasseTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_7);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        possible_.ajouter(CardTarot.HEART_3);
        HandTarot h_ = info_.joueCarteBasseTarot((byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(2, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
    }
    @Test
    public void joueCarteBasseTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        possible_.ajouter(CardTarot.HEART_3);
        HandTarot h_ = info_.joueCarteBasseTarot((byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot((byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot((byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void joueCarteBasseTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_JACK);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_10);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_6);
        HandTarot h_ = info_.joueCarteBasseTarot((byte) 0, curHand_, (byte) 4, Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_10));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_6));
    }
    @Test
    public void playCharacterCardTarot1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 4,  Suit.HEART, possible_, trs_);
        assertEq(1, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
    }
    @Test
    public void playCharacterCardTarot2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 3,  Suit.HEART, possible_, trs_);
        assertEq(1, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
    }
    @Test
    public void playCharacterCardTarot3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 3,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 1,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_3);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.SPADE_4);
        t_.ajouter(CardTarot.SPADE_5);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.SPADE_KNIGHT);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.SPADE_2);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 1,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void playCharacterCardTarot6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.SPADE_1);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_7);
        t_.ajouter(CardTarot.HEART_4);
        t_.ajouter(CardTarot.HEART_5);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_KING);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_1);
        HandTarot possible_ = new HandTarot();
        possible_.ajouter(CardTarot.HEART_QUEEN);
        possible_.ajouter(CardTarot.HEART_9);
        possible_.ajouter(CardTarot.HEART_JACK);
        HandTarot h_ = info_.playCharacterCardTarot((byte) 4,  Suit.HEART, possible_, trs_);
        assertEq(3, h_.total());
        assertTrue(h_.contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.contient(CardTarot.HEART_9));
        assertTrue(h_.contient(CardTarot.HEART_JACK));
    }
    @Test
    public void atoutsPossibles1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(2).total());
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(4, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_15);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(2).total());
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.TRUMP_10);
        pr_.ajouter(CardTarot.TRUMP_11);
        pr_.ajouter(CardTarot.CLUB_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_21);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertEq(10, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.CLUB_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_14);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.TRUMP_21);
        pr_.ajouter(CardTarot.TRUMP_14);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(15, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertEq(15, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_5));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(14, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(12, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(14, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.ONE);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_12);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(14, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_1));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.ONE);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.POINT);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_8);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.ONE);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        g_.getDeclaresMiseres().get(4).add(Miseres.POINT);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(5, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(6, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(3, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.TRUMP);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.HEART_1);
        t_.ajouter(CardTarot.HEART_2);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_3);
        t_.ajouter(CardTarot.HEART_4);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.ONE);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        g_.getDeclaresMiseres().get(4).add(Miseres.TRUMP);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_2);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(10, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_5));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(7, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_13));
        assertEq(0, h_.get(4).total());
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void atoutsPossibles14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_4);
        last_.ajouter(CardTarot.TRUMP_2);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(16, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(15, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(15, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(15, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(1, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_2));
    }
    @Test
    public void atoutsPossibles15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_4);
        last_.ajouter(CardTarot.TRUMP_2);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(17, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_5));
        assertEq(17, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(17, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_21));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_3));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_4));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_2));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
    }

    @Test
    public void atoutsPossibles16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.TRUMP_6);
        last_.ajouter(CardTarot.TRUMP_7);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.TRUMP_6);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_5);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_9);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_QUEEN);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.atoutsPossibles(curHand_);
        assertEq(6, h_.size());
        assertEq(13, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(0).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(1).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(2).contient(CardTarot.TRUMP_1));
        assertEq(3, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_18));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_16));
        assertTrue(h_.get(3).contient(CardTarot.TRUMP_10));
        assertEq(13, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(4).contient(CardTarot.TRUMP_1));
        assertEq(13, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_20));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_19));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_17));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_15));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_14));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_13));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_12));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_11));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_9));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_8));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_7));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_6));
        assertTrue(h_.get(5).contient(CardTarot.TRUMP_1));
    }

    @Test
    public void cartesPossibles1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertEq(7, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertEq(4, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertEq(1, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertEq(7, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles4Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_7));
        assertTrue(h_.get(1).contient(CardTarot.HEART_6));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertTrue(h_.get(1).contient(CardTarot.HEART_1));
        assertEq(9, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_7));
        assertTrue(h_.get(2).contient(CardTarot.HEART_6));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertTrue(h_.get(2).contient(CardTarot.HEART_1));
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_7));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertTrue(h_.get(3).contient(CardTarot.HEART_2));
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(4).contient(CardTarot.HEART_9));
        assertTrue(h_.get(4).contient(CardTarot.HEART_7));
        assertTrue(h_.get(4).contient(CardTarot.HEART_6));
        assertTrue(h_.get(4).contient(CardTarot.HEART_5));
        assertTrue(h_.get(4).contient(CardTarot.HEART_4));
        assertTrue(h_.get(4).contient(CardTarot.HEART_3));
        assertTrue(h_.get(4).contient(CardTarot.HEART_2));
        assertTrue(h_.get(4).contient(CardTarot.HEART_1));
        assertEq(3, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.HEART_10));
    }

    @Test
    public void cartesPossibles5Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_KING);
        pr_.ajouter(CardTarot.TRUMP_1);
        pr_.ajouter(CardTarot.CLUB_JACK);
        pr_.ajouter(CardTarot.CLUB_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_2));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(2).total());
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles6Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_KING);
        pr_.ajouter(CardTarot.EXCUSE);
        pr_.ajouter(CardTarot.CLUB_JACK);
        pr_.ajouter(CardTarot.CLUB_6);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_2));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(8, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(8, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles7Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_2));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(9, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles8Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_20);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_6);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(4, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_2));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(10, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(10, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(10, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles9Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.DIAMOND_2);
        pr_.ajouter(CardTarot.DIAMOND_3);
        pr_.ajouter(CardTarot.DIAMOND_4);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.SPADE_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertEq(8, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(2).total());
        assertEq(8, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles10Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.DIAMOND_1);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.CLUB_QUEEN);
        pr_.ajouter(CardTarot.DIAMOND_9);
        pr_.ajouter(CardTarot.CLUB_KNIGHT);
        pr_.ajouter(CardTarot.CLUB_7);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.TRUMP_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_3));
        assertEq(5, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(2).total());
        assertEq(5, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles11Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.POINT);
        r_.getMiseres().add(Miseres.LOW_CARDS);
        r_.getMiseres().add(Miseres.CHARACTER);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.TRUMP_2);
        pr_.ajouter(CardTarot.TRUMP_3);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(2).add(Miseres.POINT);
        g_.getDeclaresMiseres().get(3).add(Miseres.LOW_CARDS);
        g_.getDeclaresMiseres().get(4).add(Miseres.CHARACTER);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.TRUMP_4);
        curHand_.ajouter(CardTarot.TRUMP_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.TRUMP_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(3, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_2));
        assertEq(11, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_JACK));
        assertEq(7, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(0, h_.get(5).total());
    }
    @Test
    public void cartesPossibles12Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.SUIT);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(0).add(Miseres.SUIT);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(0, h_.get(0).total());
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(10, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_10));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_4));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_2));
        assertEq(10, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_KING));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(9, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_JACK));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_6));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_5));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_1));
    }
    @Test
    public void cartesPossibles13Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(11, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(0).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(0).contient(CardTarot.HEART_10));
        assertTrue(h_.get(0).contient(CardTarot.HEART_9));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_5));
        assertTrue(h_.get(0).contient(CardTarot.HEART_4));
        assertTrue(h_.get(0).contient(CardTarot.HEART_3));
        assertTrue(h_.get(0).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_10));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_10));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertEq(3, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_7));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(4).contient(CardTarot.HEART_10));
        assertTrue(h_.get(4).contient(CardTarot.HEART_9));
        assertTrue(h_.get(4).contient(CardTarot.HEART_5));
        assertTrue(h_.get(4).contient(CardTarot.HEART_4));
        assertTrue(h_.get(4).contient(CardTarot.HEART_3));
        assertTrue(h_.get(4).contient(CardTarot.HEART_2));
        assertEq(10, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(5).contient(CardTarot.HEART_10));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_8));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
    }
    @Test
    public void cartesPossibles14Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.HEART_1);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        curHand_.ajouter(CardTarot.SPADE_10);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(11, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(0).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(0).contient(CardTarot.HEART_10));
        assertTrue(h_.get(0).contient(CardTarot.HEART_9));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_5));
        assertTrue(h_.get(0).contient(CardTarot.HEART_4));
        assertTrue(h_.get(0).contient(CardTarot.HEART_3));
        assertTrue(h_.get(0).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_10));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_10));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(3).contient(CardTarot.HEART_10));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertTrue(h_.get(3).contient(CardTarot.HEART_2));
        assertEq(2, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_7));
        assertTrue(h_.get(4).contient(CardTarot.HEART_6));
        assertEq(10, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(5).contient(CardTarot.HEART_10));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_8));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
    }
    @Test
    public void cartesPossibles15Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.TRUMP_11);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(1, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertEq(9, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_10));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertEq(9, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_10));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertEq(3, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_7));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertEq(9, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(4).contient(CardTarot.HEART_10));
        assertTrue(h_.get(4).contient(CardTarot.HEART_9));
        assertTrue(h_.get(4).contient(CardTarot.HEART_5));
        assertTrue(h_.get(4).contient(CardTarot.HEART_4));
        assertTrue(h_.get(4).contient(CardTarot.HEART_3));
        assertTrue(h_.get(4).contient(CardTarot.HEART_2));
        assertEq(1, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_8));
    }
    @Test
    public void cartesPossibles16Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(11, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(0).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(0).contient(CardTarot.HEART_10));
        assertTrue(h_.get(0).contient(CardTarot.HEART_9));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_5));
        assertTrue(h_.get(0).contient(CardTarot.HEART_4));
        assertTrue(h_.get(0).contient(CardTarot.HEART_3));
        assertTrue(h_.get(0).contient(CardTarot.HEART_2));
        assertEq(11, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(1).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_10));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_8));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertTrue(h_.get(1).contient(CardTarot.HEART_2));
        assertEq(11, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(2).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_10));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_8));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertTrue(h_.get(2).contient(CardTarot.HEART_2));
        assertEq(3, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_7));
        assertTrue(h_.get(3).contient(CardTarot.HEART_6));
        assertTrue(h_.get(3).contient(CardTarot.HEART_1));
        assertEq(11, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(4).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(4).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(4).contient(CardTarot.HEART_10));
        assertTrue(h_.get(4).contient(CardTarot.HEART_9));
        assertTrue(h_.get(4).contient(CardTarot.HEART_8));
        assertTrue(h_.get(4).contient(CardTarot.HEART_5));
        assertTrue(h_.get(4).contient(CardTarot.HEART_4));
        assertTrue(h_.get(4).contient(CardTarot.HEART_3));
        assertTrue(h_.get(4).contient(CardTarot.HEART_2));
        assertEq(11, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(5).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(5).contient(CardTarot.HEART_10));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_8));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
        assertTrue(h_.get(5).contient(CardTarot.HEART_2));
    }
    @Test
    public void cartesPossibles17Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.HEART, curHand_);
        assertEq(6, h_.size());
        assertEq(10, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(0).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(0).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(0).contient(CardTarot.HEART_10));
        assertTrue(h_.get(0).contient(CardTarot.HEART_9));
        assertTrue(h_.get(0).contient(CardTarot.HEART_8));
        assertTrue(h_.get(0).contient(CardTarot.HEART_5));
        assertTrue(h_.get(0).contient(CardTarot.HEART_4));
        assertTrue(h_.get(0).contient(CardTarot.HEART_3));
        assertEq(10, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(1).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(1).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(1).contient(CardTarot.HEART_10));
        assertTrue(h_.get(1).contient(CardTarot.HEART_9));
        assertTrue(h_.get(1).contient(CardTarot.HEART_8));
        assertTrue(h_.get(1).contient(CardTarot.HEART_5));
        assertTrue(h_.get(1).contient(CardTarot.HEART_4));
        assertTrue(h_.get(1).contient(CardTarot.HEART_3));
        assertEq(10, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(2).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(2).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(2).contient(CardTarot.HEART_10));
        assertTrue(h_.get(2).contient(CardTarot.HEART_9));
        assertTrue(h_.get(2).contient(CardTarot.HEART_8));
        assertTrue(h_.get(2).contient(CardTarot.HEART_5));
        assertTrue(h_.get(2).contient(CardTarot.HEART_4));
        assertTrue(h_.get(2).contient(CardTarot.HEART_3));
        assertEq(10, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(3).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(3).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(3).contient(CardTarot.HEART_10));
        assertTrue(h_.get(3).contient(CardTarot.HEART_9));
        assertTrue(h_.get(3).contient(CardTarot.HEART_8));
        assertTrue(h_.get(3).contient(CardTarot.HEART_5));
        assertTrue(h_.get(3).contient(CardTarot.HEART_4));
        assertTrue(h_.get(3).contient(CardTarot.HEART_3));
        assertEq(3, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.HEART_7));
        assertTrue(h_.get(4).contient(CardTarot.HEART_6));
        assertTrue(h_.get(4).contient(CardTarot.HEART_1));
        assertEq(10, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.HEART_KING));
        assertTrue(h_.get(5).contient(CardTarot.HEART_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.HEART_KNIGHT));
        assertTrue(h_.get(5).contient(CardTarot.HEART_JACK));
        assertTrue(h_.get(5).contient(CardTarot.HEART_10));
        assertTrue(h_.get(5).contient(CardTarot.HEART_9));
        assertTrue(h_.get(5).contient(CardTarot.HEART_8));
        assertTrue(h_.get(5).contient(CardTarot.HEART_5));
        assertTrue(h_.get(5).contient(CardTarot.HEART_4));
        assertTrue(h_.get(5).contient(CardTarot.HEART_3));
    }
    @Test
    public void cartesPossibles18Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_1);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        CustList<HandTarot> h_ = info_.cartesPossibles(Suit.CLUB, curHand_);
        assertEq(6, h_.size());
        assertEq(2, h_.get(0).total());
        assertTrue(h_.get(0).contient(CardTarot.CLUB_KNIGHT));
        assertTrue(h_.get(0).contient(CardTarot.CLUB_10));
        assertEq(7, h_.get(1).total());
        assertTrue(h_.get(1).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(1).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(2).total());
        assertTrue(h_.get(2).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(2).contient(CardTarot.CLUB_1));
        assertEq(4, h_.get(3).total());
        assertTrue(h_.get(3).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(3).contient(CardTarot.CLUB_7));
        assertEq(7, h_.get(4).total());
        assertTrue(h_.get(4).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(4).contient(CardTarot.CLUB_1));
        assertEq(7, h_.get(5).total());
        assertTrue(h_.get(5).contient(CardTarot.CLUB_QUEEN));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_9));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_8));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_7));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_3));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_2));
        assertTrue(h_.get(5).contient(CardTarot.CLUB_1));
    }
    @Test
    public void cartesPossibles19Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_1);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }

    @Test
    public void cartesPossibles20Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesPossibles21Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.EXCUSE);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        t_.ajouter(CardTarot.HEART_2);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.CLUB_4);
        curHand_.ajouter(CardTarot.HEART_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.HEART_6);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.CLUB_3);
        curHand_.ajouter(CardTarot.CLUB_2);
        curHand_.ajouter(CardTarot.SPADE_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesPossibles22Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.GUARD_WITHOUT);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_KING);
        t_.ajouter(CardTarot.HEART_8);
        t_.ajouter(CardTarot.DIAMOND_KNIGHT);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_4);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_JACK);
        t_.ajouter(CardTarot.CLUB_6);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.EXCUSE);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_1);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesPossibles23Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.ONE);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_21);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_20);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_19);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.EXCUSE);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesPossibles24Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_20);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_3);
        t_.ajouter(CardTarot.TRUMP_13);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.CLUB_4);
        t_.ajouter(CardTarot.CLUB_5);
        t_.ajouter(CardTarot.CLUB_KING);
        t_.ajouter(CardTarot.CLUB_6);
        t_.ajouter(CardTarot.CLUB_JACK);
        trs_.add(t_);
        t_ = new TrickTarot(t_.getRamasseur(),true);
        t_.ajouter(CardTarot.TRUMP_10);
        t_.ajouter(CardTarot.TRUMP_1);
        t_.ajouter(CardTarot.TRUMP_11);
        t_.ajouter(CardTarot.TRUMP_12);
        t_.ajouter(CardTarot.TRUMP_21);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesPossibles25Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.TRUMP);
        r_.getMiseres().add(Miseres.POINT);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(4).add(Miseres.TRUMP);
        g_.getDeclaresMiseres().get(2).add(Miseres.POINT);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation team_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
    }
    @Test
    public void cartesCertaines1Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_8);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.TRUMP);
        r_.getMiseres().add(Miseres.POINT);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.CLUB_2);
        t_.ajouter(CardTarot.TRUMP_2);
        t_.ajouter(CardTarot.TRUMP_5);
        t_.ajouter(CardTarot.TRUMP_7);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.HEART_1);
        pr_.ajouter(CardTarot.HEART_2);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(4).add(Miseres.TRUMP);
        g_.getDeclaresMiseres().get(2).add(Miseres.POINT);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_18);
        curHand_.ajouter(CardTarot.TRUMP_16);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_KNIGHT);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_1);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_KING);
        GameTarotTeamsRelation rel_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandTarot>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(1, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(0).contient(CardTarot.HEART_KING));
    }
    @Test
    public void cartesCertaines2Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.SUIT);
        r_.getMiseres().add(Miseres.POINT);
        r_.getAllowedHandfuls().put(Handfuls.TWO,12);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_19);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_16);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_20);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(3).add(Miseres.SUIT);
        g_.getDeclaresMiseres().get(2).add(Miseres.POINT);
        g_.getDeclaresHandfuls().get(3).add(Handfuls.TWO);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_12);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_11);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_9);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_8);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_6);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_4);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_3);
        g_.getHandfuls().get(3).ajouter(CardTarot.TRUMP_1);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_7);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KNIGHT);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_1);
        GameTarotTeamsRelation rel_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandTarot>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(0).contient(CardTarot.HEART_KING));
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.TRUMP).get(3).contient(CardTarot.TRUMP_2));
    }
    @Test
    public void cartesCertaines3Test() {
        HandTarot last_ = new HandTarot();
        last_.ajouter(CardTarot.HEART_KING);
        last_.ajouter(CardTarot.HEART_6);
        last_.ajouter(CardTarot.DIAMOND_KNIGHT);
        RulesTarot r_ = new RulesTarot();
        r_.getMiseres().add(Miseres.SUIT);
        r_.getMiseres().add(Miseres.LOW_CARDS);
        r_.getMiseres().add(Miseres.POINT);
        r_.getAllowedHandfuls().put(Handfuls.TWO,12);
        CustList<TrickTarot> trs_ = new CustList<TrickTarot>();
        EnumList<BidTarot> bids_ = new EnumList<BidTarot>();
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.TAKE);
        bids_.add(BidTarot.FOLD);
        bids_.add(BidTarot.FOLD);
        TrickTarot t_ = new TrickTarot((byte) getTaker(r_,2,bids_),false);
        t_.ajouter(CardTarot.HEART_QUEEN);
        t_.ajouter(CardTarot.HEART_KNIGHT);
        t_.ajouter(CardTarot.HEART_10);
        trs_.add(t_);
        t_ = new TrickTarot(r_.getDealing().getNextPlayer(2),true);
        t_.ajouter(CardTarot.TRUMP_16);
        t_.ajouter(CardTarot.EXCUSE);
        t_.ajouter(CardTarot.TRUMP_21);
        t_.ajouter(CardTarot.TRUMP_18);
        t_.ajouter(CardTarot.TRUMP_19);
        trs_.add(t_);
        TrickTarot pr_ = new TrickTarot(t_.getRamasseur(),true);
        pr_.ajouter(CardTarot.TRUMP_20);
        HandTarot calledCards_ = new HandTarot();
        calledCards_.ajouter(CardTarot.CLUB_KING);
        GameTarot g_ = newGameTarotWithourDecl(r_, trs_, pr_, 2, bids_, calledCards_, 1, last_);
        g_.getDeclaresMiseres().get(3).add(Miseres.SUIT);
        g_.getDeclaresMiseres().get(0).add(Miseres.LOW_CARDS);
        g_.getDeclaresMiseres().get(2).add(Miseres.POINT);
        g_.getDeclaresHandfuls().get(0).add(Handfuls.TWO);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_17);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_15);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_14);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_13);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_12);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_11);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_9);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_8);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_6);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_4);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_3);
        g_.getHandfuls().get(0).ajouter(CardTarot.TRUMP_1);
        GameTarotTrickInfo info_ = newGameTarotTrickInfo(g_);
        HandTarot curHand_ = new HandTarot();
        curHand_.ajouter(CardTarot.HEART_8);
        curHand_.ajouter(CardTarot.TRUMP_7);
        curHand_.ajouter(CardTarot.TRUMP_5);
        curHand_.ajouter(CardTarot.TRUMP_10);
        curHand_.ajouter(CardTarot.DIAMOND_3);
        curHand_.ajouter(CardTarot.DIAMOND_10);
        curHand_.ajouter(CardTarot.DIAMOND_2);
        curHand_.ajouter(CardTarot.DIAMOND_JACK);
        curHand_.ajouter(CardTarot.DIAMOND_9);
        curHand_.ajouter(CardTarot.DIAMOND_8);
        curHand_.ajouter(CardTarot.CLUB_KING);
        curHand_.ajouter(CardTarot.CLUB_10);
        curHand_.ajouter(CardTarot.HEART_7);
        curHand_.ajouter(CardTarot.HEART_1);
        GameTarotTeamsRelation rel_ = g_.getTeamsRelation();
        EnumMap<Suit, EqList<HandTarot>> rep_ = info_.cartesPossibles(curHand_);
        EnumMap<Hypothesis, EnumMap<Suit, EqList<HandTarot>>> hypo_ = info_.cartesCertaines(rep_);
        rep_ = hypo_.getVal(Hypothesis.POSSIBLE);
        assertEq(6, rep_.getVal(Suit.UNDEFINED).size());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(0).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(1).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(2).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(3).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(4).total());
        assertEq(0, rep_.getVal(Suit.UNDEFINED).get(5).total());
        assertEq(6, rep_.getVal(Suit.TRUMP).size());
        assertEq(6, rep_.getVal(Suit.HEART).size());
        assertEq(6, rep_.getVal(Suit.SPADE).size());
        assertEq(6, rep_.getVal(Suit.DIAMOND).size());
        assertEq(6, rep_.getVal(Suit.CLUB).size());
        assertTrue(hypo_.getVal(Hypothesis.SURE).getVal(Suit.HEART).get(0).contient(CardTarot.HEART_KING));
    }

}
